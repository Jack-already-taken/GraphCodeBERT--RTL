{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.164025", "id": 39266}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.286774", "id": 61628}
{"buggy_code": "module demo_917(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module demo_917(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.973172", "id": 4575}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.170685", "id": 40483}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.320234", "id": 67745}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.108719", "id": 29136}
{"buggy_code": "module logic_836(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module logic_836(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.242579", "id": 53576}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.950044", "id": 376}
{"buggy_code": "module test_4(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module test_4(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.211987", "id": 47991}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.994520", "id": 8412}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.224759", "id": 50310}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.224186", "id": 50205}
{"buggy_code": "module simple_920(input c, a, output valid); assign valid = c & a | b; endmodule", "correct_code": "module simple_920(input c, a, output valid); assign valid = (c & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.078092", "id": 23550}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.049472", "id": 18323}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.273886", "id": 59293}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.132025", "id": 33396}
{"buggy_code": "module test_428(input data, output y); assign y = data + 1; endmodule", "correct_code": "module test_428(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.007503", "id": 10761}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.253296", "id": 55533}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.155000", "id": 37612}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.350622", "id": 73253}
{"buggy_code": "module logic_897(input c, output q); assign q = c + 1; endmodule", "correct_code": "module logic_897(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118279", "id": 30891}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.134962", "id": 33933}
{"buggy_code": "module basic_954(input b, output y); assign y = b + 1; endmodule", "correct_code": "module basic_954(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.203709", "id": 46481}
{"buggy_code": "module logic_687(input b, output out); assign out = b + 1; endmodule", "correct_code": "module logic_687(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.239900", "id": 53087}
{"buggy_code": "module test_268(input rst, in, output result); assign result = rst & in | in; endmodule", "correct_code": "module test_268(input rst, in, output result); assign result = (rst & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.177653", "id": 41760}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.311982", "id": 66253}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.063145", "id": 20835}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.093303", "id": 26315}
{"buggy_code": "module demo_492(input data, y, output out); assign out = data & y | d; endmodule", "correct_code": "module demo_492(input data, y, output out); assign out = (data & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.143816", "id": 35551}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.132408", "id": 33464}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.970072", "id": 4010}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.019807", "id": 12984}
{"buggy_code": "module basic_105(input y, c, output out); assign out = y & c | d; endmodule", "correct_code": "module basic_105(input y, c, output out); assign out = (y & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.035701", "id": 15859}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.122250", "id": 31607}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.226983", "id": 50714}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.111262", "id": 29603}
{"buggy_code": "module arith_316(input in, a, output q); assign q = in & a | d; endmodule", "correct_code": "module arith_316(input in, a, output q); assign q = (in & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.267710", "id": 58161}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.222672", "id": 49926}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.048934", "id": 18249}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.078769", "id": 23674}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.303370", "id": 64662}
{"buggy_code": "module test_99(input data, clk, output out); assign out = data & clk | c; endmodule", "correct_code": "module test_99(input data, clk, output out); assign out = (data & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.017211", "id": 12522}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.004991", "id": 10302}
{"buggy_code": "module arith_338(input b, x, output y); assign y = b & x | data; endmodule", "correct_code": "module arith_338(input b, x, output y); assign y = (b & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.250562", "id": 55038}
{"buggy_code": "module demo_217(input a, a, output q); assign q = a & a | b; endmodule", "correct_code": "module demo_217(input a, a, output q); assign q = (a & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.016806", "id": 12450}
{"buggy_code": "module basic_768(input en, y, output prod); assign prod = en & y | data; endmodule", "correct_code": "module basic_768(input en, y, output prod); assign prod = (en & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.955387", "id": 1342}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.216417", "id": 48798}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.158333", "id": 38224}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.347528", "id": 72690}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.970001", "id": 3997}
{"buggy_code": "module arith_733(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module arith_733(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.016054", "id": 12312}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.356163", "id": 74262}
{"buggy_code": "module simple_276(input b, b, output y); assign y = b & b | b; endmodule", "correct_code": "module simple_276(input b, b, output y); assign y = (b & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.306145", "id": 65178}
{"buggy_code": "module logic_724(input b, output q); assign q = b + 1; endmodule", "correct_code": "module logic_724(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.101346", "id": 27786}
{"buggy_code": "module logic_871(input en, in, output valid); assign valid = en & in | c; endmodule", "correct_code": "module logic_871(input en, in, output valid); assign valid = (en & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.108736", "id": 29139}
{"buggy_code": "module arith_424(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module arith_424(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.028138", "id": 14490}
{"buggy_code": "module test_554(input clk, y, output sum); assign sum = clk & y | en; endmodule", "correct_code": "module test_554(input clk, y, output sum); assign sum = (clk & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.181327", "id": 42433}
{"buggy_code": "module test_989(input data, output out); assign out = data + 1; endmodule", "correct_code": "module test_989(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.233800", "id": 51968}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.225342", "id": 50414}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.084933", "id": 24789}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.085503", "id": 24896}
{"buggy_code": "module demo_112(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module demo_112(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.255857", "id": 55994}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.022412", "id": 13455}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.125963", "id": 32286}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.950920", "id": 531}
{"buggy_code": "module logic_95(input b, data, output result); assign result = b & data | data; endmodule", "correct_code": "module logic_95(input b, data, output result); assign result = (b & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.301072", "id": 64242}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.022270", "id": 13430}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.065067", "id": 21191}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.026944", "id": 14272}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.126261", "id": 32341}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.099528", "id": 27452}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.220385", "id": 49511}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.965131", "id": 3114}
{"buggy_code": "module basic_804(input y, output out); assign out = y + 1; endmodule", "correct_code": "module basic_804(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.297900", "id": 63660}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.229906", "id": 51246}
{"buggy_code": "module example_38(input data, c, output out); assign out = data & c | a; endmodule", "correct_code": "module example_38(input data, c, output out); assign out = (data & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.050127", "id": 18442}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.086676", "id": 25110}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.268090", "id": 58230}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.207986", "id": 47263}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.001447", "id": 9672}
{"buggy_code": "module logic_358(input in, en, output valid); assign valid = in & en | c; endmodule", "correct_code": "module logic_358(input in, en, output valid); assign valid = (in & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.037274", "id": 16143}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.077951", "id": 23523}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.985196", "id": 6703}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.100695", "id": 27667}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.312458", "id": 66339}
{"buggy_code": "module basic_691(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module basic_691(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.048196", "id": 18116}
{"buggy_code": "module basic_267(input x, d, output y); assign y = x & d | b; endmodule", "correct_code": "module basic_267(input x, d, output y); assign y = (x & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.079008", "id": 23715}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.961867", "id": 2518}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.093528", "id": 26357}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.021360", "id": 13263}
{"buggy_code": "module basic_170(input en, output q); assign q = en + 1; endmodule", "correct_code": "module basic_170(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.324761", "id": 68560}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.114109", "id": 30128}
{"buggy_code": "module test_502(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module test_502(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.278512", "id": 60115}
{"buggy_code": "module basic_502(input x, output out); assign out = x + 1; endmodule", "correct_code": "module basic_502(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.106493", "id": 28727}
{"buggy_code": "module logic_561(input data, output y); assign y = data + 1; endmodule", "correct_code": "module logic_561(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.133964", "id": 33751}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.328922", "id": 69320}
{"buggy_code": "module example_92(input in, output q); assign q = in + 1; endmodule", "correct_code": "module example_92(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.086155", "id": 25015}
{"buggy_code": "module demo_219(input rst, data, output sum); assign sum = rst & data | rst; endmodule", "correct_code": "module demo_219(input rst, data, output sum); assign sum = (rst & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.168381", "id": 40065}
{"buggy_code": "module demo_864(input rst, rst, output q); assign q = rst & rst | rst; endmodule", "correct_code": "module demo_864(input rst, rst, output q); assign q = (rst & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.219106", "id": 49292}
{"buggy_code": "module demo_559(input c, in, output y); assign y = c & in | in; endmodule", "correct_code": "module demo_559(input c, in, output y); assign y = (c & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.156621", "id": 37911}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.997609", "id": 8976}
{"buggy_code": "module test_100(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module test_100(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.261811", "id": 57089}
{"buggy_code": "module demo_744(input y, clk, output prod); assign prod = y & clk | data; endmodule", "correct_code": "module demo_744(input y, clk, output prod); assign prod = (y & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.018247", "id": 12712}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.267377", "id": 58101}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.027662", "id": 14405}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.073692", "id": 22775}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.078645", "id": 23651}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.066536", "id": 21457}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.020415", "id": 13093}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.219912", "id": 49423}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.975954", "id": 5079}
{"buggy_code": "module example_453(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module example_453(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.063864", "id": 20967}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.326123", "id": 68807}
{"buggy_code": "module test_960(input in, output out); assign out = in + 1; endmodule", "correct_code": "module test_960(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.141654", "id": 35149}
{"buggy_code": "module test_51(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module test_51(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.342956", "id": 71861}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.202764", "id": 46309}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.029672", "id": 14768}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138907", "id": 34661}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.212529", "id": 48088}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.099613", "id": 27468}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.155111", "id": 37632}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.347736", "id": 72728}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.948241", "id": 53}
{"buggy_code": "module simple_507(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module simple_507(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.226812", "id": 50685}
{"buggy_code": "module logic_632(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module logic_632(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.998717", "id": 9175}
{"buggy_code": "module simple_332(input x, y, output y); assign y = x & y | d; endmodule", "correct_code": "module simple_332(input x, y, output y); assign y = (x & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.357332", "id": 74479}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.102978", "id": 28082}
{"buggy_code": "module arith_750(input x, d, output y); assign y = x & d | in; endmodule", "correct_code": "module arith_750(input x, d, output y); assign y = (x & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.093291", "id": 26313}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.300954", "id": 64220}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.234200", "id": 52039}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.121278", "id": 31429}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.302943", "id": 64584}
{"buggy_code": "module test_686(input clk, x, output q); assign q = clk & x | rst; endmodule", "correct_code": "module test_686(input clk, x, output q); assign q = (clk & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.083555", "id": 24543}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.069757", "id": 22047}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.173490", "id": 40997}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.261107", "id": 56959}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.186301", "id": 43333}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.245128", "id": 54045}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.290690", "id": 62343}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.954596", "id": 1202}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.077692", "id": 23476}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.237092", "id": 52569}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.110163", "id": 29401}
{"buggy_code": "module arith_575(input d, rst, output result); assign result = d & rst | in; endmodule", "correct_code": "module arith_575(input d, rst, output result); assign result = (d & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.106968", "id": 28810}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.296331", "id": 63376}
{"buggy_code": "module example_641(input b, en, output prod); assign prod = b & en | clk; endmodule", "correct_code": "module example_641(input b, en, output prod); assign prod = (b & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.088055", "id": 25357}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.291507", "id": 62494}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.100341", "id": 27602}
{"buggy_code": "module logic_804(input y, y, output q); assign q = y & y | y; endmodule", "correct_code": "module logic_804(input y, y, output q); assign q = (y & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.102050", "id": 27915}
{"buggy_code": "module basic_632(input a, output q); assign q = a + 1; endmodule", "correct_code": "module basic_632(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.010273", "id": 11263}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.982280", "id": 6170}
{"buggy_code": "module basic_543(input x, a, output valid); assign valid = x & a | clk; endmodule", "correct_code": "module basic_543(input x, a, output valid); assign valid = (x & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.187287", "id": 43511}
{"buggy_code": "module basic_346(input clk, clk, output sum); assign sum = clk & clk | x; endmodule", "correct_code": "module basic_346(input clk, clk, output sum); assign sum = (clk & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.162661", "id": 39020}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.029329", "id": 14704}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.268593", "id": 58323}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112178", "id": 29771}
{"buggy_code": "module demo_515(input d, en, output q); assign q = d & en | data; endmodule", "correct_code": "module demo_515(input d, en, output q); assign q = (d & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.306752", "id": 65291}
{"buggy_code": "module test_516(input a, b, output sum); assign sum = a & b | in; endmodule", "correct_code": "module test_516(input a, b, output sum); assign sum = (a & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.309945", "id": 65879}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.334033", "id": 70258}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.974519", "id": 4819}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.069091", "id": 21922}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.109792", "id": 29332}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.099306", "id": 27410}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.030429", "id": 14904}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210901", "id": 47794}
{"buggy_code": "module basic_509(input data, rst, output prod); assign prod = data & rst | en; endmodule", "correct_code": "module basic_509(input data, rst, output prod); assign prod = (data & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.264493", "id": 57576}
{"buggy_code": "module basic_736(input clk, en, output prod); assign prod = clk & en | c; endmodule", "correct_code": "module basic_736(input clk, en, output prod); assign prod = (clk & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.081449", "id": 24163}
{"buggy_code": "module basic_894(input y, x, output y); assign y = y & x | rst; endmodule", "correct_code": "module basic_894(input y, x, output y); assign y = (y & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.026998", "id": 14282}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.131057", "id": 33218}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.084881", "id": 24780}
{"buggy_code": "module basic_116(input d, en, output sum); assign sum = d & en | c; endmodule", "correct_code": "module basic_116(input d, en, output sum); assign sum = (d & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.226432", "id": 50616}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.350119", "id": 73162}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.346503", "id": 72503}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.066115", "id": 21380}
{"buggy_code": "module arith_385(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module arith_385(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.342396", "id": 71762}
{"buggy_code": "module logic_696(input rst, y, output y); assign y = rst & y | d; endmodule", "correct_code": "module logic_696(input rst, y, output y); assign y = (rst & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.986509", "id": 6945}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.149595", "id": 36615}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.128361", "id": 32723}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.305450", "id": 65050}
{"buggy_code": "module example_115(input in, en, output y); assign y = in & en | in; endmodule", "correct_code": "module example_115(input in, en, output y); assign y = (in & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.314720", "id": 66751}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.066593", "id": 21468}
{"buggy_code": "module demo_345(input c, data, output y); assign y = c & data | d; endmodule", "correct_code": "module demo_345(input c, data, output y); assign y = (c & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.292478", "id": 62673}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.162118", "id": 38921}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.175770", "id": 41412}
{"buggy_code": "module logic_315(input b, output y); assign y = b + 1; endmodule", "correct_code": "module logic_315(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.306302", "id": 65207}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.143271", "id": 35450}
{"buggy_code": "module arith_672(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module arith_672(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.959170", "id": 2028}
{"buggy_code": "module example_175(input a, x, output prod); assign prod = a & x | x; endmodule", "correct_code": "module example_175(input a, x, output prod); assign prod = (a & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.171646", "id": 40658}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.018676", "id": 12791}
{"buggy_code": "module demo_524(input b, data, output q); assign q = b & data | y; endmodule", "correct_code": "module demo_524(input b, data, output q); assign q = (b & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.067493", "id": 21631}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.273918", "id": 59299}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.992058", "id": 7964}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.966042", "id": 3281}
{"buggy_code": "module arith_548(input c, y, output sum); assign sum = c & y | x; endmodule", "correct_code": "module arith_548(input c, y, output sum); assign sum = (c & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.257699", "id": 56335}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.949680", "id": 312}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.090028", "id": 25721}
{"buggy_code": "module basic_243(input b, x, output q); assign q = b & x | en; endmodule", "correct_code": "module basic_243(input b, x, output q); assign q = (b & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.247772", "id": 54528}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.184613", "id": 43026}
{"buggy_code": "module demo_352(input b, clk, output out); assign out = b & clk | en; endmodule", "correct_code": "module demo_352(input b, clk, output out); assign out = (b & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.001177", "id": 9621}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.131774", "id": 33353}
{"buggy_code": "module basic_742(input c, b, output q); assign q = c & b | in; endmodule", "correct_code": "module basic_742(input c, b, output q); assign q = (c & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.984632", "id": 6602}
{"buggy_code": "module demo_614(input y, x, output result); assign result = y & x | en; endmodule", "correct_code": "module demo_614(input y, x, output result); assign result = (y & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.227274", "id": 50766}
{"buggy_code": "module example_607(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module example_607(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.006631", "id": 10605}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.129613", "id": 32951}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.337371", "id": 70870}
{"buggy_code": "module logic_342(input clk, d, output prod); assign prod = clk & d | a; endmodule", "correct_code": "module logic_342(input clk, d, output prod); assign prod = (clk & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.971061", "id": 4191}
{"buggy_code": "module demo_790(input en, x, output q); assign q = en & x | x; endmodule", "correct_code": "module demo_790(input en, x, output q); assign q = (en & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.078853", "id": 23688}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.275316", "id": 59535}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.252090", "id": 55314}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.334371", "id": 70317}
{"buggy_code": "module example_35(input c, output out); assign out = c + 1; endmodule", "correct_code": "module example_35(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.952851", "id": 884}
{"buggy_code": "module logic_730(input x, output y); assign y = x + 1; endmodule", "correct_code": "module logic_730(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.040213", "id": 16682}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.962734", "id": 2678}
{"buggy_code": "module simple_859(input y, en, output sum); assign sum = y & en | y; endmodule", "correct_code": "module simple_859(input y, en, output sum); assign sum = (y & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.320342", "id": 67764}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.009717", "id": 11165}
{"buggy_code": "module arith_633(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module arith_633(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.150057", "id": 36699}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.253801", "id": 55622}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.226817", "id": 50686}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.974702", "id": 4852}
{"buggy_code": "module simple_670(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module simple_670(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.975932", "id": 5075}
{"buggy_code": "module test_186(input y, d, output prod); assign prod = y & d | x; endmodule", "correct_code": "module test_186(input y, d, output prod); assign prod = (y & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.215297", "id": 48592}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.071023", "id": 22282}
{"buggy_code": "module example_38(input a, in, output y); assign y = a & in | clk; endmodule", "correct_code": "module example_38(input a, in, output y); assign y = (a & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.141910", "id": 35194}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.323328", "id": 68297}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.209863", "id": 47603}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.128250", "id": 32703}
{"buggy_code": "module arith_202(input a, data, output valid); assign valid = a & data | y; endmodule", "correct_code": "module arith_202(input a, data, output valid); assign valid = (a & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.209441", "id": 47526}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.248528", "id": 54668}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.302315", "id": 64470}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.307790", "id": 65487}
{"buggy_code": "module simple_214(input en, en, output out); assign out = en & en | data; endmodule", "correct_code": "module simple_214(input en, en, output out); assign out = (en & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.068122", "id": 21743}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113124", "id": 29946}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.311460", "id": 66159}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.275312", "id": 59534}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.148783", "id": 36463}
{"buggy_code": "module demo_730(input in, in, output valid); assign valid = in & in | b; endmodule", "correct_code": "module demo_730(input in, in, output valid); assign valid = (in & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.022672", "id": 13502}
{"buggy_code": "module basic_23(input y, clk, output q); assign q = y & clk | a; endmodule", "correct_code": "module basic_23(input y, clk, output q); assign q = (y & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.045900", "id": 17697}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.346388", "id": 72481}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.346837", "id": 72564}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.282966", "id": 60932}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.254696", "id": 55784}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.280589", "id": 60495}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.335474", "id": 70520}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.972850", "id": 4515}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.247646", "id": 54506}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.235716", "id": 52318}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.170936", "id": 40528}
{"buggy_code": "module basic_527(input a, output out); assign out = a + 1; endmodule", "correct_code": "module basic_527(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.950174", "id": 401}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.274177", "id": 59347}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.964878", "id": 3067}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.318431", "id": 67432}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.106660", "id": 28757}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.279438", "id": 60282}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.116116", "id": 30494}
{"buggy_code": "module arith_732(input d, en, output valid); assign valid = d & en | a; endmodule", "correct_code": "module arith_732(input d, en, output valid); assign valid = (d & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.066587", "id": 21467}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.249441", "id": 54833}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.972912", "id": 4527}
{"buggy_code": "module arith_324(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module arith_324(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.081804", "id": 24228}
{"buggy_code": "module simple_2(input c, output out); assign out = c + 1; endmodule", "correct_code": "module simple_2(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.992789", "id": 8098}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.357117", "id": 74438}
{"buggy_code": "module demo_841(input y, data, output prod); assign prod = y & data | data; endmodule", "correct_code": "module demo_841(input y, data, output prod); assign prod = (y & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.986741", "id": 6989}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.188145", "id": 43669}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.127499", "id": 32567}
{"buggy_code": "module logic_617(input y, x, output y); assign y = y & x | y; endmodule", "correct_code": "module logic_617(input y, x, output y); assign y = (y & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.956739", "id": 1586}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.127055", "id": 32487}
{"buggy_code": "module test_162(input in, output out); assign out = in + 1; endmodule", "correct_code": "module test_162(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.323370", "id": 68305}
{"buggy_code": "module arith_891(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module arith_891(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.288798", "id": 61997}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.254035", "id": 55662}
{"buggy_code": "module example_764(input en, in, output result); assign result = en & in | clk; endmodule", "correct_code": "module example_764(input en, in, output result); assign result = (en & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.225808", "id": 50501}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.330896", "id": 69686}
{"buggy_code": "module arith_325(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module arith_325(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.178648", "id": 41943}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.106153", "id": 28662}
{"buggy_code": "module arith_529(input d, a, output y); assign y = d & a | en; endmodule", "correct_code": "module arith_529(input d, a, output y); assign y = (d & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.134014", "id": 33760}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.180135", "id": 42217}
{"buggy_code": "module simple_26(input y, output y); assign y = y + 1; endmodule", "correct_code": "module simple_26(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.262056", "id": 57130}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.358855", "id": 74756}
{"buggy_code": "module demo_449(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module demo_449(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.296005", "id": 63315}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.234238", "id": 52046}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.316166", "id": 67013}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.231293", "id": 51505}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.011631", "id": 11513}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.105439", "id": 28530}
{"buggy_code": "module logic_380(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module logic_380(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.187609", "id": 43573}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.053490", "id": 19055}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.997654", "id": 8984}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.154302", "id": 37485}
{"buggy_code": "module basic_55(input y, data, output q); assign q = y & data | in; endmodule", "correct_code": "module basic_55(input y, data, output q); assign q = (y & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.285954", "id": 61477}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.235544", "id": 52286}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.224470", "id": 50256}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.202286", "id": 46221}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.101317", "id": 27781}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.298693", "id": 63806}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.296167", "id": 63345}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.263301", "id": 57357}
{"buggy_code": "module arith_401(input data, x, output result); assign result = data & x | in; endmodule", "correct_code": "module arith_401(input data, x, output result); assign result = (data & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.242504", "id": 53563}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.024902", "id": 13906}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.266207", "id": 57887}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.987507", "id": 7128}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.261660", "id": 57062}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.041953", "id": 16983}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.070574", "id": 22198}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.121659", "id": 31500}
{"buggy_code": "module example_119(input rst, in, output out); assign out = rst & in | rst; endmodule", "correct_code": "module example_119(input rst, in, output out); assign out = (rst & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.144733", "id": 35722}
{"buggy_code": "module example_717(input a, clk, output valid); assign valid = a & clk | rst; endmodule", "correct_code": "module example_717(input a, clk, output valid); assign valid = (a & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.053016", "id": 18966}
{"buggy_code": "module basic_701(input data, en, output sum); assign sum = data & en | en; endmodule", "correct_code": "module basic_701(input data, en, output sum); assign sum = (data & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.168253", "id": 40040}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.138620", "id": 34608}
{"buggy_code": "module simple_707(input d, in, output valid); assign valid = d & in | data; endmodule", "correct_code": "module simple_707(input d, in, output valid); assign valid = (d & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.162289", "id": 38952}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.063563", "id": 20912}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.230006", "id": 51265}
{"buggy_code": "module demo_156(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module demo_156(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.047849", "id": 18053}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.101930", "id": 27893}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.199810", "id": 45769}
{"buggy_code": "module simple_359(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module simple_359(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.963936", "id": 2893}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.979662", "id": 5706}
{"buggy_code": "module arith_241(input data, output y); assign y = data + 1; endmodule", "correct_code": "module arith_241(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.346843", "id": 72565}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.241145", "id": 53314}
{"buggy_code": "module demo_27(input c, clk, output result); assign result = c & clk | b; endmodule", "correct_code": "module demo_27(input c, clk, output result); assign result = (c & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.325434", "id": 68680}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.163445", "id": 39160}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.249792", "id": 54899}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.240029", "id": 53110}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.188160", "id": 43672}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.333491", "id": 70160}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.266095", "id": 57868}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.987541", "id": 7134}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.073378", "id": 22716}
{"buggy_code": "module logic_160(input clk, d, output q); assign q = clk & d | a; endmodule", "correct_code": "module logic_160(input clk, d, output q); assign q = (clk & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.272341", "id": 59012}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.171999", "id": 40724}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.996923", "id": 8849}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.071000", "id": 22278}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.080674", "id": 24023}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.983955", "id": 6476}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.224597", "id": 50280}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.231100", "id": 51471}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.990065", "id": 7596}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.013160", "id": 11785}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.238908", "id": 52905}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.992738", "id": 8089}
{"buggy_code": "module logic_806(input in, output y); assign y = in + 1; endmodule", "correct_code": "module logic_806(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.061938", "id": 20614}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.115811", "id": 30440}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.278844", "id": 60173}
{"buggy_code": "module logic_530(input in, output y); assign y = in + 1; endmodule", "correct_code": "module logic_530(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.161652", "id": 38837}
{"buggy_code": "module simple_918(input a, output result); assign result = a + 1; endmodule", "correct_code": "module simple_918(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.080195", "id": 23935}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.104277", "id": 28319}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.230633", "id": 51385}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.313838", "id": 66588}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.957460", "id": 1718}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.113320", "id": 29982}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.279661", "id": 60324}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.276216", "id": 59698}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.035870", "id": 15888}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.994283", "id": 8368}
{"buggy_code": "module example_13(input y, output y); assign y = y + 1; endmodule", "correct_code": "module example_13(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.129363", "id": 32906}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.207914", "id": 47249}
{"buggy_code": "module demo_986(input en, y, output q); assign q = en & y | data; endmodule", "correct_code": "module demo_986(input en, y, output q); assign q = (en & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.257716", "id": 56338}
{"buggy_code": "module arith_521(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module arith_521(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.254495", "id": 55747}
{"buggy_code": "module example_223(input en, rst, output result); assign result = en & rst | b; endmodule", "correct_code": "module example_223(input en, rst, output result); assign result = (en & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.293900", "id": 62929}
{"buggy_code": "module example_724(input d, c, output q); assign q = d & c | c; endmodule", "correct_code": "module example_724(input d, c, output q); assign q = (d & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.073058", "id": 22656}
{"buggy_code": "module simple_577(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module simple_577(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.036576", "id": 16017}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.147613", "id": 36245}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.299478", "id": 63952}
{"buggy_code": "module basic_518(input d, output out); assign out = d + 1; endmodule", "correct_code": "module basic_518(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.195772", "id": 45034}
{"buggy_code": "module example_328(input d, output out); assign out = d + 1; endmodule", "correct_code": "module example_328(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.087318", "id": 25226}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.285991", "id": 61484}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.281781", "id": 60716}
{"buggy_code": "module example_621(input d, b, output result); assign result = d & b | clk; endmodule", "correct_code": "module example_621(input d, b, output result); assign result = (d & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.200158", "id": 45832}
{"buggy_code": "module simple_180(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module simple_180(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.255589", "id": 55947}
{"buggy_code": "module arith_151(input y, output y); assign y = y + 1; endmodule", "correct_code": "module arith_151(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.317054", "id": 67177}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329652", "id": 69457}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.167893", "id": 39974}
{"buggy_code": "module test_9(input in, output result); assign result = in + 1; endmodule", "correct_code": "module test_9(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.173651", "id": 41026}
{"buggy_code": "module test_323(input en, in, output prod); assign prod = en & in | x; endmodule", "correct_code": "module test_323(input en, in, output prod); assign prod = (en & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.972296", "id": 4417}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.067326", "id": 21601}
{"buggy_code": "module test_855(input c, output out); assign out = c + 1; endmodule", "correct_code": "module test_855(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.215113", "id": 48559}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.122336", "id": 31622}
{"buggy_code": "module demo_835(input b, output out); assign out = b + 1; endmodule", "correct_code": "module demo_835(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118474", "id": 30927}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.040620", "id": 16747}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.061953", "id": 20617}
{"buggy_code": "module basic_362(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module basic_362(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.225443", "id": 50433}
{"buggy_code": "module example_106(input d, a, output valid); assign valid = d & a | en; endmodule", "correct_code": "module example_106(input d, a, output valid); assign valid = (d & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.161944", "id": 38889}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.956848", "id": 1603}
{"buggy_code": "module arith_758(input clk, data, output result); assign result = clk & data | data; endmodule", "correct_code": "module arith_758(input clk, data, output result); assign result = (clk & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.075838", "id": 23169}
{"buggy_code": "module test_980(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module test_980(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.030323", "id": 14885}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.077088", "id": 23368}
{"buggy_code": "module basic_645(input d, output q); assign q = d + 1; endmodule", "correct_code": "module basic_645(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.143038", "id": 35407}
{"buggy_code": "module logic_540(input en, output result); assign result = en + 1; endmodule", "correct_code": "module logic_540(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.178606", "id": 41935}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.010580", "id": 11321}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.227019", "id": 50721}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.347924", "id": 72762}
{"buggy_code": "module test_777(input y, rst, output valid); assign valid = y & rst | b; endmodule", "correct_code": "module test_777(input y, rst, output valid); assign valid = (y & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.118866", "id": 30997}
{"buggy_code": "module simple_638(input d, b, output out); assign out = d & b | c; endmodule", "correct_code": "module simple_638(input d, b, output out); assign out = (d & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.121865", "id": 31536}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.991319", "id": 7829}
{"buggy_code": "module example_207(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module example_207(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.353992", "id": 73862}
{"buggy_code": "module arith_338(input en, clk, output y); assign y = en & clk | c; endmodule", "correct_code": "module arith_338(input en, clk, output y); assign y = (en & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.193732", "id": 44659}
{"buggy_code": "module demo_61(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module demo_61(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.964388", "id": 2978}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.089173", "id": 25563}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.164830", "id": 39411}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.337157", "id": 70830}
{"buggy_code": "module logic_131(input d, clk, output valid); assign valid = d & clk | en; endmodule", "correct_code": "module logic_131(input d, clk, output valid); assign valid = (d & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.356633", "id": 74351}
{"buggy_code": "module test_291(input d, output out); assign out = d + 1; endmodule", "correct_code": "module test_291(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.242069", "id": 53483}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.136188", "id": 34158}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.172935", "id": 40892}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.254348", "id": 55720}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.208776", "id": 47407}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.062091", "id": 20642}
{"buggy_code": "module arith_104(input y, clk, output y); assign y = y & clk | in; endmodule", "correct_code": "module arith_104(input y, clk, output y); assign y = (y & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.243341", "id": 53716}
{"buggy_code": "module demo_892(input rst, en, output sum); assign sum = rst & en | en; endmodule", "correct_code": "module demo_892(input rst, en, output sum); assign sum = (rst & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.346281", "id": 72461}
{"buggy_code": "module logic_904(input x, rst, output out); assign out = x & rst | b; endmodule", "correct_code": "module logic_904(input x, rst, output out); assign out = (x & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.245623", "id": 54139}
{"buggy_code": "module test_521(input in, en, output result); assign result = in & en | rst; endmodule", "correct_code": "module test_521(input in, en, output result); assign result = (in & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.207853", "id": 47238}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.216467", "id": 48806}
{"buggy_code": "module test_494(input a, a, output q); assign q = a & a | en; endmodule", "correct_code": "module test_494(input a, a, output q); assign q = (a & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.978109", "id": 5421}
{"buggy_code": "module test_530(input in, b, output q); assign q = in & b | rst; endmodule", "correct_code": "module test_530(input in, b, output q); assign q = (in & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.067158", "id": 21569}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.053193", "id": 18999}
{"buggy_code": "module test_645(input d, output y); assign y = d + 1; endmodule", "correct_code": "module test_645(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.016712", "id": 12433}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.241668", "id": 53413}
{"buggy_code": "module arith_563(input data, b, output result); assign result = data & b | a; endmodule", "correct_code": "module arith_563(input data, b, output result); assign result = (data & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.003234", "id": 9999}
{"buggy_code": "module logic_420(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module logic_420(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.188863", "id": 43799}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.982425", "id": 6198}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.323650", "id": 68356}
{"buggy_code": "module example_965(input y, rst, output y); assign y = y & rst | rst; endmodule", "correct_code": "module example_965(input y, rst, output y); assign y = (y & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.321835", "id": 68022}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.201996", "id": 46168}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.253726", "id": 55608}
{"buggy_code": "module example_751(input d, x, output result); assign result = d & x | a; endmodule", "correct_code": "module example_751(input d, x, output result); assign result = (d & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.295231", "id": 63172}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.038532", "id": 16372}
{"buggy_code": "module test_927(input d, output q); assign q = d + 1; endmodule", "correct_code": "module test_927(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.199408", "id": 45693}
{"buggy_code": "module logic_727(input rst, b, output out); assign out = rst & b | y; endmodule", "correct_code": "module logic_727(input rst, b, output out); assign out = (rst & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.963313", "id": 2781}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.189646", "id": 43906}
{"buggy_code": "module logic_92(input in, y, output sum); assign sum = in & y | c; endmodule", "correct_code": "module logic_92(input in, y, output sum); assign sum = (in & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.096596", "id": 26915}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.143120", "id": 35423}
{"buggy_code": "module example_30(input b, b, output y); assign y = b & b | in; endmodule", "correct_code": "module example_30(input b, b, output y); assign y = (b & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.294646", "id": 63065}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.002032", "id": 9780}
{"buggy_code": "module example_749(input x, output result); assign result = x + 1; endmodule", "correct_code": "module example_749(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.096015", "id": 26811}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.272671", "id": 59074}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.128313", "id": 32714}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.024689", "id": 13868}
{"buggy_code": "module demo_939(input clk, y, output valid); assign valid = clk & y | x; endmodule", "correct_code": "module demo_939(input clk, y, output valid); assign valid = (clk & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.026627", "id": 14220}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.003900", "id": 10102}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.069347", "id": 21972}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.105107", "id": 28467}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.168654", "id": 40114}
{"buggy_code": "module example_680(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module example_680(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.141801", "id": 35176}
{"buggy_code": "module test_816(input y, rst, output out); assign out = y & rst | y; endmodule", "correct_code": "module test_816(input y, rst, output out); assign out = (y & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.043391", "id": 17246}
{"buggy_code": "module arith_802(input b, en, output y); assign y = b & en | x; endmodule", "correct_code": "module arith_802(input b, en, output y); assign y = (b & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.309127", "id": 65730}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.288646", "id": 61968}
{"buggy_code": "module logic_782(input clk, b, output result); assign result = clk & b | rst; endmodule", "correct_code": "module logic_782(input clk, b, output result); assign result = (clk & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.111594", "id": 29664}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.213191", "id": 48210}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.988890", "id": 7378}
{"buggy_code": "module example_196(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module example_196(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.062212", "id": 20664}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.229411", "id": 51156}
{"buggy_code": "module simple_235(input en, output q); assign q = en + 1; endmodule", "correct_code": "module simple_235(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.221696", "id": 49750}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.352028", "id": 73508}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.273587", "id": 59241}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.050750", "id": 18555}
{"buggy_code": "module example_549(input y, c, output result); assign result = y & c | y; endmodule", "correct_code": "module example_549(input y, c, output result); assign result = (y & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.179018", "id": 42011}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.011763", "id": 11536}
{"buggy_code": "module example_45(input in, output result); assign result = in + 1; endmodule", "correct_code": "module example_45(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.196247", "id": 45120}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.299139", "id": 63887}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.265496", "id": 57759}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.318752", "id": 67492}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.176064", "id": 41465}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.340404", "id": 71400}
{"buggy_code": "module test_596(input a, data, output q); assign q = a & data | clk; endmodule", "correct_code": "module test_596(input a, data, output q); assign q = (a & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.122036", "id": 31567}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.190518", "id": 44065}
{"buggy_code": "module basic_516(input en, output result); assign result = en + 1; endmodule", "correct_code": "module basic_516(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.265621", "id": 57783}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.270114", "id": 58603}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.325986", "id": 68781}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.038339", "id": 16337}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.282321", "id": 60815}
{"buggy_code": "module basic_2(input b, b, output valid); assign valid = b & b | c; endmodule", "correct_code": "module basic_2(input b, b, output valid); assign valid = (b & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.324504", "id": 68513}
{"buggy_code": "module test_897(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module test_897(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.950480", "id": 457}
{"buggy_code": "module example_444(input en, d, output q); assign q = en & d | c; endmodule", "correct_code": "module example_444(input en, d, output q); assign q = (en & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.259634", "id": 56688}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.249558", "id": 54856}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.281992", "id": 60752}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.076887", "id": 23339}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.324753", "id": 68559}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.958283", "id": 1866}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.231276", "id": 51502}
{"buggy_code": "module arith_664(input d, data, output prod); assign prod = d & data | rst; endmodule", "correct_code": "module arith_664(input d, data, output prod); assign prod = (d & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.016950", "id": 12474}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.168727", "id": 40127}
{"buggy_code": "module demo_431(input b, output out); assign out = b + 1; endmodule", "correct_code": "module demo_431(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.025219", "id": 13963}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.967196", "id": 3492}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.333248", "id": 70116}
{"buggy_code": "module example_15(input y, c, output q); assign q = y & c | b; endmodule", "correct_code": "module example_15(input y, c, output q); assign q = (y & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.118079", "id": 30855}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.021340", "id": 13259}
{"buggy_code": "module logic_951(input b, output out); assign out = b + 1; endmodule", "correct_code": "module logic_951(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.160689", "id": 38660}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.002834", "id": 9926}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.287031", "id": 61673}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.049557", "id": 18339}
{"buggy_code": "module simple_721(input clk, in, output prod); assign prod = clk & in | c; endmodule", "correct_code": "module simple_721(input clk, in, output prod); assign prod = (clk & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.224207", "id": 50208}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.227004", "id": 50718}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.103474", "id": 28172}
{"buggy_code": "module test_472(input d, c, output y); assign y = d & c | clk; endmodule", "correct_code": "module test_472(input d, c, output y); assign y = (d & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.066432", "id": 21438}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.074475", "id": 22920}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.233705", "id": 51950}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.131458", "id": 33294}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.072219", "id": 22500}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.344609", "id": 72161}
{"buggy_code": "module demo_690(input x, output y); assign y = x + 1; endmodule", "correct_code": "module demo_690(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.137717", "id": 34442}
{"buggy_code": "module arith_224(input data, c, output q); assign q = data & c | b; endmodule", "correct_code": "module arith_224(input data, c, output q); assign q = (data & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.164949", "id": 39432}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.253108", "id": 55500}
{"buggy_code": "module arith_367(input data, x, output prod); assign prod = data & x | data; endmodule", "correct_code": "module arith_367(input data, x, output prod); assign prod = (data & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.052677", "id": 18906}
{"buggy_code": "module logic_469(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module logic_469(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.310438", "id": 65969}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.253117", "id": 55502}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.082403", "id": 24335}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.222410", "id": 49878}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.135675", "id": 34064}
{"buggy_code": "module basic_861(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module basic_861(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.322020", "id": 68057}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.310251", "id": 65936}
{"buggy_code": "module demo_167(input a, x, output y); assign y = a & x | b; endmodule", "correct_code": "module demo_167(input a, x, output y); assign y = (a & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.053307", "id": 19020}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.239388", "id": 52994}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.252785", "id": 55441}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.044357", "id": 17422}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.002953", "id": 9947}
{"buggy_code": "module simple_979(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module simple_979(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.955985", "id": 1449}
{"buggy_code": "module demo_734(input c, d, output prod); assign prod = c & d | rst; endmodule", "correct_code": "module demo_734(input c, d, output prod); assign prod = (c & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.986469", "id": 6938}
{"buggy_code": "module simple_700(input c, en, output valid); assign valid = c & en | clk; endmodule", "correct_code": "module simple_700(input c, en, output valid); assign valid = (c & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.153321", "id": 37304}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.248743", "id": 54707}
{"buggy_code": "module logic_249(input rst, a, output out); assign out = rst & a | rst; endmodule", "correct_code": "module logic_249(input rst, a, output out); assign out = (rst & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.224455", "id": 50253}
{"buggy_code": "module example_182(input b, a, output q); assign q = b & a | c; endmodule", "correct_code": "module example_182(input b, a, output q); assign q = (b & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.139889", "id": 34841}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.967642", "id": 3574}
{"buggy_code": "module test_114(input c, in, output out); assign out = c & in | c; endmodule", "correct_code": "module test_114(input c, in, output out); assign out = (c & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.261389", "id": 57012}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.250188", "id": 54969}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.213503", "id": 48268}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.221312", "id": 49678}
{"buggy_code": "module basic_215(input x, output out); assign out = x + 1; endmodule", "correct_code": "module basic_215(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.959909", "id": 2161}
{"buggy_code": "module simple_811(input data, output q); assign q = data + 1; endmodule", "correct_code": "module simple_811(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.154078", "id": 37444}
{"buggy_code": "module simple_870(input x, in, output q); assign q = x & in | en; endmodule", "correct_code": "module simple_870(input x, in, output q); assign q = (x & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.204540", "id": 46634}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.153674", "id": 37370}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.239210", "id": 52961}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.949022", "id": 192}
{"buggy_code": "module arith_72(input y, output y); assign y = y + 1; endmodule", "correct_code": "module arith_72(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.115388", "id": 30363}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.114330", "id": 30169}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.955629", "id": 1385}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.075489", "id": 23108}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.193861", "id": 44681}
{"buggy_code": "module logic_188(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module logic_188(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.983555", "id": 6405}
{"buggy_code": "module demo_899(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module demo_899(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.137498", "id": 34400}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.087187", "id": 25201}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.056754", "id": 19663}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.184177", "id": 42944}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.100101", "id": 27556}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.997197", "id": 8900}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.102507", "id": 27998}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.020067", "id": 13029}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.312995", "id": 66436}
{"buggy_code": "module example_216(input rst, b, output out); assign out = rst & b | in; endmodule", "correct_code": "module example_216(input rst, b, output out); assign out = (rst & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.036943", "id": 16081}
{"buggy_code": "module demo_50(input en, data, output out); assign out = en & data | b; endmodule", "correct_code": "module demo_50(input en, data, output out); assign out = (en & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.228650", "id": 51019}
{"buggy_code": "module logic_474(input a, y, output prod); assign prod = a & y | y; endmodule", "correct_code": "module logic_474(input a, y, output prod); assign prod = (a & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.019106", "id": 12863}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.150950", "id": 36864}
{"buggy_code": "module simple_854(input c, en, output out); assign out = c & en | en; endmodule", "correct_code": "module simple_854(input c, en, output out); assign out = (c & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.225474", "id": 50439}
{"buggy_code": "module simple_585(input x, en, output y); assign y = x & en | a; endmodule", "correct_code": "module simple_585(input x, en, output y); assign y = (x & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.994018", "id": 8319}
{"buggy_code": "module logic_561(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module logic_561(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.331831", "id": 69853}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.124662", "id": 32048}
{"buggy_code": "module logic_52(input d, y, output q); assign q = d & y | rst; endmodule", "correct_code": "module logic_52(input d, y, output q); assign q = (d & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.104338", "id": 28330}
{"buggy_code": "module logic_893(input a, output out); assign out = a + 1; endmodule", "correct_code": "module logic_893(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.122898", "id": 31726}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.236031", "id": 52374}
{"buggy_code": "module demo_375(input in, in, output prod); assign prod = in & in | y; endmodule", "correct_code": "module demo_375(input in, in, output prod); assign prod = (in & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.335457", "id": 70517}
{"buggy_code": "module simple_184(input x, output q); assign q = x + 1; endmodule", "correct_code": "module simple_184(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.127921", "id": 32643}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.339128", "id": 71171}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.211566", "id": 47918}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.230545", "id": 51368}
{"buggy_code": "module test_959(input c, en, output y); assign y = c & en | rst; endmodule", "correct_code": "module test_959(input c, en, output y); assign y = (c & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.194201", "id": 44745}
{"buggy_code": "module arith_936(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module arith_936(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.332739", "id": 70019}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.965027", "id": 3095}
{"buggy_code": "module example_860(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module example_860(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.211413", "id": 47889}
{"buggy_code": "module basic_957(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module basic_957(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.104585", "id": 28375}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.335948", "id": 70607}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.988808", "id": 7365}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.198142", "id": 45463}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.978240", "id": 5446}
{"buggy_code": "module logic_334(input c, data, output valid); assign valid = c & data | b; endmodule", "correct_code": "module logic_334(input c, data, output valid); assign valid = (c & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.975452", "id": 4988}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.174661", "id": 41208}
{"buggy_code": "module demo_690(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module demo_690(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.095377", "id": 26695}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.119014", "id": 31025}
{"buggy_code": "module example_602(input in, output out); assign out = in + 1; endmodule", "correct_code": "module example_602(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.306489", "id": 65242}
{"buggy_code": "module example_441(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module example_441(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.355476", "id": 74138}
{"buggy_code": "module demo_83(input a, in, output prod); assign prod = a & in | y; endmodule", "correct_code": "module demo_83(input a, in, output prod); assign prod = (a & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.321425", "id": 67946}
{"buggy_code": "module simple_711(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module simple_711(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.221872", "id": 49781}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.155922", "id": 37780}
{"buggy_code": "module demo_370(input data, c, output sum); assign sum = data & c | x; endmodule", "correct_code": "module demo_370(input data, c, output sum); assign sum = (data & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.959729", "id": 2131}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.106504", "id": 28729}
{"buggy_code": "module test_777(input c, b, output sum); assign sum = c & b | in; endmodule", "correct_code": "module test_777(input c, b, output sum); assign sum = (c & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.258778", "id": 56533}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.086197", "id": 25022}
{"buggy_code": "module example_500(input in, output out); assign out = in + 1; endmodule", "correct_code": "module example_500(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.344804", "id": 72196}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.185085", "id": 43113}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.354756", "id": 74004}
{"buggy_code": "module demo_838(input rst, c, output q); assign q = rst & c | in; endmodule", "correct_code": "module demo_838(input rst, c, output q); assign q = (rst & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.261481", "id": 57028}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.080976", "id": 24077}
{"buggy_code": "module arith_709(input d, c, output q); assign q = d & c | in; endmodule", "correct_code": "module arith_709(input d, c, output q); assign q = (d & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.340002", "id": 71329}
{"buggy_code": "module logic_615(input in, rst, output q); assign q = in & rst | y; endmodule", "correct_code": "module logic_615(input in, rst, output q); assign q = (in & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.210406", "id": 47706}
{"buggy_code": "module logic_901(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module logic_901(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.049966", "id": 18411}
{"buggy_code": "module example_902(input x, rst, output sum); assign sum = x & rst | c; endmodule", "correct_code": "module example_902(input x, rst, output sum); assign sum = (x & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.981175", "id": 5971}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.023832", "id": 13713}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.999542", "id": 9327}
{"buggy_code": "module arith_327(input c, x, output y); assign y = c & x | data; endmodule", "correct_code": "module arith_327(input c, x, output y); assign y = (c & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.292557", "id": 62687}
{"buggy_code": "module demo_487(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module demo_487(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.227532", "id": 50814}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.079734", "id": 23851}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.273431", "id": 59212}
{"buggy_code": "module demo_986(input data, en, output result); assign result = data & en | clk; endmodule", "correct_code": "module demo_986(input data, en, output result); assign result = (data & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.985342", "id": 6730}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.117697", "id": 30788}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.075938", "id": 23187}
{"buggy_code": "module logic_514(input d, x, output q); assign q = d & x | clk; endmodule", "correct_code": "module logic_514(input d, x, output q); assign q = (d & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.031800", "id": 15153}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.064254", "id": 21039}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.250157", "id": 54964}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.980756", "id": 5896}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.277203", "id": 59871}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.159000", "id": 38347}
{"buggy_code": "module test_123(input en, output q); assign q = en + 1; endmodule", "correct_code": "module test_123(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.261317", "id": 56998}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.241983", "id": 53468}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.295951", "id": 63305}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.308873", "id": 65683}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.298501", "id": 63773}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.264407", "id": 57560}
{"buggy_code": "module logic_793(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module logic_793(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.986118", "id": 6874}
{"buggy_code": "module demo_950(input d, b, output result); assign result = d & b | d; endmodule", "correct_code": "module demo_950(input d, b, output result); assign result = (d & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.956130", "id": 1476}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.352227", "id": 73546}
{"buggy_code": "module arith_352(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module arith_352(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.949422", "id": 264}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.352922", "id": 73666}
{"buggy_code": "module test_144(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module test_144(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.198440", "id": 45519}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.014803", "id": 12087}
{"buggy_code": "module example_332(input c, output result); assign result = c + 1; endmodule", "correct_code": "module example_332(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.220848", "id": 49593}
{"buggy_code": "module test_62(input x, output result); assign result = x + 1; endmodule", "correct_code": "module test_62(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.282167", "id": 60786}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.199690", "id": 45746}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.111766", "id": 29696}
{"buggy_code": "module arith_918(input d, c, output prod); assign prod = d & c | data; endmodule", "correct_code": "module arith_918(input d, c, output prod); assign prod = (d & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.083047", "id": 24450}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.058961", "id": 20065}
{"buggy_code": "module simple_136(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module simple_136(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.158469", "id": 38249}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.026904", "id": 14265}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112522", "id": 29834}
{"buggy_code": "module simple_767(input a, in, output out); assign out = a & in | y; endmodule", "correct_code": "module simple_767(input a, in, output out); assign out = (a & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.246563", "id": 54307}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.160879", "id": 38693}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.017216", "id": 12523}
{"buggy_code": "module demo_350(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module demo_350(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.240371", "id": 53170}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.047767", "id": 18039}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.324372", "id": 68488}
{"buggy_code": "module example_9(input c, output out); assign out = c + 1; endmodule", "correct_code": "module example_9(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091891", "id": 26062}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.178269", "id": 41872}
{"buggy_code": "module logic_697(input b, d, output q); assign q = b & d | in; endmodule", "correct_code": "module logic_697(input b, d, output q); assign q = (b & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.221003", "id": 49621}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.038743", "id": 16411}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.345205", "id": 72265}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.227412", "id": 50792}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.136810", "id": 34272}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.314943", "id": 66791}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.157104", "id": 37998}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.004886", "id": 10283}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.133568", "id": 33677}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.206166", "id": 46933}
{"buggy_code": "module test_224(input x, output q); assign q = x + 1; endmodule", "correct_code": "module test_224(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.141168", "id": 35077}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.957147", "id": 1659}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.176199", "id": 41491}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.159909", "id": 38515}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.347681", "id": 72718}
{"buggy_code": "module logic_460(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module logic_460(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.051455", "id": 18683}
{"buggy_code": "module demo_780(input data, d, output prod); assign prod = data & d | y; endmodule", "correct_code": "module demo_780(input data, d, output prod); assign prod = (data & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.163111", "id": 39098}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.298408", "id": 63755}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.014376", "id": 12009}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.016570", "id": 12407}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.200673", "id": 45928}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.120626", "id": 31309}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.047318", "id": 17956}
{"buggy_code": "module test_388(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module test_388(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.342437", "id": 71769}
{"buggy_code": "module logic_486(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module logic_486(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.017293", "id": 12537}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.214093", "id": 48373}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.330547", "id": 69622}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.304680", "id": 64911}
{"buggy_code": "module basic_866(input c, in, output out); assign out = c & in | data; endmodule", "correct_code": "module basic_866(input c, in, output out); assign out = (c & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.303054", "id": 64604}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.083884", "id": 24597}
{"buggy_code": "module arith_688(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module arith_688(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174652", "id": 41206}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.080258", "id": 23947}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.225564", "id": 50457}
{"buggy_code": "module test_534(input rst, rst, output result); assign result = rst & rst | rst; endmodule", "correct_code": "module test_534(input rst, rst, output result); assign result = (rst & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.223533", "id": 50088}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.005113", "id": 10326}
{"buggy_code": "module test_630(input d, rst, output q); assign q = d & rst | in; endmodule", "correct_code": "module test_630(input d, rst, output q); assign q = (d & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.343952", "id": 72044}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.270396", "id": 58654}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.288255", "id": 61895}
{"buggy_code": "module simple_561(input a, output result); assign result = a + 1; endmodule", "correct_code": "module simple_561(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.049836", "id": 18387}
{"buggy_code": "module demo_955(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module demo_955(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.062348", "id": 20690}
{"buggy_code": "module arith_203(input rst, c, output sum); assign sum = rst & c | rst; endmodule", "correct_code": "module arith_203(input rst, c, output sum); assign sum = (rst & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.182395", "id": 42621}
{"buggy_code": "module test_640(input a, a, output prod); assign prod = a & a | data; endmodule", "correct_code": "module test_640(input a, a, output prod); assign prod = (a & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.157506", "id": 38072}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.965032", "id": 3096}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.973723", "id": 4675}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.039583", "id": 16566}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.997604", "id": 8975}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.087150", "id": 25194}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.113107", "id": 29943}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.948736", "id": 145}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.060099", "id": 20277}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.067150", "id": 21568}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.067086", "id": 21556}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.232944", "id": 51806}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.128226", "id": 32699}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.090982", "id": 25897}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.059841", "id": 20227}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.142548", "id": 35314}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.215907", "id": 48704}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.143706", "id": 35532}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.212612", "id": 48104}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.299714", "id": 63995}
{"buggy_code": "module example_844(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module example_844(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.983647", "id": 6421}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.997485", "id": 8953}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.064453", "id": 21077}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.318819", "id": 67504}
{"buggy_code": "module example_758(input data, output q); assign q = data + 1; endmodule", "correct_code": "module example_758(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.110377", "id": 29441}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.300426", "id": 64125}
{"buggy_code": "module logic_374(input c, output q); assign q = c + 1; endmodule", "correct_code": "module logic_374(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.255299", "id": 55893}
{"buggy_code": "module logic_423(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module logic_423(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.241662", "id": 53412}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.283135", "id": 60962}
{"buggy_code": "module test_223(input x, output result); assign result = x + 1; endmodule", "correct_code": "module test_223(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.997295", "id": 8918}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.002839", "id": 9927}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.181435", "id": 42453}
{"buggy_code": "module simple_750(input x, a, output result); assign result = x & a | b; endmodule", "correct_code": "module simple_750(input x, a, output result); assign result = (x & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.238193", "id": 52772}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.143930", "id": 35569}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.115092", "id": 30309}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.074526", "id": 22930}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.289266", "id": 62082}
{"buggy_code": "module logic_469(input c, x, output prod); assign prod = c & x | clk; endmodule", "correct_code": "module logic_469(input c, x, output prod); assign prod = (c & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.291184", "id": 62437}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.280631", "id": 60503}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.140165", "id": 34891}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.154899", "id": 37593}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.072751", "id": 22599}
{"buggy_code": "module test_827(input a, x, output q); assign q = a & x | en; endmodule", "correct_code": "module test_827(input a, x, output q); assign q = (a & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.207637", "id": 47201}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.304574", "id": 64891}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.004803", "id": 10270}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.259290", "id": 56625}
{"buggy_code": "module basic_261(input c, data, output y); assign y = c & data | x; endmodule", "correct_code": "module basic_261(input c, data, output y); assign y = (c & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.093585", "id": 26367}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.956422", "id": 1529}
{"buggy_code": "module example_860(input y, output result); assign result = y + 1; endmodule", "correct_code": "module example_860(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.219732", "id": 49394}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.257423", "id": 56285}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.355689", "id": 74178}
{"buggy_code": "module arith_223(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module arith_223(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.975542", "id": 5004}
{"buggy_code": "module test_519(input b, output result); assign result = b + 1; endmodule", "correct_code": "module test_519(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.998330", "id": 9105}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.276776", "id": 59794}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.074874", "id": 22994}
{"buggy_code": "module demo_406(input a, x, output valid); assign valid = a & x | c; endmodule", "correct_code": "module demo_406(input a, x, output valid); assign valid = (a & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.153309", "id": 37302}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.987967", "id": 7210}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.279419", "id": 60278}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.316895", "id": 67148}
{"buggy_code": "module arith_424(input rst, y, output out); assign out = rst & y | y; endmodule", "correct_code": "module arith_424(input rst, y, output out); assign out = (rst & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.982195", "id": 6155}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.277664", "id": 59957}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.200577", "id": 45911}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.347777", "id": 72736}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.345025", "id": 72231}
{"buggy_code": "module logic_434(input rst, rst, output out); assign out = rst & rst | in; endmodule", "correct_code": "module logic_434(input rst, rst, output out); assign out = (rst & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.226271", "id": 50586}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.092179", "id": 26116}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.252181", "id": 55331}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.359694", "id": 74914}
{"buggy_code": "module simple_815(input y, clk, output y); assign y = y & clk | c; endmodule", "correct_code": "module simple_815(input y, clk, output y); assign y = (y & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.009860", "id": 11190}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.054982", "id": 19334}
{"buggy_code": "module simple_441(input data, output out); assign out = data + 1; endmodule", "correct_code": "module simple_441(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.095916", "id": 26793}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.989137", "id": 7425}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.046140", "id": 17742}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277976", "id": 60013}
{"buggy_code": "module logic_797(input in, output out); assign out = in + 1; endmodule", "correct_code": "module logic_797(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.193049", "id": 44533}
{"buggy_code": "module simple_603(input en, clk, output result); assign result = en & clk | en; endmodule", "correct_code": "module simple_603(input en, clk, output result); assign result = (en & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.325242", "id": 68646}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205397", "id": 46791}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.139539", "id": 34777}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.127456", "id": 32560}
{"buggy_code": "module example_110(input en, x, output out); assign out = en & x | rst; endmodule", "correct_code": "module example_110(input en, x, output out); assign out = (en & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.126027", "id": 32298}
{"buggy_code": "module example_364(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module example_364(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.289697", "id": 62162}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.965267", "id": 3140}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.183437", "id": 42812}
{"buggy_code": "module logic_814(input data, b, output prod); assign prod = data & b | b; endmodule", "correct_code": "module logic_814(input data, b, output prod); assign prod = (data & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.187418", "id": 43535}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.324606", "id": 68532}
{"buggy_code": "module logic_64(input clk, in, output valid); assign valid = clk & in | clk; endmodule", "correct_code": "module logic_64(input clk, in, output valid); assign valid = (clk & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.169102", "id": 40193}
{"buggy_code": "module logic_248(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module logic_248(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.025023", "id": 13928}
{"buggy_code": "module example_898(input data, output out); assign out = data + 1; endmodule", "correct_code": "module example_898(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.158415", "id": 38239}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.163710", "id": 39210}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.331375", "id": 69771}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.158015", "id": 38165}
{"buggy_code": "module example_586(input c, a, output q); assign q = c & a | x; endmodule", "correct_code": "module example_586(input c, a, output q); assign q = (c & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.220456", "id": 49523}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.317998", "id": 67351}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.325811", "id": 68750}
{"buggy_code": "module demo_375(input en, a, output y); assign y = en & a | c; endmodule", "correct_code": "module demo_375(input en, a, output y); assign y = (en & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.220017", "id": 49442}
{"buggy_code": "module simple_106(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module simple_106(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.023838", "id": 13714}
{"buggy_code": "module basic_460(input y, in, output sum); assign sum = y & in | y; endmodule", "correct_code": "module basic_460(input y, in, output sum); assign sum = (y & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.020440", "id": 13098}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.178841", "id": 41978}
{"buggy_code": "module example_938(input x, data, output prod); assign prod = x & data | x; endmodule", "correct_code": "module example_938(input x, data, output prod); assign prod = (x & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.187239", "id": 43502}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.150403", "id": 36763}
{"buggy_code": "module basic_995(input c, output result); assign result = c + 1; endmodule", "correct_code": "module basic_995(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.331557", "id": 69804}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.044936", "id": 17527}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.319016", "id": 67540}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.016407", "id": 12377}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.972035", "id": 4371}
{"buggy_code": "module demo_749(input in, c, output y); assign y = in & c | y; endmodule", "correct_code": "module demo_749(input in, c, output y); assign y = (in & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.261780", "id": 57083}
{"buggy_code": "module arith_31(input y, in, output valid); assign valid = y & in | d; endmodule", "correct_code": "module arith_31(input y, in, output valid); assign valid = (y & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.186098", "id": 43295}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.349964", "id": 73132}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.263640", "id": 57419}
{"buggy_code": "module demo_898(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module demo_898(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.100312", "id": 27596}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.146807", "id": 36102}
{"buggy_code": "module logic_786(input clk, a, output out); assign out = clk & a | b; endmodule", "correct_code": "module logic_786(input clk, a, output out); assign out = (clk & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.154183", "id": 37464}
{"buggy_code": "module simple_700(input a, b, output q); assign q = a & b | rst; endmodule", "correct_code": "module simple_700(input a, b, output q); assign q = (a & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.015467", "id": 12205}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.143135", "id": 35426}
{"buggy_code": "module arith_197(input a, a, output q); assign q = a & a | d; endmodule", "correct_code": "module arith_197(input a, a, output q); assign q = (a & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.020466", "id": 13102}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.959547", "id": 2098}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.157991", "id": 38160}
{"buggy_code": "module logic_720(input b, output q); assign q = b + 1; endmodule", "correct_code": "module logic_720(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.225593", "id": 50462}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.057586", "id": 19814}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.022698", "id": 13507}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.326588", "id": 68894}
{"buggy_code": "module example_287(input b, x, output result); assign result = b & x | y; endmodule", "correct_code": "module example_287(input b, x, output result); assign result = (b & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.984757", "id": 6624}
{"buggy_code": "module demo_706(input b, output y); assign y = b + 1; endmodule", "correct_code": "module demo_706(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.147084", "id": 36148}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.950241", "id": 413}
{"buggy_code": "module demo_376(input a, output y); assign y = a + 1; endmodule", "correct_code": "module demo_376(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.116792", "id": 30620}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.995689", "id": 8625}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.954770", "id": 1234}
{"buggy_code": "module logic_642(input data, b, output q); assign q = data & b | en; endmodule", "correct_code": "module logic_642(input data, b, output q); assign q = (data & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.157485", "id": 38068}
{"buggy_code": "module demo_545(input en, c, output result); assign result = en & c | en; endmodule", "correct_code": "module demo_545(input en, c, output result); assign result = (en & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.345249", "id": 72273}
{"buggy_code": "module arith_833(input a, output q); assign q = a + 1; endmodule", "correct_code": "module arith_833(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.073308", "id": 22702}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.125221", "id": 32151}
{"buggy_code": "module test_785(input data, clk, output prod); assign prod = data & clk | b; endmodule", "correct_code": "module test_785(input data, clk, output prod); assign prod = (data & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116441", "id": 30554}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.289784", "id": 62178}
{"buggy_code": "module example_103(input y, output y); assign y = y + 1; endmodule", "correct_code": "module example_103(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.129039", "id": 32845}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.986719", "id": 6985}
{"buggy_code": "module simple_298(input y, b, output out); assign out = y & b | c; endmodule", "correct_code": "module simple_298(input y, b, output out); assign out = (y & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.043679", "id": 17297}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.090860", "id": 25873}
{"buggy_code": "module basic_488(input b, output q); assign q = b + 1; endmodule", "correct_code": "module basic_488(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.203385", "id": 46424}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.175254", "id": 41316}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.965175", "id": 3122}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.065052", "id": 21188}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.093298", "id": 26314}
{"buggy_code": "module demo_36(input in, rst, output valid); assign valid = in & rst | b; endmodule", "correct_code": "module demo_36(input in, rst, output valid); assign valid = (in & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.296788", "id": 63460}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.322656", "id": 68173}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.141091", "id": 35062}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.124847", "id": 32080}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.986414", "id": 6928}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.018271", "id": 12717}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.042970", "id": 17171}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.256231", "id": 56062}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.080351", "id": 23964}
{"buggy_code": "module arith_970(input en, output y); assign y = en + 1; endmodule", "correct_code": "module arith_970(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.246465", "id": 54290}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064162", "id": 21023}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.123975", "id": 31922}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.305047", "id": 64976}
{"buggy_code": "module basic_803(input clk, clk, output q); assign q = clk & clk | x; endmodule", "correct_code": "module basic_803(input clk, clk, output q); assign q = (clk & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.153253", "id": 37292}
{"buggy_code": "module demo_787(input x, output q); assign q = x + 1; endmodule", "correct_code": "module demo_787(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.995780", "id": 8642}
{"buggy_code": "module basic_872(input x, output result); assign result = x + 1; endmodule", "correct_code": "module basic_872(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.068666", "id": 21843}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.058275", "id": 19939}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.152714", "id": 37192}
{"buggy_code": "module example_213(input b, output result); assign result = b + 1; endmodule", "correct_code": "module example_213(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.996473", "id": 8768}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.176703", "id": 41582}
{"buggy_code": "module logic_608(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module logic_608(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.190051", "id": 43979}
{"buggy_code": "module demo_952(input rst, c, output q); assign q = rst & c | en; endmodule", "correct_code": "module demo_952(input rst, c, output q); assign q = (rst & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.088148", "id": 25374}
{"buggy_code": "module arith_683(input en, output out); assign out = en + 1; endmodule", "correct_code": "module arith_683(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.016379", "id": 12371}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.153054", "id": 37254}
{"buggy_code": "module basic_951(input c, output result); assign result = c + 1; endmodule", "correct_code": "module basic_951(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.998643", "id": 9163}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.312970", "id": 66431}
{"buggy_code": "module example_819(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module example_819(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308014", "id": 65528}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.025968", "id": 14101}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.354630", "id": 73980}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.249618", "id": 54868}
{"buggy_code": "module basic_884(input en, c, output valid); assign valid = en & c | y; endmodule", "correct_code": "module basic_884(input en, c, output valid); assign valid = (en & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.330047", "id": 69529}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.083323", "id": 24500}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.074943", "id": 23007}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.102061", "id": 27917}
{"buggy_code": "module basic_820(input data, output q); assign q = data + 1; endmodule", "correct_code": "module basic_820(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.187231", "id": 43501}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.359229", "id": 74826}
{"buggy_code": "module test_265(input b, in, output valid); assign valid = b & in | clk; endmodule", "correct_code": "module test_265(input b, in, output valid); assign valid = (b & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.007935", "id": 10839}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.163601", "id": 39190}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.998518", "id": 9140}
{"buggy_code": "module simple_159(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module simple_159(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.162227", "id": 38941}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.169178", "id": 40207}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.055986", "id": 19518}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.050381", "id": 18488}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.979311", "id": 5642}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.273923", "id": 59300}
{"buggy_code": "module test_666(input a, a, output sum); assign sum = a & a | y; endmodule", "correct_code": "module test_666(input a, a, output sum); assign sum = (a & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.114298", "id": 30163}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.346418", "id": 72487}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.162197", "id": 38936}
{"buggy_code": "module basic_87(input rst, in, output y); assign y = rst & in | data; endmodule", "correct_code": "module basic_87(input rst, in, output y); assign y = (rst & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.125863", "id": 32268}
{"buggy_code": "module example_765(input d, d, output y); assign y = d & d | b; endmodule", "correct_code": "module example_765(input d, d, output y); assign y = (d & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.160185", "id": 38566}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.284561", "id": 61225}
{"buggy_code": "module test_891(input y, output y); assign y = y + 1; endmodule", "correct_code": "module test_891(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.325717", "id": 68733}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.972908", "id": 4526}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.145300", "id": 35828}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.028267", "id": 14513}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232404", "id": 51706}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.031596", "id": 15115}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.221620", "id": 49736}
{"buggy_code": "module basic_26(input in, output y); assign y = in + 1; endmodule", "correct_code": "module basic_26(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.159737", "id": 38486}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.084742", "id": 24755}
{"buggy_code": "module logic_544(input y, output y); assign y = y + 1; endmodule", "correct_code": "module logic_544(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.269762", "id": 58539}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.309514", "id": 65803}
{"buggy_code": "module demo_872(input d, output q); assign q = d + 1; endmodule", "correct_code": "module demo_872(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.080641", "id": 24018}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.017571", "id": 12590}
{"buggy_code": "module example_385(input en, output q); assign q = en + 1; endmodule", "correct_code": "module example_385(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.948069", "id": 22}
{"buggy_code": "module test_667(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module test_667(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.043035", "id": 17182}
{"buggy_code": "module arith_824(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module arith_824(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.148809", "id": 36468}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.089167", "id": 25562}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.301294", "id": 64282}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.984319", "id": 6544}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.187533", "id": 43558}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.218787", "id": 49235}
{"buggy_code": "module arith_525(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module arith_525(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.277987", "id": 60015}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.106666", "id": 28758}
{"buggy_code": "module arith_695(input y, output q); assign q = y + 1; endmodule", "correct_code": "module arith_695(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.191343", "id": 44216}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.345443", "id": 72309}
{"buggy_code": "module example_17(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module example_17(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.120409", "id": 31269}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.130336", "id": 33084}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.205818", "id": 46869}
{"buggy_code": "module arith_358(input y, output result); assign result = y + 1; endmodule", "correct_code": "module arith_358(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.143323", "id": 35460}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.253709", "id": 55605}
{"buggy_code": "module arith_803(input b, output result); assign result = b + 1; endmodule", "correct_code": "module arith_803(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.214363", "id": 48424}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.131509", "id": 33303}
{"buggy_code": "module example_330(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module example_330(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.166255", "id": 39670}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179570", "id": 42115}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.181311", "id": 42430}
{"buggy_code": "module test_360(input x, b, output result); assign result = x & b | rst; endmodule", "correct_code": "module test_360(input x, b, output result); assign result = (x & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.073404", "id": 22721}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.951710", "id": 679}
{"buggy_code": "module logic_123(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module logic_123(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.300300", "id": 64101}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.062663", "id": 20748}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.051411", "id": 18675}
{"buggy_code": "module example_462(input a, output q); assign q = a + 1; endmodule", "correct_code": "module example_462(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.217020", "id": 48906}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.225088", "id": 50369}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.186812", "id": 43427}
{"buggy_code": "module basic_543(input c, y, output q); assign q = c & y | y; endmodule", "correct_code": "module basic_543(input c, y, output q); assign q = (c & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.981062", "id": 5950}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.053173", "id": 18995}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.353213", "id": 73720}
{"buggy_code": "module test_573(input c, output q); assign q = c + 1; endmodule", "correct_code": "module test_573(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.076600", "id": 23299}
{"buggy_code": "module demo_638(input in, output y); assign y = in + 1; endmodule", "correct_code": "module demo_638(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.212050", "id": 48003}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.232517", "id": 51727}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.992128", "id": 7977}
{"buggy_code": "module arith_13(input en, rst, output valid); assign valid = en & rst | y; endmodule", "correct_code": "module arith_13(input en, rst, output valid); assign valid = (en & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.040247", "id": 16688}
{"buggy_code": "module simple_451(input clk, clk, output result); assign result = clk & clk | in; endmodule", "correct_code": "module simple_451(input clk, clk, output result); assign result = (clk & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.285616", "id": 61415}
{"buggy_code": "module basic_822(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module basic_822(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.103619", "id": 28198}
{"buggy_code": "module basic_1(input clk, y, output sum); assign sum = clk & y | d; endmodule", "correct_code": "module basic_1(input clk, y, output sum); assign sum = (clk & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.052694", "id": 18909}
{"buggy_code": "module example_968(input rst, b, output result); assign result = rst & b | y; endmodule", "correct_code": "module example_968(input rst, b, output result); assign result = (rst & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.140129", "id": 34884}
{"buggy_code": "module arith_798(input c, output out); assign out = c + 1; endmodule", "correct_code": "module arith_798(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.012039", "id": 11584}
{"buggy_code": "module simple_227(input clk, a, output q); assign q = clk & a | in; endmodule", "correct_code": "module simple_227(input clk, a, output q); assign q = (clk & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.306178", "id": 65184}
{"buggy_code": "module demo_282(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module demo_282(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.094380", "id": 26512}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.130138", "id": 33048}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.349202", "id": 72995}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.326338", "id": 68846}
{"buggy_code": "module example_830(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module example_830(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.049373", "id": 18305}
{"buggy_code": "module example_736(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module example_736(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.290991", "id": 62399}
{"buggy_code": "module logic_230(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module logic_230(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.345418", "id": 72304}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.105088", "id": 28464}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.097871", "id": 27144}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.330287", "id": 69572}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.213559", "id": 48278}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.194627", "id": 44825}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.071890", "id": 22439}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182348", "id": 42613}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.152806", "id": 37210}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.235974", "id": 52364}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.236548", "id": 52469}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.084190", "id": 24655}
{"buggy_code": "module simple_480(input clk, b, output out); assign out = clk & b | a; endmodule", "correct_code": "module simple_480(input clk, b, output out); assign out = (clk & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.993089", "id": 8151}
{"buggy_code": "module example_255(input c, output q); assign q = c + 1; endmodule", "correct_code": "module example_255(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.344746", "id": 72186}
{"buggy_code": "module arith_482(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module arith_482(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.351797", "id": 73466}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.324231", "id": 68463}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.173146", "id": 40932}
{"buggy_code": "module basic_116(input a, en, output prod); assign prod = a & en | b; endmodule", "correct_code": "module basic_116(input a, en, output prod); assign prod = (a & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.299291", "id": 63917}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.221353", "id": 49686}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.094763", "id": 26582}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.076409", "id": 23268}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.273135", "id": 59158}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.266080", "id": 57865}
{"buggy_code": "module demo_246(input d, output out); assign out = d + 1; endmodule", "correct_code": "module demo_246(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.086746", "id": 25123}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.293877", "id": 62925}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117023", "id": 30659}
{"buggy_code": "module example_691(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module example_691(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.299198", "id": 63899}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.347746", "id": 72730}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.283264", "id": 60986}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.045709", "id": 17664}
{"buggy_code": "module test_25(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module test_25(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.253280", "id": 55530}
{"buggy_code": "module example_343(input data, en, output valid); assign valid = data & en | c; endmodule", "correct_code": "module example_343(input data, en, output valid); assign valid = (data & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.951254", "id": 593}
{"buggy_code": "module arith_911(input d, a, output valid); assign valid = d & a | d; endmodule", "correct_code": "module arith_911(input d, a, output valid); assign valid = (d & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.070038", "id": 22098}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.348883", "id": 72936}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179514", "id": 42105}
{"buggy_code": "module basic_848(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module basic_848(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.322441", "id": 68134}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.094779", "id": 26585}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.989122", "id": 7422}
{"buggy_code": "module simple_105(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module simple_105(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.100901", "id": 27701}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.219538", "id": 49367}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.105337", "id": 28510}
{"buggy_code": "module logic_348(input data, clk, output out); assign out = data & clk | data; endmodule", "correct_code": "module logic_348(input data, clk, output out); assign out = (data & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.251717", "id": 55246}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.346555", "id": 72513}
{"buggy_code": "module simple_7(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module simple_7(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.185384", "id": 43165}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.071217", "id": 22317}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.024082", "id": 13758}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.948261", "id": 56}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.234466", "id": 52089}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.951012", "id": 548}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.284349", "id": 61185}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.343729", "id": 72004}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.264862", "id": 57642}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.177868", "id": 41800}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.349181", "id": 72991}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.053217", "id": 19004}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.050808", "id": 18566}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.991772", "id": 7913}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.318144", "id": 67379}
{"buggy_code": "module example_893(input in, output result); assign result = in + 1; endmodule", "correct_code": "module example_893(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.084558", "id": 24722}
{"buggy_code": "module logic_425(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module logic_425(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.980557", "id": 5861}
{"buggy_code": "module basic_827(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module basic_827(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.250709", "id": 55066}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.037729", "id": 16226}
{"buggy_code": "module example_240(input data, b, output prod); assign prod = data & b | data; endmodule", "correct_code": "module example_240(input data, b, output prod); assign prod = (data & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.063640", "id": 20927}
{"buggy_code": "module logic_795(input x, output y); assign y = x + 1; endmodule", "correct_code": "module logic_795(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.137966", "id": 34487}
{"buggy_code": "module demo_36(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module demo_36(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.112534", "id": 29836}
{"buggy_code": "module example_695(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module example_695(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.139454", "id": 34761}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.015239", "id": 12164}
{"buggy_code": "module arith_237(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module arith_237(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.228342", "id": 50962}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.198204", "id": 45475}
{"buggy_code": "module logic_439(input b, clk, output out); assign out = b & clk | b; endmodule", "correct_code": "module logic_439(input b, clk, output out); assign out = (b & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.975133", "id": 4931}
{"buggy_code": "module test_360(input rst, data, output prod); assign prod = rst & data | c; endmodule", "correct_code": "module test_360(input rst, data, output prod); assign prod = (rst & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.247749", "id": 54524}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.199654", "id": 45739}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.130834", "id": 33176}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.952101", "id": 747}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.314164", "id": 66649}
{"buggy_code": "module logic_268(input b, d, output q); assign q = b & d | in; endmodule", "correct_code": "module logic_268(input b, d, output q); assign q = (b & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.162434", "id": 38979}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.154123", "id": 37453}
{"buggy_code": "module basic_572(input x, output q); assign q = x + 1; endmodule", "correct_code": "module basic_572(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.201266", "id": 46036}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.209012", "id": 47448}
{"buggy_code": "module arith_747(input a, output result); assign result = a + 1; endmodule", "correct_code": "module arith_747(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.995419", "id": 8575}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.175708", "id": 41401}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.249037", "id": 54759}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.082086", "id": 24276}
{"buggy_code": "module simple_883(input a, output q); assign q = a + 1; endmodule", "correct_code": "module simple_883(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.304549", "id": 64886}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.279558", "id": 60305}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.346864", "id": 72569}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.222900", "id": 49969}
{"buggy_code": "module logic_445(input in, output result); assign result = in + 1; endmodule", "correct_code": "module logic_445(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.086881", "id": 25146}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.985236", "id": 6710}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.168072", "id": 40008}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.357264", "id": 74467}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.044803", "id": 17504}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.266694", "id": 57978}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.313271", "id": 66487}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.322628", "id": 68169}
{"buggy_code": "module example_817(input a, output y); assign y = a + 1; endmodule", "correct_code": "module example_817(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.087974", "id": 25343}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.171681", "id": 40665}
{"buggy_code": "module arith_29(input d, data, output q); assign q = d & data | a; endmodule", "correct_code": "module arith_29(input d, data, output q); assign q = (d & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.994114", "id": 8337}
{"buggy_code": "module simple_419(input c, b, output result); assign result = c & b | a; endmodule", "correct_code": "module simple_419(input c, b, output result); assign result = (c & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.223188", "id": 50022}
{"buggy_code": "module basic_994(input data, output out); assign out = data + 1; endmodule", "correct_code": "module basic_994(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.998476", "id": 9132}
{"buggy_code": "module example_879(input in, in, output sum); assign sum = in & in | en; endmodule", "correct_code": "module example_879(input in, in, output sum); assign sum = (in & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.177726", "id": 41774}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.972544", "id": 4462}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.109113", "id": 29207}
{"buggy_code": "module basic_372(input x, output result); assign result = x + 1; endmodule", "correct_code": "module basic_372(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.333812", "id": 70218}
{"buggy_code": "module arith_261(input data, d, output y); assign y = data & d | rst; endmodule", "correct_code": "module arith_261(input data, d, output y); assign y = (data & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.949399", "id": 260}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.071381", "id": 22347}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.319351", "id": 67601}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.318761", "id": 67494}
{"buggy_code": "module arith_131(input y, rst, output valid); assign valid = y & rst | a; endmodule", "correct_code": "module arith_131(input y, rst, output valid); assign valid = (y & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.318100", "id": 67370}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.296893", "id": 63477}
{"buggy_code": "module basic_379(input a, rst, output valid); assign valid = a & rst | rst; endmodule", "correct_code": "module basic_379(input a, rst, output valid); assign valid = (a & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.262078", "id": 57134}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.298211", "id": 63719}
{"buggy_code": "module simple_752(input b, d, output valid); assign valid = b & d | c; endmodule", "correct_code": "module simple_752(input b, d, output valid); assign valid = (b & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.191829", "id": 44308}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.990164", "id": 7615}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.176498", "id": 41546}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051227", "id": 18640}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.960120", "id": 2198}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.313451", "id": 66520}
{"buggy_code": "module test_52(input data, a, output q); assign q = data & a | y; endmodule", "correct_code": "module test_52(input data, a, output q); assign q = (data & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.345486", "id": 72317}
{"buggy_code": "module arith_960(input b, output q); assign q = b + 1; endmodule", "correct_code": "module arith_960(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.242699", "id": 53598}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210519", "id": 47727}
{"buggy_code": "module test_384(input y, output out); assign out = y + 1; endmodule", "correct_code": "module test_384(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.298451", "id": 63763}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.228357", "id": 50965}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.037755", "id": 16231}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.077023", "id": 23361}
{"buggy_code": "module basic_884(input in, rst, output q); assign q = in & rst | b; endmodule", "correct_code": "module basic_884(input in, rst, output q); assign q = (in & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.972807", "id": 4510}
{"buggy_code": "module demo_844(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module demo_844(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.050372", "id": 18486}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.191739", "id": 44293}
{"buggy_code": "module simple_210(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module simple_210(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.170234", "id": 40400}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.071428", "id": 22356}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.040715", "id": 16764}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.126651", "id": 32415}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.254241", "id": 55700}
{"buggy_code": "module basic_642(input x, clk, output result); assign result = x & clk | in; endmodule", "correct_code": "module basic_642(input x, clk, output result); assign result = (x & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.239593", "id": 53032}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.959484", "id": 2087}
{"buggy_code": "module simple_983(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module simple_983(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000087", "id": 9424}
{"buggy_code": "module demo_701(input a, output q); assign q = a + 1; endmodule", "correct_code": "module demo_701(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.028004", "id": 14466}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.349427", "id": 73037}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.079057", "id": 23724}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.241175", "id": 53320}
{"buggy_code": "module demo_419(input en, output out); assign out = en + 1; endmodule", "correct_code": "module demo_419(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.106236", "id": 28677}
{"buggy_code": "module arith_238(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module arith_238(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.143889", "id": 35562}
{"buggy_code": "module basic_925(input x, output y); assign y = x + 1; endmodule", "correct_code": "module basic_925(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.354308", "id": 73920}
{"buggy_code": "module arith_831(input b, clk, output valid); assign valid = b & clk | b; endmodule", "correct_code": "module arith_831(input b, clk, output valid); assign valid = (b & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.225310", "id": 50408}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.954175", "id": 1123}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.098348", "id": 27235}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.196174", "id": 45106}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.063439", "id": 20890}
{"buggy_code": "module example_122(input data, output result); assign result = data + 1; endmodule", "correct_code": "module example_122(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.071330", "id": 22338}
{"buggy_code": "module demo_102(input a, output out); assign out = a + 1; endmodule", "correct_code": "module demo_102(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.251250", "id": 55166}
{"buggy_code": "module logic_911(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module logic_911(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.312891", "id": 66416}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.048802", "id": 18227}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.112882", "id": 29900}
{"buggy_code": "module demo_66(input y, output out); assign out = y + 1; endmodule", "correct_code": "module demo_66(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.213441", "id": 48256}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.253338", "id": 55540}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.288069", "id": 61860}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.300286", "id": 64099}
{"buggy_code": "module demo_505(input clk, a, output result); assign result = clk & a | x; endmodule", "correct_code": "module demo_505(input clk, a, output result); assign result = (clk & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.201665", "id": 46109}
{"buggy_code": "module logic_861(input a, data, output prod); assign prod = a & data | c; endmodule", "correct_code": "module logic_861(input a, data, output prod); assign prod = (a & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.020717", "id": 13148}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.987742", "id": 7171}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.131298", "id": 33263}
{"buggy_code": "module logic_766(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module logic_766(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.304607", "id": 64897}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.180993", "id": 42374}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.121299", "id": 31433}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.251829", "id": 55266}
{"buggy_code": "module demo_25(input b, en, output result); assign result = b & en | d; endmodule", "correct_code": "module demo_25(input b, en, output result); assign result = (b & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.230764", "id": 51409}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.352884", "id": 73659}
{"buggy_code": "module arith_505(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module arith_505(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.035634", "id": 15848}
{"buggy_code": "module logic_713(input data, x, output valid); assign valid = data & x | rst; endmodule", "correct_code": "module logic_713(input data, x, output valid); assign valid = (data & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.968500", "id": 3733}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.058310", "id": 19946}
{"buggy_code": "module basic_642(input clk, y, output result); assign result = clk & y | b; endmodule", "correct_code": "module basic_642(input clk, y, output result); assign result = (clk & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.033833", "id": 15515}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.125530", "id": 32208}
{"buggy_code": "module simple_143(input y, y, output prod); assign prod = y & y | in; endmodule", "correct_code": "module simple_143(input y, y, output prod); assign prod = (y & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.118784", "id": 30984}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286895", "id": 61648}
{"buggy_code": "module arith_465(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module arith_465(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.307785", "id": 65486}
{"buggy_code": "module demo_849(input y, output y); assign y = y + 1; endmodule", "correct_code": "module demo_849(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.342757", "id": 71827}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.192060", "id": 44352}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.351359", "id": 73386}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.173388", "id": 40977}
{"buggy_code": "module logic_216(input y, data, output out); assign out = y & data | b; endmodule", "correct_code": "module logic_216(input y, data, output out); assign out = (y & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.353345", "id": 73744}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.100680", "id": 27664}
{"buggy_code": "module test_540(input y, x, output sum); assign sum = y & x | x; endmodule", "correct_code": "module test_540(input y, x, output sum); assign sum = (y & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.233249", "id": 51863}
{"buggy_code": "module logic_605(input in, output out); assign out = in + 1; endmodule", "correct_code": "module logic_605(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.088498", "id": 25440}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.199612", "id": 45732}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.081025", "id": 24086}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.146640", "id": 36071}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272991", "id": 59132}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.117482", "id": 30747}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.167093", "id": 39826}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.966473", "id": 3360}
{"buggy_code": "module demo_980(input a, output q); assign q = a + 1; endmodule", "correct_code": "module demo_980(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000357", "id": 9473}
{"buggy_code": "module basic_837(input in, in, output result); assign result = in & in | in; endmodule", "correct_code": "module basic_837(input in, in, output result); assign result = (in & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.236093", "id": 52385}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.007104", "id": 10691}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.130376", "id": 33091}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.262112", "id": 57140}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.011427", "id": 11475}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.972231", "id": 4405}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.171038", "id": 40547}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.296135", "id": 63339}
{"buggy_code": "module example_525(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module example_525(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.273780", "id": 59276}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064247", "id": 21038}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.304012", "id": 64782}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.085569", "id": 24909}
{"buggy_code": "module test_427(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module test_427(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.014105", "id": 11960}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.344820", "id": 72199}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.198920", "id": 45606}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.118384", "id": 30910}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.342405", "id": 71764}
{"buggy_code": "module logic_199(input clk, b, output valid); assign valid = clk & b | clk; endmodule", "correct_code": "module logic_199(input clk, b, output valid); assign valid = (clk & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.157752", "id": 38117}
{"buggy_code": "module basic_403(input x, data, output valid); assign valid = x & data | b; endmodule", "correct_code": "module basic_403(input x, data, output valid); assign valid = (x & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.192563", "id": 44445}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.300509", "id": 64140}
{"buggy_code": "module simple_854(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module simple_854(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.142512", "id": 35307}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.198422", "id": 45516}
{"buggy_code": "module basic_623(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module basic_623(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174713", "id": 41218}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.241165", "id": 53318}
{"buggy_code": "module basic_867(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module basic_867(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.970078", "id": 4011}
{"buggy_code": "module test_609(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module test_609(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.962177", "id": 2574}
{"buggy_code": "module simple_455(input y, d, output prod); assign prod = y & d | a; endmodule", "correct_code": "module simple_455(input y, d, output prod); assign prod = (y & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.335442", "id": 70514}
{"buggy_code": "module example_460(input x, rst, output sum); assign sum = x & rst | b; endmodule", "correct_code": "module example_460(input x, rst, output sum); assign sum = (x & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.144615", "id": 35698}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.983934", "id": 6472}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.043727", "id": 17306}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.118036", "id": 30847}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.217463", "id": 48991}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.109090", "id": 29203}
{"buggy_code": "module arith_639(input rst, x, output q); assign q = rst & x | data; endmodule", "correct_code": "module arith_639(input rst, x, output q); assign q = (rst & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.990017", "id": 7587}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.324676", "id": 68544}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.167204", "id": 39847}
{"buggy_code": "module example_266(input b, output out); assign out = b + 1; endmodule", "correct_code": "module example_266(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.234748", "id": 52140}
{"buggy_code": "module demo_435(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module demo_435(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.117984", "id": 30838}
{"buggy_code": "module arith_216(input x, b, output q); assign q = x & b | data; endmodule", "correct_code": "module arith_216(input x, b, output q); assign q = (x & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.122557", "id": 31663}
{"buggy_code": "module basic_9(input en, en, output y); assign y = en & en | b; endmodule", "correct_code": "module basic_9(input en, en, output y); assign y = (en & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.206327", "id": 46962}
{"buggy_code": "module basic_187(input a, a, output y); assign y = a & a | data; endmodule", "correct_code": "module basic_187(input a, a, output y); assign y = (a & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.331590", "id": 69810}
{"buggy_code": "module simple_459(input a, data, output prod); assign prod = a & data | c; endmodule", "correct_code": "module simple_459(input a, data, output prod); assign prod = (a & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.111868", "id": 29712}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.316398", "id": 67057}
{"buggy_code": "module demo_725(input d, in, output y); assign y = d & in | b; endmodule", "correct_code": "module demo_725(input d, in, output y); assign y = (d & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.268221", "id": 58253}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.139985", "id": 34858}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.117676", "id": 30784}
{"buggy_code": "module demo_500(input y, x, output prod); assign prod = y & x | x; endmodule", "correct_code": "module demo_500(input y, x, output prod); assign prod = (y & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.129685", "id": 32964}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.006735", "id": 10625}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.219801", "id": 49407}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.043925", "id": 17340}
{"buggy_code": "module basic_256(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module basic_256(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.951413", "id": 623}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.092492", "id": 26170}
{"buggy_code": "module example_668(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module example_668(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.079646", "id": 23834}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.287553", "id": 61769}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.278658", "id": 60140}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.300266", "id": 64095}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.121315", "id": 31436}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.288954", "id": 62025}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.257863", "id": 56363}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.273592", "id": 59242}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.222204", "id": 49842}
{"buggy_code": "module example_96(input rst, rst, output q); assign q = rst & rst | clk; endmodule", "correct_code": "module example_96(input rst, rst, output q); assign q = (rst & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.173168", "id": 40936}
{"buggy_code": "module arith_720(input y, c, output result); assign result = y & c | in; endmodule", "correct_code": "module arith_720(input y, c, output result); assign result = (y & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.305142", "id": 64994}
{"buggy_code": "module arith_885(input x, output out); assign out = x + 1; endmodule", "correct_code": "module arith_885(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.227672", "id": 50841}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.268679", "id": 58340}
{"buggy_code": "module test_824(input y, y, output y); assign y = y & y | b; endmodule", "correct_code": "module test_824(input y, y, output y); assign y = (y & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.157016", "id": 37982}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.031305", "id": 15061}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.025637", "id": 14042}
{"buggy_code": "module test_260(input d, output result); assign result = d + 1; endmodule", "correct_code": "module test_260(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.966216", "id": 3312}
{"buggy_code": "module simple_813(input in, output out); assign out = in + 1; endmodule", "correct_code": "module simple_813(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.177001", "id": 41636}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.011657", "id": 11517}
{"buggy_code": "module simple_245(input d, output result); assign result = d + 1; endmodule", "correct_code": "module simple_245(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.005707", "id": 10437}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.985461", "id": 6752}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.164938", "id": 39430}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.354801", "id": 74012}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.279120", "id": 60223}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272741", "id": 59087}
{"buggy_code": "module basic_277(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module basic_277(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.247095", "id": 54405}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.318887", "id": 67515}
{"buggy_code": "module test_876(input clk, rst, output q); assign q = clk & rst | a; endmodule", "correct_code": "module test_876(input clk, rst, output q); assign q = (clk & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.150819", "id": 36842}
{"buggy_code": "module example_150(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module example_150(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.359795", "id": 74934}
{"buggy_code": "module logic_782(input en, a, output out); assign out = en & a | rst; endmodule", "correct_code": "module logic_782(input en, a, output out); assign out = (en & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.084887", "id": 24781}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.078774", "id": 23675}
{"buggy_code": "module basic_943(input en, d, output valid); assign valid = en & d | clk; endmodule", "correct_code": "module basic_943(input en, d, output valid); assign valid = (en & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.180036", "id": 42198}
{"buggy_code": "module basic_899(input clk, in, output result); assign result = clk & in | b; endmodule", "correct_code": "module basic_899(input clk, in, output result); assign result = (clk & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.228066", "id": 50912}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.264307", "id": 57541}
{"buggy_code": "module arith_720(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module arith_720(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.126631", "id": 32411}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.287198", "id": 61702}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.082454", "id": 24343}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.327418", "id": 69046}
{"buggy_code": "module example_212(input rst, b, output valid); assign valid = rst & b | clk; endmodule", "correct_code": "module example_212(input rst, b, output valid); assign valid = (rst & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.053398", "id": 19038}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.354076", "id": 73877}
{"buggy_code": "module arith_46(input d, d, output y); assign y = d & d | en; endmodule", "correct_code": "module arith_46(input d, d, output y); assign y = (d & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.028531", "id": 14562}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.212926", "id": 48161}
{"buggy_code": "module simple_277(input clk, d, output out); assign out = clk & d | c; endmodule", "correct_code": "module simple_277(input clk, d, output out); assign out = (clk & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.322465", "id": 68138}
{"buggy_code": "module basic_123(input d, in, output out); assign out = d & in | in; endmodule", "correct_code": "module basic_123(input d, in, output out); assign out = (d & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.095589", "id": 26734}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.312741", "id": 66391}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.209961", "id": 47621}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.210238", "id": 47675}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.976472", "id": 5172}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.322848", "id": 68207}
{"buggy_code": "module demo_529(input b, rst, output y); assign y = b & rst | en; endmodule", "correct_code": "module demo_529(input b, rst, output y); assign y = (b & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.977604", "id": 5379}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.348550", "id": 72880}
{"buggy_code": "module logic_711(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module logic_711(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.269917", "id": 58566}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.060188", "id": 20293}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.152088", "id": 37075}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.221074", "id": 49633}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.196672", "id": 45198}
{"buggy_code": "module test_242(input en, output out); assign out = en + 1; endmodule", "correct_code": "module test_242(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.014578", "id": 12047}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.224448", "id": 50252}
{"buggy_code": "module arith_146(input en, data, output valid); assign valid = en & data | en; endmodule", "correct_code": "module arith_146(input en, data, output valid); assign valid = (en & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.356184", "id": 74266}
{"buggy_code": "module arith_629(input a, output y); assign y = a + 1; endmodule", "correct_code": "module arith_629(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.254926", "id": 55824}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.036430", "id": 15989}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.317891", "id": 67331}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.057079", "id": 19722}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.304017", "id": 64783}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.144747", "id": 35725}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.320634", "id": 67803}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.967927", "id": 3628}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.981511", "id": 6032}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.345583", "id": 72334}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.252131", "id": 55322}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.115145", "id": 30319}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.029474", "id": 14731}
{"buggy_code": "module demo_736(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module demo_736(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.267767", "id": 58171}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043508", "id": 17267}
{"buggy_code": "module logic_741(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module logic_741(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.321083", "id": 67884}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238413", "id": 52814}
{"buggy_code": "module basic_699(input y, clk, output prod); assign prod = y & clk | x; endmodule", "correct_code": "module basic_699(input y, clk, output prod); assign prod = (y & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.350939", "id": 73307}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.952435", "id": 812}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.994181", "id": 8349}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.098805", "id": 27320}
{"buggy_code": "module simple_891(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module simple_891(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.335219", "id": 70473}
{"buggy_code": "module example_763(input rst, rst, output prod); assign prod = rst & rst | x; endmodule", "correct_code": "module example_763(input rst, rst, output prod); assign prod = (rst & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.050595", "id": 18528}
{"buggy_code": "module simple_339(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module simple_339(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.230024", "id": 51268}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.057746", "id": 19844}
{"buggy_code": "module basic_615(input en, y, output prod); assign prod = en & y | data; endmodule", "correct_code": "module basic_615(input en, y, output prod); assign prod = (en & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.991213", "id": 7809}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.130971", "id": 33201}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.295022", "id": 63133}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.220925", "id": 49607}
{"buggy_code": "module simple_93(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module simple_93(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.172117", "id": 40746}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.954948", "id": 1261}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.149925", "id": 36674}
{"buggy_code": "module simple_456(input en, output q); assign q = en + 1; endmodule", "correct_code": "module simple_456(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.978294", "id": 5456}
{"buggy_code": "module demo_817(input a, output y); assign y = a + 1; endmodule", "correct_code": "module demo_817(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.285737", "id": 61439}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.039030", "id": 16464}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286378", "id": 61556}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.233766", "id": 51962}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.016397", "id": 12375}
{"buggy_code": "module example_307(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module example_307(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.990843", "id": 7741}
{"buggy_code": "module simple_226(input y, clk, output q); assign q = y & clk | en; endmodule", "correct_code": "module simple_226(input y, clk, output q); assign q = (y & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.006127", "id": 10511}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.281150", "id": 60599}
{"buggy_code": "module test_852(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module test_852(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.053648", "id": 19084}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.036721", "id": 16044}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.128488", "id": 32747}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.355924", "id": 74219}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.986704", "id": 6982}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.106758", "id": 28775}
{"buggy_code": "module arith_727(input clk, rst, output valid); assign valid = clk & rst | clk; endmodule", "correct_code": "module arith_727(input clk, rst, output valid); assign valid = (clk & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.966117", "id": 3294}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.107840", "id": 28972}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.095228", "id": 26668}
{"buggy_code": "module arith_443(input c, a, output sum); assign sum = c & a | en; endmodule", "correct_code": "module arith_443(input c, a, output sum); assign sum = (c & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.310400", "id": 65963}
{"buggy_code": "module basic_726(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module basic_726(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.997289", "id": 8917}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.077131", "id": 23373}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.323674", "id": 68361}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329754", "id": 69476}
{"buggy_code": "module simple_255(input a, b, output sum); assign sum = a & b | a; endmodule", "correct_code": "module simple_255(input a, b, output sum); assign sum = (a & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.120905", "id": 31359}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.077795", "id": 23496}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.128468", "id": 32743}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.987116", "id": 7057}
{"buggy_code": "module example_37(input d, en, output q); assign q = d & en | c; endmodule", "correct_code": "module example_37(input d, en, output q); assign q = (d & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.337338", "id": 70864}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.245041", "id": 54028}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.200760", "id": 45945}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.003337", "id": 10019}
{"buggy_code": "module basic_329(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module basic_329(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.231319", "id": 51510}
{"buggy_code": "module basic_857(input b, output y); assign y = b + 1; endmodule", "correct_code": "module basic_857(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.060045", "id": 20266}
{"buggy_code": "module example_183(input data, clk, output result); assign result = data & clk | data; endmodule", "correct_code": "module example_183(input data, clk, output result); assign result = (data & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.995962", "id": 8674}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.266431", "id": 57929}
{"buggy_code": "module test_519(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module test_519(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.260495", "id": 56846}
{"buggy_code": "module simple_43(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module simple_43(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.048350", "id": 18144}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.203180", "id": 46386}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008619", "id": 10964}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.072081", "id": 22475}
{"buggy_code": "module test_113(input c, output out); assign out = c + 1; endmodule", "correct_code": "module test_113(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.250685", "id": 55062}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.224406", "id": 50244}
{"buggy_code": "module test_787(input c, en, output y); assign y = c & en | in; endmodule", "correct_code": "module test_787(input c, en, output y); assign y = (c & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.136729", "id": 34257}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.197054", "id": 45266}
{"buggy_code": "module test_495(input c, a, output out); assign out = c & a | c; endmodule", "correct_code": "module test_495(input c, a, output out); assign out = (c & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.217252", "id": 48950}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.341254", "id": 71553}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.257676", "id": 56331}
{"buggy_code": "module arith_63(input data, output y); assign y = data + 1; endmodule", "correct_code": "module arith_63(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.161204", "id": 38753}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.303509", "id": 64689}
{"buggy_code": "module test_264(input c, output y); assign y = c + 1; endmodule", "correct_code": "module test_264(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.080112", "id": 23920}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.326833", "id": 68937}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.327049", "id": 68976}
{"buggy_code": "module arith_482(input d, output q); assign q = d + 1; endmodule", "correct_code": "module arith_482(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.028435", "id": 14544}
{"buggy_code": "module basic_862(input en, output out); assign out = en + 1; endmodule", "correct_code": "module basic_862(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.005643", "id": 10425}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.005060", "id": 10315}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.268496", "id": 58305}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.289482", "id": 62123}
{"buggy_code": "module arith_261(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module arith_261(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174199", "id": 41123}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.115354", "id": 30357}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.115264", "id": 30340}
{"buggy_code": "module demo_497(input en, output out); assign out = en + 1; endmodule", "correct_code": "module demo_497(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.167625", "id": 39926}
{"buggy_code": "module logic_856(input en, d, output result); assign result = en & d | d; endmodule", "correct_code": "module logic_856(input en, d, output result); assign result = (en & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.212345", "id": 48056}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.317897", "id": 67332}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.002818", "id": 9925}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.170706", "id": 40487}
{"buggy_code": "module test_531(input y, data, output y); assign y = y & data | clk; endmodule", "correct_code": "module test_531(input y, data, output y); assign y = (y & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.155478", "id": 37700}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.201118", "id": 46008}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.066738", "id": 21494}
{"buggy_code": "module simple_269(input x, x, output sum); assign sum = x & x | data; endmodule", "correct_code": "module simple_269(input x, x, output sum); assign sum = (x & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.259612", "id": 56684}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.967169", "id": 3487}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.359300", "id": 74839}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.040120", "id": 16666}
{"buggy_code": "module logic_128(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module logic_128(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.043850", "id": 17327}
{"buggy_code": "module simple_382(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module simple_382(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.300390", "id": 64118}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.214496", "id": 48448}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.257276", "id": 56257}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.220471", "id": 49526}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.308877", "id": 65684}
{"buggy_code": "module basic_751(input a, rst, output prod); assign prod = a & rst | c; endmodule", "correct_code": "module basic_751(input a, rst, output prod); assign prod = (a & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.957990", "id": 1812}
{"buggy_code": "module test_34(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module test_34(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.985974", "id": 6847}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.321233", "id": 67911}
{"buggy_code": "module test_775(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module test_775(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.116812", "id": 30624}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.096709", "id": 26936}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.190034", "id": 43976}
{"buggy_code": "module example_587(input b, y, output out); assign out = b & y | x; endmodule", "correct_code": "module example_587(input b, y, output out); assign out = (b & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.277385", "id": 59904}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.309484", "id": 65797}
{"buggy_code": "module demo_25(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module demo_25(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.044632", "id": 17473}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.061987", "id": 20624}
{"buggy_code": "module test_801(input d, a, output q); assign q = d & a | x; endmodule", "correct_code": "module test_801(input d, a, output q); assign q = (d & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.977185", "id": 5303}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.246589", "id": 54312}
{"buggy_code": "module simple_119(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module simple_119(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.229771", "id": 51223}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.041057", "id": 16825}
{"buggy_code": "module arith_586(input en, d, output sum); assign sum = en & d | rst; endmodule", "correct_code": "module arith_586(input en, d, output sum); assign sum = (en & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.145627", "id": 35887}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.987212", "id": 7075}
{"buggy_code": "module basic_968(input rst, x, output q); assign q = rst & x | in; endmodule", "correct_code": "module basic_968(input rst, x, output q); assign q = (rst & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.060707", "id": 20389}
{"buggy_code": "module test_960(input in, clk, output result); assign result = in & clk | c; endmodule", "correct_code": "module test_960(input in, clk, output result); assign result = (in & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.042366", "id": 17060}
{"buggy_code": "module test_377(input x, clk, output valid); assign valid = x & clk | y; endmodule", "correct_code": "module test_377(input x, clk, output valid); assign valid = (x & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.140280", "id": 34913}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.196909", "id": 45239}
{"buggy_code": "module simple_618(input clk, clk, output sum); assign sum = clk & clk | c; endmodule", "correct_code": "module simple_618(input clk, clk, output sum); assign sum = (clk & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.161385", "id": 38788}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.109085", "id": 29202}
{"buggy_code": "module demo_665(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module demo_665(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.097377", "id": 27057}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238992", "id": 52920}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.955297", "id": 1324}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.215962", "id": 48715}
{"buggy_code": "module simple_272(input c, b, output y); assign y = c & b | en; endmodule", "correct_code": "module simple_272(input c, b, output y); assign y = (c & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.134121", "id": 33780}
{"buggy_code": "module arith_255(input a, x, output y); assign y = a & x | b; endmodule", "correct_code": "module arith_255(input a, x, output y); assign y = (a & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.275570", "id": 59585}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.241817", "id": 53440}
{"buggy_code": "module simple_526(input en, y, output out); assign out = en & y | a; endmodule", "correct_code": "module simple_526(input en, y, output out); assign out = (en & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.962049", "id": 2550}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.217454", "id": 48989}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.308792", "id": 65671}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.099832", "id": 27506}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.156877", "id": 37958}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.136235", "id": 34165}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.202913", "id": 46334}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.230821", "id": 51420}
{"buggy_code": "module basic_390(input a, rst, output sum); assign sum = a & rst | rst; endmodule", "correct_code": "module basic_390(input a, rst, output sum); assign sum = (a & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.980047", "id": 5776}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.098073", "id": 27183}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.304255", "id": 64829}
{"buggy_code": "module example_177(input b, b, output y); assign y = b & b | a; endmodule", "correct_code": "module example_177(input b, b, output y); assign y = (b & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.213719", "id": 48306}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.336761", "id": 70758}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.139666", "id": 34802}
{"buggy_code": "module logic_761(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module logic_761(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.220941", "id": 49610}
{"buggy_code": "module simple_88(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module simple_88(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.073216", "id": 22685}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.011548", "id": 11498}
{"buggy_code": "module example_625(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module example_625(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.285129", "id": 61326}
{"buggy_code": "module basic_543(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module basic_543(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.292718", "id": 62717}
{"buggy_code": "module test_32(input y, a, output out); assign out = y & a | clk; endmodule", "correct_code": "module test_32(input y, a, output out); assign out = (y & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.134957", "id": 33932}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.198514", "id": 45533}
{"buggy_code": "module example_890(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module example_890(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.963368", "id": 2791}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.033428", "id": 15442}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.216165", "id": 48751}
{"buggy_code": "module simple_934(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module simple_934(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.161470", "id": 38804}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.111184", "id": 29587}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.203046", "id": 46360}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.985714", "id": 6800}
{"buggy_code": "module logic_733(input data, output y); assign y = data + 1; endmodule", "correct_code": "module logic_733(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.053061", "id": 18974}
{"buggy_code": "module arith_788(input en, rst, output y); assign y = en & rst | b; endmodule", "correct_code": "module arith_788(input en, rst, output y); assign y = (en & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.049129", "id": 18285}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.195885", "id": 45053}
{"buggy_code": "module test_62(input clk, rst, output out); assign out = clk & rst | x; endmodule", "correct_code": "module test_62(input clk, rst, output out); assign out = (clk & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.200941", "id": 45976}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.981138", "id": 5964}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.091005", "id": 25901}
{"buggy_code": "module simple_6(input data, c, output y); assign y = data & c | x; endmodule", "correct_code": "module simple_6(input data, c, output y); assign y = (data & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.956039", "id": 1459}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.265970", "id": 57846}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.099509", "id": 27448}
{"buggy_code": "module example_778(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module example_778(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.182970", "id": 42724}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.288877", "id": 62011}
{"buggy_code": "module basic_464(input x, y, output sum); assign sum = x & y | en; endmodule", "correct_code": "module basic_464(input x, y, output sum); assign sum = (x & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.256723", "id": 56154}
{"buggy_code": "module example_229(input rst, x, output q); assign q = rst & x | data; endmodule", "correct_code": "module example_229(input rst, x, output q); assign q = (rst & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.336751", "id": 70756}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.107521", "id": 28914}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.242912", "id": 53637}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.989932", "id": 7572}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.220037", "id": 49446}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.171246", "id": 40587}
{"buggy_code": "module test_856(input d, b, output valid); assign valid = d & b | a; endmodule", "correct_code": "module test_856(input d, b, output valid); assign valid = (d & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.000019", "id": 9411}
{"buggy_code": "module demo_162(input b, output result); assign result = b + 1; endmodule", "correct_code": "module demo_162(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.994035", "id": 8322}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051329", "id": 18660}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.092606", "id": 26190}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.037021", "id": 16096}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.055806", "id": 19488}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.152370", "id": 37128}
{"buggy_code": "module simple_65(input rst, c, output out); assign out = rst & c | clk; endmodule", "correct_code": "module simple_65(input rst, c, output out); assign out = (rst & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.035581", "id": 15838}
{"buggy_code": "module simple_54(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module simple_54(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.343800", "id": 72017}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.324691", "id": 68547}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.053373", "id": 19033}
{"buggy_code": "module logic_621(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module logic_621(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000380", "id": 9477}
{"buggy_code": "module test_861(input in, rst, output prod); assign prod = in & rst | a; endmodule", "correct_code": "module test_861(input in, rst, output prod); assign prod = (in & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.354668", "id": 73987}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.077464", "id": 23434}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.080795", "id": 24045}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.038515", "id": 16369}
{"buggy_code": "module basic_567(input d, y, output out); assign out = d & y | d; endmodule", "correct_code": "module basic_567(input d, y, output out); assign out = (d & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.297375", "id": 63565}
{"buggy_code": "module example_198(input d, x, output result); assign result = d & x | y; endmodule", "correct_code": "module example_198(input d, x, output result); assign result = (d & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.143895", "id": 35563}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272224", "id": 58990}
{"buggy_code": "module demo_639(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module demo_639(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.246279", "id": 54257}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.055251", "id": 19386}
{"buggy_code": "module logic_942(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module logic_942(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.033585", "id": 15471}
{"buggy_code": "module arith_945(input rst, rst, output sum); assign sum = rst & rst | d; endmodule", "correct_code": "module arith_945(input rst, rst, output sum); assign sum = (rst & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.355875", "id": 74210}
{"buggy_code": "module example_607(input data, x, output q); assign q = data & x | x; endmodule", "correct_code": "module example_607(input data, x, output q); assign q = (data & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.165114", "id": 39462}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.129608", "id": 32950}
{"buggy_code": "module arith_396(input b, data, output sum); assign sum = b & data | rst; endmodule", "correct_code": "module arith_396(input b, data, output sum); assign sum = (b & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.032386", "id": 15257}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.332474", "id": 69971}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.121632", "id": 31495}
{"buggy_code": "module logic_354(input in, y, output result); assign result = in & y | data; endmodule", "correct_code": "module logic_354(input in, y, output result); assign result = (in & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.055632", "id": 19456}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.318188", "id": 67387}
{"buggy_code": "module arith_699(input x, a, output sum); assign sum = x & a | b; endmodule", "correct_code": "module arith_699(input x, a, output sum); assign sum = (x & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.226969", "id": 50711}
{"buggy_code": "module arith_551(input in, c, output result); assign result = in & c | d; endmodule", "correct_code": "module arith_551(input in, c, output result); assign result = (in & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.287808", "id": 61815}
{"buggy_code": "module simple_721(input d, output q); assign q = d + 1; endmodule", "correct_code": "module simple_721(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.348498", "id": 72871}
{"buggy_code": "module demo_303(input d, output result); assign result = d + 1; endmodule", "correct_code": "module demo_303(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.172790", "id": 40868}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.146172", "id": 35986}
{"buggy_code": "module example_745(input y, clk, output sum); assign sum = y & clk | clk; endmodule", "correct_code": "module example_745(input y, clk, output sum); assign sum = (y & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.038154", "id": 16304}
{"buggy_code": "module simple_432(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module simple_432(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.182180", "id": 42582}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.300569", "id": 64151}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.022523", "id": 13476}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.084622", "id": 24732}
{"buggy_code": "module logic_388(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module logic_388(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.277578", "id": 59940}
{"buggy_code": "module arith_783(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module arith_783(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308176", "id": 65558}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.207213", "id": 47123}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.964675", "id": 3032}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.335152", "id": 70460}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.098177", "id": 27203}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205607", "id": 46830}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.206112", "id": 46922}
{"buggy_code": "module test_389(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module test_389(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.347986", "id": 72773}
{"buggy_code": "module demo_596(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module demo_596(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.318923", "id": 67522}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.310675", "id": 66014}
{"buggy_code": "module arith_35(input c, c, output sum); assign sum = c & c | in; endmodule", "correct_code": "module arith_35(input c, c, output sum); assign sum = (c & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.964237", "id": 2949}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.009462", "id": 11118}
{"buggy_code": "module test_360(input en, rst, output result); assign result = en & rst | x; endmodule", "correct_code": "module test_360(input en, rst, output result); assign result = (en & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.012219", "id": 11616}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.260336", "id": 56817}
{"buggy_code": "module demo_596(input rst, data, output q); assign q = rst & data | a; endmodule", "correct_code": "module demo_596(input rst, data, output q); assign q = (rst & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.276082", "id": 59674}
{"buggy_code": "module arith_936(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module arith_936(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.074006", "id": 22832}
{"buggy_code": "module example_724(input b, d, output result); assign result = b & d | rst; endmodule", "correct_code": "module example_724(input b, d, output result); assign result = (b & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.183204", "id": 42769}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.309137", "id": 65732}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.228842", "id": 51051}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138046", "id": 34502}
{"buggy_code": "module example_896(input in, output y); assign y = in + 1; endmodule", "correct_code": "module example_896(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.273559", "id": 59236}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.949259", "id": 235}
{"buggy_code": "module simple_144(input y, output out); assign out = y + 1; endmodule", "correct_code": "module simple_144(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.324357", "id": 68486}
{"buggy_code": "module demo_853(input y, b, output result); assign result = y & b | x; endmodule", "correct_code": "module demo_853(input y, b, output result); assign result = (y & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.139815", "id": 34829}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.110818", "id": 29521}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.321623", "id": 67985}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.236388", "id": 52438}
{"buggy_code": "module example_700(input data, output q); assign q = data + 1; endmodule", "correct_code": "module example_700(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.343255", "id": 71915}
{"buggy_code": "module example_620(input en, in, output q); assign q = en & in | en; endmodule", "correct_code": "module example_620(input en, in, output q); assign q = (en & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.357914", "id": 74585}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.333832", "id": 70220}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.359594", "id": 74896}
{"buggy_code": "module demo_535(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module demo_535(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.086952", "id": 25159}
{"buggy_code": "module basic_181(input clk, c, output valid); assign valid = clk & c | in; endmodule", "correct_code": "module basic_181(input clk, c, output valid); assign valid = (clk & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.102330", "id": 27967}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.034896", "id": 15709}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.118650", "id": 30959}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.976024", "id": 5091}
{"buggy_code": "module demo_79(input in, rst, output prod); assign prod = in & rst | data; endmodule", "correct_code": "module demo_79(input in, rst, output prod); assign prod = (in & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.136934", "id": 34293}
{"buggy_code": "module logic_842(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module logic_842(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.021465", "id": 13283}
{"buggy_code": "module test_664(input c, output out); assign out = c + 1; endmodule", "correct_code": "module test_664(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.060455", "id": 20341}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.012751", "id": 11713}
{"buggy_code": "module logic_231(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module logic_231(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.135414", "id": 34016}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.283598", "id": 61048}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.258998", "id": 56571}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.343941", "id": 72042}
{"buggy_code": "module demo_166(input a, x, output sum); assign sum = a & x | d; endmodule", "correct_code": "module demo_166(input a, x, output sum); assign sum = (a & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.998930", "id": 9212}
{"buggy_code": "module test_766(input clk, en, output out); assign out = clk & en | in; endmodule", "correct_code": "module test_766(input clk, en, output out); assign out = (clk & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.960389", "id": 2248}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.136119", "id": 34145}
{"buggy_code": "module demo_352(input b, output q); assign q = b + 1; endmodule", "correct_code": "module demo_352(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.026657", "id": 14225}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.258351", "id": 56454}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.978298", "id": 5457}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.140814", "id": 35013}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.174631", "id": 41202}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.288792", "id": 61996}
{"buggy_code": "module simple_218(input a, output y); assign y = a + 1; endmodule", "correct_code": "module simple_218(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.107336", "id": 28879}
{"buggy_code": "module basic_893(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module basic_893(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.211777", "id": 47956}
{"buggy_code": "module basic_548(input y, in, output out); assign out = y & in | x; endmodule", "correct_code": "module basic_548(input y, in, output out); assign out = (y & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.185707", "id": 43227}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.260477", "id": 56843}
{"buggy_code": "module logic_7(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module logic_7(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.151188", "id": 36908}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.116882", "id": 30633}
{"buggy_code": "module basic_236(input y, a, output prod); assign prod = y & a | c; endmodule", "correct_code": "module basic_236(input y, a, output prod); assign prod = (y & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.038379", "id": 16344}
{"buggy_code": "module test_896(input rst, en, output result); assign result = rst & en | y; endmodule", "correct_code": "module test_896(input rst, en, output result); assign result = (rst & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.313972", "id": 66611}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.221374", "id": 49690}
{"buggy_code": "module example_60(input data, a, output prod); assign prod = data & a | in; endmodule", "correct_code": "module example_60(input data, a, output prod); assign prod = (data & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.144838", "id": 35740}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.299401", "id": 63938}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205952", "id": 46892}
{"buggy_code": "module test_940(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module test_940(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.983756", "id": 6441}
{"buggy_code": "module arith_970(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module arith_970(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.245375", "id": 54092}
{"buggy_code": "module test_951(input clk, b, output result); assign result = clk & b | clk; endmodule", "correct_code": "module test_951(input clk, b, output result); assign result = (clk & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.136475", "id": 34210}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.023489", "id": 13651}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.206694", "id": 47029}
{"buggy_code": "module demo_419(input c, c, output prod); assign prod = c & c | data; endmodule", "correct_code": "module demo_419(input c, c, output prod); assign prod = (c & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.949775", "id": 330}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.134534", "id": 33856}
{"buggy_code": "module example_998(input data, output out); assign out = data + 1; endmodule", "correct_code": "module example_998(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.005108", "id": 10325}
{"buggy_code": "module logic_769(input data, in, output prod); assign prod = data & in | rst; endmodule", "correct_code": "module logic_769(input data, in, output prod); assign prod = (data & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.185215", "id": 43137}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.960872", "id": 2337}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.126362", "id": 32361}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.280242", "id": 60430}
{"buggy_code": "module logic_271(input a, rst, output sum); assign sum = a & rst | y; endmodule", "correct_code": "module logic_271(input a, rst, output sum); assign sum = (a & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.340377", "id": 71395}
{"buggy_code": "module logic_102(input clk, en, output sum); assign sum = clk & en | d; endmodule", "correct_code": "module logic_102(input clk, en, output sum); assign sum = (clk & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.124952", "id": 32100}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.314129", "id": 66642}
{"buggy_code": "module simple_542(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module simple_542(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.092529", "id": 26177}
{"buggy_code": "module example_16(input clk, c, output prod); assign prod = clk & c | x; endmodule", "correct_code": "module example_16(input clk, c, output prod); assign prod = (clk & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.160756", "id": 38672}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.295997", "id": 63314}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.107500", "id": 28910}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.084765", "id": 24760}
{"buggy_code": "module example_251(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module example_251(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000991", "id": 9587}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112460", "id": 29823}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.110591", "id": 29479}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.214680", "id": 48481}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179108", "id": 42028}
{"buggy_code": "module arith_571(input b, x, output sum); assign sum = b & x | d; endmodule", "correct_code": "module arith_571(input b, x, output sum); assign sum = (b & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.294413", "id": 63023}
{"buggy_code": "module arith_748(input en, in, output prod); assign prod = en & in | a; endmodule", "correct_code": "module arith_748(input en, in, output prod); assign prod = (en & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.133321", "id": 33631}
{"buggy_code": "module basic_525(input a, x, output q); assign q = a & x | rst; endmodule", "correct_code": "module basic_525(input a, x, output q); assign q = (a & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.016039", "id": 12309}
{"buggy_code": "module test_612(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module test_612(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.999743", "id": 9362}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.310700", "id": 66019}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.173546", "id": 41007}
{"buggy_code": "module simple_633(input d, a, output prod); assign prod = d & a | rst; endmodule", "correct_code": "module simple_633(input d, a, output prod); assign prod = (d & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.991725", "id": 7903}
{"buggy_code": "module simple_656(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module simple_656(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.243502", "id": 53745}
{"buggy_code": "module basic_372(input x, b, output q); assign q = x & b | rst; endmodule", "correct_code": "module basic_372(input x, b, output q); assign q = (x & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.240457", "id": 53186}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.100068", "id": 27550}
{"buggy_code": "module simple_53(input y, output result); assign result = y + 1; endmodule", "correct_code": "module simple_53(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.138014", "id": 34496}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.039816", "id": 16610}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.140867", "id": 35021}
{"buggy_code": "module simple_132(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module simple_132(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.211746", "id": 47950}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.952405", "id": 806}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.005365", "id": 10372}
{"buggy_code": "module arith_100(input rst, a, output result); assign result = rst & a | y; endmodule", "correct_code": "module arith_100(input rst, a, output result); assign result = (rst & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.005178", "id": 10338}
{"buggy_code": "module basic_913(input b, b, output sum); assign sum = b & b | y; endmodule", "correct_code": "module basic_913(input b, b, output sum); assign sum = (b & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.292543", "id": 62685}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.221049", "id": 49629}
{"buggy_code": "module basic_761(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module basic_761(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.031952", "id": 15179}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.236644", "id": 52487}
{"buggy_code": "module demo_446(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module demo_446(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.046886", "id": 17878}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.121952", "id": 31552}
{"buggy_code": "module basic_447(input a, output result); assign result = a + 1; endmodule", "correct_code": "module basic_447(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.101903", "id": 27888}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.107968", "id": 28995}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.234595", "id": 52113}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.143944", "id": 35572}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.006667", "id": 10612}
{"buggy_code": "module logic_33(input in, output q); assign q = in + 1; endmodule", "correct_code": "module logic_33(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.304260", "id": 64830}
{"buggy_code": "module arith_914(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module arith_914(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.994995", "id": 8498}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.019241", "id": 12881}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.164558", "id": 39363}
{"buggy_code": "module basic_907(input en, output y); assign y = en + 1; endmodule", "correct_code": "module basic_907(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.974993", "id": 4905}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.228555", "id": 51001}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.104266", "id": 28317}
{"buggy_code": "module simple_644(input c, output y); assign y = c + 1; endmodule", "correct_code": "module simple_644(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.348008", "id": 72777}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.073907", "id": 22814}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.254962", "id": 55831}
{"buggy_code": "module simple_355(input x, output out); assign out = x + 1; endmodule", "correct_code": "module simple_355(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.263754", "id": 57440}
{"buggy_code": "module basic_315(input b, x, output out); assign out = b & x | a; endmodule", "correct_code": "module basic_315(input b, x, output out); assign out = (b & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.193847", "id": 44678}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.197506", "id": 45349}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.177037", "id": 41643}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.332765", "id": 70024}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.236227", "id": 52408}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.255088", "id": 55854}
{"buggy_code": "module demo_576(input en, output result); assign result = en + 1; endmodule", "correct_code": "module demo_576(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.250441", "id": 55017}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.117014", "id": 30657}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.302748", "id": 64550}
{"buggy_code": "module simple_705(input data, a, output y); assign y = data & a | rst; endmodule", "correct_code": "module simple_705(input data, a, output y); assign y = (data & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.062273", "id": 20676}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.066904", "id": 21523}
{"buggy_code": "module test_617(input in, output out); assign out = in + 1; endmodule", "correct_code": "module test_617(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.265308", "id": 57724}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.236067", "id": 52380}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.070612", "id": 22206}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.094533", "id": 26541}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.086109", "id": 25006}
{"buggy_code": "module simple_648(input a, output result); assign result = a + 1; endmodule", "correct_code": "module simple_648(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.188203", "id": 43680}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.952007", "id": 731}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.151713", "id": 37004}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.947902", "id": 1}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.350596", "id": 73248}
{"buggy_code": "module basic_256(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module basic_256(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.978395", "id": 5474}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.267551", "id": 58132}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.026361", "id": 14171}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.263833", "id": 57453}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.079739", "id": 23852}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.062794", "id": 20772}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.964281", "id": 2957}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.036619", "id": 16025}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.332365", "id": 69952}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.020103", "id": 13036}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.031784", "id": 15150}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.201780", "id": 46130}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.950128", "id": 392}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.273103", "id": 59152}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.224489", "id": 50260}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.153713", "id": 37378}
{"buggy_code": "module test_488(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module test_488(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.083284", "id": 24492}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.192802", "id": 44488}
{"buggy_code": "module simple_961(input d, output out); assign out = d + 1; endmodule", "correct_code": "module simple_961(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.160417", "id": 38610}
{"buggy_code": "module demo_497(input d, clk, output y); assign y = d & clk | rst; endmodule", "correct_code": "module demo_497(input d, clk, output y); assign y = (d & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.205473", "id": 46805}
{"buggy_code": "module example_368(input c, clk, output prod); assign prod = c & clk | c; endmodule", "correct_code": "module example_368(input c, clk, output prod); assign prod = (c & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.126698", "id": 32424}
{"buggy_code": "module basic_75(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module basic_75(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.227170", "id": 50747}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.295449", "id": 63213}
{"buggy_code": "module logic_21(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module logic_21(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.269973", "id": 58576}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.262245", "id": 57165}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.193852", "id": 44679}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.108513", "id": 29098}
{"buggy_code": "module example_111(input clk, y, output y); assign y = clk & y | c; endmodule", "correct_code": "module example_111(input clk, y, output y); assign y = (clk & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.177803", "id": 41789}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.246630", "id": 54320}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.235450", "id": 52269}
{"buggy_code": "module arith_244(input y, x, output prod); assign prod = y & x | b; endmodule", "correct_code": "module arith_244(input y, x, output prod); assign prod = (y & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.332065", "id": 69895}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.081571", "id": 24186}
{"buggy_code": "module logic_638(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module logic_638(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.165753", "id": 39579}
{"buggy_code": "module simple_43(input data, output out); assign out = data + 1; endmodule", "correct_code": "module simple_43(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.231945", "id": 51622}
{"buggy_code": "module example_72(input c, a, output result); assign result = c & a | d; endmodule", "correct_code": "module example_72(input c, a, output result); assign result = (c & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.242526", "id": 53566}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.063552", "id": 20910}
{"buggy_code": "module demo_429(input rst, en, output sum); assign sum = rst & en | clk; endmodule", "correct_code": "module demo_429(input rst, en, output sum); assign sum = (rst & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.289110", "id": 62053}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.336928", "id": 70787}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.147863", "id": 36291}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.061564", "id": 20547}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.275147", "id": 59504}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.983311", "id": 6360}
{"buggy_code": "module example_87(input b, d, output y); assign y = b & d | clk; endmodule", "correct_code": "module example_87(input b, d, output y); assign y = (b & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.264226", "id": 57525}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.962058", "id": 2552}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.187968", "id": 43636}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.002523", "id": 9871}
{"buggy_code": "module arith_477(input y, output result); assign result = y + 1; endmodule", "correct_code": "module arith_477(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.322782", "id": 68196}
{"buggy_code": "module demo_729(input en, x, output result); assign result = en & x | b; endmodule", "correct_code": "module demo_729(input en, x, output result); assign result = (en & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.996450", "id": 8764}
{"buggy_code": "module arith_792(input en, y, output out); assign out = en & y | y; endmodule", "correct_code": "module arith_792(input en, y, output out); assign out = (en & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.115256", "id": 30339}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.956698", "id": 1579}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.315709", "id": 66931}
{"buggy_code": "module test_308(input a, output y); assign y = a + 1; endmodule", "correct_code": "module test_308(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.093811", "id": 26409}
{"buggy_code": "module example_970(input x, output y); assign y = x + 1; endmodule", "correct_code": "module example_970(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.028759", "id": 14601}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.954113", "id": 1111}
{"buggy_code": "module simple_35(input data, output out); assign out = data + 1; endmodule", "correct_code": "module simple_35(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.128675", "id": 32781}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.359970", "id": 74964}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.136093", "id": 34140}
{"buggy_code": "module logic_854(input c, a, output valid); assign valid = c & a | y; endmodule", "correct_code": "module logic_854(input c, a, output valid); assign valid = (c & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.961334", "id": 2423}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.126240", "id": 32337}
{"buggy_code": "module demo_57(input c, output y); assign y = c + 1; endmodule", "correct_code": "module demo_57(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.227067", "id": 50730}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.009963", "id": 11209}
{"buggy_code": "module simple_895(input a, y, output out); assign out = a & y | in; endmodule", "correct_code": "module simple_895(input a, y, output out); assign out = (a & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.987737", "id": 7170}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.018239", "id": 12711}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.297264", "id": 63544}
{"buggy_code": "module test_271(input c, in, output valid); assign valid = c & in | a; endmodule", "correct_code": "module test_271(input c, in, output valid); assign valid = (c & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.355434", "id": 74130}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.067943", "id": 21712}
{"buggy_code": "module example_463(input in, output result); assign result = in + 1; endmodule", "correct_code": "module example_463(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.301180", "id": 64261}
{"buggy_code": "module test_370(input data, output out); assign out = data + 1; endmodule", "correct_code": "module test_370(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.108336", "id": 29064}
{"buggy_code": "module example_888(input c, rst, output valid); assign valid = c & rst | rst; endmodule", "correct_code": "module example_888(input c, rst, output valid); assign valid = (c & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.163862", "id": 39236}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.150392", "id": 36761}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192815", "id": 44491}
{"buggy_code": "module simple_436(input a, en, output y); assign y = a & en | en; endmodule", "correct_code": "module simple_436(input a, en, output y); assign y = (a & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.981024", "id": 5943}
{"buggy_code": "module basic_379(input b, rst, output valid); assign valid = b & rst | c; endmodule", "correct_code": "module basic_379(input b, rst, output valid); assign valid = (b & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.321048", "id": 67878}
{"buggy_code": "module test_601(input clk, b, output out); assign out = clk & b | a; endmodule", "correct_code": "module test_601(input clk, b, output out); assign out = (clk & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.088515", "id": 25443}
{"buggy_code": "module demo_139(input x, output q); assign q = x + 1; endmodule", "correct_code": "module demo_139(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.131251", "id": 33254}
{"buggy_code": "module simple_510(input c, c, output q); assign q = c & c | rst; endmodule", "correct_code": "module simple_510(input c, c, output q); assign q = (c & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.286283", "id": 61539}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.071486", "id": 22366}
{"buggy_code": "module test_136(input y, output y); assign y = y + 1; endmodule", "correct_code": "module test_136(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.081613", "id": 24194}
{"buggy_code": "module basic_916(input b, clk, output q); assign q = b & clk | y; endmodule", "correct_code": "module basic_916(input b, clk, output q); assign q = (b & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.081181", "id": 24114}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.288391", "id": 61921}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.271163", "id": 58793}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.337343", "id": 70865}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.151289", "id": 36927}
{"buggy_code": "module arith_800(input d, data, output sum); assign sum = d & data | data; endmodule", "correct_code": "module arith_800(input d, data, output sum); assign sum = (d & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.029324", "id": 14703}
{"buggy_code": "module arith_376(input x, c, output valid); assign valid = x & c | b; endmodule", "correct_code": "module arith_376(input x, c, output valid); assign valid = (x & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.223080", "id": 50003}
{"buggy_code": "module example_696(input in, x, output sum); assign sum = in & x | x; endmodule", "correct_code": "module example_696(input in, x, output sum); assign sum = (in & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.336726", "id": 70752}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.213279", "id": 48227}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.268019", "id": 58217}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.027424", "id": 14360}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.159810", "id": 38499}
{"buggy_code": "module arith_293(input a, c, output sum); assign sum = a & c | y; endmodule", "correct_code": "module arith_293(input a, c, output sum); assign sum = (a & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.281877", "id": 60732}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.169366", "id": 40241}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.346732", "id": 72546}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.088483", "id": 25437}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.226254", "id": 50583}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.985293", "id": 6721}
{"buggy_code": "module demo_436(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module demo_436(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.213100", "id": 48193}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.164799", "id": 39407}
{"buggy_code": "module logic_37(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module logic_37(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.045263", "id": 17585}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.281134", "id": 60596}
{"buggy_code": "module simple_59(input en, output y); assign y = en + 1; endmodule", "correct_code": "module simple_59(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.080363", "id": 23966}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.971492", "id": 4271}
{"buggy_code": "module arith_598(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module arith_598(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.160010", "id": 38535}
{"buggy_code": "module example_71(input data, b, output y); assign y = data & b | in; endmodule", "correct_code": "module example_71(input data, b, output y); assign y = (data & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.260597", "id": 56863}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.295331", "id": 63190}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.354457", "id": 73947}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.180517", "id": 42288}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.114779", "id": 30252}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.150989", "id": 36871}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.087898", "id": 25329}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.288550", "id": 61951}
{"buggy_code": "module basic_328(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module basic_328(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.036065", "id": 15923}
{"buggy_code": "module example_545(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module example_545(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.241155", "id": 53316}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.193705", "id": 44655}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.284716", "id": 61253}
{"buggy_code": "module demo_477(input x, output y); assign y = x + 1; endmodule", "correct_code": "module demo_477(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.157500", "id": 38071}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.253941", "id": 55644}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.248627", "id": 54686}
{"buggy_code": "module example_612(input y, a, output sum); assign sum = y & a | in; endmodule", "correct_code": "module example_612(input y, a, output sum); assign sum = (y & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.336227", "id": 70659}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.989503", "id": 7493}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.353095", "id": 73697}
{"buggy_code": "module arith_303(input in, c, output out); assign out = in & c | b; endmodule", "correct_code": "module arith_303(input in, c, output out); assign out = (in & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.133017", "id": 33575}
{"buggy_code": "module demo_46(input data, output out); assign out = data + 1; endmodule", "correct_code": "module demo_46(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.097020", "id": 26992}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.330170", "id": 69551}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.228157", "id": 50928}
{"buggy_code": "module test_833(input data, output result); assign result = data + 1; endmodule", "correct_code": "module test_833(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.336856", "id": 70775}
{"buggy_code": "module simple_117(input a, b, output prod); assign prod = a & b | clk; endmodule", "correct_code": "module simple_117(input a, b, output prod); assign prod = (a & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.358548", "id": 74702}
{"buggy_code": "module logic_144(input x, x, output valid); assign valid = x & x | b; endmodule", "correct_code": "module logic_144(input x, x, output valid); assign valid = (x & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.147555", "id": 36234}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138546", "id": 34595}
{"buggy_code": "module arith_783(input in, output y); assign y = in + 1; endmodule", "correct_code": "module arith_783(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.165277", "id": 39493}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.958251", "id": 1860}
{"buggy_code": "module example_419(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module example_419(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.993544", "id": 8233}
{"buggy_code": "module test_608(input c, output result); assign result = c + 1; endmodule", "correct_code": "module test_608(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.131324", "id": 33267}
{"buggy_code": "module arith_470(input x, clk, output out); assign out = x & clk | clk; endmodule", "correct_code": "module arith_470(input x, clk, output out); assign out = (x & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.297314", "id": 63553}
{"buggy_code": "module test_679(input data, output q); assign q = data + 1; endmodule", "correct_code": "module test_679(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.129222", "id": 32880}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.955356", "id": 1336}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.182897", "id": 42710}
{"buggy_code": "module example_972(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module example_972(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.132935", "id": 33559}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.162568", "id": 39003}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.990659", "id": 7708}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.027534", "id": 14381}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.278258", "id": 60066}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.148963", "id": 36496}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.961474", "id": 2450}
{"buggy_code": "module simple_343(input in, output result); assign result = in + 1; endmodule", "correct_code": "module simple_343(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.280468", "id": 60473}
{"buggy_code": "module example_617(input a, output y); assign y = a + 1; endmodule", "correct_code": "module example_617(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.075454", "id": 23101}
{"buggy_code": "module basic_880(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module basic_880(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.105943", "id": 28623}
{"buggy_code": "module simple_73(input in, output y); assign y = in + 1; endmodule", "correct_code": "module simple_73(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.239688", "id": 53050}
{"buggy_code": "module arith_491(input d, d, output out); assign out = d & d | clk; endmodule", "correct_code": "module arith_491(input d, d, output out); assign out = (d & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.195778", "id": 45035}
{"buggy_code": "module logic_135(input clk, a, output prod); assign prod = clk & a | data; endmodule", "correct_code": "module logic_135(input clk, a, output prod); assign prod = (clk & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.067332", "id": 21602}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.057159", "id": 19737}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.285969", "id": 61480}
{"buggy_code": "module basic_1(input data, output out); assign out = data + 1; endmodule", "correct_code": "module basic_1(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.145389", "id": 35845}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.247661", "id": 54509}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.123933", "id": 31915}
{"buggy_code": "module demo_555(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module demo_555(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.235944", "id": 52358}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.980417", "id": 5846}
{"buggy_code": "module demo_829(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module demo_829(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.249847", "id": 54908}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.037240", "id": 16137}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.044848", "id": 17511}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.205638", "id": 46836}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.347276", "id": 72645}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.169963", "id": 40349}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.029454", "id": 14727}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.076215", "id": 23239}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.174181", "id": 41120}
{"buggy_code": "module test_38(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module test_38(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.016434", "id": 12382}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.050700", "id": 18546}
{"buggy_code": "module basic_126(input a, in, output q); assign q = a & in | rst; endmodule", "correct_code": "module basic_126(input a, in, output q); assign q = (a & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.296601", "id": 63425}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.278600", "id": 60130}
{"buggy_code": "module demo_303(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module demo_303(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.280494", "id": 60478}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.092976", "id": 26256}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.252912", "id": 55463}
{"buggy_code": "module basic_733(input a, y, output out); assign out = a & y | rst; endmodule", "correct_code": "module basic_733(input a, y, output out); assign out = (a & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.299193", "id": 63898}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.157200", "id": 38016}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.074205", "id": 22870}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.240205", "id": 53142}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.132468", "id": 33475}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.348336", "id": 72840}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.191681", "id": 44282}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.295654", "id": 63252}
{"buggy_code": "module demo_727(input rst, in, output valid); assign valid = rst & in | in; endmodule", "correct_code": "module demo_727(input rst, in, output valid); assign valid = (rst & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.288762", "id": 61990}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.251795", "id": 55261}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.989684", "id": 7527}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.955439", "id": 1352}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.228426", "id": 50978}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.975476", "id": 4992}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.307542", "id": 65440}
{"buggy_code": "module example_619(input en, data, output out); assign out = en & data | in; endmodule", "correct_code": "module example_619(input en, data, output out); assign out = (en & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.342255", "id": 71737}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.187070", "id": 43471}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.191019", "id": 44155}
{"buggy_code": "module test_441(input y, a, output prod); assign prod = y & a | b; endmodule", "correct_code": "module test_441(input y, a, output prod); assign prod = (y & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.133774", "id": 33716}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.210038", "id": 47636}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.034332", "id": 15607}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.048210", "id": 18119}
{"buggy_code": "module basic_427(input d, output q); assign q = d + 1; endmodule", "correct_code": "module basic_427(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.265314", "id": 57725}
{"buggy_code": "module test_785(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module test_785(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.257485", "id": 56297}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.214419", "id": 48435}
{"buggy_code": "module demo_954(input a, output q); assign q = a + 1; endmodule", "correct_code": "module demo_954(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.190722", "id": 44103}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.032719", "id": 15315}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.113665", "id": 30046}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.268598", "id": 58324}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.223429", "id": 50068}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.020244", "id": 13062}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.179718", "id": 42140}
{"buggy_code": "module logic_820(input in, output result); assign result = in + 1; endmodule", "correct_code": "module logic_820(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.236195", "id": 52402}
{"buggy_code": "module demo_716(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module demo_716(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.297134", "id": 63520}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.332483", "id": 69973}
{"buggy_code": "module example_588(input rst, x, output q); assign q = rst & x | x; endmodule", "correct_code": "module example_588(input rst, x, output q); assign q = (rst & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.197501", "id": 45348}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.177060", "id": 41648}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.042132", "id": 17017}
{"buggy_code": "module demo_605(input d, output result); assign result = d + 1; endmodule", "correct_code": "module demo_605(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.330466", "id": 69607}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.324283", "id": 68473}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.179221", "id": 42050}
{"buggy_code": "module logic_594(input x, y, output sum); assign sum = x & y | x; endmodule", "correct_code": "module logic_594(input x, y, output sum); assign sum = (x & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.244763", "id": 53979}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.009741", "id": 11170}
{"buggy_code": "module basic_95(input in, en, output out); assign out = in & en | d; endmodule", "correct_code": "module basic_95(input in, en, output out); assign out = (in & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.991006", "id": 7770}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.061089", "id": 20457}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.311052", "id": 66084}
{"buggy_code": "module test_505(input in, output out); assign out = in + 1; endmodule", "correct_code": "module test_505(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.949254", "id": 234}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.135341", "id": 34002}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.121248", "id": 31423}
{"buggy_code": "module logic_225(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module logic_225(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.359262", "id": 74832}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.111253", "id": 29601}
{"buggy_code": "module simple_193(input rst, en, output q); assign q = rst & en | d; endmodule", "correct_code": "module simple_193(input rst, en, output q); assign q = (rst & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.193398", "id": 44597}
{"buggy_code": "module test_439(input c, en, output valid); assign valid = c & en | a; endmodule", "correct_code": "module test_439(input c, en, output valid); assign valid = (c & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.288046", "id": 61856}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.302282", "id": 64464}
{"buggy_code": "module demo_518(input d, a, output result); assign result = d & a | clk; endmodule", "correct_code": "module demo_518(input d, a, output result); assign result = (d & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.253612", "id": 55588}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.359398", "id": 74858}
{"buggy_code": "module logic_671(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module logic_671(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.171748", "id": 40678}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.191079", "id": 44166}
{"buggy_code": "module arith_81(input en, rst, output sum); assign sum = en & rst | clk; endmodule", "correct_code": "module arith_81(input en, rst, output sum); assign sum = (en & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.057657", "id": 19828}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.974011", "id": 4725}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.004397", "id": 10195}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.328152", "id": 69178}
{"buggy_code": "module logic_458(input b, d, output sum); assign sum = b & d | in; endmodule", "correct_code": "module logic_458(input b, d, output sum); assign sum = (b & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.982095", "id": 6136}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.058789", "id": 20035}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.200713", "id": 45936}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.058614", "id": 20002}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.275121", "id": 59499}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.285876", "id": 61462}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272885", "id": 59112}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.149009", "id": 36505}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.987497", "id": 7126}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.036462", "id": 15996}
{"buggy_code": "module arith_658(input b, en, output sum); assign sum = b & en | in; endmodule", "correct_code": "module arith_658(input b, en, output sum); assign sum = (b & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.139883", "id": 34840}
{"buggy_code": "module simple_19(input a, d, output y); assign y = a & d | data; endmodule", "correct_code": "module simple_19(input a, d, output y); assign y = (a & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.097111", "id": 27009}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.259413", "id": 56648}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.079041", "id": 23721}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.345438", "id": 72308}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.221741", "id": 49759}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.005203", "id": 10343}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.177323", "id": 41699}
{"buggy_code": "module basic_518(input rst, a, output sum); assign sum = rst & a | in; endmodule", "correct_code": "module basic_518(input rst, a, output sum); assign sum = (rst & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.191014", "id": 44154}
{"buggy_code": "module test_213(input c, y, output valid); assign valid = c & y | data; endmodule", "correct_code": "module test_213(input c, y, output valid); assign valid = (c & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.223212", "id": 50026}
{"buggy_code": "module test_57(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module test_57(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091513", "id": 25996}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.254258", "id": 55703}
{"buggy_code": "module logic_892(input y, c, output sum); assign sum = y & c | d; endmodule", "correct_code": "module logic_892(input y, c, output sum); assign sum = (y & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.126997", "id": 32477}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.224474", "id": 50257}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.983434", "id": 6382}
{"buggy_code": "module logic_485(input y, output y); assign y = y + 1; endmodule", "correct_code": "module logic_485(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.085612", "id": 24917}
{"buggy_code": "module demo_546(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module demo_546(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.259744", "id": 56709}
{"buggy_code": "module test_880(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module test_880(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.095808", "id": 26775}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.043175", "id": 17207}
{"buggy_code": "module simple_54(input x, in, output q); assign q = x & in | x; endmodule", "correct_code": "module simple_54(input x, in, output q); assign q = (x & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.988874", "id": 7375}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.290720", "id": 62349}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.990054", "id": 7594}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.268952", "id": 58387}
{"buggy_code": "module arith_600(input d, clk, output sum); assign sum = d & clk | data; endmodule", "correct_code": "module arith_600(input d, clk, output sum); assign sum = (d & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.102146", "id": 27931}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.114967", "id": 30285}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.206536", "id": 46999}
{"buggy_code": "module example_84(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module example_84(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.132612", "id": 33501}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.192198", "id": 44377}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.290765", "id": 62358}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.047924", "id": 18066}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.187328", "id": 43519}
{"buggy_code": "module basic_666(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module basic_666(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.951154", "id": 574}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.300067", "id": 64056}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.230560", "id": 51371}
{"buggy_code": "module example_423(input in, x, output y); assign y = in & x | in; endmodule", "correct_code": "module example_423(input in, x, output y); assign y = (in & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.250812", "id": 55086}
{"buggy_code": "module simple_425(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module simple_425(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.311282", "id": 66126}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.086379", "id": 25056}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.213563", "id": 48279}
{"buggy_code": "module example_610(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module example_610(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.074431", "id": 22911}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.995356", "id": 8563}
{"buggy_code": "module demo_182(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module demo_182(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.274966", "id": 59471}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.973176", "id": 4576}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.025652", "id": 14045}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.268869", "id": 58372}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.337528", "id": 70898}
{"buggy_code": "module test_821(input y, output q); assign q = y + 1; endmodule", "correct_code": "module test_821(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.046215", "id": 17756}
{"buggy_code": "module demo_500(input y, output result); assign result = y + 1; endmodule", "correct_code": "module demo_500(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.090085", "id": 25732}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.239053", "id": 52931}
{"buggy_code": "module basic_545(input b, x, output sum); assign sum = b & x | in; endmodule", "correct_code": "module basic_545(input b, x, output sum); assign sum = (b & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.333610", "id": 70182}
{"buggy_code": "module simple_694(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module simple_694(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.328277", "id": 69201}
{"buggy_code": "module basic_806(input clk, en, output out); assign out = clk & en | clk; endmodule", "correct_code": "module basic_806(input clk, en, output out); assign out = (clk & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.018976", "id": 12845}
{"buggy_code": "module test_151(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module test_151(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.034706", "id": 15674}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.130264", "id": 33071}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.028582", "id": 14570}
{"buggy_code": "module test_854(input c, en, output sum); assign sum = c & en | en; endmodule", "correct_code": "module test_854(input c, en, output sum); assign sum = (c & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.955076", "id": 1284}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.313525", "id": 66533}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.020641", "id": 13134}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.229080", "id": 51095}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.213792", "id": 48318}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.027477", "id": 14370}
{"buggy_code": "module test_268(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module test_268(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.357960", "id": 74593}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.059950", "id": 20248}
{"buggy_code": "module basic_332(input y, y, output prod); assign prod = y & y | en; endmodule", "correct_code": "module basic_332(input y, y, output prod); assign prod = (y & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.090769", "id": 25859}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.116729", "id": 30608}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.264465", "id": 57571}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.274191", "id": 59350}
{"buggy_code": "module basic_473(input clk, en, output y); assign y = clk & en | data; endmodule", "correct_code": "module basic_473(input clk, en, output y); assign y = (clk & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.086368", "id": 25054}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.339480", "id": 71237}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.262954", "id": 57293}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.282183", "id": 60789}
{"buggy_code": "module demo_169(input in, y, output result); assign result = in & y | data; endmodule", "correct_code": "module demo_169(input in, y, output result); assign result = (in & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.333497", "id": 70161}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.024145", "id": 13769}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.077211", "id": 23387}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.000275", "id": 9458}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.046449", "id": 17799}
{"buggy_code": "module basic_987(input data, in, output y); assign y = data & in | rst; endmodule", "correct_code": "module basic_987(input data, in, output y); assign y = (data & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.324777", "id": 68563}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.987481", "id": 7123}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.181472", "id": 42461}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.290869", "id": 62376}
{"buggy_code": "module demo_180(input clk, data, output q); assign q = clk & data | clk; endmodule", "correct_code": "module demo_180(input clk, data, output q); assign q = (clk & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.246182", "id": 54240}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.953215", "id": 951}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.344466", "id": 72138}
{"buggy_code": "module basic_942(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module basic_942(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.189197", "id": 43861}
{"buggy_code": "module arith_390(input a, in, output out); assign out = a & in | y; endmodule", "correct_code": "module arith_390(input a, in, output out); assign out = (a & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.995861", "id": 8655}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.204202", "id": 46573}
{"buggy_code": "module logic_861(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module logic_861(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.298231", "id": 63723}
{"buggy_code": "module arith_491(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module arith_491(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.236050", "id": 52377}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.339418", "id": 71225}
{"buggy_code": "module demo_227(input a, output q); assign q = a + 1; endmodule", "correct_code": "module demo_227(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.144509", "id": 35679}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.083729", "id": 24574}
{"buggy_code": "module basic_257(input en, output out); assign out = en + 1; endmodule", "correct_code": "module basic_257(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.160309", "id": 38590}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.315571", "id": 66906}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.174561", "id": 41189}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287522", "id": 61763}
{"buggy_code": "module demo_659(input data, data, output y); assign y = data & data | a; endmodule", "correct_code": "module demo_659(input data, data, output y); assign y = (data & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.291279", "id": 62456}
{"buggy_code": "module test_336(input data, rst, output valid); assign valid = data & rst | y; endmodule", "correct_code": "module test_336(input data, rst, output valid); assign valid = (data & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.179438", "id": 42091}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.284083", "id": 61136}
{"buggy_code": "module demo_65(input rst, a, output out); assign out = rst & a | in; endmodule", "correct_code": "module demo_65(input rst, a, output out); assign out = (rst & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116029", "id": 30478}
{"buggy_code": "module demo_460(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module demo_460(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.994737", "id": 8453}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.136293", "id": 34177}
{"buggy_code": "module arith_862(input c, in, output sum); assign sum = c & in | in; endmodule", "correct_code": "module arith_862(input c, in, output sum); assign sum = (c & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.959622", "id": 2112}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.195496", "id": 44983}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.251871", "id": 55274}
{"buggy_code": "module basic_110(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module basic_110(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.223245", "id": 50032}
{"buggy_code": "module arith_826(input c, in, output q); assign q = c & in | b; endmodule", "correct_code": "module arith_826(input c, in, output q); assign q = (c & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.040599", "id": 16743}
{"buggy_code": "module logic_276(input c, output out); assign out = c + 1; endmodule", "correct_code": "module logic_276(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.950309", "id": 426}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.304992", "id": 64966}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.155274", "id": 37663}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.281198", "id": 60608}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.246673", "id": 54328}
{"buggy_code": "module arith_628(input clk, x, output out); assign out = clk & x | c; endmodule", "correct_code": "module arith_628(input clk, x, output out); assign out = (clk & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.051101", "id": 18617}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.125668", "id": 32233}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.050402", "id": 18492}
{"buggy_code": "module logic_94(input y, x, output valid); assign valid = y & x | en; endmodule", "correct_code": "module logic_94(input y, x, output valid); assign valid = (y & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.209947", "id": 47618}
{"buggy_code": "module demo_453(input en, b, output prod); assign prod = en & b | d; endmodule", "correct_code": "module demo_453(input en, b, output prod); assign prod = (en & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.185978", "id": 43273}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.292898", "id": 62748}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.214279", "id": 48408}
{"buggy_code": "module simple_10(input rst, c, output out); assign out = rst & c | b; endmodule", "correct_code": "module simple_10(input rst, c, output out); assign out = (rst & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.183469", "id": 42818}
{"buggy_code": "module demo_174(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module demo_174(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000506", "id": 9499}
{"buggy_code": "module simple_357(input x, clk, output q); assign q = x & clk | d; endmodule", "correct_code": "module simple_357(input x, clk, output q); assign q = (x & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.035889", "id": 15891}
{"buggy_code": "module basic_494(input b, in, output q); assign q = b & in | en; endmodule", "correct_code": "module basic_494(input b, in, output q); assign q = (b & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.948699", "id": 138}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.259202", "id": 56609}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.316263", "id": 67032}
{"buggy_code": "module example_271(input rst, rst, output out); assign out = rst & rst | in; endmodule", "correct_code": "module example_271(input rst, rst, output out); assign out = (rst & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.028515", "id": 14559}
{"buggy_code": "module example_577(input en, output out); assign out = en + 1; endmodule", "correct_code": "module example_577(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.343885", "id": 72031}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.066809", "id": 21507}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.230351", "id": 51331}
{"buggy_code": "module demo_667(input clk, in, output valid); assign valid = clk & in | d; endmodule", "correct_code": "module demo_667(input clk, in, output valid); assign valid = (clk & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.155866", "id": 37770}
{"buggy_code": "module example_55(input rst, x, output result); assign result = rst & x | a; endmodule", "correct_code": "module example_55(input rst, x, output result); assign result = (rst & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.130800", "id": 33171}
{"buggy_code": "module demo_398(input en, output out); assign out = en + 1; endmodule", "correct_code": "module demo_398(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.258948", "id": 56562}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.105840", "id": 28604}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.315503", "id": 66893}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182382", "id": 42619}
{"buggy_code": "module logic_803(input y, a, output result); assign result = y & a | en; endmodule", "correct_code": "module logic_803(input y, a, output result); assign result = (y & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.986573", "id": 6957}
{"buggy_code": "module example_743(input x, b, output sum); assign sum = x & b | clk; endmodule", "correct_code": "module example_743(input x, b, output sum); assign sum = (x & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.236677", "id": 52493}
{"buggy_code": "module test_700(input y, x, output out); assign out = y & x | in; endmodule", "correct_code": "module test_700(input y, x, output out); assign out = (y & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.044135", "id": 17380}
{"buggy_code": "module simple_586(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module simple_586(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.038364", "id": 16341}
{"buggy_code": "module test_94(input clk, in, output out); assign out = clk & in | x; endmodule", "correct_code": "module test_94(input clk, in, output out); assign out = (clk & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.057377", "id": 19777}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.338037", "id": 70990}
{"buggy_code": "module simple_355(input rst, y, output out); assign out = rst & y | data; endmodule", "correct_code": "module simple_355(input rst, y, output out); assign out = (rst & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.311879", "id": 66234}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.121437", "id": 31459}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.245510", "id": 54117}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.216480", "id": 48808}
{"buggy_code": "module example_369(input en, output q); assign q = en + 1; endmodule", "correct_code": "module example_369(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.994308", "id": 8373}
{"buggy_code": "module test_507(input rst, in, output sum); assign sum = rst & in | c; endmodule", "correct_code": "module test_507(input rst, in, output sum); assign sum = (rst & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.052393", "id": 18855}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.011753", "id": 11534}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.991744", "id": 7907}
{"buggy_code": "module basic_978(input in, en, output prod); assign prod = in & en | clk; endmodule", "correct_code": "module basic_978(input in, en, output prod); assign prod = (in & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.195091", "id": 44908}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.959791", "id": 2142}
{"buggy_code": "module simple_659(input d, en, output y); assign y = d & en | en; endmodule", "correct_code": "module simple_659(input d, en, output y); assign y = (d & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.098237", "id": 27214}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.150889", "id": 36853}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.338381", "id": 71055}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.206632", "id": 47017}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.086667", "id": 25108}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.109641", "id": 29305}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.113186", "id": 29957}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.237962", "id": 52730}
{"buggy_code": "module test_196(input in, a, output y); assign y = in & a | clk; endmodule", "correct_code": "module test_196(input in, a, output y); assign y = (in & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.232922", "id": 51802}
{"buggy_code": "module logic_734(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module logic_734(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.186550", "id": 43381}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.342416", "id": 71766}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.263732", "id": 57436}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.963372", "id": 2792}
{"buggy_code": "module arith_911(input en, clk, output q); assign q = en & clk | in; endmodule", "correct_code": "module arith_911(input en, clk, output q); assign q = (en & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.347879", "id": 72753}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.225754", "id": 50490}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.250290", "id": 54988}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.322682", "id": 68178}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.170164", "id": 40387}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.000670", "id": 9530}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.238427", "id": 52817}
{"buggy_code": "module arith_456(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module arith_456(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.998459", "id": 9129}
{"buggy_code": "module test_426(input clk, b, output y); assign y = clk & b | x; endmodule", "correct_code": "module test_426(input clk, b, output y); assign y = (clk & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.299658", "id": 63985}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.036163", "id": 15941}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.051796", "id": 18746}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.263530", "id": 57398}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.308839", "id": 65677}
{"buggy_code": "module simple_274(input in, in, output out); assign out = in & in | y; endmodule", "correct_code": "module simple_274(input in, in, output out); assign out = (in & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.115886", "id": 30452}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.141890", "id": 35190}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.133233", "id": 33615}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.084945", "id": 24791}
{"buggy_code": "module demo_40(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module demo_40(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.225392", "id": 50424}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.206904", "id": 47067}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.325539", "id": 68699}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.192027", "id": 44346}
{"buggy_code": "module simple_627(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module simple_627(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.960622", "id": 2292}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.140568", "id": 34967}
{"buggy_code": "module basic_654(input clk, data, output result); assign result = clk & data | y; endmodule", "correct_code": "module basic_654(input clk, data, output result); assign result = (clk & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.975414", "id": 4981}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.083362", "id": 24508}
{"buggy_code": "module demo_738(input clk, x, output q); assign q = clk & x | d; endmodule", "correct_code": "module demo_738(input clk, x, output q); assign q = (clk & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.145917", "id": 35940}
{"buggy_code": "module basic_990(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module basic_990(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.022250", "id": 13426}
{"buggy_code": "module logic_91(input b, a, output y); assign y = b & a | b; endmodule", "correct_code": "module logic_91(input b, a, output y); assign y = (b & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.082758", "id": 24400}
{"buggy_code": "module example_319(input rst, a, output prod); assign prod = rst & a | clk; endmodule", "correct_code": "module example_319(input rst, a, output prod); assign prod = (rst & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.032730", "id": 15317}
{"buggy_code": "module arith_541(input data, output out); assign out = data + 1; endmodule", "correct_code": "module arith_541(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.952377", "id": 800}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.073756", "id": 22788}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.079535", "id": 23814}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.173270", "id": 40955}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.126447", "id": 32377}
{"buggy_code": "module test_733(input en, clk, output y); assign y = en & clk | c; endmodule", "correct_code": "module test_733(input en, clk, output y); assign y = (en & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.159051", "id": 38356}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.092102", "id": 26101}
{"buggy_code": "module test_532(input d, output y); assign y = d + 1; endmodule", "correct_code": "module test_532(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.165952", "id": 39614}
{"buggy_code": "module demo_360(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module demo_360(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.035488", "id": 15821}
{"buggy_code": "module demo_479(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module demo_479(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.164110", "id": 39282}
{"buggy_code": "module logic_530(input in, c, output out); assign out = in & c | d; endmodule", "correct_code": "module logic_530(input in, c, output out); assign out = (in & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.293422", "id": 62844}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.108781", "id": 29148}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.095510", "id": 26719}
{"buggy_code": "module arith_651(input x, output out); assign out = x + 1; endmodule", "correct_code": "module arith_651(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.178483", "id": 41912}
{"buggy_code": "module logic_874(input x, output q); assign q = x + 1; endmodule", "correct_code": "module logic_874(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.062790", "id": 20771}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.019767", "id": 12976}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.206014", "id": 46904}
{"buggy_code": "module test_6(input y, data, output valid); assign valid = y & data | c; endmodule", "correct_code": "module test_6(input y, data, output valid); assign valid = (y & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.309654", "id": 65828}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.013155", "id": 11784}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205217", "id": 46758}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.191258", "id": 44200}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.291765", "id": 62542}
{"buggy_code": "module example_797(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module example_797(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.965645", "id": 3210}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.987689", "id": 7161}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.196937", "id": 45245}
{"buggy_code": "module logic_642(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module logic_642(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.227355", "id": 50781}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.019688", "id": 12961}
{"buggy_code": "module example_146(input en, b, output out); assign out = en & b | a; endmodule", "correct_code": "module example_146(input en, b, output out); assign out = (en & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.204573", "id": 46641}
{"buggy_code": "module simple_138(input en, output q); assign q = en + 1; endmodule", "correct_code": "module simple_138(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.327545", "id": 69070}
{"buggy_code": "module logic_227(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module logic_227(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.994793", "id": 8463}
{"buggy_code": "module test_534(input a, y, output y); assign y = a & y | en; endmodule", "correct_code": "module test_534(input a, y, output y); assign y = (a & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.320765", "id": 67828}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.117019", "id": 30658}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051974", "id": 18778}
{"buggy_code": "module simple_21(input d, y, output q); assign q = d & y | a; endmodule", "correct_code": "module simple_21(input d, y, output q); assign q = (d & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.089510", "id": 25625}
{"buggy_code": "module simple_411(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module simple_411(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.277563", "id": 59937}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.336168", "id": 70648}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.121459", "id": 31463}
{"buggy_code": "module basic_292(input in, rst, output q); assign q = in & rst | a; endmodule", "correct_code": "module basic_292(input in, rst, output q); assign q = (in & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.192587", "id": 44449}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.074559", "id": 22936}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.151835", "id": 37026}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.087903", "id": 25330}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.131569", "id": 33315}
{"buggy_code": "module arith_683(input data, clk, output result); assign result = data & clk | data; endmodule", "correct_code": "module arith_683(input data, clk, output result); assign result = (data & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.196389", "id": 45145}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.257733", "id": 56341}
{"buggy_code": "module simple_768(input d, clk, output y); assign y = d & clk | in; endmodule", "correct_code": "module simple_768(input d, clk, output y); assign y = (d & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.096811", "id": 26955}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.074613", "id": 22945}
{"buggy_code": "module arith_909(input data, in, output result); assign result = data & in | x; endmodule", "correct_code": "module arith_909(input data, in, output result); assign result = (data & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.170274", "id": 40407}
{"buggy_code": "module simple_64(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module simple_64(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.336432", "id": 70696}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.084077", "id": 24633}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.134420", "id": 33835}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.242308", "id": 53526}
{"buggy_code": "module test_413(input data, x, output result); assign result = data & x | rst; endmodule", "correct_code": "module test_413(input data, x, output result); assign result = (data & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.175287", "id": 41322}
{"buggy_code": "module example_942(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module example_942(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.104053", "id": 28278}
{"buggy_code": "module basic_86(input in, x, output q); assign q = in & x | in; endmodule", "correct_code": "module basic_86(input in, x, output q); assign q = (in & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.027933", "id": 14453}
{"buggy_code": "module logic_323(input rst, y, output valid); assign valid = rst & y | b; endmodule", "correct_code": "module logic_323(input rst, y, output valid); assign valid = (rst & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.215491", "id": 48628}
{"buggy_code": "module arith_937(input c, output y); assign y = c + 1; endmodule", "correct_code": "module arith_937(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.054796", "id": 19300}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.234362", "id": 52069}
{"buggy_code": "module logic_653(input in, data, output y); assign y = in & data | in; endmodule", "correct_code": "module logic_653(input in, data, output y); assign y = (in & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.276547", "id": 59755}
{"buggy_code": "module demo_487(input rst, a, output valid); assign valid = rst & a | rst; endmodule", "correct_code": "module demo_487(input rst, a, output valid); assign valid = (rst & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.231129", "id": 51477}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.969455", "id": 3900}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.268633", "id": 58331}
{"buggy_code": "module arith_726(input en, rst, output result); assign result = en & rst | b; endmodule", "correct_code": "module arith_726(input en, rst, output result); assign result = (en & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.953916", "id": 1075}
{"buggy_code": "module logic_628(input d, output q); assign q = d + 1; endmodule", "correct_code": "module logic_628(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.222513", "id": 49897}
{"buggy_code": "module arith_171(input in, output result); assign result = in + 1; endmodule", "correct_code": "module arith_171(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.229695", "id": 51208}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.999850", "id": 9379}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.220009", "id": 49441}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.082180", "id": 24294}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.077362", "id": 23415}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.252653", "id": 55417}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.323018", "id": 68240}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.153072", "id": 37258}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.292531", "id": 62683}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.078961", "id": 23707}
{"buggy_code": "module test_966(input a, output y); assign y = a + 1; endmodule", "correct_code": "module test_966(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.258020", "id": 56392}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.109476", "id": 29274}
{"buggy_code": "module simple_287(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module simple_287(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.081170", "id": 24112}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.956491", "id": 1541}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.289313", "id": 62091}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.201309", "id": 46044}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.056228", "id": 19563}
{"buggy_code": "module demo_697(input d, b, output out); assign out = d & b | c; endmodule", "correct_code": "module demo_697(input d, b, output out); assign out = (d & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.148516", "id": 36413}
{"buggy_code": "module basic_710(input clk, en, output sum); assign sum = clk & en | b; endmodule", "correct_code": "module basic_710(input clk, en, output sum); assign sum = (clk & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.315421", "id": 66877}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.353507", "id": 73776}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.168288", "id": 40047}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.062588", "id": 20734}
{"buggy_code": "module demo_181(input y, data, output q); assign q = y & data | y; endmodule", "correct_code": "module demo_181(input y, data, output q); assign q = (y & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.167843", "id": 39965}
{"buggy_code": "module logic_488(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module logic_488(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.234663", "id": 52124}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.215779", "id": 48684}
{"buggy_code": "module logic_984(input d, output y); assign y = d + 1; endmodule", "correct_code": "module logic_984(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.002093", "id": 9791}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.142590", "id": 35322}
{"buggy_code": "module logic_555(input data, output result); assign result = data + 1; endmodule", "correct_code": "module logic_555(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.229924", "id": 51249}
{"buggy_code": "module test_348(input b, x, output prod); assign prod = b & x | x; endmodule", "correct_code": "module test_348(input b, x, output prod); assign prod = (b & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.337812", "id": 70950}
{"buggy_code": "module arith_674(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module arith_674(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.062410", "id": 20702}
{"buggy_code": "module arith_726(input en, output q); assign q = en + 1; endmodule", "correct_code": "module arith_726(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091147", "id": 25929}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.235979", "id": 52365}
{"buggy_code": "module example_835(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module example_835(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.301214", "id": 64267}
{"buggy_code": "module basic_450(input x, a, output valid); assign valid = x & a | in; endmodule", "correct_code": "module basic_450(input x, a, output valid); assign valid = (x & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.981468", "id": 6024}
{"buggy_code": "module arith_983(input clk, a, output sum); assign sum = clk & a | y; endmodule", "correct_code": "module arith_983(input clk, a, output sum); assign sum = (clk & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.055852", "id": 19495}
{"buggy_code": "module basic_208(input clk, y, output sum); assign sum = clk & y | in; endmodule", "correct_code": "module basic_208(input clk, y, output sum); assign sum = (clk & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.240463", "id": 53187}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.044052", "id": 17366}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.328328", "id": 69210}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.053631", "id": 19081}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.986001", "id": 6852}
{"buggy_code": "module example_864(input in, rst, output q); assign q = in & rst | x; endmodule", "correct_code": "module example_864(input in, rst, output q); assign q = (in & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.141472", "id": 35114}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.999075", "id": 9240}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.023022", "id": 13566}
{"buggy_code": "module arith_61(input clk, rst, output q); assign q = clk & rst | clk; endmodule", "correct_code": "module arith_61(input clk, rst, output q); assign q = (clk & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.981750", "id": 6076}
{"buggy_code": "module test_366(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module test_366(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.231473", "id": 51539}
{"buggy_code": "module arith_98(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module arith_98(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.083041", "id": 24449}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.311681", "id": 66199}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.284364", "id": 61188}
{"buggy_code": "module test_153(input data, output result); assign result = data + 1; endmodule", "correct_code": "module test_153(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.060840", "id": 20411}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.191146", "id": 44179}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.180050", "id": 42201}
{"buggy_code": "module arith_54(input a, output result); assign result = a + 1; endmodule", "correct_code": "module arith_54(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.158047", "id": 38171}
{"buggy_code": "module test_655(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module test_655(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.340598", "id": 71437}
{"buggy_code": "module arith_489(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module arith_489(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.259574", "id": 56677}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.021409", "id": 13272}
{"buggy_code": "module demo_951(input en, b, output y); assign y = en & b | clk; endmodule", "correct_code": "module demo_951(input en, b, output y); assign y = (en & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.042270", "id": 17042}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.236407", "id": 52442}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.325064", "id": 68614}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.222723", "id": 49936}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.241618", "id": 53404}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.168445", "id": 40077}
{"buggy_code": "module example_665(input y, b, output valid); assign valid = y & b | en; endmodule", "correct_code": "module example_665(input y, b, output valid); assign valid = (y & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.078706", "id": 23662}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.058326", "id": 19949}
{"buggy_code": "module logic_785(input clk, rst, output q); assign q = clk & rst | clk; endmodule", "correct_code": "module logic_785(input clk, rst, output q); assign q = (clk & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.286710", "id": 61616}
{"buggy_code": "module demo_535(input in, output result); assign result = in + 1; endmodule", "correct_code": "module demo_535(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.223753", "id": 50129}
{"buggy_code": "module demo_534(input en, clk, output q); assign q = en & clk | b; endmodule", "correct_code": "module demo_534(input en, clk, output q); assign q = (en & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.131434", "id": 33289}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.246805", "id": 54353}
{"buggy_code": "module test_83(input y, y, output y); assign y = y & y | c; endmodule", "correct_code": "module test_83(input y, y, output y); assign y = (y & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.291436", "id": 62483}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.125494", "id": 32201}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.294979", "id": 63125}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.996950", "id": 8854}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.237587", "id": 52662}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.125734", "id": 32246}
{"buggy_code": "module demo_453(input d, d, output valid); assign valid = d & d | b; endmodule", "correct_code": "module demo_453(input d, d, output valid); assign valid = (d & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.220168", "id": 49469}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.285441", "id": 61383}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.974693", "id": 4850}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.327596", "id": 69079}
{"buggy_code": "module demo_936(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module demo_936(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.324656", "id": 68540}
{"buggy_code": "module basic_810(input x, y, output prod); assign prod = x & y | data; endmodule", "correct_code": "module basic_810(input x, y, output prod); assign prod = (x & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.288560", "id": 61953}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.082079", "id": 24275}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.192943", "id": 44513}
{"buggy_code": "module example_865(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module example_865(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.988597", "id": 7326}
{"buggy_code": "module example_764(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module example_764(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.047630", "id": 18014}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.030263", "id": 14874}
{"buggy_code": "module demo_140(input c, output y); assign y = c + 1; endmodule", "correct_code": "module demo_140(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.037976", "id": 16270}
{"buggy_code": "module logic_447(input clk, x, output sum); assign sum = clk & x | in; endmodule", "correct_code": "module logic_447(input clk, x, output sum); assign sum = (clk & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.349061", "id": 72969}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.091884", "id": 26061}
{"buggy_code": "module demo_980(input c, a, output sum); assign sum = c & a | a; endmodule", "correct_code": "module demo_980(input c, a, output sum); assign sum = (c & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.078902", "id": 23697}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.312462", "id": 66340}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.194792", "id": 44856}
{"buggy_code": "module arith_337(input y, c, output y); assign y = y & c | d; endmodule", "correct_code": "module arith_337(input y, c, output y); assign y = (y & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.050971", "id": 18594}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.346180", "id": 72442}
{"buggy_code": "module arith_954(input clk, d, output valid); assign valid = clk & d | en; endmodule", "correct_code": "module arith_954(input clk, d, output valid); assign valid = (clk & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.260764", "id": 56896}
{"buggy_code": "module arith_356(input d, output result); assign result = d + 1; endmodule", "correct_code": "module arith_356(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.042846", "id": 17147}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.030114", "id": 14846}
{"buggy_code": "module basic_154(input a, y, output sum); assign sum = a & y | clk; endmodule", "correct_code": "module basic_154(input a, y, output sum); assign sum = (a & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.234039", "id": 52010}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.000416", "id": 9483}
{"buggy_code": "module test_846(input x, y, output y); assign y = x & y | b; endmodule", "correct_code": "module test_846(input x, y, output y); assign y = (x & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.357000", "id": 74416}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.181390", "id": 42445}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.136388", "id": 34194}
{"buggy_code": "module example_914(input b, a, output y); assign y = b & a | a; endmodule", "correct_code": "module example_914(input b, a, output y); assign y = (b & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.949595", "id": 296}
{"buggy_code": "module logic_744(input x, d, output result); assign result = x & d | a; endmodule", "correct_code": "module logic_744(input x, d, output result); assign result = (x & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.993502", "id": 8226}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117237", "id": 30700}
{"buggy_code": "module logic_714(input c, b, output valid); assign valid = c & b | in; endmodule", "correct_code": "module logic_714(input c, b, output valid); assign valid = (c & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.961609", "id": 2475}
{"buggy_code": "module test_980(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module test_980(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.121567", "id": 31483}
{"buggy_code": "module basic_916(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module basic_916(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.057025", "id": 19712}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.074870", "id": 22993}
{"buggy_code": "module logic_196(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module logic_196(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.982665", "id": 6242}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.251589", "id": 55227}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.187542", "id": 43560}
{"buggy_code": "module simple_460(input en, output q); assign q = en + 1; endmodule", "correct_code": "module simple_460(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.267658", "id": 58151}
{"buggy_code": "module example_734(input y, c, output sum); assign sum = y & c | rst; endmodule", "correct_code": "module example_734(input y, c, output sum); assign sum = (y & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.235882", "id": 52347}
{"buggy_code": "module demo_84(input d, c, output result); assign result = d & c | y; endmodule", "correct_code": "module demo_84(input d, c, output result); assign result = (d & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.289326", "id": 62093}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.229162", "id": 51110}
{"buggy_code": "module demo_568(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module demo_568(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.173855", "id": 41062}
{"buggy_code": "module basic_156(input in, clk, output valid); assign valid = in & clk | b; endmodule", "correct_code": "module basic_156(input in, clk, output valid); assign valid = (in & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.286574", "id": 61590}
{"buggy_code": "module example_147(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module example_147(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.137706", "id": 34440}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.072624", "id": 22576}
{"buggy_code": "module arith_145(input x, output y); assign y = x + 1; endmodule", "correct_code": "module arith_145(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.015115", "id": 12141}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.098052", "id": 27179}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.048180", "id": 18113}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.157872", "id": 38138}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.070439", "id": 22173}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.331690", "id": 69828}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.198481", "id": 45527}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.257014", "id": 56207}
{"buggy_code": "module test_674(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module test_674(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.070402", "id": 22167}
{"buggy_code": "module test_339(input c, in, output y); assign y = c & in | in; endmodule", "correct_code": "module test_339(input c, in, output y); assign y = (c & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.059417", "id": 20151}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.099028", "id": 27359}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.342214", "id": 71730}
{"buggy_code": "module demo_653(input c, d, output sum); assign sum = c & d | y; endmodule", "correct_code": "module demo_653(input c, d, output sum); assign sum = (c & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.306725", "id": 65286}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.121511", "id": 31472}
{"buggy_code": "module demo_96(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module demo_96(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.157356", "id": 38045}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.958119", "id": 1834}
{"buggy_code": "module test_242(input en, en, output q); assign q = en & en | b; endmodule", "correct_code": "module test_242(input en, en, output q); assign q = (en & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.954411", "id": 1167}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287081", "id": 61682}
{"buggy_code": "module logic_390(input in, output out); assign out = in + 1; endmodule", "correct_code": "module logic_390(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.056427", "id": 19602}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.112088", "id": 29753}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.959314", "id": 2055}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.344714", "id": 72180}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.101499", "id": 27814}
{"buggy_code": "module logic_976(input b, output y); assign y = b + 1; endmodule", "correct_code": "module logic_976(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.036697", "id": 16039}
{"buggy_code": "module example_186(input a, clk, output out); assign out = a & clk | data; endmodule", "correct_code": "module example_186(input a, clk, output out); assign out = (a & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.287166", "id": 61696}
{"buggy_code": "module test_583(input d, b, output sum); assign sum = d & b | in; endmodule", "correct_code": "module test_583(input d, b, output sum); assign sum = (d & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.241347", "id": 53352}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.081730", "id": 24216}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.956719", "id": 1583}
{"buggy_code": "module arith_546(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module arith_546(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.110509", "id": 29464}
{"buggy_code": "module simple_305(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module simple_305(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.257343", "id": 56270}
{"buggy_code": "module demo_939(input rst, data, output q); assign q = rst & data | c; endmodule", "correct_code": "module demo_939(input rst, data, output q); assign q = (rst & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.013090", "id": 11772}
{"buggy_code": "module logic_846(input en, output result); assign result = en + 1; endmodule", "correct_code": "module logic_846(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.278197", "id": 60054}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.339934", "id": 71316}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.294791", "id": 63092}
{"buggy_code": "module arith_369(input a, d, output q); assign q = a & d | rst; endmodule", "correct_code": "module arith_369(input a, d, output q); assign q = (a & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.303279", "id": 64645}
{"buggy_code": "module simple_26(input a, d, output prod); assign prod = a & d | clk; endmodule", "correct_code": "module simple_26(input a, d, output prod); assign prod = (a & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.043561", "id": 17276}
{"buggy_code": "module simple_608(input en, clk, output prod); assign prod = en & clk | x; endmodule", "correct_code": "module simple_608(input en, clk, output prod); assign prod = (en & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.125017", "id": 32113}
{"buggy_code": "module example_359(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module example_359(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.040191", "id": 16678}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.142756", "id": 35354}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.106434", "id": 28715}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.123944", "id": 31917}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.171482", "id": 40629}
{"buggy_code": "module logic_684(input y, output y); assign y = y + 1; endmodule", "correct_code": "module logic_684(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.134515", "id": 33852}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.136718", "id": 34255}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.258226", "id": 56431}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.062357", "id": 20692}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.975326", "id": 4964}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.090696", "id": 25846}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.065815", "id": 21328}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.997267", "id": 8913}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.191377", "id": 44223}
{"buggy_code": "module logic_596(input d, c, output valid); assign valid = d & c | en; endmodule", "correct_code": "module logic_596(input d, c, output valid); assign valid = (d & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.350713", "id": 73269}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.105694", "id": 28578}
{"buggy_code": "module test_719(input en, output result); assign result = en + 1; endmodule", "correct_code": "module test_719(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.357965", "id": 74594}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.079412", "id": 23791}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.342602", "id": 71799}
{"buggy_code": "module basic_276(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module basic_276(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.294465", "id": 63033}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.990117", "id": 7606}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.207166", "id": 47115}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.976163", "id": 5115}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.006689", "id": 10616}
{"buggy_code": "module test_517(input en, data, output q); assign q = en & data | data; endmodule", "correct_code": "module test_517(input en, data, output q); assign q = (en & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.254423", "id": 55734}
{"buggy_code": "module demo_809(input y, data, output q); assign q = y & data | b; endmodule", "correct_code": "module demo_809(input y, data, output q); assign q = (y & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.157529", "id": 38076}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.342308", "id": 71746}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.067679", "id": 21664}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.990645", "id": 7705}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.109341", "id": 29249}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.958425", "id": 1893}
{"buggy_code": "module example_366(input rst, y, output result); assign result = rst & y | data; endmodule", "correct_code": "module example_366(input rst, y, output result); assign result = (rst & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.050900", "id": 18581}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.091587", "id": 26010}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.258878", "id": 56549}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.100256", "id": 27586}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.226413", "id": 50613}
{"buggy_code": "module test_512(input rst, c, output prod); assign prod = rst & c | c; endmodule", "correct_code": "module test_512(input rst, c, output prod); assign prod = (rst & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.967588", "id": 3565}
{"buggy_code": "module arith_353(input b, output q); assign q = b + 1; endmodule", "correct_code": "module arith_353(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.343360", "id": 71935}
{"buggy_code": "module logic_128(input x, x, output prod); assign prod = x & x | data; endmodule", "correct_code": "module logic_128(input x, x, output prod); assign prod = (x & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.215803", "id": 48688}
{"buggy_code": "module arith_737(input in, b, output valid); assign valid = in & b | a; endmodule", "correct_code": "module arith_737(input in, b, output valid); assign valid = (in & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.205336", "id": 46779}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.276813", "id": 59802}
{"buggy_code": "module logic_67(input x, a, output sum); assign sum = x & a | en; endmodule", "correct_code": "module logic_67(input x, a, output sum); assign sum = (x & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.089157", "id": 25560}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.029469", "id": 14730}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.115831", "id": 30442}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.355014", "id": 74051}
{"buggy_code": "module test_13(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module test_13(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.330245", "id": 69565}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.108854", "id": 29161}
{"buggy_code": "module basic_426(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module basic_426(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.203056", "id": 46362}
{"buggy_code": "module logic_788(input clk, in, output sum); assign sum = clk & in | en; endmodule", "correct_code": "module logic_788(input clk, in, output sum); assign sum = (clk & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.345743", "id": 72363}
{"buggy_code": "module simple_150(input clk, in, output result); assign result = clk & in | rst; endmodule", "correct_code": "module simple_150(input clk, in, output result); assign result = (clk & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.329728", "id": 69471}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.300669", "id": 64169}
{"buggy_code": "module arith_722(input b, data, output out); assign out = b & data | data; endmodule", "correct_code": "module arith_722(input b, data, output out); assign out = (b & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.278361", "id": 60085}
{"buggy_code": "module logic_848(input d, output y); assign y = d + 1; endmodule", "correct_code": "module logic_848(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.357315", "id": 74476}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.315909", "id": 66966}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.047055", "id": 17908}
{"buggy_code": "module demo_299(input c, d, output prod); assign prod = c & d | a; endmodule", "correct_code": "module demo_299(input c, d, output prod); assign prod = (c & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.971116", "id": 4201}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.156108", "id": 37815}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.129108", "id": 32858}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.997952", "id": 9037}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.207518", "id": 47179}
{"buggy_code": "module logic_969(input clk, b, output prod); assign prod = clk & b | in; endmodule", "correct_code": "module logic_969(input clk, b, output prod); assign prod = (clk & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.172290", "id": 40779}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.344809", "id": 72197}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.228227", "id": 50941}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.038032", "id": 16281}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.957887", "id": 1793}
{"buggy_code": "module simple_346(input in, clk, output sum); assign sum = in & clk | y; endmodule", "correct_code": "module simple_346(input in, clk, output sum); assign sum = (in & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.347337", "id": 72656}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.325181", "id": 68636}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.289980", "id": 62213}
{"buggy_code": "module arith_961(input c, output y); assign y = c + 1; endmodule", "correct_code": "module arith_961(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.141502", "id": 35119}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.983589", "id": 6411}
{"buggy_code": "module logic_432(input b, b, output result); assign result = b & b | c; endmodule", "correct_code": "module logic_432(input b, b, output result); assign result = (b & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.121404", "id": 31453}
{"buggy_code": "module logic_555(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module logic_555(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.349578", "id": 73064}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.149263", "id": 36553}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.053950", "id": 19140}
{"buggy_code": "module basic_66(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module basic_66(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.989794", "id": 7548}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.026083", "id": 14123}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.249359", "id": 54818}
{"buggy_code": "module demo_992(input clk, b, output sum); assign sum = clk & b | en; endmodule", "correct_code": "module demo_992(input clk, b, output sum); assign sum = (clk & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.246153", "id": 54235}
{"buggy_code": "module example_649(input data, y, output out); assign out = data & y | clk; endmodule", "correct_code": "module example_649(input data, y, output out); assign out = (data & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.273032", "id": 59140}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.168532", "id": 40092}
{"buggy_code": "module demo_790(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module demo_790(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.039143", "id": 16485}
{"buggy_code": "module test_641(input in, output y); assign y = in + 1; endmodule", "correct_code": "module test_641(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.033783", "id": 15508}
{"buggy_code": "module test_912(input x, d, output q); assign q = x & d | en; endmodule", "correct_code": "module test_912(input x, d, output q); assign q = (x & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.155089", "id": 37628}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.018592", "id": 12775}
{"buggy_code": "module simple_462(input rst, d, output sum); assign sum = rst & d | d; endmodule", "correct_code": "module simple_462(input rst, d, output sum); assign sum = (rst & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.057962", "id": 19883}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.128985", "id": 32835}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.155643", "id": 37730}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232728", "id": 51767}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.054700", "id": 19281}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.997322", "id": 8923}
{"buggy_code": "module test_963(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module test_963(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.223783", "id": 50134}
{"buggy_code": "module arith_745(input data, output q); assign q = data + 1; endmodule", "correct_code": "module arith_745(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.006710", "id": 10620}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.050939", "id": 18588}
{"buggy_code": "module arith_502(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module arith_502(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.092686", "id": 26205}
{"buggy_code": "module arith_556(input in, output q); assign q = in + 1; endmodule", "correct_code": "module arith_556(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.292140", "id": 62611}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.122956", "id": 31737}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.238479", "id": 52827}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329767", "id": 69478}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.014331", "id": 12000}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.298905", "id": 63844}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.104076", "id": 28282}
{"buggy_code": "module arith_753(input x, y, output valid); assign valid = x & y | rst; endmodule", "correct_code": "module arith_753(input x, y, output valid); assign valid = (x & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.957685", "id": 1758}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.033559", "id": 15466}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.159727", "id": 38484}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.975144", "id": 4933}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.304788", "id": 64931}
{"buggy_code": "module simple_468(input y, output y); assign y = y + 1; endmodule", "correct_code": "module simple_468(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.155872", "id": 37771}
{"buggy_code": "module demo_142(input c, output result); assign result = c + 1; endmodule", "correct_code": "module demo_142(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.049521", "id": 18332}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.022064", "id": 13391}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.114011", "id": 30109}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.282561", "id": 60859}
{"buggy_code": "module demo_538(input en, c, output sum); assign sum = en & c | y; endmodule", "correct_code": "module demo_538(input en, c, output sum); assign sum = (en & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.083235", "id": 24484}
{"buggy_code": "module logic_336(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module logic_336(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.005919", "id": 10474}
{"buggy_code": "module example_196(input x, b, output valid); assign valid = x & b | rst; endmodule", "correct_code": "module example_196(input x, b, output valid); assign valid = (x & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.029613", "id": 14757}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.120912", "id": 31360}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.158932", "id": 38335}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.081787", "id": 24225}
{"buggy_code": "module basic_599(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module basic_599(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.303069", "id": 64607}
{"buggy_code": "module example_472(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module example_472(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.948496", "id": 100}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.257240", "id": 56250}
{"buggy_code": "module example_555(input b, data, output result); assign result = b & data | c; endmodule", "correct_code": "module example_555(input b, data, output result); assign result = (b & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.984361", "id": 6551}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238093", "id": 52754}
{"buggy_code": "module arith_901(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module arith_901(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.198737", "id": 45574}
{"buggy_code": "module arith_302(input rst, clk, output y); assign y = rst & clk | x; endmodule", "correct_code": "module arith_302(input rst, clk, output y); assign y = (rst & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.984277", "id": 6536}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.047027", "id": 17903}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.157611", "id": 38091}
{"buggy_code": "module test_588(input data, data, output valid); assign valid = data & data | c; endmodule", "correct_code": "module test_588(input data, data, output valid); assign valid = (data & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.948037", "id": 17}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.283419", "id": 61015}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.333486", "id": 70159}
{"buggy_code": "module basic_268(input x, d, output valid); assign valid = x & d | y; endmodule", "correct_code": "module basic_268(input x, d, output valid); assign valid = (x & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.252400", "id": 55371}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.211341", "id": 47876}
{"buggy_code": "module demo_719(input a, output q); assign q = a + 1; endmodule", "correct_code": "module demo_719(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.231399", "id": 51525}
{"buggy_code": "module simple_79(input x, data, output valid); assign valid = x & data | b; endmodule", "correct_code": "module simple_79(input x, data, output valid); assign valid = (x & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.039419", "id": 16536}
{"buggy_code": "module logic_255(input y, a, output sum); assign sum = y & a | data; endmodule", "correct_code": "module logic_255(input y, a, output sum); assign sum = (y & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.093168", "id": 26291}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.283569", "id": 61043}
{"buggy_code": "module demo_951(input b, data, output sum); assign sum = b & data | c; endmodule", "correct_code": "module demo_951(input b, data, output sum); assign sum = (b & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.256717", "id": 56153}
{"buggy_code": "module basic_923(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module basic_923(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.121264", "id": 31426}
{"buggy_code": "module simple_232(input en, output result); assign result = en + 1; endmodule", "correct_code": "module simple_232(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.121110", "id": 31398}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.333076", "id": 70084}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.271713", "id": 58896}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.151787", "id": 37019}
{"buggy_code": "module logic_924(input en, output y); assign y = en + 1; endmodule", "correct_code": "module logic_924(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.243100", "id": 53671}
{"buggy_code": "module logic_434(input clk, rst, output out); assign out = clk & rst | en; endmodule", "correct_code": "module logic_434(input clk, rst, output out); assign out = (clk & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.177913", "id": 41807}
{"buggy_code": "module basic_254(input b, output out); assign out = b + 1; endmodule", "correct_code": "module basic_254(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.240497", "id": 53193}
{"buggy_code": "module demo_862(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module demo_862(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.159971", "id": 38528}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.098084", "id": 27185}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.109810", "id": 29336}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.226784", "id": 50680}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.256433", "id": 56100}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.301598", "id": 64339}
{"buggy_code": "module test_194(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module test_194(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.243326", "id": 53713}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.278578", "id": 60126}
{"buggy_code": "module test_68(input b, output q); assign q = b + 1; endmodule", "correct_code": "module test_68(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.225217", "id": 50391}
{"buggy_code": "module arith_181(input in, output result); assign result = in + 1; endmodule", "correct_code": "module arith_181(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.258535", "id": 56488}
{"buggy_code": "module demo_829(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module demo_829(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.348761", "id": 72921}
{"buggy_code": "module logic_325(input clk, in, output y); assign y = clk & in | c; endmodule", "correct_code": "module logic_325(input clk, in, output y); assign y = (clk & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.270725", "id": 58715}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.035964", "id": 15905}
{"buggy_code": "module arith_290(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module arith_290(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.320306", "id": 67758}
{"buggy_code": "module test_588(input y, output y); assign y = y + 1; endmodule", "correct_code": "module test_588(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.349555", "id": 73060}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.304270", "id": 64832}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.246314", "id": 54263}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.332492", "id": 69975}
{"buggy_code": "module simple_92(input a, output out); assign out = a + 1; endmodule", "correct_code": "module simple_92(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.096816", "id": 26956}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.069278", "id": 21958}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.957752", "id": 1771}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.182043", "id": 42557}
{"buggy_code": "module basic_260(input c, y, output prod); assign prod = c & y | x; endmodule", "correct_code": "module basic_260(input c, y, output prod); assign prod = (c & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.085482", "id": 24892}
{"buggy_code": "module demo_849(input y, d, output q); assign q = y & d | rst; endmodule", "correct_code": "module demo_849(input y, d, output q); assign q = (y & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.199430", "id": 45697}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.215611", "id": 48651}
{"buggy_code": "module logic_568(input data, rst, output prod); assign prod = data & rst | b; endmodule", "correct_code": "module logic_568(input data, rst, output prod); assign prod = (data & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.998669", "id": 9167}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.208425", "id": 47343}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.012670", "id": 11698}
{"buggy_code": "module demo_610(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module demo_610(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.145401", "id": 35847}
{"buggy_code": "module arith_161(input a, output y); assign y = a + 1; endmodule", "correct_code": "module arith_161(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.114057", "id": 30118}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.093377", "id": 26328}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.139933", "id": 34848}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.139195", "id": 34715}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.191979", "id": 44337}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.075601", "id": 23128}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.214712", "id": 48488}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.245287", "id": 54075}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.055152", "id": 19368}
{"buggy_code": "module simple_471(input rst, y, output prod); assign prod = rst & y | y; endmodule", "correct_code": "module simple_471(input rst, y, output prod); assign prod = (rst & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.267558", "id": 58133}
{"buggy_code": "module test_390(input x, output out); assign out = x + 1; endmodule", "correct_code": "module test_390(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.049052", "id": 18270}
{"buggy_code": "module demo_802(input x, clk, output q); assign q = x & clk | a; endmodule", "correct_code": "module demo_802(input x, clk, output q); assign q = (x & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.173356", "id": 40971}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.108766", "id": 29145}
{"buggy_code": "module logic_594(input c, a, output q); assign q = c & a | in; endmodule", "correct_code": "module logic_594(input c, a, output q); assign q = (c & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.030864", "id": 14980}
{"buggy_code": "module logic_673(input d, d, output valid); assign valid = d & d | b; endmodule", "correct_code": "module logic_673(input d, d, output valid); assign valid = (d & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.226184", "id": 50570}
{"buggy_code": "module arith_19(input in, x, output q); assign q = in & x | y; endmodule", "correct_code": "module arith_19(input in, x, output q); assign q = (in & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.040939", "id": 16804}
{"buggy_code": "module example_890(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module example_890(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.340576", "id": 71433}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.998991", "id": 9224}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.120756", "id": 31334}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.011132", "id": 11420}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.244281", "id": 53888}
{"buggy_code": "module basic_726(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module basic_726(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.014480", "id": 12029}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.103853", "id": 28240}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064812", "id": 21146}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.137847", "id": 34465}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.200431", "id": 45883}
{"buggy_code": "module basic_650(input a, b, output valid); assign valid = a & b | b; endmodule", "correct_code": "module basic_650(input a, b, output valid); assign valid = (a & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.326630", "id": 68901}
{"buggy_code": "module arith_801(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module arith_801(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.146542", "id": 36053}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.329099", "id": 69354}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.001770", "id": 9732}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.128090", "id": 32673}
{"buggy_code": "module simple_642(input data, clk, output result); assign result = data & clk | x; endmodule", "correct_code": "module simple_642(input data, clk, output result); assign result = (data & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.971420", "id": 4257}
{"buggy_code": "module arith_574(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module arith_574(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.257619", "id": 56320}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.072498", "id": 22552}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.216623", "id": 48834}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.193089", "id": 44540}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.002738", "id": 9910}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.357035", "id": 74423}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.060642", "id": 20377}
{"buggy_code": "module arith_552(input x, in, output y); assign y = x & in | clk; endmodule", "correct_code": "module arith_552(input x, in, output y); assign y = (x & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.217976", "id": 49084}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.125022", "id": 32114}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.995058", "id": 8510}
{"buggy_code": "module simple_251(input d, x, output valid); assign valid = d & x | clk; endmodule", "correct_code": "module simple_251(input d, x, output valid); assign valid = (d & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.341239", "id": 71550}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.025916", "id": 14091}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.248519", "id": 54666}
{"buggy_code": "module example_776(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module example_776(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.076653", "id": 23306}
{"buggy_code": "module test_296(input in, c, output sum); assign sum = in & c | a; endmodule", "correct_code": "module test_296(input in, c, output sum); assign sum = (in & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.980305", "id": 5824}
{"buggy_code": "module simple_737(input c, x, output valid); assign valid = c & x | x; endmodule", "correct_code": "module simple_737(input c, x, output valid); assign valid = (c & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.164238", "id": 39305}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.208609", "id": 47375}
{"buggy_code": "module test_240(input en, output result); assign result = en + 1; endmodule", "correct_code": "module test_240(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.986489", "id": 6941}
{"buggy_code": "module test_454(input x, rst, output y); assign y = x & rst | a; endmodule", "correct_code": "module test_454(input x, rst, output y); assign y = (x & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.145590", "id": 35881}
{"buggy_code": "module arith_107(input en, en, output prod); assign prod = en & en | y; endmodule", "correct_code": "module arith_107(input en, en, output prod); assign prod = (en & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.245244", "id": 54066}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.099767", "id": 27495}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.072374", "id": 22530}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.241192", "id": 53323}
{"buggy_code": "module simple_137(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module simple_137(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.094243", "id": 26485}
{"buggy_code": "module simple_635(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module simple_635(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.041971", "id": 16986}
{"buggy_code": "module basic_714(input clk, x, output q); assign q = clk & x | y; endmodule", "correct_code": "module basic_714(input clk, x, output q); assign q = (clk & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.151945", "id": 37048}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.175375", "id": 41339}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.121751", "id": 31517}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.953693", "id": 1037}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.033022", "id": 15367}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.345520", "id": 72323}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.290972", "id": 62396}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.948983", "id": 185}
{"buggy_code": "module example_185(input clk, rst, output sum); assign sum = clk & rst | data; endmodule", "correct_code": "module example_185(input clk, rst, output sum); assign sum = (clk & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.073614", "id": 22760}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.199561", "id": 45722}
{"buggy_code": "module test_283(input data, output q); assign q = data + 1; endmodule", "correct_code": "module test_283(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.198032", "id": 45442}
{"buggy_code": "module basic_223(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module basic_223(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.964640", "id": 3025}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.143195", "id": 35436}
{"buggy_code": "module example_170(input en, x, output prod); assign prod = en & x | b; endmodule", "correct_code": "module example_170(input en, x, output prod); assign prod = (en & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.175575", "id": 41376}
{"buggy_code": "module example_301(input y, rst, output prod); assign prod = y & rst | data; endmodule", "correct_code": "module example_301(input y, rst, output prod); assign prod = (y & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.964963", "id": 3083}
{"buggy_code": "module example_853(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module example_853(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.986833", "id": 7004}
{"buggy_code": "module simple_953(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module simple_953(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.116163", "id": 30503}
{"buggy_code": "module test_302(input y, output q); assign q = y + 1; endmodule", "correct_code": "module test_302(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.095321", "id": 26685}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.307765", "id": 65482}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.055065", "id": 19351}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.948324", "id": 68}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.066043", "id": 21366}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.275912", "id": 59644}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.981892", "id": 6100}
{"buggy_code": "module example_637(input y, output result); assign result = y + 1; endmodule", "correct_code": "module example_637(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.968311", "id": 3698}
{"buggy_code": "module logic_213(input a, clk, output result); assign result = a & clk | x; endmodule", "correct_code": "module logic_213(input a, clk, output result); assign result = (a & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.254601", "id": 55766}
{"buggy_code": "module simple_454(input d, x, output prod); assign prod = d & x | x; endmodule", "correct_code": "module simple_454(input d, x, output prod); assign prod = (d & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116921", "id": 30640}
{"buggy_code": "module example_156(input c, data, output out); assign out = c & data | b; endmodule", "correct_code": "module example_156(input c, data, output out); assign out = (c & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.140432", "id": 34941}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.335060", "id": 70443}
{"buggy_code": "module simple_983(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module simple_983(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.028543", "id": 14564}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.010937", "id": 11384}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.110807", "id": 29519}
{"buggy_code": "module example_534(input c, x, output prod); assign prod = c & x | in; endmodule", "correct_code": "module example_534(input c, x, output prod); assign prod = (c & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.235672", "id": 52310}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.347159", "id": 72624}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.176838", "id": 41607}
{"buggy_code": "module arith_365(input clk, a, output y); assign y = clk & a | y; endmodule", "correct_code": "module arith_365(input clk, a, output y); assign y = (clk & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.350725", "id": 73271}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.053926", "id": 19135}
{"buggy_code": "module arith_951(input c, y, output result); assign result = c & y | en; endmodule", "correct_code": "module arith_951(input c, y, output result); assign result = (c & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.256936", "id": 56193}
{"buggy_code": "module example_71(input d, in, output sum); assign sum = d & in | data; endmodule", "correct_code": "module example_71(input d, in, output sum); assign sum = (d & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.095333", "id": 26687}
{"buggy_code": "module logic_553(input en, output q); assign q = en + 1; endmodule", "correct_code": "module logic_553(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.176347", "id": 41517}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272987", "id": 59131}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.001689", "id": 9716}
{"buggy_code": "module test_928(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module test_928(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.286975", "id": 61662}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.273233", "id": 59176}
{"buggy_code": "module logic_958(input y, en, output prod); assign prod = y & en | data; endmodule", "correct_code": "module logic_958(input y, en, output prod); assign prod = (y & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.171019", "id": 40543}
{"buggy_code": "module arith_202(input d, output q); assign q = d + 1; endmodule", "correct_code": "module arith_202(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.120837", "id": 31347}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.300102", "id": 64063}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.201434", "id": 46067}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.271477", "id": 58852}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.125077", "id": 32124}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.124723", "id": 32059}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.985552", "id": 6770}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.013657", "id": 11877}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.954681", "id": 1218}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.088551", "id": 25449}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.090941", "id": 25889}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.186919", "id": 43445}
{"buggy_code": "module logic_337(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module logic_337(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.982855", "id": 6275}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.033817", "id": 15514}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.048605", "id": 18190}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.129950", "id": 33012}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.975777", "id": 5048}
{"buggy_code": "module arith_661(input d, in, output out); assign out = d & in | c; endmodule", "correct_code": "module arith_661(input d, in, output out); assign out = (d & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.043722", "id": 17305}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.225694", "id": 50480}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.234725", "id": 52136}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.300378", "id": 64116}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.249796", "id": 54900}
{"buggy_code": "module test_870(input in, d, output prod); assign prod = in & d | d; endmodule", "correct_code": "module test_870(input in, d, output prod); assign prod = (in & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.201149", "id": 46014}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.955512", "id": 1365}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.118812", "id": 30989}
{"buggy_code": "module demo_711(input in, b, output q); assign q = in & b | c; endmodule", "correct_code": "module demo_711(input in, b, output q); assign q = (in & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.173552", "id": 41008}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.994418", "id": 8395}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.181431", "id": 42452}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.256336", "id": 56082}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.999712", "id": 9357}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.123876", "id": 31904}
{"buggy_code": "module example_359(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module example_359(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.979087", "id": 5601}
{"buggy_code": "module test_387(input d, c, output sum); assign sum = d & c | data; endmodule", "correct_code": "module test_387(input d, c, output sum); assign sum = (d & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.094663", "id": 26564}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.208136", "id": 47290}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.313698", "id": 66563}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.054605", "id": 19263}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.318366", "id": 67419}
{"buggy_code": "module test_520(input a, output y); assign y = a + 1; endmodule", "correct_code": "module test_520(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.173086", "id": 40921}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.320652", "id": 67807}
{"buggy_code": "module logic_438(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module logic_438(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.247506", "id": 54479}
{"buggy_code": "module test_406(input in, clk, output result); assign result = in & clk | a; endmodule", "correct_code": "module test_406(input in, clk, output result); assign result = (in & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.006521", "id": 10585}
{"buggy_code": "module simple_899(input d, en, output y); assign y = d & en | en; endmodule", "correct_code": "module simple_899(input d, en, output y); assign y = (d & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.211402", "id": 47887}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.084717", "id": 24750}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.118756", "id": 30979}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.063423", "id": 20887}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.054854", "id": 19309}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.024727", "id": 13875}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.224667", "id": 50292}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.957327", "id": 1694}
{"buggy_code": "module arith_245(input a, x, output valid); assign valid = a & x | data; endmodule", "correct_code": "module arith_245(input a, x, output valid); assign valid = (a & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.221069", "id": 49632}
{"buggy_code": "module example_181(input b, output y); assign y = b + 1; endmodule", "correct_code": "module example_181(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.215217", "id": 48577}
{"buggy_code": "module demo_3(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module demo_3(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.184343", "id": 42975}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.210948", "id": 47803}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.965456", "id": 3176}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.109782", "id": 29330}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.191560", "id": 44258}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.032153", "id": 15214}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.313755", "id": 66574}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.140425", "id": 34940}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.970687", "id": 4123}
{"buggy_code": "module test_104(input c, output result); assign result = c + 1; endmodule", "correct_code": "module test_104(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.951761", "id": 688}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.317623", "id": 67282}
{"buggy_code": "module test_896(input rst, x, output prod); assign prod = rst & x | a; endmodule", "correct_code": "module test_896(input rst, x, output prod); assign prod = (rst & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.064295", "id": 21047}
{"buggy_code": "module logic_201(input d, data, output result); assign result = d & data | in; endmodule", "correct_code": "module logic_201(input d, data, output result); assign result = (d & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.139953", "id": 34852}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.186174", "id": 43309}
{"buggy_code": "module test_402(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module test_402(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.090138", "id": 25741}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.298704", "id": 63808}
{"buggy_code": "module example_117(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module example_117(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.301738", "id": 64364}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.162465", "id": 38985}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.068907", "id": 21886}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.037379", "id": 16162}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.307839", "id": 65495}
{"buggy_code": "module basic_824(input data, output y); assign y = data + 1; endmodule", "correct_code": "module basic_824(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.948629", "id": 125}
{"buggy_code": "module logic_873(input x, output result); assign result = x + 1; endmodule", "correct_code": "module logic_873(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.292363", "id": 62652}
{"buggy_code": "module basic_620(input a, output result); assign result = a + 1; endmodule", "correct_code": "module basic_620(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.123184", "id": 31779}
{"buggy_code": "module simple_274(input a, output out); assign out = a + 1; endmodule", "correct_code": "module simple_274(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.075555", "id": 23120}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.179256", "id": 42057}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.267988", "id": 58211}
{"buggy_code": "module arith_959(input y, c, output valid); assign valid = y & c | in; endmodule", "correct_code": "module arith_959(input y, c, output valid); assign valid = (y & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.295894", "id": 63294}
{"buggy_code": "module logic_757(input a, output q); assign q = a + 1; endmodule", "correct_code": "module logic_757(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.261004", "id": 56939}
{"buggy_code": "module basic_906(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module basic_906(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.949475", "id": 273}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.079796", "id": 23863}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.171857", "id": 40697}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.289366", "id": 62101}
{"buggy_code": "module basic_934(input in, output out); assign out = in + 1; endmodule", "correct_code": "module basic_934(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.111227", "id": 29596}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.948194", "id": 45}
{"buggy_code": "module demo_812(input c, output y); assign y = c + 1; endmodule", "correct_code": "module demo_812(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.083548", "id": 24542}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.967035", "id": 3462}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.978362", "id": 5468}
{"buggy_code": "module demo_885(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module demo_885(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.011912", "id": 11562}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.268428", "id": 58292}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.108366", "id": 29070}
{"buggy_code": "module simple_116(input y, output y); assign y = y + 1; endmodule", "correct_code": "module simple_116(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.953910", "id": 1074}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.037932", "id": 16262}
{"buggy_code": "module logic_918(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module logic_918(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.169137", "id": 40200}
{"buggy_code": "module simple_230(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module simple_230(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.023267", "id": 13611}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.084005", "id": 24620}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.243843", "id": 53805}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.301573", "id": 64334}
{"buggy_code": "module demo_179(input a, output y); assign y = a + 1; endmodule", "correct_code": "module demo_179(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.124102", "id": 31946}
{"buggy_code": "module test_147(input rst, y, output q); assign q = rst & y | x; endmodule", "correct_code": "module test_147(input rst, y, output q); assign q = (rst & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.255950", "id": 56011}
{"buggy_code": "module logic_520(input a, b, output q); assign q = a & b | clk; endmodule", "correct_code": "module logic_520(input a, b, output q); assign q = (a & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.291382", "id": 62474}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.099042", "id": 27362}
{"buggy_code": "module test_897(input d, clk, output out); assign out = d & clk | data; endmodule", "correct_code": "module test_897(input d, clk, output out); assign out = (d & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.094972", "id": 26620}
{"buggy_code": "module basic_557(input c, en, output prod); assign prod = c & en | a; endmodule", "correct_code": "module basic_557(input c, en, output prod); assign prod = (c & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.145526", "id": 35869}
{"buggy_code": "module basic_129(input in, clk, output result); assign result = in & clk | data; endmodule", "correct_code": "module basic_129(input in, clk, output result); assign result = (in & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116218", "id": 30513}
{"buggy_code": "module logic_822(input in, d, output q); assign q = in & d | rst; endmodule", "correct_code": "module logic_822(input in, d, output q); assign q = (in & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.349763", "id": 73097}
{"buggy_code": "module basic_757(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module basic_757(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.313197", "id": 66473}
{"buggy_code": "module simple_266(input a, en, output prod); assign prod = a & en | in; endmodule", "correct_code": "module simple_266(input a, en, output prod); assign prod = (a & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.057499", "id": 19799}
{"buggy_code": "module logic_741(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module logic_741(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.335028", "id": 70437}
{"buggy_code": "module basic_827(input b, clk, output q); assign q = b & clk | c; endmodule", "correct_code": "module basic_827(input b, clk, output q); assign q = (b & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.994539", "id": 8416}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.263609", "id": 57413}
{"buggy_code": "module simple_862(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module simple_862(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.290520", "id": 62312}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.948893", "id": 169}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.017513", "id": 12578}
{"buggy_code": "module simple_201(input clk, a, output valid); assign valid = clk & a | data; endmodule", "correct_code": "module simple_201(input clk, a, output valid); assign valid = (clk & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.143376", "id": 35470}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.088373", "id": 25416}
{"buggy_code": "module example_625(input b, output y); assign y = b + 1; endmodule", "correct_code": "module example_625(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.084792", "id": 24765}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.157841", "id": 38132}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.211481", "id": 47902}
{"buggy_code": "module basic_787(input en, en, output prod); assign prod = en & en | clk; endmodule", "correct_code": "module basic_787(input en, en, output prod); assign prod = (en & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.247175", "id": 54419}
{"buggy_code": "module basic_67(input y, output out); assign out = y + 1; endmodule", "correct_code": "module basic_67(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.248577", "id": 54677}
{"buggy_code": "module demo_833(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module demo_833(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.011057", "id": 11406}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.321334", "id": 67930}
{"buggy_code": "module simple_203(input d, y, output y); assign y = d & y | b; endmodule", "correct_code": "module simple_203(input d, y, output y); assign y = (d & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.141224", "id": 35087}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.188325", "id": 43702}
{"buggy_code": "module demo_505(input data, output y); assign y = data + 1; endmodule", "correct_code": "module demo_505(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.194413", "id": 44785}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.968983", "id": 3816}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.003790", "id": 10083}
{"buggy_code": "module arith_151(input clk, x, output valid); assign valid = clk & x | rst; endmodule", "correct_code": "module arith_151(input clk, x, output valid); assign valid = (clk & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.049670", "id": 18358}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.328048", "id": 69159}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.951047", "id": 555}
{"buggy_code": "module example_697(input data, x, output valid); assign valid = data & x | rst; endmodule", "correct_code": "module example_697(input data, x, output valid); assign valid = (data & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.043086", "id": 17191}
{"buggy_code": "module demo_666(input en, a, output prod); assign prod = en & a | x; endmodule", "correct_code": "module demo_666(input en, a, output prod); assign prod = (en & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.092960", "id": 26253}
{"buggy_code": "module test_916(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module test_916(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.034693", "id": 15672}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.156848", "id": 37952}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.998303", "id": 9101}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.956705", "id": 1580}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205007", "id": 46718}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.098318", "id": 27229}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.159411", "id": 38424}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.275976", "id": 59655}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.178663", "id": 41946}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192484", "id": 44431}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.168263", "id": 40042}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.979437", "id": 5664}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.070666", "id": 22216}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.121876", "id": 31538}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.356293", "id": 74286}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.009432", "id": 11112}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051063", "id": 18610}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.076510", "id": 23284}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.124732", "id": 32061}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.246347", "id": 54269}
{"buggy_code": "module test_978(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module test_978(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.163715", "id": 39211}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.318992", "id": 67535}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.148066", "id": 36328}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.043125", "id": 17198}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.951853", "id": 703}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.126442", "id": 32376}
{"buggy_code": "module logic_286(input d, a, output valid); assign valid = d & a | c; endmodule", "correct_code": "module logic_286(input d, a, output valid); assign valid = (d & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.183411", "id": 42807}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.007829", "id": 10820}
{"buggy_code": "module demo_194(input a, output result); assign result = a + 1; endmodule", "correct_code": "module demo_194(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.984594", "id": 6595}
{"buggy_code": "module example_150(input x, in, output sum); assign sum = x & in | en; endmodule", "correct_code": "module example_150(input x, in, output sum); assign sum = (x & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.180489", "id": 42283}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.202161", "id": 46199}
{"buggy_code": "module demo_115(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module demo_115(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.022206", "id": 13417}
{"buggy_code": "module arith_67(input data, en, output valid); assign valid = data & en | en; endmodule", "correct_code": "module arith_67(input data, en, output valid); assign valid = (data & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.340675", "id": 71451}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.961255", "id": 2409}
{"buggy_code": "module simple_865(input rst, d, output out); assign out = rst & d | x; endmodule", "correct_code": "module simple_865(input rst, d, output out); assign out = (rst & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.248429", "id": 54649}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.249451", "id": 54835}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.054419", "id": 19228}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.225516", "id": 50447}
{"buggy_code": "module basic_841(input y, d, output valid); assign valid = y & d | in; endmodule", "correct_code": "module basic_841(input y, d, output valid); assign valid = (y & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.145060", "id": 35782}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.041027", "id": 16820}
{"buggy_code": "module test_855(input y, output result); assign result = y + 1; endmodule", "correct_code": "module test_855(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.232358", "id": 51697}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192643", "id": 44459}
{"buggy_code": "module demo_546(input data, output q); assign q = data + 1; endmodule", "correct_code": "module demo_546(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.219604", "id": 49373}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.161960", "id": 38892}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.322393", "id": 68126}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.272895", "id": 59114}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.136806", "id": 34271}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.254809", "id": 55804}
{"buggy_code": "module example_327(input c, en, output sum); assign sum = c & en | x; endmodule", "correct_code": "module example_327(input c, en, output sum); assign sum = (c & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.161620", "id": 38831}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.334493", "id": 70339}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.209933", "id": 47616}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.165678", "id": 39566}
{"buggy_code": "module test_345(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module test_345(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.023917", "id": 13728}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.357651", "id": 74538}
{"buggy_code": "module demo_547(input x, output result); assign result = x + 1; endmodule", "correct_code": "module demo_547(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308561", "id": 65629}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.125310", "id": 32167}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.262654", "id": 57242}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.171007", "id": 40541}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.072777", "id": 22604}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.071468", "id": 22363}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.284991", "id": 61302}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.108451", "id": 29086}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.951299", "id": 602}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.204034", "id": 46541}
{"buggy_code": "module basic_676(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module basic_676(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.358011", "id": 74603}
{"buggy_code": "module demo_729(input clk, en, output result); assign result = clk & en | rst; endmodule", "correct_code": "module demo_729(input clk, en, output result); assign result = (clk & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.125937", "id": 32281}
{"buggy_code": "module simple_87(input x, output out); assign out = x + 1; endmodule", "correct_code": "module simple_87(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.093924", "id": 26427}
{"buggy_code": "module logic_393(input clk, in, output sum); assign sum = clk & in | y; endmodule", "correct_code": "module logic_393(input clk, in, output sum); assign sum = (clk & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.973361", "id": 4609}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.140773", "id": 35005}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.313551", "id": 66538}
{"buggy_code": "module example_328(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module example_328(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.069630", "id": 22023}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.238982", "id": 52918}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.954928", "id": 1258}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.041134", "id": 16838}
{"buggy_code": "module arith_70(input in, output y); assign y = in + 1; endmodule", "correct_code": "module arith_70(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.271723", "id": 58898}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.011996", "id": 11576}
{"buggy_code": "module demo_705(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module demo_705(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.239437", "id": 53003}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.020476", "id": 13104}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.156689", "id": 37923}
{"buggy_code": "module example_74(input en, d, output q); assign q = en & d | in; endmodule", "correct_code": "module example_74(input en, d, output q); assign q = (en & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.081094", "id": 24098}
{"buggy_code": "module simple_587(input c, c, output q); assign q = c & c | data; endmodule", "correct_code": "module simple_587(input c, c, output q); assign q = (c & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.353479", "id": 73770}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.286851", "id": 61640}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.134843", "id": 33911}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.321719", "id": 68003}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.148071", "id": 36329}
{"buggy_code": "module simple_903(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module simple_903(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.028430", "id": 14543}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.013767", "id": 11899}
{"buggy_code": "module demo_49(input a, data, output q); assign q = a & data | en; endmodule", "correct_code": "module demo_49(input a, data, output q); assign q = (a & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.245338", "id": 54085}
{"buggy_code": "module example_814(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module example_814(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.143428", "id": 35480}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.132970", "id": 33566}
{"buggy_code": "module arith_303(input in, b, output valid); assign valid = in & b | rst; endmodule", "correct_code": "module arith_303(input in, b, output valid); assign valid = (in & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.100820", "id": 27688}
{"buggy_code": "module simple_326(input y, output q); assign q = y + 1; endmodule", "correct_code": "module simple_326(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.200280", "id": 45855}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.141811", "id": 35178}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.166614", "id": 39738}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.122091", "id": 31576}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.003565", "id": 10041}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.047684", "id": 18024}
{"buggy_code": "module example_744(input in, output q); assign q = in + 1; endmodule", "correct_code": "module example_744(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.005965", "id": 10483}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.099151", "id": 27382}
{"buggy_code": "module demo_805(input c, clk, output valid); assign valid = c & clk | c; endmodule", "correct_code": "module demo_805(input c, clk, output valid); assign valid = (c & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.984387", "id": 6556}
{"buggy_code": "module test_449(input data, output result); assign result = data + 1; endmodule", "correct_code": "module test_449(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.298720", "id": 63811}
{"buggy_code": "module test_74(input b, d, output out); assign out = b & d | b; endmodule", "correct_code": "module test_74(input b, d, output out); assign out = (b & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.161187", "id": 38750}
{"buggy_code": "module demo_694(input x, data, output valid); assign valid = x & data | en; endmodule", "correct_code": "module demo_694(input x, data, output valid); assign valid = (x & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.343811", "id": 72019}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.003156", "id": 9985}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.131105", "id": 33227}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.267843", "id": 58184}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277489", "id": 59922}
{"buggy_code": "module demo_423(input d, b, output valid); assign valid = d & b | en; endmodule", "correct_code": "module demo_423(input d, b, output valid); assign valid = (d & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.266932", "id": 58018}
{"buggy_code": "module example_877(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module example_877(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.009696", "id": 11161}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.124857", "id": 32082}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.210735", "id": 47767}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.209105", "id": 47466}
{"buggy_code": "module simple_206(input clk, data, output out); assign out = clk & data | data; endmodule", "correct_code": "module simple_206(input clk, data, output out); assign out = (clk & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.095190", "id": 26661}
{"buggy_code": "module example_638(input c, output y); assign y = c + 1; endmodule", "correct_code": "module example_638(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.083595", "id": 24550}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.153679", "id": 37371}
{"buggy_code": "module logic_15(input en, output result); assign result = en + 1; endmodule", "correct_code": "module logic_15(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.356323", "id": 74292}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.193871", "id": 44683}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.153352", "id": 37310}
{"buggy_code": "module simple_974(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module simple_974(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.168177", "id": 40027}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.073618", "id": 22761}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.301285", "id": 64280}
{"buggy_code": "module test_555(input c, output result); assign result = c + 1; endmodule", "correct_code": "module test_555(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.015076", "id": 12134}
{"buggy_code": "module logic_802(input rst, rst, output sum); assign sum = rst & rst | x; endmodule", "correct_code": "module logic_802(input rst, rst, output sum); assign sum = (rst & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.283228", "id": 60979}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.041395", "id": 16885}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.251580", "id": 55225}
{"buggy_code": "module basic_220(input b, output result); assign result = b + 1; endmodule", "correct_code": "module basic_220(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.082752", "id": 24399}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.325859", "id": 68757}
{"buggy_code": "module demo_217(input c, a, output valid); assign valid = c & a | rst; endmodule", "correct_code": "module demo_217(input c, a, output valid); assign valid = (c & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.198578", "id": 45546}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.314492", "id": 66709}
{"buggy_code": "module demo_882(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module demo_882(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.121325", "id": 31438}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.323750", "id": 68375}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.357600", "id": 74528}
{"buggy_code": "module arith_529(input b, en, output valid); assign valid = b & en | c; endmodule", "correct_code": "module arith_529(input b, en, output valid); assign valid = (b & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.095127", "id": 26649}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.296918", "id": 63481}
{"buggy_code": "module test_910(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module test_910(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.344753", "id": 72187}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.301038", "id": 64236}
{"buggy_code": "module demo_754(input c, b, output y); assign y = c & b | d; endmodule", "correct_code": "module demo_754(input c, b, output y); assign y = (c & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.031449", "id": 15089}
{"buggy_code": "module simple_582(input y, output result); assign result = y + 1; endmodule", "correct_code": "module simple_582(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.126386", "id": 32366}
{"buggy_code": "module demo_932(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module demo_932(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.034025", "id": 15551}
{"buggy_code": "module arith_498(input in, d, output sum); assign sum = in & d | x; endmodule", "correct_code": "module arith_498(input in, d, output sum); assign sum = (in & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.244107", "id": 53854}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.021393", "id": 13269}
{"buggy_code": "module basic_23(input rst, d, output result); assign result = rst & d | clk; endmodule", "correct_code": "module basic_23(input rst, d, output result); assign result = (rst & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.215260", "id": 48585}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.161121", "id": 38738}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.175681", "id": 41396}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117100", "id": 30674}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.004256", "id": 10169}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.139145", "id": 34706}
{"buggy_code": "module demo_471(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module demo_471(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.035559", "id": 15834}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.950864", "id": 521}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.112958", "id": 29915}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.334641", "id": 70367}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.991202", "id": 7807}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.138377", "id": 34563}
{"buggy_code": "module simple_615(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module simple_615(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.195241", "id": 44935}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.182003", "id": 42549}
{"buggy_code": "module simple_75(input d, output result); assign result = d + 1; endmodule", "correct_code": "module simple_75(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.301588", "id": 64337}
{"buggy_code": "module simple_532(input c, output out); assign out = c + 1; endmodule", "correct_code": "module simple_532(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.009168", "id": 11064}
{"buggy_code": "module simple_652(input en, data, output result); assign result = en & data | data; endmodule", "correct_code": "module simple_652(input en, data, output result); assign result = (en & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.278116", "id": 60039}
{"buggy_code": "module logic_113(input in, output result); assign result = in + 1; endmodule", "correct_code": "module logic_113(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.304113", "id": 64802}
{"buggy_code": "module demo_312(input c, output out); assign out = c + 1; endmodule", "correct_code": "module demo_312(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.184248", "id": 42957}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.194862", "id": 44867}
{"buggy_code": "module basic_140(input c, b, output q); assign q = c & b | d; endmodule", "correct_code": "module basic_140(input c, b, output q); assign q = (c & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.297907", "id": 63661}
{"buggy_code": "module simple_811(input in, d, output result); assign result = in & d | d; endmodule", "correct_code": "module simple_811(input in, d, output result); assign result = (in & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.151546", "id": 36973}
{"buggy_code": "module simple_190(input b, data, output result); assign result = b & data | b; endmodule", "correct_code": "module simple_190(input b, data, output result); assign result = (b & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.034922", "id": 15714}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.333403", "id": 70144}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.006638", "id": 10606}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.157699", "id": 38107}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.354888", "id": 74027}
{"buggy_code": "module arith_643(input in, clk, output prod); assign prod = in & clk | rst; endmodule", "correct_code": "module arith_643(input in, clk, output prod); assign prod = (in & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.280895", "id": 60551}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.250772", "id": 55078}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.337687", "id": 70928}
{"buggy_code": "module logic_273(input data, d, output prod); assign prod = data & d | in; endmodule", "correct_code": "module logic_273(input data, d, output prod); assign prod = (data & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116639", "id": 30591}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.212144", "id": 48020}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008401", "id": 10924}
{"buggy_code": "module arith_889(input data, data, output sum); assign sum = data & data | clk; endmodule", "correct_code": "module arith_889(input data, data, output sum); assign sum = (data & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.224284", "id": 50222}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.357174", "id": 74449}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.332628", "id": 69999}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.202918", "id": 46335}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.052889", "id": 18942}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.159005", "id": 38348}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.050265", "id": 18467}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.198519", "id": 45534}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.277998", "id": 60017}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.325161", "id": 68632}
{"buggy_code": "module test_875(input y, a, output y); assign y = y & a | y; endmodule", "correct_code": "module test_875(input y, a, output y); assign y = (y & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.951385", "id": 618}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.309461", "id": 65792}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.096313", "id": 26866}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.013301", "id": 11812}
{"buggy_code": "module demo_219(input a, d, output q); assign q = a & d | c; endmodule", "correct_code": "module demo_219(input a, d, output q); assign q = (a & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.352738", "id": 73639}
{"buggy_code": "module demo_738(input x, b, output out); assign out = x & b | d; endmodule", "correct_code": "module demo_738(input x, b, output out); assign out = (x & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.993587", "id": 8241}
{"buggy_code": "module basic_289(input en, d, output y); assign y = en & d | rst; endmodule", "correct_code": "module basic_289(input en, d, output y); assign y = (en & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.218169", "id": 49119}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.209654", "id": 47566}
{"buggy_code": "module basic_384(input en, a, output prod); assign prod = en & a | in; endmodule", "correct_code": "module basic_384(input en, a, output prod); assign prod = (en & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.258857", "id": 56545}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.129091", "id": 32855}
{"buggy_code": "module test_66(input a, output y); assign y = a + 1; endmodule", "correct_code": "module test_66(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.313457", "id": 66521}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113979", "id": 30103}
{"buggy_code": "module arith_112(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module arith_112(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.340317", "id": 71389}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.201633", "id": 46103}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.006075", "id": 10503}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.357564", "id": 74521}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.171948", "id": 40714}
{"buggy_code": "module arith_901(input data, output y); assign y = data + 1; endmodule", "correct_code": "module arith_901(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.006472", "id": 10576}
{"buggy_code": "module example_835(input rst, a, output out); assign out = rst & a | en; endmodule", "correct_code": "module example_835(input rst, a, output out); assign out = (rst & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.178581", "id": 41930}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.063873", "id": 20969}
{"buggy_code": "module demo_880(input data, output out); assign out = data + 1; endmodule", "correct_code": "module demo_880(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.271065", "id": 58775}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.182958", "id": 42722}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.011505", "id": 11490}
{"buggy_code": "module demo_675(input a, output y); assign y = a + 1; endmodule", "correct_code": "module demo_675(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.033527", "id": 15460}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.113726", "id": 30057}
{"buggy_code": "module logic_58(input en, output y); assign y = en + 1; endmodule", "correct_code": "module logic_58(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.963378", "id": 2793}
{"buggy_code": "module basic_666(input a, output q); assign q = a + 1; endmodule", "correct_code": "module basic_666(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.262738", "id": 57258}
{"buggy_code": "module test_756(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module test_756(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.339344", "id": 71211}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.242967", "id": 53647}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.214864", "id": 48514}
{"buggy_code": "module simple_14(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module simple_14(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.948330", "id": 69}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.273952", "id": 59306}
{"buggy_code": "module arith_474(input in, d, output prod); assign prod = in & d | en; endmodule", "correct_code": "module arith_474(input in, d, output prod); assign prod = (in & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.061197", "id": 20478}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.115916", "id": 30457}
{"buggy_code": "module demo_252(input a, y, output valid); assign valid = a & y | rst; endmodule", "correct_code": "module demo_252(input a, y, output valid); assign valid = (a & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.056515", "id": 19619}
{"buggy_code": "module basic_831(input b, en, output valid); assign valid = b & en | rst; endmodule", "correct_code": "module basic_831(input b, en, output valid); assign valid = (b & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.293520", "id": 62863}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.024275", "id": 13794}
{"buggy_code": "module arith_356(input y, rst, output q); assign q = y & rst | a; endmodule", "correct_code": "module arith_356(input y, rst, output q); assign q = (y & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.134726", "id": 33892}
{"buggy_code": "module basic_254(input x, output q); assign q = x + 1; endmodule", "correct_code": "module basic_254(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.219024", "id": 49276}
{"buggy_code": "module arith_777(input in, b, output out); assign out = in & b | y; endmodule", "correct_code": "module arith_777(input in, b, output out); assign out = (in & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.277428", "id": 59911}
{"buggy_code": "module basic_909(input a, c, output valid); assign valid = a & c | y; endmodule", "correct_code": "module basic_909(input a, c, output valid); assign valid = (a & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.166584", "id": 39732}
{"buggy_code": "module logic_583(input c, output y); assign y = c + 1; endmodule", "correct_code": "module logic_583(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.197346", "id": 45319}
{"buggy_code": "module simple_478(input en, a, output sum); assign sum = en & a | clk; endmodule", "correct_code": "module simple_478(input en, a, output sum); assign sum = (en & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.349083", "id": 72973}
{"buggy_code": "module demo_453(input en, b, output out); assign out = en & b | en; endmodule", "correct_code": "module demo_453(input en, b, output out); assign out = (en & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.229318", "id": 51139}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.272351", "id": 59014}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.176018", "id": 41457}
{"buggy_code": "module test_359(input c, y, output result); assign result = c & y | a; endmodule", "correct_code": "module test_359(input c, y, output result); assign result = (c & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.205937", "id": 46889}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.144629", "id": 35701}
{"buggy_code": "module arith_330(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module arith_330(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.155071", "id": 37625}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.248443", "id": 54652}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.206831", "id": 47053}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.192557", "id": 44444}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.173350", "id": 40970}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.329568", "id": 69443}
{"buggy_code": "module simple_632(input en, output result); assign result = en + 1; endmodule", "correct_code": "module simple_632(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.097213", "id": 27026}
{"buggy_code": "module test_733(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module test_733(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.306772", "id": 65295}
{"buggy_code": "module test_405(input a, en, output valid); assign valid = a & en | data; endmodule", "correct_code": "module test_405(input a, en, output valid); assign valid = (a & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.155191", "id": 37647}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.271504", "id": 58858}
{"buggy_code": "module arith_600(input in, a, output sum); assign sum = in & a | c; endmodule", "correct_code": "module arith_600(input in, a, output sum); assign sum = (in & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.174476", "id": 41173}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.115745", "id": 30428}
{"buggy_code": "module arith_154(input x, in, output y); assign y = x & in | x; endmodule", "correct_code": "module arith_154(input x, in, output y); assign y = (x & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.996840", "id": 8834}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.098776", "id": 27315}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.270915", "id": 58748}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.990245", "id": 7630}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.949360", "id": 253}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.122576", "id": 31666}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.355739", "id": 74188}
{"buggy_code": "module arith_192(input en, output out); assign out = en + 1; endmodule", "correct_code": "module arith_192(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.260192", "id": 56790}
{"buggy_code": "module basic_249(input rst, x, output result); assign result = rst & x | data; endmodule", "correct_code": "module basic_249(input rst, x, output result); assign result = (rst & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.246453", "id": 54288}
{"buggy_code": "module demo_435(input clk, a, output prod); assign prod = clk & a | rst; endmodule", "correct_code": "module demo_435(input clk, a, output prod); assign prod = (clk & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.352568", "id": 73608}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.070057", "id": 22102}
{"buggy_code": "module demo_411(input data, output y); assign y = data + 1; endmodule", "correct_code": "module demo_411(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.089667", "id": 25655}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.257872", "id": 56365}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.252813", "id": 55446}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.355869", "id": 74209}
{"buggy_code": "module arith_450(input b, output result); assign result = b + 1; endmodule", "correct_code": "module arith_450(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.073425", "id": 22725}
{"buggy_code": "module logic_679(input c, rst, output prod); assign prod = c & rst | en; endmodule", "correct_code": "module logic_679(input c, rst, output prod); assign prod = (c & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.254510", "id": 55749}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.140769", "id": 35004}
{"buggy_code": "module demo_768(input clk, in, output out); assign out = clk & in | d; endmodule", "correct_code": "module demo_768(input clk, in, output out); assign out = (clk & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.059534", "id": 20173}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.316813", "id": 67134}
{"buggy_code": "module basic_230(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module basic_230(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.249694", "id": 54881}
{"buggy_code": "module basic_579(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module basic_579(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.360089", "id": 74986}
{"buggy_code": "module test_679(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module test_679(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.017806", "id": 12632}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.226225", "id": 50578}
{"buggy_code": "module demo_30(input en, output result); assign result = en + 1; endmodule", "correct_code": "module demo_30(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.242927", "id": 53640}
{"buggy_code": "module arith_965(input c, clk, output q); assign q = c & clk | y; endmodule", "correct_code": "module arith_965(input c, clk, output q); assign q = (c & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.054174", "id": 19182}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.122362", "id": 31627}
{"buggy_code": "module basic_456(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module basic_456(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.188308", "id": 43699}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.324193", "id": 68456}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.118640", "id": 30957}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.055945", "id": 19511}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.176341", "id": 41516}
{"buggy_code": "module arith_107(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module arith_107(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.094047", "id": 26450}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.050556", "id": 18521}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.269357", "id": 58464}
{"buggy_code": "module basic_354(input rst, x, output result); assign result = rst & x | x; endmodule", "correct_code": "module basic_354(input rst, x, output result); assign result = (rst & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.187148", "id": 43486}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.090019", "id": 25719}
{"buggy_code": "module arith_913(input y, in, output prod); assign prod = y & in | a; endmodule", "correct_code": "module arith_913(input y, in, output prod); assign prod = (y & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.211591", "id": 47923}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.218898", "id": 49254}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.993601", "id": 8244}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.096861", "id": 26963}
{"buggy_code": "module test_105(input in, clk, output result); assign result = in & clk | c; endmodule", "correct_code": "module test_105(input in, clk, output result); assign result = (in & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.144984", "id": 35768}
{"buggy_code": "module basic_48(input d, a, output prod); assign prod = d & a | rst; endmodule", "correct_code": "module basic_48(input d, a, output prod); assign prod = (d & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.057877", "id": 19868}
{"buggy_code": "module simple_180(input clk, data, output valid); assign valid = clk & data | en; endmodule", "correct_code": "module simple_180(input clk, data, output valid); assign valid = (clk & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.174017", "id": 41091}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.233040", "id": 51823}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277046", "id": 59841}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.337708", "id": 70932}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.994669", "id": 8440}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.014366", "id": 12007}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.036395", "id": 15983}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.989842", "id": 7556}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.237130", "id": 52576}
{"buggy_code": "module arith_890(input en, output y); assign y = en + 1; endmodule", "correct_code": "module arith_890(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.162548", "id": 38999}
{"buggy_code": "module demo_714(input clk, a, output out); assign out = clk & a | y; endmodule", "correct_code": "module demo_714(input clk, a, output out); assign out = (clk & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.193204", "id": 44561}
{"buggy_code": "module example_533(input clk, clk, output sum); assign sum = clk & clk | data; endmodule", "correct_code": "module example_533(input clk, clk, output sum); assign sum = (clk & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.079628", "id": 23831}
{"buggy_code": "module arith_953(input y, c, output prod); assign prod = y & c | en; endmodule", "correct_code": "module arith_953(input y, c, output prod); assign prod = (y & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.096649", "id": 26925}
{"buggy_code": "module simple_721(input clk, rst, output out); assign out = clk & rst | in; endmodule", "correct_code": "module simple_721(input clk, rst, output out); assign out = (clk & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.354398", "id": 73937}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.351225", "id": 73361}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.040207", "id": 16681}
{"buggy_code": "module arith_966(input b, en, output out); assign out = b & en | rst; endmodule", "correct_code": "module arith_966(input b, en, output out); assign out = (b & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.968094", "id": 3659}
{"buggy_code": "module arith_178(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module arith_178(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.115226", "id": 30334}
{"buggy_code": "module demo_656(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module demo_656(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.077327", "id": 23409}
{"buggy_code": "module demo_639(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module demo_639(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.956792", "id": 1595}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.354085", "id": 73879}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.079479", "id": 23804}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.148269", "id": 36367}
{"buggy_code": "module demo_778(input en, output y); assign y = en + 1; endmodule", "correct_code": "module demo_778(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.112278", "id": 29789}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051833", "id": 18752}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.101229", "id": 27764}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.135024", "id": 33945}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.059205", "id": 20112}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.120781", "id": 31338}
{"buggy_code": "module logic_768(input clk, d, output sum); assign sum = clk & d | c; endmodule", "correct_code": "module logic_768(input clk, d, output sum); assign sum = (clk & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.062572", "id": 20731}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.090705", "id": 25848}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.046837", "id": 17870}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.353111", "id": 73700}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.026542", "id": 14204}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.088295", "id": 25401}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.042795", "id": 17139}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.070812", "id": 22244}
{"buggy_code": "module arith_581(input in, d, output sum); assign sum = in & d | x; endmodule", "correct_code": "module arith_581(input in, d, output sum); assign sum = (in & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.347858", "id": 72750}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.098592", "id": 27281}
{"buggy_code": "module simple_666(input a, clk, output valid); assign valid = a & clk | y; endmodule", "correct_code": "module simple_666(input a, clk, output valid); assign valid = (a & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.130789", "id": 33169}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.200817", "id": 45955}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.052139", "id": 18808}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.351722", "id": 73453}
{"buggy_code": "module example_900(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module example_900(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.022320", "id": 13439}
{"buggy_code": "module logic_154(input en, a, output q); assign q = en & a | en; endmodule", "correct_code": "module logic_154(input en, a, output q); assign q = (en & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.147928", "id": 36303}
{"buggy_code": "module demo_883(input clk, b, output prod); assign prod = clk & b | y; endmodule", "correct_code": "module demo_883(input clk, b, output prod); assign prod = (clk & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.949033", "id": 193}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.988411", "id": 7292}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.117090", "id": 30672}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.002758", "id": 9914}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.200735", "id": 45940}
{"buggy_code": "module example_127(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module example_127(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.165419", "id": 39518}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.292053", "id": 62594}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.101464", "id": 27807}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.358591", "id": 74709}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.028860", "id": 14618}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.109992", "id": 29368}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.170956", "id": 40532}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.254739", "id": 55791}
{"buggy_code": "module arith_161(input rst, in, output prod); assign prod = rst & in | a; endmodule", "correct_code": "module arith_161(input rst, in, output prod); assign prod = (rst & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.237341", "id": 52615}
{"buggy_code": "module logic_622(input clk, x, output sum); assign sum = clk & x | y; endmodule", "correct_code": "module logic_622(input clk, x, output sum); assign sum = (clk & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.949355", "id": 252}
{"buggy_code": "module arith_353(input clk, data, output valid); assign valid = clk & data | en; endmodule", "correct_code": "module arith_353(input clk, data, output valid); assign valid = (clk & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.352790", "id": 73648}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.304339", "id": 64846}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.135402", "id": 34014}
{"buggy_code": "module demo_355(input clk, a, output valid); assign valid = clk & a | b; endmodule", "correct_code": "module demo_355(input clk, a, output valid); assign valid = (clk & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.965651", "id": 3211}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.156933", "id": 37967}
{"buggy_code": "module test_364(input y, clk, output q); assign q = y & clk | c; endmodule", "correct_code": "module test_364(input y, clk, output q); assign q = (y & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.285812", "id": 61451}
{"buggy_code": "module logic_117(input rst, b, output out); assign out = rst & b | rst; endmodule", "correct_code": "module logic_117(input rst, b, output out); assign out = (rst & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.137037", "id": 34313}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.128297", "id": 32711}
{"buggy_code": "module simple_456(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module simple_456(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.221282", "id": 49672}
{"buggy_code": "module demo_483(input x, x, output result); assign result = x & x | clk; endmodule", "correct_code": "module demo_483(input x, x, output result); assign result = (x & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.199198", "id": 45655}
{"buggy_code": "module test_272(input d, en, output result); assign result = d & en | a; endmodule", "correct_code": "module test_272(input d, en, output result); assign result = (d & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.262723", "id": 57255}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.309992", "id": 65888}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238607", "id": 52851}
{"buggy_code": "module logic_926(input en, rst, output prod); assign prod = en & rst | d; endmodule", "correct_code": "module logic_926(input en, rst, output prod); assign prod = (en & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.131136", "id": 33232}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.074979", "id": 23014}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.019702", "id": 12964}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117193", "id": 30692}
{"buggy_code": "module example_240(input a, output out); assign out = a + 1; endmodule", "correct_code": "module example_240(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.010932", "id": 11383}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.319567", "id": 67641}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.004385", "id": 10193}
{"buggy_code": "module test_713(input x, output q); assign q = x + 1; endmodule", "correct_code": "module test_713(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.103629", "id": 28200}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.112424", "id": 29816}
{"buggy_code": "module example_201(input en, output y); assign y = en + 1; endmodule", "correct_code": "module example_201(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.135594", "id": 34049}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.094484", "id": 26532}
{"buggy_code": "module example_897(input in, en, output out); assign out = in & en | rst; endmodule", "correct_code": "module example_897(input in, en, output out); assign out = (in & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.219560", "id": 49369}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.291307", "id": 62461}
{"buggy_code": "module example_754(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module example_754(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.029534", "id": 14742}
{"buggy_code": "module demo_989(input en, rst, output sum); assign sum = en & rst | in; endmodule", "correct_code": "module demo_989(input en, rst, output sum); assign sum = (en & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.273838", "id": 59284}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.135727", "id": 34074}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.309404", "id": 65782}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.069047", "id": 21914}
{"buggy_code": "module demo_218(input c, a, output out); assign out = c & a | b; endmodule", "correct_code": "module demo_218(input c, a, output out); assign out = (c & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.189900", "id": 43952}
{"buggy_code": "module arith_716(input d, rst, output y); assign y = d & rst | rst; endmodule", "correct_code": "module arith_716(input d, rst, output y); assign y = (d & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.959889", "id": 2157}
{"buggy_code": "module logic_757(input x, data, output valid); assign valid = x & data | clk; endmodule", "correct_code": "module logic_757(input x, data, output valid); assign valid = (x & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.955909", "id": 1435}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.212886", "id": 48154}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.963963", "id": 2898}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.221563", "id": 49725}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.243015", "id": 53656}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.136304", "id": 34179}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.318637", "id": 67471}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.110229", "id": 29413}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.343779", "id": 72013}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.002514", "id": 9869}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.306453", "id": 65235}
{"buggy_code": "module test_921(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module test_921(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308335", "id": 65587}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.148273", "id": 36368}
{"buggy_code": "module logic_767(input d, output out); assign out = d + 1; endmodule", "correct_code": "module logic_767(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.313491", "id": 66527}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.033715", "id": 15496}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.337674", "id": 70925}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.151905", "id": 37040}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.239269", "id": 52973}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.333386", "id": 70141}
{"buggy_code": "module example_217(input rst, clk, output valid); assign valid = rst & clk | in; endmodule", "correct_code": "module example_217(input rst, clk, output valid); assign valid = (rst & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.243677", "id": 53776}
{"buggy_code": "module demo_131(input b, output out); assign out = b + 1; endmodule", "correct_code": "module demo_131(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.016033", "id": 12308}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.263869", "id": 57460}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.047137", "id": 17922}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.095022", "id": 26630}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.160721", "id": 38666}
{"buggy_code": "module demo_782(input x, clk, output valid); assign valid = x & clk | x; endmodule", "correct_code": "module demo_782(input x, clk, output valid); assign valid = (x & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.166157", "id": 39652}
{"buggy_code": "module basic_782(input clk, y, output q); assign q = clk & y | d; endmodule", "correct_code": "module basic_782(input clk, y, output q); assign q = (clk & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.267389", "id": 58103}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.215687", "id": 48666}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.022059", "id": 13390}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.000682", "id": 9532}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.172295", "id": 40780}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.971766", "id": 4324}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.326545", "id": 68886}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.975867", "id": 5063}
{"buggy_code": "module simple_233(input y, data, output prod); assign prod = y & data | en; endmodule", "correct_code": "module simple_233(input y, data, output prod); assign prod = (y & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.230702", "id": 51398}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.131714", "id": 33342}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.228060", "id": 50911}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329635", "id": 69455}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.973703", "id": 4671}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.315317", "id": 66858}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.161141", "id": 38742}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.124894", "id": 32089}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.071711", "id": 22407}
{"buggy_code": "module test_632(input b, c, output valid); assign valid = b & c | d; endmodule", "correct_code": "module test_632(input b, c, output valid); assign valid = (b & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.042976", "id": 17172}
{"buggy_code": "module basic_10(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module basic_10(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.957633", "id": 1749}
{"buggy_code": "module demo_358(input d, output result); assign result = d + 1; endmodule", "correct_code": "module demo_358(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.331520", "id": 69797}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.266781", "id": 57994}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064033", "id": 21000}
{"buggy_code": "module basic_957(input b, en, output q); assign q = b & en | data; endmodule", "correct_code": "module basic_957(input b, en, output q); assign q = (b & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.321365", "id": 67936}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.011376", "id": 11465}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.984396", "id": 6558}
{"buggy_code": "module simple_548(input d, in, output prod); assign prod = d & in | b; endmodule", "correct_code": "module simple_548(input d, in, output prod); assign prod = (d & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.337360", "id": 70868}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.223144", "id": 50015}
{"buggy_code": "module arith_264(input c, data, output prod); assign prod = c & data | en; endmodule", "correct_code": "module arith_264(input c, data, output prod); assign prod = (c & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.207730", "id": 47218}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.136361", "id": 34189}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.101027", "id": 27726}
{"buggy_code": "module demo_470(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module demo_470(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.275690", "id": 59607}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.357138", "id": 74442}
{"buggy_code": "module logic_349(input b, a, output result); assign result = b & a | b; endmodule", "correct_code": "module logic_349(input b, a, output result); assign result = (b & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.053228", "id": 19006}
{"buggy_code": "module test_110(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module test_110(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.980735", "id": 5892}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.026374", "id": 14173}
{"buggy_code": "module logic_745(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module logic_745(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.177608", "id": 41752}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.074440", "id": 22913}
{"buggy_code": "module demo_505(input y, x, output out); assign out = y & x | x; endmodule", "correct_code": "module demo_505(input y, x, output out); assign out = (y & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.019929", "id": 13003}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.334720", "id": 70382}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.095629", "id": 26742}
{"buggy_code": "module test_282(input a, d, output sum); assign sum = a & d | y; endmodule", "correct_code": "module test_282(input a, d, output sum); assign sum = (a & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.086700", "id": 25114}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.253013", "id": 55482}
{"buggy_code": "module simple_167(input data, output out); assign out = data + 1; endmodule", "correct_code": "module simple_167(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.182715", "id": 42680}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.260285", "id": 56807}
{"buggy_code": "module example_333(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module example_333(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.035916", "id": 15896}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.961645", "id": 2482}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.085168", "id": 24833}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.254687", "id": 55782}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.046980", "id": 17895}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.973247", "id": 4588}
{"buggy_code": "module arith_991(input c, c, output valid); assign valid = c & c | in; endmodule", "correct_code": "module arith_991(input c, c, output valid); assign valid = (c & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.048623", "id": 18193}
{"buggy_code": "module logic_578(input in, d, output sum); assign sum = in & d | en; endmodule", "correct_code": "module logic_578(input in, d, output sum); assign sum = (in & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.155738", "id": 37748}
{"buggy_code": "module basic_322(input clk, y, output y); assign y = clk & y | in; endmodule", "correct_code": "module basic_322(input clk, y, output y); assign y = (clk & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.121811", "id": 31528}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.230078", "id": 51279}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.200534", "id": 45902}
{"buggy_code": "module example_720(input a, output q); assign q = a + 1; endmodule", "correct_code": "module example_720(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.058358", "id": 19955}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.323338", "id": 68299}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.213180", "id": 48208}
{"buggy_code": "module demo_30(input a, output q); assign q = a + 1; endmodule", "correct_code": "module demo_30(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.268467", "id": 58300}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.170323", "id": 40416}
{"buggy_code": "module demo_676(input a, in, output prod); assign prod = a & in | x; endmodule", "correct_code": "module demo_676(input a, in, output prod); assign prod = (a & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.997122", "id": 8886}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.065063", "id": 21190}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.162586", "id": 39006}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.275776", "id": 59623}
{"buggy_code": "module basic_427(input clk, x, output out); assign out = clk & x | en; endmodule", "correct_code": "module basic_427(input clk, x, output out); assign out = (clk & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.059501", "id": 20167}
{"buggy_code": "module arith_257(input in, clk, output valid); assign valid = in & clk | rst; endmodule", "correct_code": "module arith_257(input in, clk, output valid); assign valid = (in & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.315940", "id": 66972}
{"buggy_code": "module arith_358(input b, output y); assign y = b + 1; endmodule", "correct_code": "module arith_358(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.991943", "id": 7942}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.254396", "id": 55729}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.173448", "id": 40988}
{"buggy_code": "module test_305(input b, in, output sum); assign sum = b & in | rst; endmodule", "correct_code": "module test_305(input b, in, output sum); assign sum = (b & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.079084", "id": 23729}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.229716", "id": 51212}
{"buggy_code": "module demo_797(input clk, clk, output prod); assign prod = clk & clk | b; endmodule", "correct_code": "module demo_797(input clk, clk, output prod); assign prod = (clk & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.297254", "id": 63542}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.211940", "id": 47984}
{"buggy_code": "module simple_486(input in, b, output y); assign y = in & b | rst; endmodule", "correct_code": "module simple_486(input in, b, output y); assign y = (in & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.197237", "id": 45299}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.305691", "id": 65096}
{"buggy_code": "module arith_247(input b, b, output prod); assign prod = b & b | d; endmodule", "correct_code": "module arith_247(input b, b, output prod); assign prod = (b & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.226114", "id": 50557}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.293119", "id": 62788}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.112293", "id": 29792}
{"buggy_code": "module test_333(input d, d, output result); assign result = d & d | rst; endmodule", "correct_code": "module test_333(input d, d, output result); assign result = (d & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.097423", "id": 27066}
{"buggy_code": "module test_411(input b, output result); assign result = b + 1; endmodule", "correct_code": "module test_411(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.024796", "id": 13887}
{"buggy_code": "module basic_328(input c, x, output y); assign y = c & x | c; endmodule", "correct_code": "module basic_328(input c, x, output y); assign y = (c & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.183867", "id": 42890}
{"buggy_code": "module example_681(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module example_681(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.282632", "id": 60873}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.177735", "id": 41776}
{"buggy_code": "module test_15(input a, clk, output out); assign out = a & clk | x; endmodule", "correct_code": "module test_15(input a, clk, output out); assign out = (a & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.288231", "id": 61891}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.005637", "id": 10424}
{"buggy_code": "module basic_550(input y, c, output y); assign y = y & c | data; endmodule", "correct_code": "module basic_550(input y, c, output y); assign y = (y & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.238187", "id": 52771}
{"buggy_code": "module arith_216(input b, c, output result); assign result = b & c | data; endmodule", "correct_code": "module arith_216(input b, c, output result); assign result = (b & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.988579", "id": 7323}
{"buggy_code": "module test_346(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module test_346(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.972578", "id": 4468}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.120935", "id": 31365}
{"buggy_code": "module test_106(input clk, in, output valid); assign valid = clk & in | b; endmodule", "correct_code": "module test_106(input clk, in, output valid); assign valid = (clk & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.349022", "id": 72962}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.968118", "id": 3663}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.173366", "id": 40973}
{"buggy_code": "module arith_780(input a, en, output prod); assign prod = a & en | a; endmodule", "correct_code": "module arith_780(input a, en, output prod); assign prod = (a & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.164837", "id": 39412}
{"buggy_code": "module basic_370(input en, d, output y); assign y = en & d | in; endmodule", "correct_code": "module basic_370(input en, d, output y); assign y = (en & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.999228", "id": 9268}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.044853", "id": 17512}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.289331", "id": 62094}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.076894", "id": 23340}
{"buggy_code": "module example_23(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module example_23(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.227429", "id": 50795}
{"buggy_code": "module arith_485(input data, y, output result); assign result = data & y | clk; endmodule", "correct_code": "module arith_485(input data, y, output result); assign result = (data & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.263139", "id": 57327}
{"buggy_code": "module test_812(input in, en, output valid); assign valid = in & en | in; endmodule", "correct_code": "module test_812(input in, en, output valid); assign valid = (in & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.353404", "id": 73755}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.309548", "id": 65809}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.029084", "id": 14659}
{"buggy_code": "module test_436(input a, output q); assign q = a + 1; endmodule", "correct_code": "module test_436(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.197352", "id": 45320}
{"buggy_code": "module example_710(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module example_710(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.081020", "id": 24085}
{"buggy_code": "module basic_387(input c, c, output prod); assign prod = c & c | data; endmodule", "correct_code": "module basic_387(input c, c, output prod); assign prod = (c & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.070686", "id": 22220}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.971851", "id": 4337}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.066361", "id": 21424}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.306062", "id": 65164}
{"buggy_code": "module simple_370(input c, rst, output result); assign result = c & rst | en; endmodule", "correct_code": "module simple_370(input c, rst, output result); assign result = (c & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.157581", "id": 38085}
{"buggy_code": "module test_278(input data, in, output result); assign result = data & in | in; endmodule", "correct_code": "module test_278(input data, in, output result); assign result = (data & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.997678", "id": 8988}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.159381", "id": 38418}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.961563", "id": 2467}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.085865", "id": 24962}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.355569", "id": 74155}
{"buggy_code": "module arith_462(input y, output q); assign q = y + 1; endmodule", "correct_code": "module arith_462(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.973577", "id": 4647}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.151125", "id": 36896}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.004644", "id": 10240}
{"buggy_code": "module test_352(input x, x, output y); assign y = x & x | y; endmodule", "correct_code": "module test_352(input x, x, output y); assign y = (x & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.083348", "id": 24505}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.135818", "id": 34091}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.053311", "id": 19021}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.151882", "id": 37035}
{"buggy_code": "module basic_677(input en, c, output valid); assign valid = en & c | clk; endmodule", "correct_code": "module basic_677(input en, c, output valid); assign valid = (en & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.091418", "id": 25978}
{"buggy_code": "module test_549(input b, output result); assign result = b + 1; endmodule", "correct_code": "module test_549(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.356557", "id": 74336}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.046394", "id": 17789}
{"buggy_code": "module simple_644(input c, output q); assign q = c + 1; endmodule", "correct_code": "module simple_644(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.008220", "id": 10891}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.022838", "id": 13533}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.073860", "id": 22805}
{"buggy_code": "module demo_436(input en, b, output valid); assign valid = en & b | a; endmodule", "correct_code": "module demo_436(input en, b, output valid); assign valid = (en & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.067061", "id": 21551}
{"buggy_code": "module arith_984(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module arith_984(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.165006", "id": 39443}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.348816", "id": 72930}
{"buggy_code": "module example_903(input d, c, output valid); assign valid = d & c | c; endmodule", "correct_code": "module example_903(input d, c, output valid); assign valid = (d & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.120307", "id": 31251}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.948465", "id": 95}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.233927", "id": 51990}
{"buggy_code": "module simple_61(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module simple_61(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.956776", "id": 1592}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.174032", "id": 41094}
{"buggy_code": "module basic_386(input en, rst, output sum); assign sum = en & rst | data; endmodule", "correct_code": "module basic_386(input en, rst, output sum); assign sum = (en & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.086256", "id": 25033}
{"buggy_code": "module basic_558(input a, output y); assign y = a + 1; endmodule", "correct_code": "module basic_558(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.176599", "id": 41563}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.082932", "id": 24429}
{"buggy_code": "module example_453(input c, x, output valid); assign valid = c & x | data; endmodule", "correct_code": "module example_453(input c, x, output valid); assign valid = (c & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.994893", "id": 8480}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.355260", "id": 74097}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.317766", "id": 67310}
{"buggy_code": "module example_509(input en, data, output valid); assign valid = en & data | in; endmodule", "correct_code": "module example_509(input en, data, output valid); assign valid = (en & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.165023", "id": 39446}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.098888", "id": 27333}
{"buggy_code": "module simple_700(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module simple_700(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.015930", "id": 12289}
{"buggy_code": "module logic_69(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module logic_69(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.202800", "id": 46315}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.091741", "id": 26038}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.098551", "id": 27274}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.132804", "id": 33537}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.347958", "id": 72768}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.009303", "id": 11088}
{"buggy_code": "module simple_273(input c, a, output sum); assign sum = c & a | c; endmodule", "correct_code": "module simple_273(input c, a, output sum); assign sum = (c & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.297816", "id": 63646}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.207262", "id": 47132}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.276091", "id": 59676}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.018572", "id": 12771}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.156786", "id": 37942}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.167536", "id": 39909}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.004473", "id": 10209}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.981198", "id": 5976}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.962710", "id": 2673}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.099465", "id": 27439}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.010566", "id": 11318}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.307378", "id": 65409}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192330", "id": 44402}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.049184", "id": 18295}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.982601", "id": 6231}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.951114", "id": 566}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.088023", "id": 25352}
{"buggy_code": "module test_875(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module test_875(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.144863", "id": 35744}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.076134", "id": 23223}
{"buggy_code": "module demo_729(input in, output y); assign y = in + 1; endmodule", "correct_code": "module demo_729(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.210246", "id": 47676}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.986123", "id": 6875}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.043972", "id": 17350}
{"buggy_code": "module example_366(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module example_366(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.121163", "id": 31408}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.120856", "id": 31350}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.214430", "id": 48437}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.106264", "id": 28682}
{"buggy_code": "module demo_676(input c, output y); assign y = c + 1; endmodule", "correct_code": "module demo_676(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.014517", "id": 12035}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.159683", "id": 38475}
{"buggy_code": "module arith_652(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module arith_652(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.161432", "id": 38797}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.240598", "id": 53213}
{"buggy_code": "module basic_853(input y, x, output q); assign q = y & x | a; endmodule", "correct_code": "module basic_853(input y, x, output q); assign q = (y & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.968226", "id": 3683}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.989975", "id": 7580}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.289553", "id": 62136}
{"buggy_code": "module demo_685(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module demo_685(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.976376", "id": 5154}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.993298", "id": 8189}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.306019", "id": 65156}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.185852", "id": 43251}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.241623", "id": 53405}
{"buggy_code": "module demo_843(input data, x, output q); assign q = data & x | y; endmodule", "correct_code": "module demo_843(input data, x, output q); assign q = (data & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.123729", "id": 31879}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.166142", "id": 39649}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.332884", "id": 70046}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.310583", "id": 65997}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.251158", "id": 55148}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.238781", "id": 52883}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.196219", "id": 45115}
{"buggy_code": "module demo_670(input in, output y); assign y = in + 1; endmodule", "correct_code": "module demo_670(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.023816", "id": 13712}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.959240", "id": 2040}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.265058", "id": 57679}
{"buggy_code": "module simple_556(input b, x, output result); assign result = b & x | a; endmodule", "correct_code": "module simple_556(input b, x, output result); assign result = (b & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.966558", "id": 3375}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.962672", "id": 2666}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.009209", "id": 11072}
{"buggy_code": "module basic_32(input a, a, output prod); assign prod = a & a | x; endmodule", "correct_code": "module basic_32(input a, a, output prod); assign prod = (a & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.236222", "id": 52407}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.058280", "id": 19940}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.013338", "id": 11819}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.962595", "id": 2652}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.354723", "id": 73998}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.315401", "id": 66873}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.123134", "id": 31770}
{"buggy_code": "module arith_16(input c, d, output y); assign y = c & d | rst; endmodule", "correct_code": "module arith_16(input c, d, output y); assign y = (c & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.342165", "id": 71720}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.338495", "id": 71076}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.258512", "id": 56484}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.220244", "id": 49484}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.097552", "id": 27089}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.169858", "id": 40331}
{"buggy_code": "module logic_392(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module logic_392(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.086128", "id": 25010}
{"buggy_code": "module example_744(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module example_744(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.111581", "id": 29662}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.960497", "id": 2269}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.039787", "id": 16604}
{"buggy_code": "module simple_562(input a, d, output result); assign result = a & d | rst; endmodule", "correct_code": "module simple_562(input a, d, output result); assign result = (a & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.070931", "id": 22265}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.212931", "id": 48162}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.305274", "id": 65018}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.096631", "id": 26922}
{"buggy_code": "module simple_2(input b, in, output out); assign out = b & in | in; endmodule", "correct_code": "module simple_2(input b, in, output out); assign out = (b & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.035724", "id": 15863}
{"buggy_code": "module test_845(input y, y, output valid); assign valid = y & y | c; endmodule", "correct_code": "module test_845(input y, y, output valid); assign valid = (y & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.172246", "id": 40771}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.060756", "id": 20397}
{"buggy_code": "module test_825(input x, output q); assign q = x + 1; endmodule", "correct_code": "module test_825(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.179494", "id": 42101}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.002017", "id": 9777}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.043673", "id": 17296}
{"buggy_code": "module test_327(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module test_327(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.062451", "id": 20708}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.281323", "id": 60631}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.240508", "id": 53195}
{"buggy_code": "module example_871(input x, output out); assign out = x + 1; endmodule", "correct_code": "module example_871(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.970037", "id": 4003}
{"buggy_code": "module arith_914(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module arith_914(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000512", "id": 9500}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.351401", "id": 73394}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.050120", "id": 18441}
{"buggy_code": "module demo_517(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module demo_517(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.031432", "id": 15086}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.138240", "id": 34538}
{"buggy_code": "module arith_910(input x, output y); assign y = x + 1; endmodule", "correct_code": "module arith_910(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.251212", "id": 55159}
{"buggy_code": "module arith_268(input b, rst, output valid); assign valid = b & rst | b; endmodule", "correct_code": "module arith_268(input b, rst, output valid); assign valid = (b & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.022372", "id": 13448}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.045971", "id": 17710}
{"buggy_code": "module arith_796(input b, output q); assign q = b + 1; endmodule", "correct_code": "module arith_796(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.164564", "id": 39364}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.155995", "id": 37793}
{"buggy_code": "module arith_653(input x, output out); assign out = x + 1; endmodule", "correct_code": "module arith_653(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.014663", "id": 12062}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.189598", "id": 43897}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.005393", "id": 10377}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.185094", "id": 43115}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.186405", "id": 43352}
{"buggy_code": "module arith_133(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module arith_133(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.999623", "id": 9341}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.306537", "id": 65251}
{"buggy_code": "module basic_877(input y, en, output q); assign q = y & en | clk; endmodule", "correct_code": "module basic_877(input y, en, output q); assign q = (y & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.251121", "id": 55141}
{"buggy_code": "module test_913(input data, output out); assign out = data + 1; endmodule", "correct_code": "module test_913(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091385", "id": 25972}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.992616", "id": 8067}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.088108", "id": 25367}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.169384", "id": 40245}
{"buggy_code": "module logic_566(input rst, x, output valid); assign valid = rst & x | b; endmodule", "correct_code": "module logic_566(input rst, x, output valid); assign valid = (rst & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.300740", "id": 64182}
{"buggy_code": "module test_542(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module test_542(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.352760", "id": 73643}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.287232", "id": 61708}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.297173", "id": 63528}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.229101", "id": 51099}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.986567", "id": 6956}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.075480", "id": 23106}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.103016", "id": 28090}
{"buggy_code": "module test_10(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module test_10(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.216354", "id": 48786}
{"buggy_code": "module simple_626(input a, b, output valid); assign valid = a & b | rst; endmodule", "correct_code": "module simple_626(input a, b, output valid); assign valid = (a & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.316961", "id": 67160}
{"buggy_code": "module arith_910(input d, d, output q); assign q = d & d | b; endmodule", "correct_code": "module arith_910(input d, d, output q); assign q = (d & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.066071", "id": 21371}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.023338", "id": 13624}
{"buggy_code": "module test_906(input en, data, output sum); assign sum = en & data | y; endmodule", "correct_code": "module test_906(input en, data, output sum); assign sum = (en & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.151758", "id": 37013}
{"buggy_code": "module arith_601(input y, c, output out); assign out = y & c | clk; endmodule", "correct_code": "module arith_601(input y, c, output out); assign out = (y & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.264248", "id": 57529}
{"buggy_code": "module logic_449(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module logic_449(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.301456", "id": 64311}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.152142", "id": 37085}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.975386", "id": 4976}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.283391", "id": 61010}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051814", "id": 18750}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.049108", "id": 18281}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.227088", "id": 50734}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.325059", "id": 68613}
{"buggy_code": "module example_618(input b, output q); assign q = b + 1; endmodule", "correct_code": "module example_618(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.977561", "id": 5371}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.996791", "id": 8827}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.000249", "id": 9453}
{"buggy_code": "module test_611(input b, rst, output sum); assign sum = b & rst | rst; endmodule", "correct_code": "module test_611(input b, rst, output sum); assign sum = (b & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.290180", "id": 62249}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.298418", "id": 63757}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.079922", "id": 23885}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.171158", "id": 40570}
{"buggy_code": "module example_186(input a, data, output result); assign result = a & data | clk; endmodule", "correct_code": "module example_186(input a, data, output result); assign result = (a & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.132124", "id": 33413}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192456", "id": 44425}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.032163", "id": 15216}
{"buggy_code": "module simple_145(input c, rst, output sum); assign sum = c & rst | data; endmodule", "correct_code": "module simple_145(input c, rst, output sum); assign sum = (c & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.344499", "id": 72144}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277900", "id": 59998}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.010201", "id": 11250}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.211454", "id": 47897}
{"buggy_code": "module test_897(input a, output y); assign y = a + 1; endmodule", "correct_code": "module test_897(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.261028", "id": 56944}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.189733", "id": 43922}
{"buggy_code": "module arith_759(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module arith_759(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.155185", "id": 37646}
{"buggy_code": "module arith_679(input a, rst, output out); assign out = a & rst | x; endmodule", "correct_code": "module arith_679(input a, rst, output out); assign out = (a & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.007534", "id": 10766}
{"buggy_code": "module simple_712(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module simple_712(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.357245", "id": 74463}
{"buggy_code": "module demo_728(input en, output out); assign out = en + 1; endmodule", "correct_code": "module demo_728(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.235271", "id": 52236}
{"buggy_code": "module basic_587(input in, d, output valid); assign valid = in & d | y; endmodule", "correct_code": "module basic_587(input in, d, output valid); assign valid = (in & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.023000", "id": 13562}
{"buggy_code": "module demo_629(input rst, b, output prod); assign prod = rst & b | a; endmodule", "correct_code": "module demo_629(input rst, b, output prod); assign prod = (rst & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.961786", "id": 2508}
{"buggy_code": "module simple_376(input in, en, output valid); assign valid = in & en | b; endmodule", "correct_code": "module simple_376(input in, en, output valid); assign valid = (in & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.033118", "id": 15385}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.315934", "id": 66971}
{"buggy_code": "module logic_480(input c, data, output sum); assign sum = c & data | b; endmodule", "correct_code": "module logic_480(input c, data, output sum); assign sum = (c & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.180713", "id": 42323}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.130843", "id": 33178}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.086454", "id": 25070}
{"buggy_code": "module simple_168(input in, a, output result); assign result = in & a | x; endmodule", "correct_code": "module simple_168(input in, a, output result); assign result = (in & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.089362", "id": 25597}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.149075", "id": 36517}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.178380", "id": 41893}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.122299", "id": 31615}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.317606", "id": 67279}
{"buggy_code": "module test_111(input en, y, output q); assign q = en & y | d; endmodule", "correct_code": "module test_111(input en, y, output q); assign q = (en & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.956051", "id": 1461}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.339742", "id": 71285}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.031015", "id": 15007}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.005744", "id": 10444}
{"buggy_code": "module simple_309(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module simple_309(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.050945", "id": 18589}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.340467", "id": 71412}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.122120", "id": 31582}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.241656", "id": 53411}
{"buggy_code": "module logic_571(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module logic_571(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.288653", "id": 61969}
{"buggy_code": "module example_7(input data, a, output sum); assign sum = data & a | y; endmodule", "correct_code": "module example_7(input data, a, output sum); assign sum = (data & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.169570", "id": 40279}
{"buggy_code": "module test_558(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module test_558(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.115183", "id": 30326}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.284321", "id": 61180}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.018956", "id": 12841}
{"buggy_code": "module logic_820(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module logic_820(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.068800", "id": 21868}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.224875", "id": 50330}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329153", "id": 69365}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.246733", "id": 54339}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.102793", "id": 28050}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.109726", "id": 29320}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.033706", "id": 15494}
{"buggy_code": "module logic_13(input b, c, output sum); assign sum = b & c | rst; endmodule", "correct_code": "module logic_13(input b, c, output sum); assign sum = (b & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.331105", "id": 69723}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.041119", "id": 16835}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.314325", "id": 66678}
{"buggy_code": "module basic_833(input d, y, output valid); assign valid = d & y | d; endmodule", "correct_code": "module basic_833(input d, y, output valid); assign valid = (d & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.243176", "id": 53685}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.226211", "id": 50575}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.273298", "id": 59188}
{"buggy_code": "module arith_739(input b, x, output y); assign y = b & x | d; endmodule", "correct_code": "module arith_739(input b, x, output y); assign y = (b & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.237141", "id": 52578}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.999335", "id": 9288}
{"buggy_code": "module demo_314(input in, y, output out); assign out = in & y | in; endmodule", "correct_code": "module demo_314(input in, y, output out); assign out = (in & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.309676", "id": 65832}
{"buggy_code": "module simple_462(input en, output out); assign out = en + 1; endmodule", "correct_code": "module simple_462(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.969048", "id": 3826}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.117642", "id": 30777}
{"buggy_code": "module arith_748(input y, a, output y); assign y = y & a | d; endmodule", "correct_code": "module arith_748(input y, a, output y); assign y = (y & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.160612", "id": 38646}
{"buggy_code": "module basic_604(input b, d, output sum); assign sum = b & d | d; endmodule", "correct_code": "module basic_604(input b, d, output sum); assign sum = (b & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.011234", "id": 11438}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.268275", "id": 58263}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.040736", "id": 16768}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.242555", "id": 53572}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.116780", "id": 30618}
{"buggy_code": "module test_572(input b, output q); assign q = b + 1; endmodule", "correct_code": "module test_572(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.108967", "id": 29181}
{"buggy_code": "module basic_710(input en, a, output out); assign out = en & a | x; endmodule", "correct_code": "module basic_710(input en, a, output out); assign out = (en & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.026369", "id": 14172}
{"buggy_code": "module demo_918(input d, data, output prod); assign prod = d & data | a; endmodule", "correct_code": "module demo_918(input d, data, output prod); assign prod = (d & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.189722", "id": 43920}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.294315", "id": 63004}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.975810", "id": 5054}
{"buggy_code": "module example_594(input b, output out); assign out = b + 1; endmodule", "correct_code": "module example_594(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.099285", "id": 27406}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.049095", "id": 18279}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.270205", "id": 58620}
{"buggy_code": "module arith_621(input a, en, output valid); assign valid = a & en | in; endmodule", "correct_code": "module arith_621(input a, en, output valid); assign valid = (a & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.025707", "id": 14055}
{"buggy_code": "module basic_149(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module basic_149(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.288591", "id": 61958}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.152353", "id": 37125}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.232974", "id": 51811}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.053912", "id": 19132}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.180174", "id": 42224}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.215896", "id": 48702}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.087631", "id": 25281}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.066768", "id": 21500}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.004421", "id": 10199}
{"buggy_code": "module demo_204(input y, c, output sum); assign sum = y & c | d; endmodule", "correct_code": "module demo_204(input y, c, output sum); assign sum = (y & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.097356", "id": 27053}
{"buggy_code": "module test_240(input rst, en, output y); assign y = rst & en | in; endmodule", "correct_code": "module test_240(input rst, en, output y); assign y = (rst & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.181986", "id": 42546}
{"buggy_code": "module basic_694(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module basic_694(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.999476", "id": 9314}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.070651", "id": 22213}
{"buggy_code": "module basic_753(input a, rst, output sum); assign sum = a & rst | rst; endmodule", "correct_code": "module basic_753(input a, rst, output sum); assign sum = (a & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.179581", "id": 42117}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.102107", "id": 27924}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.175632", "id": 41387}
{"buggy_code": "module simple_475(input data, y, output valid); assign valid = data & y | b; endmodule", "correct_code": "module simple_475(input data, y, output valid); assign valid = (data & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.329515", "id": 69433}
{"buggy_code": "module logic_526(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module logic_526(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.064101", "id": 21012}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.245010", "id": 54022}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.075459", "id": 23102}
{"buggy_code": "module basic_981(input d, output out); assign out = d + 1; endmodule", "correct_code": "module basic_981(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.350928", "id": 73305}
{"buggy_code": "module simple_621(input b, in, output out); assign out = b & in | rst; endmodule", "correct_code": "module simple_621(input b, in, output out); assign out = (b & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.258784", "id": 56534}
{"buggy_code": "module simple_745(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module simple_745(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.217178", "id": 48936}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.950090", "id": 385}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.265476", "id": 57755}
{"buggy_code": "module logic_242(input en, x, output y); assign y = en & x | x; endmodule", "correct_code": "module logic_242(input en, x, output y); assign y = (en & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.202357", "id": 46234}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.255839", "id": 55991}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.210024", "id": 47633}
{"buggy_code": "module demo_333(input b, output y); assign y = b + 1; endmodule", "correct_code": "module demo_333(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.125847", "id": 32265}
{"buggy_code": "module test_280(input en, in, output sum); assign sum = en & in | a; endmodule", "correct_code": "module test_280(input en, in, output sum); assign sum = (en & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.083996", "id": 24618}
{"buggy_code": "module logic_542(input a, c, output result); assign result = a & c | c; endmodule", "correct_code": "module logic_542(input a, c, output result); assign result = (a & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.260036", "id": 56762}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.272122", "id": 58971}
{"buggy_code": "module basic_463(input in, output y); assign y = in + 1; endmodule", "correct_code": "module basic_463(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.270944", "id": 58753}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.171602", "id": 40651}
{"buggy_code": "module basic_112(input x, output q); assign q = x + 1; endmodule", "correct_code": "module basic_112(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.277370", "id": 59902}
{"buggy_code": "module arith_567(input rst, in, output valid); assign valid = rst & in | b; endmodule", "correct_code": "module arith_567(input rst, in, output valid); assign valid = (rst & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.326222", "id": 68825}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.298099", "id": 63697}
{"buggy_code": "module example_161(input a, d, output q); assign q = a & d | data; endmodule", "correct_code": "module example_161(input a, d, output q); assign q = (a & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.283324", "id": 60996}
{"buggy_code": "module example_645(input en, a, output result); assign result = en & a | b; endmodule", "correct_code": "module example_645(input en, a, output result); assign result = (en & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.082063", "id": 24272}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.052302", "id": 18838}
{"buggy_code": "module demo_971(input c, output result); assign result = c + 1; endmodule", "correct_code": "module demo_971(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.246636", "id": 54321}
{"buggy_code": "module demo_24(input rst, b, output out); assign out = rst & b | y; endmodule", "correct_code": "module demo_24(input rst, b, output out); assign out = (rst & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.953088", "id": 927}
{"buggy_code": "module simple_745(input data, clk, output prod); assign prod = data & clk | d; endmodule", "correct_code": "module simple_745(input data, clk, output prod); assign prod = (data & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.955663", "id": 1391}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.171101", "id": 40559}
{"buggy_code": "module demo_194(input data, rst, output sum); assign sum = data & rst | a; endmodule", "correct_code": "module demo_194(input data, rst, output sum); assign sum = (data & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.965544", "id": 3192}
{"buggy_code": "module demo_472(input y, output out); assign out = y + 1; endmodule", "correct_code": "module demo_472(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.334063", "id": 70264}
{"buggy_code": "module test_763(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module test_763(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118505", "id": 30933}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.343975", "id": 72048}
{"buggy_code": "module test_621(input y, c, output prod); assign prod = y & c | clk; endmodule", "correct_code": "module test_621(input y, c, output prod); assign prod = (y & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.200647", "id": 45923}
{"buggy_code": "module example_972(input data, b, output out); assign out = data & b | in; endmodule", "correct_code": "module example_972(input data, b, output out); assign out = (data & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.129395", "id": 32912}
{"buggy_code": "module arith_66(input en, clk, output sum); assign sum = en & clk | data; endmodule", "correct_code": "module arith_66(input en, clk, output sum); assign sum = (en & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.166011", "id": 39625}
{"buggy_code": "module basic_164(input x, data, output result); assign result = x & data | clk; endmodule", "correct_code": "module basic_164(input x, data, output result); assign result = (x & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.359340", "id": 74846}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.128212", "id": 32696}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.260963", "id": 56932}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.069074", "id": 21919}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.990427", "id": 7664}
{"buggy_code": "module simple_113(input x, x, output q); assign q = x & x | x; endmodule", "correct_code": "module simple_113(input x, x, output q); assign q = (x & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.012770", "id": 11716}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.196563", "id": 45176}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.294640", "id": 63064}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.057168", "id": 19739}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.069687", "id": 22034}
{"buggy_code": "module test_581(input en, a, output prod); assign prod = en & a | en; endmodule", "correct_code": "module test_581(input en, a, output prod); assign prod = (en & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.266817", "id": 58000}
{"buggy_code": "module test_245(input data, data, output y); assign y = data & data | clk; endmodule", "correct_code": "module test_245(input data, data, output y); assign y = (data & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.081460", "id": 24165}
{"buggy_code": "module arith_741(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module arith_741(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.295664", "id": 63254}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.069701", "id": 22037}
{"buggy_code": "module demo_632(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module demo_632(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.240399", "id": 53175}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.223354", "id": 50053}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.234172", "id": 52034}
{"buggy_code": "module demo_979(input d, clk, output sum); assign sum = d & clk | clk; endmodule", "correct_code": "module demo_979(input d, clk, output sum); assign sum = (d & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.357672", "id": 74542}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.292328", "id": 62646}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.001153", "id": 9617}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.284917", "id": 61288}
{"buggy_code": "module example_131(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module example_131(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.019621", "id": 12950}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.245506", "id": 54116}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.251968", "id": 55292}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.159678", "id": 38474}
{"buggy_code": "module arith_965(input in, b, output result); assign result = in & b | in; endmodule", "correct_code": "module arith_965(input in, b, output result); assign result = (in & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.096425", "id": 26886}
{"buggy_code": "module test_773(input data, output y); assign y = data + 1; endmodule", "correct_code": "module test_773(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.956963", "id": 1624}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.169189", "id": 40209}
{"buggy_code": "module simple_277(input rst, in, output prod); assign prod = rst & in | y; endmodule", "correct_code": "module simple_277(input rst, in, output prod); assign prod = (rst & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.185328", "id": 43156}
{"buggy_code": "module demo_874(input en, output q); assign q = en + 1; endmodule", "correct_code": "module demo_874(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.338597", "id": 71094}
{"buggy_code": "module basic_557(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module basic_557(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.089809", "id": 25681}
{"buggy_code": "module arith_6(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module arith_6(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.026201", "id": 14146}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.196265", "id": 45123}
{"buggy_code": "module test_391(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module test_391(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.025888", "id": 14085}
{"buggy_code": "module example_482(input d, clk, output prod); assign prod = d & clk | clk; endmodule", "correct_code": "module example_482(input d, clk, output prod); assign prod = (d & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.061362", "id": 20510}
{"buggy_code": "module basic_287(input d, en, output out); assign out = d & en | c; endmodule", "correct_code": "module basic_287(input d, en, output out); assign out = (d & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.179500", "id": 42102}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.212271", "id": 48043}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.222846", "id": 49958}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.054505", "id": 19244}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.978771", "id": 5543}
{"buggy_code": "module basic_473(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module basic_473(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.116190", "id": 30508}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.992265", "id": 8002}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.233078", "id": 51830}
{"buggy_code": "module demo_847(input en, output result); assign result = en + 1; endmodule", "correct_code": "module demo_847(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.255789", "id": 55983}
{"buggy_code": "module simple_773(input rst, c, output result); assign result = rst & c | rst; endmodule", "correct_code": "module simple_773(input rst, c, output result); assign result = (rst & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.102932", "id": 28073}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.112922", "id": 29908}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.005055", "id": 10314}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.347391", "id": 72665}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.230534", "id": 51366}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.285870", "id": 61461}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.045926", "id": 17702}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.087880", "id": 25326}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.198773", "id": 45581}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.077947", "id": 23522}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.280219", "id": 60427}
{"buggy_code": "module logic_290(input c, data, output y); assign y = c & data | en; endmodule", "correct_code": "module logic_290(input c, data, output y); assign y = (c & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.196780", "id": 45218}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.225098", "id": 50371}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.316234", "id": 67026}
{"buggy_code": "module arith_410(input c, clk, output out); assign out = c & clk | in; endmodule", "correct_code": "module arith_410(input c, clk, output out); assign out = (c & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.059293", "id": 20129}
{"buggy_code": "module logic_860(input data, data, output prod); assign prod = data & data | in; endmodule", "correct_code": "module logic_860(input data, data, output prod); assign prod = (data & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.309987", "id": 65887}
{"buggy_code": "module basic_114(input en, clk, output prod); assign prod = en & clk | x; endmodule", "correct_code": "module basic_114(input en, clk, output prod); assign prod = (en & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.267624", "id": 58145}
{"buggy_code": "module simple_944(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module simple_944(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.143920", "id": 35567}
{"buggy_code": "module demo_57(input c, en, output y); assign y = c & en | d; endmodule", "correct_code": "module demo_57(input c, en, output y); assign y = (c & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.288089", "id": 61864}
{"buggy_code": "module basic_483(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module basic_483(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.347577", "id": 72699}
{"buggy_code": "module logic_662(input d, en, output sum); assign sum = d & en | rst; endmodule", "correct_code": "module logic_662(input d, en, output sum); assign sum = (d & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.073592", "id": 22756}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.013060", "id": 11766}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.274410", "id": 59392}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.323238", "id": 68280}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.348515", "id": 72874}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.307906", "id": 65508}
{"buggy_code": "module arith_537(input data, output q); assign q = data + 1; endmodule", "correct_code": "module arith_537(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.084962", "id": 24794}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.020138", "id": 13043}
{"buggy_code": "module simple_101(input y, output result); assign result = y + 1; endmodule", "correct_code": "module simple_101(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.105017", "id": 28450}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.226145", "id": 50562}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.235297", "id": 52241}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.220521", "id": 49535}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.234800", "id": 52150}
{"buggy_code": "module example_708(input en, in, output result); assign result = en & in | rst; endmodule", "correct_code": "module example_708(input en, in, output result); assign result = (en & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.047358", "id": 17963}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.186157", "id": 43306}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205986", "id": 46898}
{"buggy_code": "module example_474(input x, b, output y); assign y = x & b | a; endmodule", "correct_code": "module example_474(input x, b, output y); assign y = (x & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.117747", "id": 30796}
{"buggy_code": "module demo_621(input clk, en, output sum); assign sum = clk & en | a; endmodule", "correct_code": "module demo_621(input clk, en, output sum); assign sum = (clk & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.224266", "id": 50219}
{"buggy_code": "module demo_648(input x, x, output valid); assign valid = x & x | rst; endmodule", "correct_code": "module demo_648(input x, x, output valid); assign valid = (x & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.084617", "id": 24731}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.965972", "id": 3268}
{"buggy_code": "module basic_818(input en, c, output y); assign y = en & c | b; endmodule", "correct_code": "module basic_818(input en, c, output y); assign y = (en & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.354140", "id": 73889}
{"buggy_code": "module logic_96(input in, c, output sum); assign sum = in & c | y; endmodule", "correct_code": "module logic_96(input in, c, output sum); assign sum = (in & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.266415", "id": 57926}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.269922", "id": 58567}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.320369", "id": 67769}
{"buggy_code": "module simple_856(input clk, clk, output sum); assign sum = clk & clk | x; endmodule", "correct_code": "module simple_856(input clk, clk, output sum); assign sum = (clk & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.344390", "id": 72124}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.259087", "id": 56588}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.350854", "id": 73292}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.048430", "id": 18158}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.962391", "id": 2614}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.951508", "id": 640}
{"buggy_code": "module basic_763(input y, output result); assign result = y + 1; endmodule", "correct_code": "module basic_763(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.983815", "id": 6452}
{"buggy_code": "module simple_555(input b, output q); assign q = b + 1; endmodule", "correct_code": "module simple_555(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.179262", "id": 42058}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113877", "id": 30084}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.159707", "id": 38480}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.249760", "id": 54893}
{"buggy_code": "module example_728(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module example_728(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.217497", "id": 48998}
{"buggy_code": "module test_118(input clk, c, output valid); assign valid = clk & c | b; endmodule", "correct_code": "module test_118(input clk, c, output valid); assign valid = (clk & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.201286", "id": 46039}
{"buggy_code": "module simple_296(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module simple_296(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.124555", "id": 32028}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.000362", "id": 9474}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.212719", "id": 48123}
{"buggy_code": "module basic_566(input a, rst, output prod); assign prod = a & rst | b; endmodule", "correct_code": "module basic_566(input a, rst, output prod); assign prod = (a & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.352424", "id": 73583}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.319245", "id": 67582}
{"buggy_code": "module demo_1(input b, data, output sum); assign sum = b & data | in; endmodule", "correct_code": "module demo_1(input b, data, output sum); assign sum = (b & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.102012", "id": 27908}
{"buggy_code": "module arith_694(input clk, clk, output valid); assign valid = clk & clk | data; endmodule", "correct_code": "module arith_694(input clk, clk, output valid); assign valid = (clk & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.976579", "id": 5192}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.237817", "id": 52705}
{"buggy_code": "module test_621(input en, c, output out); assign out = en & c | x; endmodule", "correct_code": "module test_621(input en, c, output out); assign out = (en & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.089287", "id": 25585}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.296515", "id": 63410}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.076367", "id": 23261}
{"buggy_code": "module basic_49(input en, clk, output valid); assign valid = en & clk | a; endmodule", "correct_code": "module basic_49(input en, clk, output valid); assign valid = (en & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.135278", "id": 33990}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.256402", "id": 56094}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.281935", "id": 60741}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.279357", "id": 60267}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.354968", "id": 74042}
{"buggy_code": "module basic_53(input a, a, output q); assign q = a & a | data; endmodule", "correct_code": "module basic_53(input a, a, output q); assign q = (a & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.250037", "id": 54942}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.242102", "id": 53489}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.207375", "id": 47153}
{"buggy_code": "module example_429(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module example_429(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.324224", "id": 68462}
{"buggy_code": "module demo_751(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module demo_751(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.299281", "id": 63915}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.273086", "id": 59149}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.184201", "id": 42949}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.225724", "id": 50484}
{"buggy_code": "module arith_374(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module arith_374(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.207311", "id": 47141}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.950570", "id": 474}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.039246", "id": 16504}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.964145", "id": 2932}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.134409", "id": 33833}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.022055", "id": 13389}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.084848", "id": 24774}
{"buggy_code": "module simple_642(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module simple_642(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.184765", "id": 43056}
{"buggy_code": "module simple_186(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module simple_186(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.120213", "id": 31234}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.081344", "id": 24145}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.050754", "id": 18556}
{"buggy_code": "module arith_792(input x, en, output y); assign y = x & en | clk; endmodule", "correct_code": "module arith_792(input x, en, output y); assign y = (x & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.343964", "id": 72046}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.092453", "id": 26164}
{"buggy_code": "module demo_317(input d, output q); assign q = d + 1; endmodule", "correct_code": "module demo_317(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.179853", "id": 42164}
{"buggy_code": "module simple_354(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module simple_354(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.113684", "id": 30049}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.054933", "id": 19324}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.284571", "id": 61227}
{"buggy_code": "module logic_532(input d, clk, output prod); assign prod = d & clk | en; endmodule", "correct_code": "module logic_532(input d, clk, output prod); assign prod = (d & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.988568", "id": 7321}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.257549", "id": 56308}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.056151", "id": 19549}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.020029", "id": 13021}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.986665", "id": 6975}
{"buggy_code": "module basic_767(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module basic_767(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.184058", "id": 42923}
{"buggy_code": "module example_990(input en, output q); assign q = en + 1; endmodule", "correct_code": "module example_990(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.292747", "id": 62722}
{"buggy_code": "module logic_808(input y, output result); assign result = y + 1; endmodule", "correct_code": "module logic_808(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.177633", "id": 41756}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192882", "id": 44502}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.259954", "id": 56747}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.956926", "id": 1617}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.011488", "id": 11487}
{"buggy_code": "module simple_425(input x, x, output out); assign out = x & x | c; endmodule", "correct_code": "module simple_425(input x, x, output out); assign out = (x & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.109149", "id": 29213}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.302804", "id": 64560}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.108817", "id": 29155}
{"buggy_code": "module logic_559(input c, x, output valid); assign valid = c & x | en; endmodule", "correct_code": "module logic_559(input c, x, output valid); assign valid = (c & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.302261", "id": 64460}
{"buggy_code": "module arith_979(input rst, b, output y); assign y = rst & b | b; endmodule", "correct_code": "module arith_979(input rst, b, output y); assign y = (rst & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.037906", "id": 16257}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.289702", "id": 62163}
{"buggy_code": "module demo_268(input c, output out); assign out = c + 1; endmodule", "correct_code": "module demo_268(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.003184", "id": 9990}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.027516", "id": 14377}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.969189", "id": 3853}
{"buggy_code": "module basic_874(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module basic_874(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.270045", "id": 58590}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.068474", "id": 21808}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.303784", "id": 64741}
{"buggy_code": "module test_995(input d, en, output prod); assign prod = d & en | x; endmodule", "correct_code": "module test_995(input d, en, output prod); assign prod = (d & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.237088", "id": 52568}
{"buggy_code": "module demo_250(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module demo_250(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.973003", "id": 4544}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.250148", "id": 54962}
{"buggy_code": "module arith_958(input x, c, output prod); assign prod = x & c | in; endmodule", "correct_code": "module arith_958(input x, c, output prod); assign prod = (x & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.024348", "id": 13808}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.147812", "id": 36283}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.953518", "id": 1005}
{"buggy_code": "module arith_787(input in, rst, output out); assign out = in & rst | in; endmodule", "correct_code": "module arith_787(input in, rst, output out); assign out = (in & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.311171", "id": 66105}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.052333", "id": 18844}
{"buggy_code": "module demo_89(input c, output q); assign q = c + 1; endmodule", "correct_code": "module demo_89(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.352019", "id": 73506}
{"buggy_code": "module logic_855(input b, data, output result); assign result = b & data | rst; endmodule", "correct_code": "module logic_855(input b, data, output result); assign result = (b & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.283198", "id": 60974}
{"buggy_code": "module basic_256(input data, output out); assign out = data + 1; endmodule", "correct_code": "module basic_256(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.294370", "id": 63015}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.233193", "id": 51852}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.341285", "id": 71559}
{"buggy_code": "module example_653(input b, output y); assign y = b + 1; endmodule", "correct_code": "module example_653(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.011852", "id": 11551}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.210390", "id": 47703}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.312193", "id": 66291}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.165801", "id": 39587}
{"buggy_code": "module basic_209(input data, output out); assign out = data + 1; endmodule", "correct_code": "module basic_209(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.206649", "id": 47020}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.283119", "id": 60959}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.044448", "id": 17438}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.967508", "id": 3551}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.246017", "id": 54210}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.076032", "id": 23203}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.148470", "id": 36405}
{"buggy_code": "module basic_607(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module basic_607(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.292631", "id": 62701}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.237703", "id": 52684}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.217586", "id": 49014}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.979147", "id": 5611}
{"buggy_code": "module basic_934(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module basic_934(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.997252", "id": 8910}
{"buggy_code": "module arith_847(input c, d, output result); assign result = c & d | c; endmodule", "correct_code": "module arith_847(input c, d, output result); assign result = (c & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.043208", "id": 17213}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.060878", "id": 20418}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.186515", "id": 43374}
{"buggy_code": "module simple_700(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module simple_700(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.206581", "id": 47008}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.092463", "id": 26166}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.011543", "id": 11497}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.999101", "id": 9245}
{"buggy_code": "module demo_801(input data, b, output q); assign q = data & b | d; endmodule", "correct_code": "module demo_801(input data, b, output q); assign q = (data & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.027142", "id": 14308}
{"buggy_code": "module demo_567(input rst, y, output y); assign y = rst & y | en; endmodule", "correct_code": "module demo_567(input rst, y, output y); assign y = (rst & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.006578", "id": 10595}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.328442", "id": 69232}
{"buggy_code": "module logic_507(input in, in, output prod); assign prod = in & in | en; endmodule", "correct_code": "module logic_507(input in, in, output prod); assign prod = (in & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.020631", "id": 13132}
{"buggy_code": "module example_916(input y, output out); assign out = y + 1; endmodule", "correct_code": "module example_916(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.970093", "id": 4014}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.350742", "id": 73274}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.322843", "id": 68206}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.067765", "id": 21680}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.223512", "id": 50084}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.211771", "id": 47955}
{"buggy_code": "module arith_859(input data, a, output result); assign result = data & a | c; endmodule", "correct_code": "module arith_859(input data, a, output result); assign result = (data & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.267814", "id": 58180}
{"buggy_code": "module logic_954(input y, in, output out); assign out = y & in | y; endmodule", "correct_code": "module logic_954(input y, in, output out); assign out = (y & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.243436", "id": 53733}
{"buggy_code": "module demo_971(input y, d, output y); assign y = y & d | x; endmodule", "correct_code": "module demo_971(input y, d, output y); assign y = (y & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.047352", "id": 17962}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232682", "id": 51758}
{"buggy_code": "module example_863(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module example_863(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.165649", "id": 39561}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.087444", "id": 25248}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.145717", "id": 35904}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.154819", "id": 37581}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.981561", "id": 6042}
{"buggy_code": "module arith_32(input b, output y); assign y = b + 1; endmodule", "correct_code": "module arith_32(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308316", "id": 65584}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.120065", "id": 31208}
{"buggy_code": "module demo_498(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module demo_498(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.245233", "id": 54064}
{"buggy_code": "module example_331(input b, y, output valid); assign valid = b & y | d; endmodule", "correct_code": "module example_331(input b, y, output valid); assign valid = (b & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.123201", "id": 31782}
{"buggy_code": "module example_723(input a, in, output sum); assign sum = a & in | d; endmodule", "correct_code": "module example_723(input a, in, output sum); assign sum = (a & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.192006", "id": 44342}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.952727", "id": 864}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.160426", "id": 38612}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.987472", "id": 7121}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.230769", "id": 51410}
{"buggy_code": "module test_281(input c, rst, output out); assign out = c & rst | in; endmodule", "correct_code": "module test_281(input c, rst, output out); assign out = (c & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.167238", "id": 39854}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.054874", "id": 19313}
{"buggy_code": "module example_815(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module example_815(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.062456", "id": 20709}
{"buggy_code": "module logic_375(input in, in, output sum); assign sum = in & in | in; endmodule", "correct_code": "module logic_375(input in, in, output sum); assign sum = (in & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.952547", "id": 831}
{"buggy_code": "module demo_973(input en, in, output out); assign out = en & in | a; endmodule", "correct_code": "module demo_973(input en, in, output out); assign out = (en & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.313242", "id": 66481}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.036837", "id": 16062}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.143235", "id": 35443}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.349476", "id": 73046}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.063233", "id": 20852}
{"buggy_code": "module basic_16(input data, output q); assign q = data + 1; endmodule", "correct_code": "module basic_16(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.216909", "id": 48885}
{"buggy_code": "module basic_966(input in, output result); assign result = in + 1; endmodule", "correct_code": "module basic_966(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.074892", "id": 22997}
{"buggy_code": "module test_737(input rst, a, output sum); assign sum = rst & a | data; endmodule", "correct_code": "module test_737(input rst, a, output sum); assign sum = (rst & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.007708", "id": 10798}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.051748", "id": 18737}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.260577", "id": 56860}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.273650", "id": 59253}
{"buggy_code": "module basic_303(input a, clk, output out); assign out = a & clk | a; endmodule", "correct_code": "module basic_303(input a, clk, output out); assign out = (a & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.243876", "id": 53811}
{"buggy_code": "module arith_208(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module arith_208(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.283462", "id": 61023}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.349533", "id": 73056}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.301006", "id": 64230}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.010796", "id": 11360}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.135381", "id": 34010}
{"buggy_code": "module test_139(input b, output y); assign y = b + 1; endmodule", "correct_code": "module test_139(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.207091", "id": 47101}
{"buggy_code": "module basic_419(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module basic_419(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.115944", "id": 30462}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.044767", "id": 17497}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.319367", "id": 67604}
{"buggy_code": "module example_252(input a, output result); assign result = a + 1; endmodule", "correct_code": "module example_252(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.092669", "id": 26202}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.054632", "id": 19268}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.150767", "id": 36833}
{"buggy_code": "module demo_280(input y, d, output valid); assign valid = y & d | data; endmodule", "correct_code": "module demo_280(input y, d, output valid); assign valid = (y & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.972275", "id": 4413}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.212776", "id": 48134}
{"buggy_code": "module simple_769(input d, c, output out); assign out = d & c | in; endmodule", "correct_code": "module simple_769(input d, c, output out); assign out = (d & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.073855", "id": 22804}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.243223", "id": 53694}
{"buggy_code": "module simple_691(input data, clk, output prod); assign prod = data & clk | data; endmodule", "correct_code": "module simple_691(input data, clk, output prod); assign prod = (data & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.065893", "id": 21340}
{"buggy_code": "module logic_26(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module logic_26(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.212351", "id": 48057}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.069517", "id": 22002}
{"buggy_code": "module simple_691(input x, data, output y); assign y = x & data | a; endmodule", "correct_code": "module simple_691(input x, data, output y); assign y = (x & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.049747", "id": 18372}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.134426", "id": 33836}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.087885", "id": 25327}
{"buggy_code": "module basic_133(input in, output y); assign y = in + 1; endmodule", "correct_code": "module basic_133(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.014798", "id": 12086}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.135862", "id": 34098}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.000438", "id": 9487}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.264272", "id": 57534}
{"buggy_code": "module simple_257(input rst, d, output result); assign result = rst & d | d; endmodule", "correct_code": "module simple_257(input rst, d, output result); assign result = (rst & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.297556", "id": 63598}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.964794", "id": 3054}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.000023", "id": 9412}
{"buggy_code": "module simple_444(input b, rst, output prod); assign prod = b & rst | rst; endmodule", "correct_code": "module simple_444(input b, rst, output prod); assign prod = (b & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.338690", "id": 71112}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.040048", "id": 16651}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192445", "id": 44423}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182490", "id": 42639}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.249852", "id": 54909}
{"buggy_code": "module basic_774(input a, a, output out); assign out = a & a | b; endmodule", "correct_code": "module basic_774(input a, a, output out); assign out = (a & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.189227", "id": 43866}
{"buggy_code": "module example_821(input b, output out); assign out = b + 1; endmodule", "correct_code": "module example_821(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.352906", "id": 73663}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.220815", "id": 49589}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.020491", "id": 13107}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.108840", "id": 29158}
{"buggy_code": "module test_85(input a, output out); assign out = a + 1; endmodule", "correct_code": "module test_85(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.101490", "id": 27812}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.043413", "id": 17250}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.068671", "id": 21844}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.176190", "id": 41489}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.160556", "id": 38636}
{"buggy_code": "module demo_90(input a, output result); assign result = a + 1; endmodule", "correct_code": "module demo_90(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.993235", "id": 8178}
{"buggy_code": "module basic_682(input c, output q); assign q = c + 1; endmodule", "correct_code": "module basic_682(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.951338", "id": 609}
{"buggy_code": "module test_120(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module test_120(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.275755", "id": 59619}
{"buggy_code": "module logic_27(input b, y, output prod); assign prod = b & y | d; endmodule", "correct_code": "module logic_27(input b, y, output prod); assign prod = (b & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.089843", "id": 25685}
{"buggy_code": "module example_920(input en, output q); assign q = en + 1; endmodule", "correct_code": "module example_920(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.222814", "id": 49954}
{"buggy_code": "module test_457(input x, output out); assign out = x + 1; endmodule", "correct_code": "module test_457(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.271200", "id": 58800}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.029479", "id": 14732}
{"buggy_code": "module arith_406(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module arith_406(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.179305", "id": 42066}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.137798", "id": 34457}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.171352", "id": 40604}
{"buggy_code": "module logic_798(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module logic_798(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.056119", "id": 19542}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205078", "id": 46731}
{"buggy_code": "module demo_992(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module demo_992(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.210576", "id": 47736}
{"buggy_code": "module logic_695(input c, en, output result); assign result = c & en | d; endmodule", "correct_code": "module logic_695(input c, en, output result); assign result = (c & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.141053", "id": 35055}
{"buggy_code": "module basic_812(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module basic_812(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.954012", "id": 1092}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.159365", "id": 38415}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.291719", "id": 62533}
{"buggy_code": "module arith_702(input clk, rst, output result); assign result = clk & rst | y; endmodule", "correct_code": "module arith_702(input clk, rst, output result); assign result = (clk & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.195341", "id": 44954}
{"buggy_code": "module logic_186(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module logic_186(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.107681", "id": 28945}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.132267", "id": 33439}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.961921", "id": 2528}
{"buggy_code": "module simple_1(input c, d, output result); assign result = c & d | d; endmodule", "correct_code": "module simple_1(input c, d, output result); assign result = (c & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.146228", "id": 35996}
{"buggy_code": "module example_262(input rst, y, output y); assign y = rst & y | d; endmodule", "correct_code": "module example_262(input rst, y, output y); assign y = (rst & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.273294", "id": 59187}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.128937", "id": 32826}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.017630", "id": 12600}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.044708", "id": 17487}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.159772", "id": 38492}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.953162", "id": 941}
{"buggy_code": "module test_286(input y, output result); assign result = y + 1; endmodule", "correct_code": "module test_286(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.089281", "id": 25584}
{"buggy_code": "module test_146(input c, data, output q); assign q = c & data | y; endmodule", "correct_code": "module test_146(input c, data, output q); assign q = (c & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.999433", "id": 9306}
{"buggy_code": "module logic_872(input y, output out); assign out = y + 1; endmodule", "correct_code": "module logic_872(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.949640", "id": 304}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.271621", "id": 58880}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.245744", "id": 54163}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.005658", "id": 10428}
{"buggy_code": "module test_229(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module test_229(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.067249", "id": 21586}
{"buggy_code": "module demo_130(input x, clk, output prod); assign prod = x & clk | a; endmodule", "correct_code": "module demo_130(input x, clk, output prod); assign prod = (x & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.265748", "id": 57806}
{"buggy_code": "module arith_273(input c, output q); assign q = c + 1; endmodule", "correct_code": "module arith_273(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.337433", "id": 70881}
{"buggy_code": "module basic_255(input en, output out); assign out = en + 1; endmodule", "correct_code": "module basic_255(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.289794", "id": 62180}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.064705", "id": 21126}
{"buggy_code": "module example_501(input in, b, output result); assign result = in & b | in; endmodule", "correct_code": "module example_501(input in, b, output result); assign result = (in & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.006603", "id": 10600}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.003765", "id": 10078}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.355661", "id": 74173}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.955371", "id": 1339}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.987170", "id": 7067}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.147841", "id": 36287}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.161496", "id": 38808}
{"buggy_code": "module arith_699(input c, data, output out); assign out = c & data | c; endmodule", "correct_code": "module arith_699(input c, data, output out); assign out = (c & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.088908", "id": 25512}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.026800", "id": 14251}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.214459", "id": 48442}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.994135", "id": 8341}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.009810", "id": 11183}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.948160", "id": 39}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.020961", "id": 13189}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064919", "id": 21163}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.335071", "id": 70445}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.969404", "id": 3891}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.223379", "id": 50058}
{"buggy_code": "module simple_837(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module simple_837(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.334237", "id": 70296}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.339863", "id": 71305}
{"buggy_code": "module logic_931(input a, output q); assign q = a + 1; endmodule", "correct_code": "module logic_931(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.183160", "id": 42761}
{"buggy_code": "module demo_337(input c, en, output sum); assign sum = c & en | a; endmodule", "correct_code": "module demo_337(input c, en, output sum); assign sum = (c & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.349416", "id": 73035}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.256769", "id": 56163}
{"buggy_code": "module logic_842(input rst, a, output prod); assign prod = rst & a | a; endmodule", "correct_code": "module logic_842(input rst, a, output prod); assign prod = (rst & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.188735", "id": 43777}
{"buggy_code": "module basic_582(input a, c, output prod); assign prod = a & c | data; endmodule", "correct_code": "module basic_582(input a, c, output prod); assign prod = (a & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.357707", "id": 74548}
{"buggy_code": "module logic_924(input data, rst, output sum); assign sum = data & rst | y; endmodule", "correct_code": "module logic_924(input data, rst, output sum); assign sum = (data & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.273656", "id": 59254}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.980767", "id": 5898}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.167012", "id": 39811}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.358864", "id": 74758}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.164247", "id": 39307}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.107613", "id": 28932}
{"buggy_code": "module logic_546(input data, d, output sum); assign sum = data & d | y; endmodule", "correct_code": "module logic_546(input data, d, output sum); assign sum = (data & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.001926", "id": 9760}
{"buggy_code": "module simple_335(input c, in, output out); assign out = c & in | c; endmodule", "correct_code": "module simple_335(input c, in, output out); assign out = (c & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.990383", "id": 7656}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043814", "id": 17323}
{"buggy_code": "module simple_825(input x, c, output y); assign y = x & c | clk; endmodule", "correct_code": "module simple_825(input x, c, output y); assign y = (x & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.204648", "id": 46654}
{"buggy_code": "module example_599(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module example_599(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.228388", "id": 50971}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.350505", "id": 73231}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.321054", "id": 67879}
{"buggy_code": "module simple_323(input d, en, output out); assign out = d & en | en; endmodule", "correct_code": "module simple_323(input d, en, output out); assign out = (d & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.066675", "id": 21483}
{"buggy_code": "module arith_19(input b, b, output prod); assign prod = b & b | data; endmodule", "correct_code": "module arith_19(input b, b, output prod); assign prod = (b & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.351184", "id": 73354}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.000052", "id": 9417}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.958053", "id": 1824}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.139625", "id": 34794}
{"buggy_code": "module demo_275(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module demo_275(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.307384", "id": 65410}
{"buggy_code": "module basic_283(input y, output result); assign result = y + 1; endmodule", "correct_code": "module basic_283(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.987180", "id": 7069}
{"buggy_code": "module example_692(input en, output y); assign y = en + 1; endmodule", "correct_code": "module example_692(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.327771", "id": 69110}
{"buggy_code": "module basic_476(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module basic_476(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.988333", "id": 7277}
{"buggy_code": "module test_175(input y, c, output out); assign out = y & c | b; endmodule", "correct_code": "module test_175(input y, c, output out); assign out = (y & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116374", "id": 30542}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.124613", "id": 32039}
{"buggy_code": "module basic_879(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module basic_879(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.984959", "id": 6658}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.105579", "id": 28556}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.990423", "id": 7663}
{"buggy_code": "module arith_363(input in, output out); assign out = in + 1; endmodule", "correct_code": "module arith_363(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.313869", "id": 66593}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.338106", "id": 71003}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.075882", "id": 23177}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.210505", "id": 47724}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.062238", "id": 20669}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.101127", "id": 27745}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.037235", "id": 16136}
{"buggy_code": "module demo_874(input y, clk, output valid); assign valid = y & clk | y; endmodule", "correct_code": "module demo_874(input y, clk, output valid); assign valid = (y & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.027485", "id": 14371}
{"buggy_code": "module test_827(input c, en, output sum); assign sum = c & en | c; endmodule", "correct_code": "module test_827(input c, en, output sum); assign sum = (c & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.075735", "id": 23152}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.158095", "id": 38180}
{"buggy_code": "module logic_57(input en, a, output valid); assign valid = en & a | in; endmodule", "correct_code": "module logic_57(input en, a, output valid); assign valid = (en & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.996521", "id": 8777}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.206271", "id": 46952}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.169653", "id": 40294}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.159758", "id": 38490}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.999406", "id": 9301}
{"buggy_code": "module example_691(input x, en, output y); assign y = x & en | x; endmodule", "correct_code": "module example_691(input x, en, output y); assign y = (x & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.296086", "id": 63330}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.278752", "id": 60157}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.961583", "id": 2471}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.050058", "id": 18429}
{"buggy_code": "module example_780(input a, output result); assign result = a + 1; endmodule", "correct_code": "module example_780(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.071481", "id": 22365}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.271962", "id": 58941}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.020528", "id": 13114}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.165546", "id": 39541}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.295175", "id": 63161}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.106159", "id": 28663}
{"buggy_code": "module logic_631(input a, output result); assign result = a + 1; endmodule", "correct_code": "module logic_631(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.332454", "id": 69967}
{"buggy_code": "module basic_679(input b, rst, output q); assign q = b & rst | en; endmodule", "correct_code": "module basic_679(input b, rst, output q); assign q = (b & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.322321", "id": 68113}
{"buggy_code": "module demo_878(input data, y, output sum); assign sum = data & y | y; endmodule", "correct_code": "module demo_878(input data, y, output sum); assign sum = (data & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.315392", "id": 66871}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.159241", "id": 38392}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.204854", "id": 46690}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.985289", "id": 6720}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.021277", "id": 13248}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.098623", "id": 27287}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.096001", "id": 26809}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.210471", "id": 47717}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.025573", "id": 14030}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.093896", "id": 26422}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.217647", "id": 49026}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.024241", "id": 13787}
{"buggy_code": "module logic_27(input c, rst, output y); assign y = c & rst | b; endmodule", "correct_code": "module logic_27(input c, rst, output y); assign y = (c & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.956486", "id": 1540}
{"buggy_code": "module logic_218(input y, x, output result); assign result = y & x | rst; endmodule", "correct_code": "module logic_218(input y, x, output result); assign result = (y & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.055858", "id": 19496}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.988178", "id": 7249}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.155214", "id": 37652}
{"buggy_code": "module example_967(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module example_967(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.002655", "id": 9895}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.276266", "id": 59708}
{"buggy_code": "module simple_798(input en, clk, output y); assign y = en & clk | rst; endmodule", "correct_code": "module simple_798(input en, clk, output y); assign y = (en & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.079841", "id": 23869}
{"buggy_code": "module logic_934(input x, output out); assign out = x + 1; endmodule", "correct_code": "module logic_934(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.145756", "id": 35911}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.103700", "id": 28214}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.994343", "id": 8380}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.971636", "id": 4299}
{"buggy_code": "module logic_343(input rst, x, output result); assign result = rst & x | a; endmodule", "correct_code": "module logic_343(input rst, x, output result); assign result = (rst & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.271445", "id": 58846}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.235527", "id": 52283}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.235818", "id": 52337}
{"buggy_code": "module demo_428(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module demo_428(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.185880", "id": 43256}
{"buggy_code": "module test_616(input rst, c, output y); assign y = rst & c | d; endmodule", "correct_code": "module test_616(input rst, c, output y); assign y = (rst & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.252793", "id": 55442}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272438", "id": 59030}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.066895", "id": 21521}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.097787", "id": 27132}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.166127", "id": 39646}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.123922", "id": 31913}
{"buggy_code": "module test_688(input clk, x, output prod); assign prod = clk & x | x; endmodule", "correct_code": "module test_688(input clk, x, output prod); assign prod = (clk & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.058861", "id": 20046}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.093055", "id": 26270}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.347836", "id": 72746}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.061214", "id": 20481}
{"buggy_code": "module logic_174(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module logic_174(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.287098", "id": 61685}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.011807", "id": 11545}
{"buggy_code": "module logic_882(input a, clk, output out); assign out = a & clk | a; endmodule", "correct_code": "module logic_882(input a, clk, output out); assign out = (a & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.294189", "id": 62982}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.090132", "id": 25740}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.951784", "id": 692}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.194590", "id": 44818}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.222930", "id": 49974}
{"buggy_code": "module logic_287(input d, d, output result); assign result = d & d | y; endmodule", "correct_code": "module logic_287(input d, d, output result); assign result = (d & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.293350", "id": 62830}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.948438", "id": 90}
{"buggy_code": "module logic_231(input y, clk, output q); assign q = y & clk | rst; endmodule", "correct_code": "module logic_231(input y, clk, output q); assign q = (y & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.190591", "id": 44079}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.356297", "id": 74287}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.241328", "id": 53349}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.140488", "id": 34952}
{"buggy_code": "module simple_296(input x, in, output sum); assign sum = x & in | b; endmodule", "correct_code": "module simple_296(input x, in, output sum); assign sum = (x & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.160164", "id": 38562}
{"buggy_code": "module basic_566(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module basic_566(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.032512", "id": 15279}
{"buggy_code": "module logic_536(input in, x, output sum); assign sum = in & x | c; endmodule", "correct_code": "module logic_536(input in, x, output sum); assign sum = (in & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.055454", "id": 19424}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.097697", "id": 27116}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.277841", "id": 59987}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.048556", "id": 18181}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.276866", "id": 59809}
{"buggy_code": "module demo_695(input y, x, output result); assign result = y & x | in; endmodule", "correct_code": "module demo_695(input y, x, output result); assign result = (y & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.281831", "id": 60724}
{"buggy_code": "module demo_230(input y, c, output y); assign y = y & c | in; endmodule", "correct_code": "module demo_230(input y, c, output y); assign y = (y & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.193210", "id": 44562}
{"buggy_code": "module simple_395(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module simple_395(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.103606", "id": 28196}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.134063", "id": 33770}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.949096", "id": 205}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.113301", "id": 29979}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.036702", "id": 16040}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.962468", "id": 2629}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.129972", "id": 33016}
{"buggy_code": "module test_110(input data, output result); assign result = data + 1; endmodule", "correct_code": "module test_110(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.128744", "id": 32794}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.005292", "id": 10358}
{"buggy_code": "module test_625(input a, c, output valid); assign valid = a & c | y; endmodule", "correct_code": "module test_625(input a, c, output valid); assign valid = (a & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.341200", "id": 71544}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.135372", "id": 34008}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.191605", "id": 44266}
{"buggy_code": "module arith_836(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module arith_836(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308579", "id": 65632}
{"buggy_code": "module example_178(input clk, rst, output sum); assign sum = clk & rst | d; endmodule", "correct_code": "module example_178(input clk, rst, output sum); assign sum = (clk & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.337760", "id": 70940}
{"buggy_code": "module logic_538(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module logic_538(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.067880", "id": 21700}
{"buggy_code": "module example_701(input c, output y); assign y = c + 1; endmodule", "correct_code": "module example_701(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.052006", "id": 18784}
{"buggy_code": "module arith_867(input b, rst, output out); assign out = b & rst | clk; endmodule", "correct_code": "module arith_867(input b, rst, output out); assign out = (b & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.317591", "id": 67276}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.060003", "id": 20258}
{"buggy_code": "module logic_516(input rst, clk, output prod); assign prod = rst & clk | clk; endmodule", "correct_code": "module logic_516(input rst, clk, output prod); assign prod = (rst & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.009489", "id": 11123}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.057582", "id": 19813}
{"buggy_code": "module test_975(input en, y, output q); assign q = en & y | in; endmodule", "correct_code": "module test_975(input en, y, output q); assign q = (en & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.180322", "id": 42252}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329006", "id": 69337}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.187009", "id": 43461}
{"buggy_code": "module logic_313(input y, output result); assign result = y + 1; endmodule", "correct_code": "module logic_313(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.144499", "id": 35677}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.346604", "id": 72522}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.169711", "id": 40305}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.244085", "id": 53850}
{"buggy_code": "module example_602(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module example_602(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.127612", "id": 32588}
{"buggy_code": "module simple_665(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module simple_665(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.015624", "id": 12234}
{"buggy_code": "module example_206(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module example_206(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.949538", "id": 285}
{"buggy_code": "module example_447(input b, b, output y); assign y = b & b | data; endmodule", "correct_code": "module example_447(input b, b, output y); assign y = (b & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.290630", "id": 62332}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.336123", "id": 70639}
{"buggy_code": "module example_793(input d, en, output q); assign q = d & en | d; endmodule", "correct_code": "module example_793(input d, en, output q); assign q = (d & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.077513", "id": 23443}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.028928", "id": 14631}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.260658", "id": 56875}
{"buggy_code": "module logic_724(input en, rst, output prod); assign prod = en & rst | y; endmodule", "correct_code": "module logic_724(input en, rst, output prod); assign prod = (en & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.048703", "id": 18209}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.309587", "id": 65816}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.258146", "id": 56416}
{"buggy_code": "module basic_199(input c, output result); assign result = c + 1; endmodule", "correct_code": "module basic_199(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.107010", "id": 28818}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.225642", "id": 50471}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.004704", "id": 10251}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.124932", "id": 32096}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.027893", "id": 14445}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.193098", "id": 44542}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.278507", "id": 60114}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.050724", "id": 18550}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.006592", "id": 10598}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.231704", "id": 51581}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.194052", "id": 44718}
{"buggy_code": "module logic_226(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module logic_226(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.059680", "id": 20199}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.223990", "id": 50169}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.058396", "id": 19963}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.149662", "id": 36628}
{"buggy_code": "module test_973(input a, d, output y); assign y = a & d | y; endmodule", "correct_code": "module test_973(input a, d, output y); assign y = (a & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.320300", "id": 67757}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.183486", "id": 42821}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.006658", "id": 10610}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.175379", "id": 41340}
{"buggy_code": "module basic_71(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module basic_71(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.992253", "id": 8000}
{"buggy_code": "module example_468(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module example_468(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.251543", "id": 55218}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.955454", "id": 1355}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.005818", "id": 10457}
{"buggy_code": "module test_261(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module test_261(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.102783", "id": 28048}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.166297", "id": 39678}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272721", "id": 59083}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.171498", "id": 40632}
{"buggy_code": "module basic_582(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module basic_582(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.096039", "id": 26816}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.303162", "id": 64624}
{"buggy_code": "module simple_503(input d, clk, output result); assign result = d & clk | in; endmodule", "correct_code": "module simple_503(input d, clk, output result); assign result = (d & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.144292", "id": 35638}
{"buggy_code": "module arith_113(input c, output y); assign y = c + 1; endmodule", "correct_code": "module arith_113(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.054939", "id": 19325}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.260006", "id": 56757}
{"buggy_code": "module basic_204(input data, b, output q); assign q = data & b | x; endmodule", "correct_code": "module basic_204(input data, b, output q); assign q = (data & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.078437", "id": 23612}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.970400", "id": 4070}
{"buggy_code": "module simple_650(input d, clk, output prod); assign prod = d & clk | rst; endmodule", "correct_code": "module simple_650(input d, clk, output prod); assign prod = (d & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.953976", "id": 1086}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.085885", "id": 24966}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.056379", "id": 19593}
{"buggy_code": "module example_899(input in, b, output sum); assign sum = in & b | en; endmodule", "correct_code": "module example_899(input in, b, output sum); assign sum = (in & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.330533", "id": 69619}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.347181", "id": 72628}
{"buggy_code": "module demo_481(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module demo_481(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.187989", "id": 43639}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.219737", "id": 49395}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.220449", "id": 49522}
{"buggy_code": "module arith_267(input c, output q); assign q = c + 1; endmodule", "correct_code": "module arith_267(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.998070", "id": 9058}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.165583", "id": 39548}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.174881", "id": 41248}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.264487", "id": 57575}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.350037", "id": 73146}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.164723", "id": 39392}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.195324", "id": 44951}
{"buggy_code": "module demo_279(input x, rst, output out); assign out = x & rst | clk; endmodule", "correct_code": "module demo_279(input x, rst, output out); assign out = (x & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.217394", "id": 48977}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.053971", "id": 19144}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.999165", "id": 9257}
{"buggy_code": "module demo_738(input a, output y); assign y = a + 1; endmodule", "correct_code": "module demo_738(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.012800", "id": 11721}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.091279", "id": 25953}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.110980", "id": 29549}
{"buggy_code": "module example_820(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module example_820(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.028802", "id": 14609}
{"buggy_code": "module logic_970(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module logic_970(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.073409", "id": 22722}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.239744", "id": 53060}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.220381", "id": 49510}
{"buggy_code": "module demo_42(input y, output q); assign q = y + 1; endmodule", "correct_code": "module demo_42(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.999217", "id": 9266}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.098373", "id": 27240}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.168322", "id": 40053}
{"buggy_code": "module demo_484(input a, x, output y); assign y = a & x | c; endmodule", "correct_code": "module demo_484(input a, x, output y); assign y = (a & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.966128", "id": 3296}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.296622", "id": 63429}
{"buggy_code": "module demo_447(input y, output out); assign out = y + 1; endmodule", "correct_code": "module demo_447(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.080128", "id": 23923}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.269641", "id": 58517}
{"buggy_code": "module simple_25(input en, output y); assign y = en + 1; endmodule", "correct_code": "module simple_25(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.996331", "id": 8742}
{"buggy_code": "module basic_709(input in, output result); assign result = in + 1; endmodule", "correct_code": "module basic_709(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.172635", "id": 40841}
{"buggy_code": "module basic_665(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module basic_665(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.047572", "id": 18003}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.953684", "id": 1035}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.024679", "id": 13866}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.297308", "id": 63552}
{"buggy_code": "module basic_313(input in, c, output q); assign q = in & c | data; endmodule", "correct_code": "module basic_313(input in, c, output q); assign q = (in & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.004605", "id": 10233}
{"buggy_code": "module arith_37(input b, clk, output q); assign q = b & clk | in; endmodule", "correct_code": "module arith_37(input b, clk, output q); assign q = (b & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.002722", "id": 9907}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.062647", "id": 20745}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.241008", "id": 53288}
{"buggy_code": "module arith_638(input in, d, output q); assign q = in & d | en; endmodule", "correct_code": "module arith_638(input in, d, output q); assign q = (in & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.338179", "id": 71017}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.026988", "id": 14280}
{"buggy_code": "module test_113(input b, output y); assign y = b + 1; endmodule", "correct_code": "module test_113(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.047709", "id": 18028}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.170134", "id": 40382}
{"buggy_code": "module example_515(input a, rst, output q); assign q = a & rst | data; endmodule", "correct_code": "module example_515(input a, rst, output q); assign q = (a & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.298740", "id": 63815}
{"buggy_code": "module arith_183(input in, output result); assign result = in + 1; endmodule", "correct_code": "module arith_183(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.254314", "id": 55713}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.009054", "id": 11043}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.154391", "id": 37502}
{"buggy_code": "module test_867(input en, output result); assign result = en + 1; endmodule", "correct_code": "module test_867(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.307973", "id": 65520}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.071770", "id": 22418}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.215846", "id": 48694}
{"buggy_code": "module logic_469(input a, output out); assign out = a + 1; endmodule", "correct_code": "module logic_469(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.258867", "id": 56547}
{"buggy_code": "module simple_902(input clk, c, output result); assign result = clk & c | rst; endmodule", "correct_code": "module simple_902(input clk, c, output result); assign result = (clk & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.281766", "id": 60713}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.977340", "id": 5332}
{"buggy_code": "module test_605(input y, x, output out); assign out = y & x | rst; endmodule", "correct_code": "module test_605(input y, x, output out); assign out = (y & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.296565", "id": 63418}
{"buggy_code": "module arith_631(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module arith_631(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.205296", "id": 46772}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.248299", "id": 54624}
{"buggy_code": "module logic_895(input y, output out); assign out = y + 1; endmodule", "correct_code": "module logic_895(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.304118", "id": 64803}
{"buggy_code": "module example_619(input x, in, output prod); assign prod = x & in | rst; endmodule", "correct_code": "module example_619(input x, in, output prod); assign prod = (x & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.080654", "id": 24020}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.157883", "id": 38140}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.001817", "id": 9740}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.344971", "id": 72221}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.158513", "id": 38257}
{"buggy_code": "module test_415(input c, x, output prod); assign prod = c & x | x; endmodule", "correct_code": "module test_415(input c, x, output prod); assign prod = (c & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.324841", "id": 68573}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.235151", "id": 52215}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.234516", "id": 52099}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.040842", "id": 16786}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.985940", "id": 6841}
{"buggy_code": "module demo_171(input a, c, output sum); assign sum = a & c | y; endmodule", "correct_code": "module demo_171(input a, c, output sum); assign sum = (a & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.343719", "id": 72002}
{"buggy_code": "module example_924(input x, clk, output sum); assign sum = x & clk | y; endmodule", "correct_code": "module example_924(input x, clk, output sum); assign sum = (x & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.053037", "id": 18970}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.072635", "id": 22578}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.967235", "id": 3500}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.184618", "id": 43027}
{"buggy_code": "module simple_648(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module simple_648(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.980652", "id": 5878}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.189968", "id": 43964}
{"buggy_code": "module simple_960(input clk, en, output sum); assign sum = clk & en | data; endmodule", "correct_code": "module simple_960(input clk, en, output sum); assign sum = (clk & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.223261", "id": 50035}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.146591", "id": 36062}
{"buggy_code": "module simple_548(input en, output result); assign result = en + 1; endmodule", "correct_code": "module simple_548(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.128302", "id": 32712}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.279812", "id": 60352}
{"buggy_code": "module test_66(input y, x, output valid); assign valid = y & x | en; endmodule", "correct_code": "module test_66(input y, x, output valid); assign valid = (y & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.261130", "id": 56963}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.189651", "id": 43907}
{"buggy_code": "module demo_57(input c, output result); assign result = c + 1; endmodule", "correct_code": "module demo_57(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.162345", "id": 38962}
{"buggy_code": "module simple_555(input data, clk, output valid); assign valid = data & clk | b; endmodule", "correct_code": "module simple_555(input data, clk, output valid); assign valid = (data & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.319253", "id": 67583}
{"buggy_code": "module demo_196(input b, rst, output result); assign result = b & rst | c; endmodule", "correct_code": "module demo_196(input b, rst, output result); assign result = (b & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116604", "id": 30585}
{"buggy_code": "module logic_339(input rst, y, output result); assign result = rst & y | a; endmodule", "correct_code": "module logic_339(input rst, y, output result); assign result = (rst & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.985127", "id": 6690}
{"buggy_code": "module arith_232(input en, output result); assign result = en + 1; endmodule", "correct_code": "module arith_232(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.994620", "id": 8430}
{"buggy_code": "module arith_263(input y, y, output prod); assign prod = y & y | clk; endmodule", "correct_code": "module arith_263(input y, y, output prod); assign prod = (y & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.233046", "id": 51824}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.135336", "id": 34001}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.122974", "id": 31740}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.970992", "id": 4178}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.030282", "id": 14877}
{"buggy_code": "module logic_373(input c, output out); assign out = c + 1; endmodule", "correct_code": "module logic_373(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.032782", "id": 15326}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.228515", "id": 50994}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.022640", "id": 13497}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.109022", "id": 29190}
{"buggy_code": "module example_418(input en, output y); assign y = en + 1; endmodule", "correct_code": "module example_418(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.951003", "id": 546}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.279618", "id": 60316}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.225010", "id": 50354}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.182064", "id": 42561}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.238841", "id": 52893}
{"buggy_code": "module demo_943(input y, data, output sum); assign sum = y & data | rst; endmodule", "correct_code": "module demo_943(input y, data, output sum); assign sum = (y & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.244917", "id": 54005}
{"buggy_code": "module test_397(input a, output out); assign out = a + 1; endmodule", "correct_code": "module test_397(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.221762", "id": 49762}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.268736", "id": 58350}
{"buggy_code": "module arith_805(input d, in, output prod); assign prod = d & in | y; endmodule", "correct_code": "module arith_805(input d, in, output prod); assign prod = (d & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.086841", "id": 25138}
{"buggy_code": "module simple_643(input b, output y); assign y = b + 1; endmodule", "correct_code": "module simple_643(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.027789", "id": 14428}
{"buggy_code": "module test_106(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module test_106(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.088658", "id": 25469}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.979287", "id": 5637}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.143968", "id": 35577}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.255756", "id": 55977}
{"buggy_code": "module basic_586(input a, en, output out); assign out = a & en | y; endmodule", "correct_code": "module basic_586(input a, en, output out); assign out = (a & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.968709", "id": 3770}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.292078", "id": 62599}
{"buggy_code": "module basic_348(input en, y, output out); assign out = en & y | data; endmodule", "correct_code": "module basic_348(input en, y, output out); assign out = (en & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.211798", "id": 47960}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.131554", "id": 33312}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.240842", "id": 53257}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.272811", "id": 59101}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.114972", "id": 30286}
{"buggy_code": "module arith_274(input a, output result); assign result = a + 1; endmodule", "correct_code": "module arith_274(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.292735", "id": 62720}
{"buggy_code": "module simple_789(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module simple_789(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.135053", "id": 33950}
{"buggy_code": "module demo_494(input en, data, output out); assign out = en & data | c; endmodule", "correct_code": "module demo_494(input en, data, output out); assign out = (en & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.183000", "id": 42730}
{"buggy_code": "module test_134(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module test_134(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.957846", "id": 1785}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.237473", "id": 52640}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.083795", "id": 24587}
{"buggy_code": "module test_661(input x, b, output y); assign y = x & b | b; endmodule", "correct_code": "module test_661(input x, b, output y); assign y = (x & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.207109", "id": 47104}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.186120", "id": 43299}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.193427", "id": 44603}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.252490", "id": 55387}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.153950", "id": 37420}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.203442", "id": 46434}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.041371", "id": 16881}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.093725", "id": 26393}
{"buggy_code": "module simple_802(input x, output result); assign result = x + 1; endmodule", "correct_code": "module simple_802(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.985863", "id": 6826}
{"buggy_code": "module basic_651(input b, output q); assign q = b + 1; endmodule", "correct_code": "module basic_651(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.183278", "id": 42783}
{"buggy_code": "module test_304(input data, output y); assign y = data + 1; endmodule", "correct_code": "module test_304(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.964940", "id": 3079}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.217597", "id": 49016}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.228749", "id": 51037}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.252470", "id": 55383}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.987292", "id": 7089}
{"buggy_code": "module simple_496(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module simple_496(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.264020", "id": 57488}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.273076", "id": 59147}
{"buggy_code": "module logic_779(input x, c, output result); assign result = x & c | data; endmodule", "correct_code": "module logic_779(input x, c, output result); assign result = (x & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.321805", "id": 68018}
{"buggy_code": "module demo_399(input en, a, output q); assign q = en & a | rst; endmodule", "correct_code": "module demo_399(input en, a, output q); assign q = (en & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.961912", "id": 2526}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.140764", "id": 35003}
{"buggy_code": "module demo_436(input a, d, output valid); assign valid = a & d | x; endmodule", "correct_code": "module demo_436(input a, d, output valid); assign valid = (a & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.184984", "id": 43094}
{"buggy_code": "module simple_336(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module simple_336(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.008989", "id": 11031}
{"buggy_code": "module arith_865(input clk, en, output q); assign q = clk & en | clk; endmodule", "correct_code": "module arith_865(input clk, en, output q); assign q = (clk & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.230970", "id": 51446}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.171356", "id": 40605}
{"buggy_code": "module logic_32(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module logic_32(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.951533", "id": 644}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.004952", "id": 10295}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.351010", "id": 73321}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.261816", "id": 57090}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.196443", "id": 45155}
{"buggy_code": "module demo_889(input in, en, output result); assign result = in & en | clk; endmodule", "correct_code": "module demo_889(input in, en, output result); assign result = (in & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.313154", "id": 66465}
{"buggy_code": "module simple_773(input y, output result); assign result = y + 1; endmodule", "correct_code": "module simple_773(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.322039", "id": 68061}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.328667", "id": 69274}
{"buggy_code": "module example_263(input d, output q); assign q = d + 1; endmodule", "correct_code": "module example_263(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.047953", "id": 18072}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.271637", "id": 58883}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.085721", "id": 24937}
{"buggy_code": "module example_666(input c, output y); assign y = c + 1; endmodule", "correct_code": "module example_666(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.976046", "id": 5094}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192426", "id": 44419}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.302293", "id": 64466}
{"buggy_code": "module example_546(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module example_546(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.997089", "id": 8880}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.340147", "id": 71356}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.223923", "id": 50156}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.295082", "id": 63144}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.268609", "id": 58326}
{"buggy_code": "module logic_171(input x, output y); assign y = x + 1; endmodule", "correct_code": "module logic_171(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.086022", "id": 24990}
{"buggy_code": "module logic_988(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module logic_988(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.085962", "id": 24980}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.323023", "id": 68241}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.335873", "id": 70592}
{"buggy_code": "module example_994(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module example_994(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.098838", "id": 27324}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.140484", "id": 34951}
{"buggy_code": "module basic_384(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module basic_384(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.136339", "id": 34185}
{"buggy_code": "module test_547(input b, b, output sum); assign sum = b & b | a; endmodule", "correct_code": "module test_547(input b, b, output sum); assign sum = (b & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.348279", "id": 72828}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.233503", "id": 51911}
{"buggy_code": "module simple_89(input en, b, output result); assign result = en & b | en; endmodule", "correct_code": "module simple_89(input en, b, output result); assign result = (en & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.982924", "id": 6288}
{"buggy_code": "module logic_843(input rst, x, output prod); assign prod = rst & x | data; endmodule", "correct_code": "module logic_843(input rst, x, output prod); assign prod = (rst & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.073726", "id": 22782}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.099852", "id": 27510}
{"buggy_code": "module simple_345(input a, output result); assign result = a + 1; endmodule", "correct_code": "module simple_345(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.231663", "id": 51574}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.077468", "id": 23435}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.206107", "id": 46921}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.335979", "id": 70613}
{"buggy_code": "module arith_613(input rst, b, output result); assign result = rst & b | a; endmodule", "correct_code": "module arith_613(input rst, b, output result); assign result = (rst & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.211879", "id": 47972}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.953679", "id": 1034}
{"buggy_code": "module simple_960(input clk, rst, output q); assign q = clk & rst | clk; endmodule", "correct_code": "module simple_960(input clk, rst, output q); assign q = (clk & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.035730", "id": 15864}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.252981", "id": 55476}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.311203", "id": 66111}
{"buggy_code": "module arith_616(input b, d, output y); assign y = b & d | d; endmodule", "correct_code": "module arith_616(input b, d, output y); assign y = (b & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.018364", "id": 12733}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.346423", "id": 72488}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.304441", "id": 64866}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.346377", "id": 72479}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.175628", "id": 41386}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.268532", "id": 58312}
{"buggy_code": "module basic_594(input b, clk, output result); assign result = b & clk | c; endmodule", "correct_code": "module basic_594(input b, clk, output result); assign result = (b & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.343158", "id": 71899}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.078190", "id": 23568}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.999349", "id": 9291}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.108310", "id": 29060}
{"buggy_code": "module arith_948(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module arith_948(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.072820", "id": 22613}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.274646", "id": 59425}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.026722", "id": 14236}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.263052", "id": 57311}
{"buggy_code": "module test_395(input a, x, output valid); assign valid = a & x | data; endmodule", "correct_code": "module test_395(input a, x, output valid); assign valid = (a & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.168602", "id": 40105}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.293076", "id": 62780}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.312131", "id": 66280}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.950545", "id": 469}
{"buggy_code": "module test_731(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module test_731(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.180800", "id": 42339}
{"buggy_code": "module demo_225(input in, output result); assign result = in + 1; endmodule", "correct_code": "module demo_225(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.047533", "id": 17996}
{"buggy_code": "module basic_246(input y, data, output sum); assign sum = y & data | x; endmodule", "correct_code": "module basic_246(input y, data, output sum); assign sum = (y & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.205114", "id": 46738}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.073778", "id": 22792}
{"buggy_code": "module arith_335(input data, output q); assign q = data + 1; endmodule", "correct_code": "module arith_335(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.261243", "id": 56984}
{"buggy_code": "module demo_808(input en, x, output result); assign result = en & x | a; endmodule", "correct_code": "module demo_808(input en, x, output result); assign result = (en & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.213701", "id": 48303}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.298759", "id": 63819}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.019123", "id": 12865}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.999470", "id": 9313}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.119584", "id": 31121}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.233410", "id": 51893}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.013312", "id": 11814}
{"buggy_code": "module simple_216(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module simple_216(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.123118", "id": 31767}
{"buggy_code": "module example_735(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module example_735(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.306858", "id": 65310}
{"buggy_code": "module arith_653(input data, rst, output prod); assign prod = data & rst | a; endmodule", "correct_code": "module arith_653(input data, rst, output prod); assign prod = (data & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.990956", "id": 7762}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.016358", "id": 12367}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.152667", "id": 37183}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.159084", "id": 38362}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232757", "id": 51773}
{"buggy_code": "module basic_919(input x, output y); assign y = x + 1; endmodule", "correct_code": "module basic_919(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.116915", "id": 30639}
{"buggy_code": "module test_998(input d, output y); assign y = d + 1; endmodule", "correct_code": "module test_998(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.027998", "id": 14465}
{"buggy_code": "module logic_596(input in, a, output y); assign y = in & a | x; endmodule", "correct_code": "module logic_596(input in, a, output y); assign y = (in & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.005971", "id": 10484}
{"buggy_code": "module logic_277(input c, d, output result); assign result = c & d | clk; endmodule", "correct_code": "module logic_277(input c, d, output result); assign result = (c & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.173884", "id": 41067}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.981327", "id": 5999}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.185678", "id": 43221}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.240552", "id": 53204}
{"buggy_code": "module simple_737(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module simple_737(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.139125", "id": 34702}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.991383", "id": 7840}
{"buggy_code": "module simple_64(input rst, en, output out); assign out = rst & en | c; endmodule", "correct_code": "module simple_64(input rst, en, output out); assign out = (rst & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.953398", "id": 983}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.068256", "id": 21768}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.191919", "id": 44325}
{"buggy_code": "module logic_883(input b, output q); assign q = b + 1; endmodule", "correct_code": "module logic_883(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.099495", "id": 27445}
{"buggy_code": "module logic_890(input a, output out); assign out = a + 1; endmodule", "correct_code": "module logic_890(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.318846", "id": 67507}
{"buggy_code": "module logic_511(input rst, en, output valid); assign valid = rst & en | c; endmodule", "correct_code": "module logic_511(input rst, en, output valid); assign valid = (rst & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.066010", "id": 21360}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.973719", "id": 4674}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329697", "id": 69465}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.151232", "id": 36916}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.162153", "id": 38928}
{"buggy_code": "module demo_534(input clk, a, output out); assign out = clk & a | a; endmodule", "correct_code": "module demo_534(input clk, a, output out); assign out = (clk & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.983893", "id": 6465}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.008037", "id": 10857}
{"buggy_code": "module arith_282(input d, a, output result); assign result = d & a | a; endmodule", "correct_code": "module arith_282(input d, a, output result); assign result = (d & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.325218", "id": 68642}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.008749", "id": 10988}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.133076", "id": 33586}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.182387", "id": 42620}
{"buggy_code": "module simple_550(input a, en, output q); assign q = a & en | x; endmodule", "correct_code": "module simple_550(input a, en, output q); assign q = (a & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.171089", "id": 40557}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.980452", "id": 5852}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238573", "id": 52844}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.175537", "id": 41369}
{"buggy_code": "module arith_247(input a, c, output q); assign q = a & c | d; endmodule", "correct_code": "module arith_247(input a, c, output q); assign q = (a & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116170", "id": 30504}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.103924", "id": 28253}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.093136", "id": 26285}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.163071", "id": 39091}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.002601", "id": 9885}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.968808", "id": 3784}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.985327", "id": 6727}
{"buggy_code": "module basic_902(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module basic_902(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.983158", "id": 6332}
{"buggy_code": "module arith_584(input d, in, output sum); assign sum = d & in | y; endmodule", "correct_code": "module arith_584(input d, in, output sum); assign sum = (d & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.261491", "id": 57030}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.153767", "id": 37388}
{"buggy_code": "module test_358(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module test_358(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.202713", "id": 46300}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.271850", "id": 58920}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.960393", "id": 2249}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.263559", "id": 57404}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.261237", "id": 56983}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.215142", "id": 48564}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.154915", "id": 37596}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.288945", "id": 62023}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051957", "id": 18776}
{"buggy_code": "module test_558(input en, en, output sum); assign sum = en & en | a; endmodule", "correct_code": "module test_558(input en, en, output sum); assign sum = (en & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.259505", "id": 56664}
{"buggy_code": "module arith_205(input a, c, output out); assign out = a & c | x; endmodule", "correct_code": "module arith_205(input a, c, output out); assign out = (a & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.360054", "id": 74979}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.151767", "id": 37015}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.971646", "id": 4301}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.056992", "id": 19706}
{"buggy_code": "module demo_711(input data, output y); assign y = data + 1; endmodule", "correct_code": "module demo_711(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.207342", "id": 47147}
{"buggy_code": "module demo_551(input b, data, output result); assign result = b & data | clk; endmodule", "correct_code": "module demo_551(input b, data, output result); assign result = (b & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.127639", "id": 32593}
{"buggy_code": "module arith_861(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module arith_861(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.255628", "id": 55954}
{"buggy_code": "module test_198(input in, d, output q); assign q = in & d | clk; endmodule", "correct_code": "module test_198(input in, d, output q); assign q = (in & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.073634", "id": 22764}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.135598", "id": 34050}
{"buggy_code": "module test_343(input x, output q); assign q = x + 1; endmodule", "correct_code": "module test_343(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.062762", "id": 20766}
{"buggy_code": "module example_347(input d, output out); assign out = d + 1; endmodule", "correct_code": "module example_347(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.963248", "id": 2770}
{"buggy_code": "module basic_801(input clk, d, output valid); assign valid = clk & d | d; endmodule", "correct_code": "module basic_801(input clk, d, output valid); assign valid = (clk & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.122721", "id": 31695}
{"buggy_code": "module demo_266(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module demo_266(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.349067", "id": 72970}
{"buggy_code": "module arith_795(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module arith_795(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.345593", "id": 72336}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.045756", "id": 17673}
{"buggy_code": "module example_964(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module example_964(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.983606", "id": 6414}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.279005", "id": 60202}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.049690", "id": 18362}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.259143", "id": 56599}
{"buggy_code": "module logic_69(input c, x, output out); assign out = c & x | x; endmodule", "correct_code": "module logic_69(input c, x, output out); assign out = (c & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.303018", "id": 64598}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.044362", "id": 17423}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.054004", "id": 19150}
{"buggy_code": "module basic_381(input clk, b, output q); assign q = clk & b | c; endmodule", "correct_code": "module basic_381(input clk, b, output q); assign q = (clk & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.280983", "id": 60567}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.018947", "id": 12839}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.272936", "id": 59121}
{"buggy_code": "module test_582(input a, output out); assign out = a + 1; endmodule", "correct_code": "module test_582(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.141555", "id": 35130}
{"buggy_code": "module demo_845(input in, output y); assign y = in + 1; endmodule", "correct_code": "module demo_845(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.303720", "id": 64729}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.067542", "id": 21640}
{"buggy_code": "module demo_180(input a, output q); assign q = a + 1; endmodule", "correct_code": "module demo_180(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.275346", "id": 59541}
{"buggy_code": "module demo_482(input x, output y); assign y = x + 1; endmodule", "correct_code": "module demo_482(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.204729", "id": 46668}
{"buggy_code": "module example_85(input b, output y); assign y = b + 1; endmodule", "correct_code": "module example_85(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.331067", "id": 69717}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.154693", "id": 37558}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.200564", "id": 45908}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.956247", "id": 1498}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.319808", "id": 67677}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.340684", "id": 71453}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.003332", "id": 10018}
{"buggy_code": "module basic_782(input d, output out); assign out = d + 1; endmodule", "correct_code": "module basic_782(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.071623", "id": 22391}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.351050", "id": 73329}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.250295", "id": 54989}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.231368", "id": 51519}
{"buggy_code": "module logic_231(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module logic_231(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.253846", "id": 55628}
{"buggy_code": "module logic_251(input d, in, output y); assign y = d & in | data; endmodule", "correct_code": "module logic_251(input d, in, output y); assign y = (d & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.145071", "id": 35784}
{"buggy_code": "module basic_910(input x, clk, output sum); assign sum = x & clk | y; endmodule", "correct_code": "module basic_910(input x, clk, output sum); assign sum = (x & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.999211", "id": 9265}
{"buggy_code": "module test_680(input a, output y); assign y = a + 1; endmodule", "correct_code": "module test_680(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.212255", "id": 48040}
{"buggy_code": "module logic_592(input clk, c, output y); assign y = clk & c | d; endmodule", "correct_code": "module logic_592(input clk, c, output y); assign y = (clk & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.993166", "id": 8165}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.174886", "id": 41249}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.057793", "id": 19853}
{"buggy_code": "module example_501(input data, data, output valid); assign valid = data & data | data; endmodule", "correct_code": "module example_501(input data, data, output valid); assign valid = (data & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.979656", "id": 5705}
{"buggy_code": "module test_306(input clk, data, output sum); assign sum = clk & data | d; endmodule", "correct_code": "module test_306(input clk, data, output sum); assign sum = (clk & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.164683", "id": 39385}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.056580", "id": 19630}
{"buggy_code": "module logic_534(input en, c, output y); assign y = en & c | c; endmodule", "correct_code": "module logic_534(input en, c, output y); assign y = (en & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.260376", "id": 56824}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.342175", "id": 71722}
{"buggy_code": "module basic_445(input y, b, output y); assign y = y & b | b; endmodule", "correct_code": "module basic_445(input y, b, output y); assign y = (y & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.984407", "id": 6560}
{"buggy_code": "module basic_12(input c, in, output out); assign out = c & in | c; endmodule", "correct_code": "module basic_12(input c, in, output out); assign out = (c & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.238705", "id": 52869}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.997888", "id": 9025}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.303691", "id": 64723}
{"buggy_code": "module arith_407(input d, y, output out); assign out = d & y | a; endmodule", "correct_code": "module arith_407(input d, y, output out); assign out = (d & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.099323", "id": 27413}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.171078", "id": 40555}
{"buggy_code": "module arith_43(input a, rst, output q); assign q = a & rst | in; endmodule", "correct_code": "module arith_43(input a, rst, output q); assign q = (a & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.323898", "id": 68401}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.151747", "id": 37011}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.341264", "id": 71555}
{"buggy_code": "module demo_179(input rst, y, output prod); assign prod = rst & y | clk; endmodule", "correct_code": "module demo_179(input rst, y, output prod); assign prod = (rst & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.235287", "id": 52239}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.103624", "id": 28199}
{"buggy_code": "module example_303(input data, d, output prod); assign prod = data & d | data; endmodule", "correct_code": "module example_303(input data, d, output prod); assign prod = (data & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.178103", "id": 41841}
{"buggy_code": "module test_463(input rst, clk, output prod); assign prod = rst & clk | en; endmodule", "correct_code": "module test_463(input rst, clk, output prod); assign prod = (rst & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.176234", "id": 41497}
{"buggy_code": "module test_628(input c, en, output prod); assign prod = c & en | a; endmodule", "correct_code": "module test_628(input c, en, output prod); assign prod = (c & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.346313", "id": 72467}
{"buggy_code": "module basic_804(input in, en, output y); assign y = in & en | rst; endmodule", "correct_code": "module basic_804(input in, en, output y); assign y = (in & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.205874", "id": 46877}
{"buggy_code": "module test_725(input d, b, output valid); assign valid = d & b | clk; endmodule", "correct_code": "module test_725(input d, b, output valid); assign valid = (d & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.163132", "id": 39102}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.294441", "id": 63029}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.268306", "id": 58269}
{"buggy_code": "module simple_567(input en, output out); assign out = en + 1; endmodule", "correct_code": "module simple_567(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.160805", "id": 38681}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.084900", "id": 24783}
{"buggy_code": "module demo_27(input en, output y); assign y = en + 1; endmodule", "correct_code": "module demo_27(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.992448", "id": 8036}
{"buggy_code": "module demo_55(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module demo_55(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.354785", "id": 74009}
{"buggy_code": "module simple_882(input in, output q); assign q = in + 1; endmodule", "correct_code": "module simple_882(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.261255", "id": 56986}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.061237", "id": 20486}
{"buggy_code": "module arith_865(input c, output y); assign y = c + 1; endmodule", "correct_code": "module arith_865(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.264993", "id": 57667}
{"buggy_code": "module simple_610(input en, in, output result); assign result = en & in | x; endmodule", "correct_code": "module simple_610(input en, in, output result); assign result = (en & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.331811", "id": 69851}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.142041", "id": 35219}
{"buggy_code": "module arith_625(input x, a, output prod); assign prod = x & a | c; endmodule", "correct_code": "module arith_625(input x, a, output prod); assign prod = (x & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.068347", "id": 21784}
{"buggy_code": "module logic_552(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module logic_552(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.154382", "id": 37500}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.059169", "id": 20105}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.253146", "id": 55507}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.991749", "id": 7908}
{"buggy_code": "module example_916(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module example_916(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.024299", "id": 13799}
{"buggy_code": "module test_291(input y, output result); assign result = y + 1; endmodule", "correct_code": "module test_291(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.971950", "id": 4355}
{"buggy_code": "module example_431(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module example_431(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.184187", "id": 42946}
{"buggy_code": "module example_380(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module example_380(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.200129", "id": 45826}
{"buggy_code": "module example_191(input a, output y); assign y = a + 1; endmodule", "correct_code": "module example_191(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.220303", "id": 49495}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.355983", "id": 74230}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.994973", "id": 8494}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.174319", "id": 41145}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.223980", "id": 50167}
{"buggy_code": "module example_739(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module example_739(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.958875", "id": 1975}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.245698", "id": 54154}
{"buggy_code": "module example_752(input en, y, output result); assign result = en & y | clk; endmodule", "correct_code": "module example_752(input en, y, output result); assign result = (en & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.213403", "id": 48249}
{"buggy_code": "module basic_373(input c, output out); assign out = c + 1; endmodule", "correct_code": "module basic_373(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.302583", "id": 64518}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.088814", "id": 25497}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.994704", "id": 8447}
{"buggy_code": "module simple_296(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module simple_296(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.321815", "id": 68020}
{"buggy_code": "module example_577(input b, data, output q); assign q = b & data | y; endmodule", "correct_code": "module example_577(input b, data, output q); assign q = (b & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.118767", "id": 30981}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.974941", "id": 4895}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.032496", "id": 15276}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.062539", "id": 20725}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.152584", "id": 37167}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.051400", "id": 18673}
{"buggy_code": "module example_854(input data, clk, output sum); assign sum = data & clk | in; endmodule", "correct_code": "module example_854(input data, clk, output sum); assign sum = (data & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.240935", "id": 53274}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.058677", "id": 20014}
{"buggy_code": "module logic_459(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module logic_459(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.245896", "id": 54188}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.306894", "id": 65317}
{"buggy_code": "module demo_292(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module demo_292(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.268836", "id": 58366}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.229106", "id": 51100}
{"buggy_code": "module example_428(input en, en, output out); assign out = en & en | y; endmodule", "correct_code": "module example_428(input en, en, output out); assign out = (en & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.266474", "id": 57936}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.978132", "id": 5426}
{"buggy_code": "module logic_350(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module logic_350(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.040383", "id": 16712}
{"buggy_code": "module test_411(input a, rst, output out); assign out = a & rst | a; endmodule", "correct_code": "module test_411(input a, rst, output out); assign out = (a & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.032100", "id": 15205}
{"buggy_code": "module basic_249(input d, x, output out); assign out = d & x | data; endmodule", "correct_code": "module basic_249(input d, x, output out); assign out = (d & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.262018", "id": 57123}
{"buggy_code": "module arith_652(input c, in, output valid); assign valid = c & in | in; endmodule", "correct_code": "module arith_652(input c, in, output valid); assign valid = (c & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.300432", "id": 64126}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.947998", "id": 11}
{"buggy_code": "module simple_795(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module simple_795(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.279547", "id": 60303}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.324798", "id": 68567}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.322372", "id": 68122}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.026103", "id": 14127}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.002681", "id": 9900}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.012834", "id": 11725}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.149787", "id": 36651}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.027338", "id": 14343}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.978539", "id": 5501}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.219366", "id": 49339}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.989954", "id": 7576}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.077609", "id": 23461}
{"buggy_code": "module logic_692(input a, en, output sum); assign sum = a & en | a; endmodule", "correct_code": "module logic_692(input a, en, output sum); assign sum = (a & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.278324", "id": 60078}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117417", "id": 30734}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.158173", "id": 38194}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.206705", "id": 47031}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.166785", "id": 39770}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.155142", "id": 37638}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.039930", "id": 16629}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.160015", "id": 38536}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.060287", "id": 20311}
{"buggy_code": "module simple_501(input rst, in, output out); assign out = rst & in | clk; endmodule", "correct_code": "module simple_501(input rst, in, output out); assign out = (rst & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.333711", "id": 70200}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.330504", "id": 69614}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.343321", "id": 71928}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.984400", "id": 6559}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.347265", "id": 72643}
{"buggy_code": "module example_491(input clk, a, output out); assign out = clk & a | c; endmodule", "correct_code": "module example_491(input clk, a, output out); assign out = (clk & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.208644", "id": 47382}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.024949", "id": 13915}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.112740", "id": 29875}
{"buggy_code": "module test_878(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module test_878(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.347544", "id": 72693}
{"buggy_code": "module demo_268(input en, a, output result); assign result = en & a | x; endmodule", "correct_code": "module demo_268(input en, a, output result); assign result = (en & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.129619", "id": 32952}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.164693", "id": 39387}
{"buggy_code": "module simple_382(input x, d, output valid); assign valid = x & d | rst; endmodule", "correct_code": "module simple_382(input x, d, output valid); assign valid = (x & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.084628", "id": 24733}
{"buggy_code": "module demo_611(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module demo_611(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.991298", "id": 7825}
{"buggy_code": "module test_815(input y, clk, output result); assign result = y & clk | x; endmodule", "correct_code": "module test_815(input y, clk, output result); assign result = (y & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.167467", "id": 39896}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.973444", "id": 4624}
{"buggy_code": "module simple_468(input rst, clk, output sum); assign sum = rst & clk | rst; endmodule", "correct_code": "module simple_468(input rst, clk, output sum); assign sum = (rst & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.025319", "id": 13981}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.227359", "id": 50782}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.334534", "id": 70347}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.314417", "id": 66695}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.141820", "id": 35180}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.340483", "id": 71415}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.262467", "id": 57207}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.047566", "id": 18002}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.087648", "id": 25284}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.289192", "id": 62068}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.321730", "id": 68005}
{"buggy_code": "module basic_270(input c, data, output prod); assign prod = c & data | clk; endmodule", "correct_code": "module basic_270(input c, data, output prod); assign prod = (c & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.278630", "id": 60135}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.298225", "id": 63722}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.101132", "id": 27746}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.272648", "id": 59069}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.952648", "id": 850}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.054741", "id": 19289}
{"buggy_code": "module basic_177(input x, d, output out); assign out = x & d | b; endmodule", "correct_code": "module basic_177(input x, d, output out); assign out = (x & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.051762", "id": 18739}
{"buggy_code": "module simple_717(input b, y, output result); assign result = b & y | data; endmodule", "correct_code": "module simple_717(input b, y, output result); assign result = (b & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.953392", "id": 982}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.088804", "id": 25495}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.292648", "id": 62704}
{"buggy_code": "module demo_269(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module demo_269(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.028786", "id": 14606}
{"buggy_code": "module example_149(input in, output out); assign out = in + 1; endmodule", "correct_code": "module example_149(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.229392", "id": 51152}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.199575", "id": 45725}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.354610", "id": 73976}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.152384", "id": 37131}
{"buggy_code": "module arith_522(input in, a, output y); assign y = in & a | data; endmodule", "correct_code": "module arith_522(input in, a, output y); assign y = (in & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.094226", "id": 26482}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.180029", "id": 42197}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.042098", "id": 17010}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.278243", "id": 60063}
{"buggy_code": "module basic_500(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module basic_500(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.093285", "id": 26312}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.153440", "id": 37327}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.244475", "id": 53924}
{"buggy_code": "module example_419(input a, clk, output result); assign result = a & clk | y; endmodule", "correct_code": "module example_419(input a, clk, output result); assign result = (a & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.054881", "id": 19314}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.314856", "id": 66774}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.179399", "id": 42084}
{"buggy_code": "module arith_208(input y, c, output q); assign q = y & c | x; endmodule", "correct_code": "module arith_208(input y, c, output q); assign q = (y & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.180685", "id": 42318}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.260522", "id": 56851}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.149632", "id": 36622}
{"buggy_code": "module basic_8(input data, output q); assign q = data + 1; endmodule", "correct_code": "module basic_8(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.965695", "id": 3219}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.026786", "id": 14248}
{"buggy_code": "module basic_984(input in, c, output sum); assign sum = in & c | clk; endmodule", "correct_code": "module basic_984(input in, c, output sum); assign sum = (in & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.008048", "id": 10859}
{"buggy_code": "module demo_406(input data, output out); assign out = data + 1; endmodule", "correct_code": "module demo_406(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.001164", "id": 9619}
{"buggy_code": "module simple_499(input b, output result); assign result = b + 1; endmodule", "correct_code": "module simple_499(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.226553", "id": 50637}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.126541", "id": 32394}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.043494", "id": 17264}
{"buggy_code": "module demo_135(input data, output y); assign y = data + 1; endmodule", "correct_code": "module demo_135(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.011110", "id": 11416}
{"buggy_code": "module simple_207(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module simple_207(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.134616", "id": 33871}
{"buggy_code": "module arith_758(input d, data, output valid); assign valid = d & data | d; endmodule", "correct_code": "module arith_758(input d, data, output valid); assign valid = (d & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.335518", "id": 70528}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.059593", "id": 20184}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.998809", "id": 9192}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.023249", "id": 13608}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.058059", "id": 19900}
{"buggy_code": "module arith_1(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module arith_1(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.253688", "id": 55601}
{"buggy_code": "module simple_636(input c, a, output y); assign y = c & a | rst; endmodule", "correct_code": "module simple_636(input c, a, output y); assign y = (c & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.265115", "id": 57689}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.328195", "id": 69187}
{"buggy_code": "module example_688(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module example_688(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.135064", "id": 33952}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.139421", "id": 34755}
{"buggy_code": "module simple_538(input x, x, output result); assign result = x & x | a; endmodule", "correct_code": "module simple_538(input x, x, output result); assign result = (x & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.304783", "id": 64930}
{"buggy_code": "module arith_537(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module arith_537(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.981258", "id": 5986}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.237552", "id": 52655}
{"buggy_code": "module example_189(input rst, clk, output sum); assign sum = rst & clk | clk; endmodule", "correct_code": "module example_189(input rst, clk, output sum); assign sum = (rst & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.029135", "id": 14668}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.002993", "id": 9955}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.223633", "id": 50106}
{"buggy_code": "module test_162(input in, data, output sum); assign sum = in & data | in; endmodule", "correct_code": "module test_162(input in, data, output sum); assign sum = (in & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.243528", "id": 53749}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.334052", "id": 70262}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.070807", "id": 22243}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.310777", "id": 66034}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.086542", "id": 25086}
{"buggy_code": "module example_744(input rst, d, output prod); assign prod = rst & d | c; endmodule", "correct_code": "module example_744(input rst, d, output prod); assign prod = (rst & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.219413", "id": 49348}
{"buggy_code": "module test_119(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module test_119(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.998228", "id": 9087}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.982440", "id": 6201}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.127592", "id": 32584}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.307743", "id": 65478}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.140144", "id": 34887}
{"buggy_code": "module example_698(input d, output result); assign result = d + 1; endmodule", "correct_code": "module example_698(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.167059", "id": 39820}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.145976", "id": 35950}
{"buggy_code": "module example_364(input in, rst, output sum); assign sum = in & rst | y; endmodule", "correct_code": "module example_364(input in, rst, output sum); assign sum = (in & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.113061", "id": 29934}
{"buggy_code": "module simple_705(input d, a, output q); assign q = d & a | c; endmodule", "correct_code": "module simple_705(input d, a, output q); assign q = (d & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.968013", "id": 3644}
{"buggy_code": "module demo_165(input en, rst, output y); assign y = en & rst | a; endmodule", "correct_code": "module demo_165(input en, rst, output y); assign y = (en & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.333772", "id": 70211}
{"buggy_code": "module test_820(input data, rst, output valid); assign valid = data & rst | x; endmodule", "correct_code": "module test_820(input data, rst, output valid); assign valid = (data & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.249648", "id": 54873}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.348072", "id": 72788}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.062995", "id": 20807}
{"buggy_code": "module example_250(input in, b, output prod); assign prod = in & b | en; endmodule", "correct_code": "module example_250(input in, b, output prod); assign prod = (in & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.025070", "id": 13937}
{"buggy_code": "module demo_902(input a, c, output result); assign result = a & c | y; endmodule", "correct_code": "module demo_902(input a, c, output result); assign result = (a & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.243284", "id": 53705}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.037000", "id": 16092}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.242083", "id": 53486}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.148674", "id": 36443}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.278409", "id": 60095}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.115654", "id": 30411}
{"buggy_code": "module logic_832(input x, c, output result); assign result = x & c | b; endmodule", "correct_code": "module logic_832(input x, c, output result); assign result = (x & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.095877", "id": 26786}
{"buggy_code": "module test_539(input data, data, output valid); assign valid = data & data | rst; endmodule", "correct_code": "module test_539(input data, data, output valid); assign valid = (data & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.089422", "id": 25609}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.246428", "id": 54284}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.082641", "id": 24378}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.073968", "id": 22825}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.198152", "id": 45465}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.203297", "id": 46407}
{"buggy_code": "module logic_571(input d, y, output y); assign y = d & y | y; endmodule", "correct_code": "module logic_571(input d, y, output y); assign y = (d & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.144229", "id": 35625}
{"buggy_code": "module demo_260(input rst, y, output valid); assign valid = rst & y | d; endmodule", "correct_code": "module demo_260(input rst, y, output valid); assign valid = (rst & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.104287", "id": 28321}
{"buggy_code": "module demo_600(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module demo_600(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.138651", "id": 34614}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.044720", "id": 17489}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.328683", "id": 69277}
{"buggy_code": "module logic_471(input b, x, output sum); assign sum = b & x | rst; endmodule", "correct_code": "module logic_471(input b, x, output sum); assign sum = (b & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.051553", "id": 18702}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.258861", "id": 56546}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.999007", "id": 9227}
{"buggy_code": "module logic_674(input c, x, output y); assign y = c & x | en; endmodule", "correct_code": "module logic_674(input c, x, output y); assign y = (c & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.977584", "id": 5375}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.235337", "id": 52248}
{"buggy_code": "module logic_763(input x, d, output valid); assign valid = x & d | b; endmodule", "correct_code": "module logic_763(input x, d, output valid); assign valid = (x & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.108020", "id": 29005}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051542", "id": 18700}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.232724", "id": 51766}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.216923", "id": 48888}
{"buggy_code": "module example_143(input in, output y); assign y = in + 1; endmodule", "correct_code": "module example_143(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.347947", "id": 72766}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.120685", "id": 31320}
{"buggy_code": "module arith_95(input x, y, output q); assign q = x & y | clk; endmodule", "correct_code": "module arith_95(input x, y, output q); assign q = (x & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.296928", "id": 63483}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.239663", "id": 53045}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.064808", "id": 21145}
{"buggy_code": "module basic_878(input in, output out); assign out = in + 1; endmodule", "correct_code": "module basic_878(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.067770", "id": 21681}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043646", "id": 17291}
{"buggy_code": "module arith_446(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module arith_446(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.043856", "id": 17328}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.296495", "id": 63406}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.094459", "id": 26527}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.105835", "id": 28603}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.172147", "id": 40752}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.267437", "id": 58113}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.076740", "id": 23319}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.120229", "id": 31237}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.290191", "id": 62251}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.324587", "id": 68528}
{"buggy_code": "module test_974(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module test_974(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.158806", "id": 38313}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.131931", "id": 33380}
{"buggy_code": "module simple_621(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module simple_621(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.107462", "id": 28902}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.347841", "id": 72747}
{"buggy_code": "module simple_231(input y, c, output out); assign out = y & c | x; endmodule", "correct_code": "module simple_231(input y, c, output out); assign out = (y & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.051005", "id": 18600}
{"buggy_code": "module example_801(input b, clk, output result); assign result = b & clk | data; endmodule", "correct_code": "module example_801(input b, clk, output result); assign result = (b & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.227619", "id": 50831}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.983420", "id": 6379}
{"buggy_code": "module example_945(input d, output q); assign q = d + 1; endmodule", "correct_code": "module example_945(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.314264", "id": 66667}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.276714", "id": 59785}
{"buggy_code": "module test_944(input b, output y); assign y = b + 1; endmodule", "correct_code": "module test_944(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.352918", "id": 73665}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.013170", "id": 11787}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.356241", "id": 74277}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.071105", "id": 22297}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.979047", "id": 5594}
{"buggy_code": "module simple_712(input x, c, output y); assign y = x & c | data; endmodule", "correct_code": "module simple_712(input x, c, output y); assign y = (x & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.013131", "id": 11779}
{"buggy_code": "module arith_26(input a, output result); assign result = a + 1; endmodule", "correct_code": "module arith_26(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.114315", "id": 30166}
{"buggy_code": "module logic_107(input in, data, output out); assign out = in & data | x; endmodule", "correct_code": "module logic_107(input in, data, output out); assign out = (in & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.137079", "id": 34320}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.040134", "id": 16669}
{"buggy_code": "module basic_177(input y, output result); assign result = y + 1; endmodule", "correct_code": "module basic_177(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.103129", "id": 28109}
{"buggy_code": "module demo_554(input data, d, output out); assign out = data & d | b; endmodule", "correct_code": "module demo_554(input data, d, output out); assign out = (data & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.146376", "id": 36023}
{"buggy_code": "module test_82(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module test_82(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.032890", "id": 15344}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.298871", "id": 63838}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.337463", "id": 70886}
{"buggy_code": "module basic_655(input c, d, output out); assign out = c & d | c; endmodule", "correct_code": "module basic_655(input c, d, output out); assign out = (c & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.135316", "id": 33997}
{"buggy_code": "module example_605(input rst, a, output result); assign result = rst & a | d; endmodule", "correct_code": "module example_605(input rst, a, output result); assign result = (rst & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.214978", "id": 48535}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205401", "id": 46792}
{"buggy_code": "module example_594(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module example_594(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.954547", "id": 1192}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.058793", "id": 20036}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.974548", "id": 4825}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.217339", "id": 48966}
{"buggy_code": "module example_245(input c, in, output out); assign out = c & in | in; endmodule", "correct_code": "module example_245(input c, in, output out); assign out = (c & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.098862", "id": 27328}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.047592", "id": 18007}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.963989", "id": 2903}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.244714", "id": 53969}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.024533", "id": 13840}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.052477", "id": 18870}
{"buggy_code": "module test_834(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module test_834(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.301951", "id": 64401}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.342143", "id": 71716}
{"buggy_code": "module arith_13(input c, a, output valid); assign valid = c & a | en; endmodule", "correct_code": "module arith_13(input c, a, output valid); assign valid = (c & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.040626", "id": 16748}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.289903", "id": 62199}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.136939", "id": 34294}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.351868", "id": 73478}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.152761", "id": 37201}
{"buggy_code": "module simple_729(input a, x, output valid); assign valid = a & x | clk; endmodule", "correct_code": "module simple_729(input a, x, output valid); assign valid = (a & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.169505", "id": 40268}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.970210", "id": 4034}
{"buggy_code": "module test_292(input y, b, output valid); assign valid = y & b | d; endmodule", "correct_code": "module test_292(input y, b, output valid); assign valid = (y & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.089728", "id": 25666}
{"buggy_code": "module test_908(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module test_908(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.339383", "id": 71218}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.036092", "id": 15928}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.074451", "id": 22915}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.965347", "id": 3155}
{"buggy_code": "module simple_48(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module simple_48(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.276688", "id": 59780}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.132429", "id": 33468}
{"buggy_code": "module arith_149(input data, y, output prod); assign prod = data & y | clk; endmodule", "correct_code": "module arith_149(input data, y, output prod); assign prod = (data & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.955624", "id": 1384}
{"buggy_code": "module simple_126(input x, output y); assign y = x + 1; endmodule", "correct_code": "module simple_126(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.007012", "id": 10674}
{"buggy_code": "module basic_430(input rst, a, output sum); assign sum = rst & a | c; endmodule", "correct_code": "module basic_430(input rst, a, output sum); assign sum = (rst & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.077735", "id": 23484}
{"buggy_code": "module simple_791(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module simple_791(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.010054", "id": 11224}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.180950", "id": 42366}
{"buggy_code": "module logic_794(input c, in, output result); assign result = c & in | rst; endmodule", "correct_code": "module logic_794(input c, in, output result); assign result = (c & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.212183", "id": 48027}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.255701", "id": 55967}
{"buggy_code": "module logic_521(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module logic_521(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.051986", "id": 18780}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.034352", "id": 15611}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.183561", "id": 42834}
{"buggy_code": "module test_149(input y, d, output out); assign out = y & d | c; endmodule", "correct_code": "module test_149(input y, d, output out); assign out = (y & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.342115", "id": 71711}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.306811", "id": 65303}
{"buggy_code": "module basic_982(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module basic_982(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091213", "id": 25941}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.099720", "id": 27487}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.054144", "id": 19176}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.327177", "id": 69000}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.216282", "id": 48772}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.260612", "id": 56866}
{"buggy_code": "module demo_887(input c, y, output prod); assign prod = c & y | rst; endmodule", "correct_code": "module demo_887(input c, y, output prod); assign prod = (c & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.331799", "id": 69849}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.106587", "id": 28743}
{"buggy_code": "module logic_865(input data, en, output result); assign result = data & en | b; endmodule", "correct_code": "module logic_865(input data, en, output result); assign result = (data & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.997313", "id": 8921}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.343579", "id": 71976}
{"buggy_code": "module example_984(input b, data, output valid); assign valid = b & data | a; endmodule", "correct_code": "module example_984(input b, data, output valid); assign valid = (b & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.282027", "id": 60759}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.002807", "id": 9923}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.048344", "id": 18143}
{"buggy_code": "module demo_340(input c, a, output sum); assign sum = c & a | a; endmodule", "correct_code": "module demo_340(input c, a, output sum); assign sum = (c & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.350345", "id": 73202}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.064415", "id": 21069}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.971047", "id": 4189}
{"buggy_code": "module arith_390(input c, y, output valid); assign valid = c & y | rst; endmodule", "correct_code": "module arith_390(input c, y, output valid); assign valid = (c & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.189527", "id": 43884}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.214388", "id": 48429}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.279847", "id": 60357}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.307426", "id": 65418}
{"buggy_code": "module logic_532(input a, output q); assign q = a + 1; endmodule", "correct_code": "module logic_532(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.255692", "id": 55965}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.209007", "id": 47447}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.979481", "id": 5673}
{"buggy_code": "module arith_872(input in, output out); assign out = in + 1; endmodule", "correct_code": "module arith_872(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.225993", "id": 50535}
{"buggy_code": "module demo_479(input in, a, output sum); assign sum = in & a | c; endmodule", "correct_code": "module demo_479(input in, a, output sum); assign sum = (in & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.102102", "id": 27923}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.102027", "id": 27911}
{"buggy_code": "module logic_387(input data, b, output sum); assign sum = data & b | in; endmodule", "correct_code": "module logic_387(input data, b, output sum); assign sum = (data & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.127632", "id": 32592}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.003896", "id": 10101}
{"buggy_code": "module basic_32(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module basic_32(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.249295", "id": 54806}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.168283", "id": 40046}
{"buggy_code": "module simple_419(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module simple_419(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.127696", "id": 32603}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.172440", "id": 40806}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.029897", "id": 14807}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.197308", "id": 45312}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.168975", "id": 40169}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.260296", "id": 56809}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.307668", "id": 65463}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.340287", "id": 71384}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.091549", "id": 26003}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.166260", "id": 39671}
{"buggy_code": "module example_399(input in, b, output out); assign out = in & b | b; endmodule", "correct_code": "module example_399(input in, b, output out); assign out = (in & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.258790", "id": 56535}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.143130", "id": 35425}
{"buggy_code": "module test_150(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module test_150(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.245617", "id": 54138}
{"buggy_code": "module test_16(input data, b, output result); assign result = data & b | in; endmodule", "correct_code": "module test_16(input data, b, output result); assign result = (data & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.141729", "id": 35163}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.984684", "id": 6611}
{"buggy_code": "module simple_650(input y, c, output q); assign q = y & c | a; endmodule", "correct_code": "module simple_650(input y, c, output q); assign q = (y & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.343618", "id": 71983}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.232168", "id": 51662}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.230580", "id": 51375}
{"buggy_code": "module test_598(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module test_598(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.319648", "id": 67655}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.216194", "id": 48756}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.358961", "id": 74775}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.053921", "id": 19134}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.012265", "id": 11624}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.160240", "id": 38577}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.328008", "id": 69152}
{"buggy_code": "module example_742(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module example_742(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.221607", "id": 49733}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.079881", "id": 23877}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.097729", "id": 27122}
{"buggy_code": "module test_13(input en, d, output q); assign q = en & d | rst; endmodule", "correct_code": "module test_13(input en, d, output q); assign q = (en & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.312115", "id": 66277}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.227902", "id": 50881}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.156582", "id": 37904}
{"buggy_code": "module arith_755(input in, output q); assign q = in + 1; endmodule", "correct_code": "module arith_755(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.319436", "id": 67616}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.180494", "id": 42284}
{"buggy_code": "module example_378(input en, x, output result); assign result = en & x | b; endmodule", "correct_code": "module example_378(input en, x, output result); assign result = (en & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.330091", "id": 69536}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.162596", "id": 39008}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.960353", "id": 2241}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043503", "id": 17266}
{"buggy_code": "module logic_544(input c, a, output y); assign y = c & a | in; endmodule", "correct_code": "module logic_544(input c, a, output y); assign y = (c & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.081923", "id": 24248}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.198276", "id": 45489}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.241679", "id": 53415}
{"buggy_code": "module simple_133(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module simple_133(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.214514", "id": 48451}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.128582", "id": 32764}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.006222", "id": 10529}
{"buggy_code": "module test_771(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module test_771(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.293248", "id": 62812}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.983380", "id": 6372}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.314977", "id": 66797}
{"buggy_code": "module basic_831(input a, in, output prod); assign prod = a & in | en; endmodule", "correct_code": "module basic_831(input a, in, output prod); assign prod = (a & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.255572", "id": 55944}
{"buggy_code": "module demo_31(input a, d, output out); assign out = a & d | en; endmodule", "correct_code": "module demo_31(input a, d, output out); assign out = (a & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.315994", "id": 66981}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182949", "id": 42720}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182458", "id": 42633}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.188075", "id": 43656}
{"buggy_code": "module simple_731(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module simple_731(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.155508", "id": 37705}
{"buggy_code": "module simple_759(input rst, b, output y); assign y = rst & b | en; endmodule", "correct_code": "module simple_759(input rst, b, output y); assign y = (rst & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.032736", "id": 15318}
{"buggy_code": "module example_893(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module example_893(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.238568", "id": 52843}
{"buggy_code": "module example_413(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module example_413(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.354621", "id": 73978}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.201132", "id": 46011}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.020327", "id": 13078}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.346218", "id": 72449}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.137659", "id": 34431}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.999317", "id": 9284}
{"buggy_code": "module simple_181(input y, output result); assign result = y + 1; endmodule", "correct_code": "module simple_181(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.304756", "id": 64925}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.166278", "id": 39674}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.003794", "id": 10084}
{"buggy_code": "module simple_805(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module simple_805(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.178703", "id": 41954}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.979503", "id": 5677}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.107203", "id": 28855}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.071935", "id": 22448}
{"buggy_code": "module example_387(input x, output result); assign result = x + 1; endmodule", "correct_code": "module example_387(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.302797", "id": 64559}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.116571", "id": 30579}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.355178", "id": 74081}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.314380", "id": 66688}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.028097", "id": 14483}
{"buggy_code": "module logic_101(input clk, rst, output prod); assign prod = clk & rst | in; endmodule", "correct_code": "module logic_101(input clk, rst, output prod); assign prod = (clk & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.171341", "id": 40602}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.294134", "id": 62973}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.326732", "id": 68920}
{"buggy_code": "module arith_11(input data, x, output q); assign q = data & x | data; endmodule", "correct_code": "module arith_11(input data, x, output q); assign q = (data & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.223917", "id": 50155}
{"buggy_code": "module demo_175(input data, d, output result); assign result = data & d | a; endmodule", "correct_code": "module demo_175(input data, d, output result); assign result = (data & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.059970", "id": 20252}
{"buggy_code": "module simple_760(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module simple_760(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.077937", "id": 23520}
{"buggy_code": "module example_982(input c, en, output valid); assign valid = c & en | b; endmodule", "correct_code": "module example_982(input c, en, output valid); assign valid = (c & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.324862", "id": 68577}
{"buggy_code": "module test_305(input y, in, output q); assign q = y & in | d; endmodule", "correct_code": "module test_305(input y, in, output q); assign q = (y & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.050433", "id": 18498}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.053368", "id": 19032}
{"buggy_code": "module basic_198(input x, output y); assign y = x + 1; endmodule", "correct_code": "module basic_198(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.176317", "id": 41512}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.324852", "id": 68575}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.035150", "id": 15757}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.971500", "id": 4273}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.982898", "id": 6283}
{"buggy_code": "module example_990(input clk, d, output result); assign result = clk & d | x; endmodule", "correct_code": "module example_990(input clk, d, output result); assign result = (clk & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.171559", "id": 40643}
{"buggy_code": "module simple_50(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module simple_50(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.347847", "id": 72748}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.121222", "id": 31418}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.963094", "id": 2740}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.312235", "id": 66298}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.260197", "id": 56791}
{"buggy_code": "module test_502(input b, output q); assign q = b + 1; endmodule", "correct_code": "module test_502(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091860", "id": 26057}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.351935", "id": 73490}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.261172", "id": 56971}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.243900", "id": 53816}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.148669", "id": 36442}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.242519", "id": 53565}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.249769", "id": 54895}
{"buggy_code": "module arith_407(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module arith_407(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.020234", "id": 13060}
{"buggy_code": "module basic_246(input in, rst, output out); assign out = in & rst | in; endmodule", "correct_code": "module basic_246(input in, rst, output out); assign out = (in & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.103454", "id": 28168}
{"buggy_code": "module simple_529(input y, y, output result); assign result = y & y | a; endmodule", "correct_code": "module simple_529(input y, y, output result); assign result = (y & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.344358", "id": 72118}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.224236", "id": 50213}
{"buggy_code": "module logic_290(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module logic_290(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.209629", "id": 47561}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.984801", "id": 6631}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.261424", "id": 57018}
{"buggy_code": "module demo_54(input in, output y); assign y = in + 1; endmodule", "correct_code": "module demo_54(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.235074", "id": 52200}
{"buggy_code": "module basic_626(input rst, d, output result); assign result = rst & d | d; endmodule", "correct_code": "module basic_626(input rst, d, output result); assign result = (rst & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.157120", "id": 38001}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.034357", "id": 15612}
{"buggy_code": "module arith_126(input in, output y); assign y = in + 1; endmodule", "correct_code": "module arith_126(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.018000", "id": 12666}
{"buggy_code": "module test_924(input en, d, output sum); assign sum = en & d | b; endmodule", "correct_code": "module test_924(input en, d, output sum); assign sum = (en & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.135018", "id": 33944}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.965006", "id": 3091}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.283616", "id": 61052}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.233592", "id": 51928}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.346979", "id": 72590}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.194729", "id": 44844}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043090", "id": 17192}
{"buggy_code": "module simple_689(input clk, a, output y); assign y = clk & a | c; endmodule", "correct_code": "module simple_689(input clk, a, output y); assign y = (clk & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.206731", "id": 47035}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.253437", "id": 55555}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.064792", "id": 21142}
{"buggy_code": "module test_77(input c, y, output prod); assign prod = c & y | en; endmodule", "correct_code": "module test_77(input c, y, output prod); assign prod = (c & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.148442", "id": 36400}
{"buggy_code": "module logic_993(input d, in, output result); assign result = d & in | rst; endmodule", "correct_code": "module logic_993(input d, in, output result); assign result = (d & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.029528", "id": 14741}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.302438", "id": 64493}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.279362", "id": 60268}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.304156", "id": 64811}
{"buggy_code": "module test_134(input en, output y); assign y = en + 1; endmodule", "correct_code": "module test_134(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.957758", "id": 1772}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.019322", "id": 12896}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.989783", "id": 7546}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.113765", "id": 30065}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.096620", "id": 26920}
{"buggy_code": "module demo_489(input x, data, output valid); assign valid = x & data | c; endmodule", "correct_code": "module demo_489(input x, data, output valid); assign valid = (x & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.102157", "id": 27933}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.004292", "id": 10176}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.081845", "id": 24234}
{"buggy_code": "module test_571(input data, output result); assign result = data + 1; endmodule", "correct_code": "module test_571(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.019257", "id": 12884}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.151718", "id": 37005}
{"buggy_code": "module simple_400(input c, rst, output q); assign q = c & rst | in; endmodule", "correct_code": "module simple_400(input c, rst, output q); assign q = (c & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.235428", "id": 52265}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.240470", "id": 53188}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.001481", "id": 9678}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.335265", "id": 70482}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.294899", "id": 63110}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.355481", "id": 74139}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008773", "id": 10993}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.217330", "id": 48964}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.261227", "id": 56981}
{"buggy_code": "module demo_269(input rst, in, output prod); assign prod = rst & in | clk; endmodule", "correct_code": "module demo_269(input rst, in, output prod); assign prod = (rst & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.128640", "id": 32775}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.133204", "id": 33610}
{"buggy_code": "module arith_539(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module arith_539(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.227888", "id": 50878}
{"buggy_code": "module logic_521(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module logic_521(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.321062", "id": 67880}
{"buggy_code": "module logic_681(input rst, x, output y); assign y = rst & x | clk; endmodule", "correct_code": "module logic_681(input rst, x, output y); assign y = (rst & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.070845", "id": 22248}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.081283", "id": 24133}
{"buggy_code": "module demo_459(input en, output result); assign result = en + 1; endmodule", "correct_code": "module demo_459(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.084238", "id": 24664}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.106737", "id": 28771}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.092993", "id": 26259}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.174374", "id": 41155}
{"buggy_code": "module simple_324(input rst, d, output out); assign out = rst & d | x; endmodule", "correct_code": "module simple_324(input rst, d, output out); assign out = (rst & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.165935", "id": 39611}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.067198", "id": 21577}
{"buggy_code": "module test_491(input en, en, output y); assign y = en & en | clk; endmodule", "correct_code": "module test_491(input en, en, output y); assign y = (en & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.231246", "id": 51497}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.314088", "id": 66634}
{"buggy_code": "module demo_187(input y, output result); assign result = y + 1; endmodule", "correct_code": "module demo_187(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.270836", "id": 58733}
{"buggy_code": "module basic_114(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module basic_114(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.339634", "id": 71264}
{"buggy_code": "module example_28(input en, b, output out); assign out = en & b | d; endmodule", "correct_code": "module example_28(input en, b, output out); assign out = (en & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.309093", "id": 65724}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.326896", "id": 68949}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.126585", "id": 32403}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.326475", "id": 68872}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.962356", "id": 2608}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.332655", "id": 70004}
{"buggy_code": "module arith_376(input en, output y); assign y = en + 1; endmodule", "correct_code": "module arith_376(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.081683", "id": 24207}
{"buggy_code": "module logic_217(input y, rst, output y); assign y = y & rst | d; endmodule", "correct_code": "module logic_217(input y, rst, output y); assign y = (y & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.041266", "id": 16862}
{"buggy_code": "module test_750(input y, a, output y); assign y = y & a | in; endmodule", "correct_code": "module test_750(input y, a, output y); assign y = (y & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.146759", "id": 36093}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.980533", "id": 5857}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.346813", "id": 72561}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.268790", "id": 58360}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.272571", "id": 59054}
{"buggy_code": "module basic_834(input c, clk, output q); assign q = c & clk | x; endmodule", "correct_code": "module basic_834(input c, clk, output q); assign q = (c & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.206895", "id": 47065}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.336558", "id": 70720}
{"buggy_code": "module example_617(input d, rst, output out); assign out = d & rst | c; endmodule", "correct_code": "module example_617(input d, rst, output out); assign out = (d & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.358905", "id": 74764}
{"buggy_code": "module example_679(input data, data, output sum); assign sum = data & data | y; endmodule", "correct_code": "module example_679(input data, data, output sum); assign sum = (data & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.200845", "id": 45958}
{"buggy_code": "module arith_934(input a, output out); assign out = a + 1; endmodule", "correct_code": "module arith_934(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.036630", "id": 16027}
{"buggy_code": "module test_421(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module test_421(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.080407", "id": 23974}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.211781", "id": 47957}
{"buggy_code": "module basic_709(input y, b, output out); assign out = y & b | in; endmodule", "correct_code": "module basic_709(input y, b, output out); assign out = (y & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.215016", "id": 48542}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.120323", "id": 31254}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.272831", "id": 59103}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.194763", "id": 44850}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.119302", "id": 31078}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.111949", "id": 29727}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.992918", "id": 8120}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.126353", "id": 32359}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.185797", "id": 43243}
{"buggy_code": "module example_807(input b, x, output sum); assign sum = b & x | y; endmodule", "correct_code": "module example_807(input b, x, output sum); assign sum = (b & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.327045", "id": 68975}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.158567", "id": 38267}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.304696", "id": 64914}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.019522", "id": 12932}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.033048", "id": 15372}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.146132", "id": 35979}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.187504", "id": 43552}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.284034", "id": 61127}
{"buggy_code": "module example_404(input in, b, output result); assign result = in & b | c; endmodule", "correct_code": "module example_404(input in, b, output result); assign result = (in & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.018277", "id": 12718}
{"buggy_code": "module test_625(input y, x, output valid); assign valid = y & x | c; endmodule", "correct_code": "module test_625(input y, x, output valid); assign valid = (y & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.169618", "id": 40287}
{"buggy_code": "module simple_317(input b, output y); assign y = b + 1; endmodule", "correct_code": "module simple_317(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118902", "id": 31003}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286753", "id": 61624}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.322960", "id": 68229}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.033043", "id": 15371}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.967361", "id": 3523}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.131302", "id": 33264}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.115498", "id": 30383}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.996703", "id": 8811}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.304497", "id": 64877}
{"buggy_code": "module arith_337(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module arith_337(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.208433", "id": 47344}
{"buggy_code": "module test_224(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module test_224(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.958037", "id": 1821}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.983849", "id": 6457}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.302699", "id": 64541}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.005151", "id": 10333}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.227697", "id": 50846}
{"buggy_code": "module test_749(input d, b, output y); assign y = d & b | rst; endmodule", "correct_code": "module test_749(input d, b, output y); assign y = (d & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.136026", "id": 34127}
{"buggy_code": "module simple_121(input clk, data, output out); assign out = clk & data | in; endmodule", "correct_code": "module simple_121(input clk, data, output out); assign out = (clk & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.224073", "id": 50184}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.029403", "id": 14717}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.047417", "id": 17974}
{"buggy_code": "module demo_794(input a, output q); assign q = a + 1; endmodule", "correct_code": "module demo_794(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.239523", "id": 53019}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.248854", "id": 54725}
{"buggy_code": "module basic_63(input d, output out); assign out = d + 1; endmodule", "correct_code": "module basic_63(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.971276", "id": 4230}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.970170", "id": 4027}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.185696", "id": 43225}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.245195", "id": 54057}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.195963", "id": 45067}
{"buggy_code": "module test_619(input x, clk, output y); assign y = x & clk | y; endmodule", "correct_code": "module test_619(input x, clk, output y); assign y = (x & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.163626", "id": 39194}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.068079", "id": 21736}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.982591", "id": 6229}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.244436", "id": 53917}
{"buggy_code": "module arith_712(input c, output q); assign q = c + 1; endmodule", "correct_code": "module arith_712(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.104843", "id": 28419}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.336199", "id": 70654}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.283518", "id": 61033}
{"buggy_code": "module demo_160(input a, x, output valid); assign valid = a & x | en; endmodule", "correct_code": "module demo_160(input a, x, output valid); assign valid = (a & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.318043", "id": 67360}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.303444", "id": 64676}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.972448", "id": 4444}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.275540", "id": 59579}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.113387", "id": 29994}
{"buggy_code": "module logic_402(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module logic_402(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.110421", "id": 29449}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.222740", "id": 49939}
{"buggy_code": "module basic_271(input clk, clk, output result); assign result = clk & clk | data; endmodule", "correct_code": "module basic_271(input clk, clk, output result); assign result = (clk & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.248502", "id": 54663}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.346463", "id": 72496}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.285831", "id": 61453}
{"buggy_code": "module simple_965(input clk, in, output prod); assign prod = clk & in | rst; endmodule", "correct_code": "module simple_965(input clk, in, output prod); assign prod = (clk & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.273681", "id": 59258}
{"buggy_code": "module logic_749(input data, clk, output out); assign out = data & clk | c; endmodule", "correct_code": "module logic_749(input data, clk, output out); assign out = (data & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.980458", "id": 5853}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.098820", "id": 27323}
{"buggy_code": "module arith_496(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module arith_496(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.202187", "id": 46203}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.132494", "id": 33480}
{"buggy_code": "module basic_148(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module basic_148(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.279226", "id": 60242}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.138726", "id": 34629}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.154326", "id": 37490}
{"buggy_code": "module demo_301(input a, output y); assign y = a + 1; endmodule", "correct_code": "module demo_301(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.081482", "id": 24169}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.157064", "id": 37990}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.068488", "id": 21811}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.292616", "id": 62698}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.357158", "id": 74446}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.230953", "id": 51443}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.154768", "id": 37572}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.272697", "id": 59079}
{"buggy_code": "module logic_191(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module logic_191(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.245531", "id": 54121}
{"buggy_code": "module example_928(input d, a, output q); assign q = d & a | x; endmodule", "correct_code": "module example_928(input d, a, output q); assign q = (d & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.178178", "id": 41855}
{"buggy_code": "module basic_990(input a, output result); assign result = a + 1; endmodule", "correct_code": "module basic_990(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.338372", "id": 71053}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.209397", "id": 47519}
{"buggy_code": "module simple_876(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module simple_876(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.171726", "id": 40674}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.068127", "id": 21744}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.960662", "id": 2299}
{"buggy_code": "module logic_826(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module logic_826(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.176922", "id": 41622}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.195329", "id": 44952}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.172389", "id": 40796}
{"buggy_code": "module example_492(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module example_492(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.152182", "id": 37092}
{"buggy_code": "module arith_671(input c, in, output prod); assign prod = c & in | b; endmodule", "correct_code": "module arith_671(input c, in, output prod); assign prod = (c & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.288351", "id": 61913}
{"buggy_code": "module logic_638(input a, output q); assign q = a + 1; endmodule", "correct_code": "module logic_638(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.212838", "id": 48144}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.253216", "id": 55519}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.008872", "id": 11010}
{"buggy_code": "module logic_470(input y, rst, output result); assign result = y & rst | x; endmodule", "correct_code": "module logic_470(input y, rst, output result); assign result = (y & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.267547", "id": 58131}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.963545", "id": 2823}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.049960", "id": 18410}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.125086", "id": 32126}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.124341", "id": 31989}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.242143", "id": 53496}
{"buggy_code": "module logic_355(input y, output y); assign y = y + 1; endmodule", "correct_code": "module logic_355(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.284523", "id": 61217}
{"buggy_code": "module demo_384(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module demo_384(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.205312", "id": 46775}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.191393", "id": 44226}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.236698", "id": 52497}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.989597", "id": 7511}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.257926", "id": 56375}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.169942", "id": 40345}
{"buggy_code": "module demo_719(input a, a, output prod); assign prod = a & a | x; endmodule", "correct_code": "module demo_719(input a, a, output prod); assign prod = (a & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.064152", "id": 21021}
{"buggy_code": "module simple_564(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module simple_564(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.299516", "id": 63959}
{"buggy_code": "module test_917(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module test_917(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.992347", "id": 8017}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.017987", "id": 12664}
{"buggy_code": "module logic_748(input a, output out); assign out = a + 1; endmodule", "correct_code": "module logic_748(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.989258", "id": 7447}
{"buggy_code": "module demo_442(input a, y, output q); assign q = a & y | in; endmodule", "correct_code": "module demo_442(input a, y, output q); assign q = (a & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.167951", "id": 39985}
{"buggy_code": "module example_128(input data, output out); assign out = data + 1; endmodule", "correct_code": "module example_128(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.956606", "id": 1562}
{"buggy_code": "module arith_878(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module arith_878(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.318463", "id": 67437}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.307811", "id": 65491}
{"buggy_code": "module basic_971(input en, output y); assign y = en + 1; endmodule", "correct_code": "module basic_971(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.273309", "id": 59190}
{"buggy_code": "module demo_316(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module demo_316(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.976193", "id": 5121}
{"buggy_code": "module demo_49(input data, rst, output result); assign result = data & rst | y; endmodule", "correct_code": "module demo_49(input data, rst, output result); assign result = (data & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.245016", "id": 54023}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.132196", "id": 33426}
{"buggy_code": "module arith_420(input x, output out); assign out = x + 1; endmodule", "correct_code": "module arith_420(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.354251", "id": 73909}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.298927", "id": 63848}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.225875", "id": 50512}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.095524", "id": 26722}
{"buggy_code": "module logic_606(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module logic_606(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.993706", "id": 8264}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.246491", "id": 54295}
{"buggy_code": "module basic_974(input b, d, output sum); assign sum = b & d | clk; endmodule", "correct_code": "module basic_974(input b, d, output sum); assign sum = (b & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.030275", "id": 14876}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.336983", "id": 70798}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.164100", "id": 39280}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.326820", "id": 68936}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.141035", "id": 35052}
{"buggy_code": "module logic_51(input d, y, output q); assign q = d & y | x; endmodule", "correct_code": "module logic_51(input d, y, output q); assign q = (d & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.306920", "id": 65322}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.993970", "id": 8310}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.022601", "id": 13490}
{"buggy_code": "module example_646(input data, output result); assign result = data + 1; endmodule", "correct_code": "module example_646(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.301820", "id": 64379}
{"buggy_code": "module basic_802(input data, en, output valid); assign valid = data & en | c; endmodule", "correct_code": "module basic_802(input data, en, output valid); assign valid = (data & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.221574", "id": 49727}
{"buggy_code": "module simple_873(input b, output result); assign result = b + 1; endmodule", "correct_code": "module simple_873(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.265531", "id": 57766}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.000717", "id": 9538}
{"buggy_code": "module basic_500(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module basic_500(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.286628", "id": 61600}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.009593", "id": 11142}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.086714", "id": 25117}
{"buggy_code": "module arith_640(input y, output y); assign y = y + 1; endmodule", "correct_code": "module arith_640(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.181894", "id": 42528}
{"buggy_code": "module simple_659(input en, rst, output prod); assign prod = en & rst | data; endmodule", "correct_code": "module simple_659(input en, rst, output prod); assign prod = (en & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.203651", "id": 46471}
{"buggy_code": "module simple_944(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module simple_944(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.094557", "id": 26545}
{"buggy_code": "module logic_853(input x, data, output q); assign q = x & data | data; endmodule", "correct_code": "module logic_853(input x, data, output q); assign q = (x & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.050631", "id": 18535}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.258490", "id": 56480}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.282429", "id": 60836}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.204014", "id": 46537}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238489", "id": 52829}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.188575", "id": 43748}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.124374", "id": 31995}
{"buggy_code": "module basic_574(input d, output y); assign y = d + 1; endmodule", "correct_code": "module basic_574(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.242328", "id": 53530}
{"buggy_code": "module simple_715(input en, output result); assign result = en + 1; endmodule", "correct_code": "module simple_715(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.228310", "id": 50956}
{"buggy_code": "module basic_988(input y, output q); assign q = y + 1; endmodule", "correct_code": "module basic_988(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.129029", "id": 32843}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.277054", "id": 59843}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.359415", "id": 74861}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.252352", "id": 55362}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.254334", "id": 55717}
{"buggy_code": "module basic_968(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module basic_968(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174673", "id": 41210}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.283466", "id": 61024}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.259263", "id": 56620}
{"buggy_code": "module arith_67(input in, d, output prod); assign prod = in & d | in; endmodule", "correct_code": "module arith_67(input in, d, output prod); assign prod = (in & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.053642", "id": 19083}
{"buggy_code": "module example_982(input d, y, output prod); assign prod = d & y | y; endmodule", "correct_code": "module example_982(input d, y, output prod); assign prod = (d & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.147191", "id": 36168}
{"buggy_code": "module basic_477(input d, output result); assign result = d + 1; endmodule", "correct_code": "module basic_477(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.305317", "id": 65025}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205350", "id": 46782}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.244887", "id": 54000}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.006615", "id": 10602}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.355560", "id": 74153}
{"buggy_code": "module demo_961(input d, output result); assign result = d + 1; endmodule", "correct_code": "module demo_961(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.007239", "id": 10714}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.257040", "id": 56212}
{"buggy_code": "module simple_955(input en, data, output valid); assign valid = en & data | c; endmodule", "correct_code": "module simple_955(input en, data, output valid); assign valid = (en & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.324147", "id": 68447}
{"buggy_code": "module basic_597(input clk, c, output y); assign y = clk & c | y; endmodule", "correct_code": "module basic_597(input clk, c, output y); assign y = (clk & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.306105", "id": 65171}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.255210", "id": 55877}
{"buggy_code": "module test_463(input y, output out); assign out = y + 1; endmodule", "correct_code": "module test_463(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.978575", "id": 5507}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.275278", "id": 59528}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.140322", "id": 34921}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.248617", "id": 54684}
{"buggy_code": "module basic_811(input c, output y); assign y = c + 1; endmodule", "correct_code": "module basic_811(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.063099", "id": 20826}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.150692", "id": 36818}
{"buggy_code": "module arith_623(input c, output out); assign out = c + 1; endmodule", "correct_code": "module arith_623(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.312067", "id": 66268}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.173535", "id": 41005}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.029792", "id": 14789}
{"buggy_code": "module basic_830(input en, b, output result); assign result = en & b | x; endmodule", "correct_code": "module basic_830(input en, b, output result); assign result = (en & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.257075", "id": 56218}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.995966", "id": 8675}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.972706", "id": 4492}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.143250", "id": 35446}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.057891", "id": 19870}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.129147", "id": 32866}
{"buggy_code": "module logic_318(input y, in, output prod); assign prod = y & in | c; endmodule", "correct_code": "module logic_318(input y, in, output prod); assign prod = (y & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.127013", "id": 32480}
{"buggy_code": "module test_872(input a, x, output out); assign out = a & x | clk; endmodule", "correct_code": "module test_872(input a, x, output out); assign out = (a & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.310837", "id": 66043}
{"buggy_code": "module simple_899(input d, output out); assign out = d + 1; endmodule", "correct_code": "module simple_899(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.160815", "id": 38683}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.248553", "id": 54673}
{"buggy_code": "module example_716(input x, output out); assign out = x + 1; endmodule", "correct_code": "module example_716(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.157832", "id": 38130}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.021671", "id": 13321}
{"buggy_code": "module logic_276(input in, a, output q); assign q = in & a | d; endmodule", "correct_code": "module logic_276(input in, a, output q); assign q = (in & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.124421", "id": 32003}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.244752", "id": 53977}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.967427", "id": 3536}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.018208", "id": 12705}
{"buggy_code": "module example_731(input rst, rst, output result); assign result = rst & rst | c; endmodule", "correct_code": "module example_731(input rst, rst, output result); assign result = (rst & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.127156", "id": 32505}
{"buggy_code": "module arith_623(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module arith_623(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.058258", "id": 19936}
{"buggy_code": "module example_480(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module example_480(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.347323", "id": 72654}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.020873", "id": 13173}
{"buggy_code": "module simple_644(input b, d, output out); assign out = b & d | en; endmodule", "correct_code": "module simple_644(input b, d, output out); assign out = (b & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.336923", "id": 70786}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.204558", "id": 46638}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.112750", "id": 29877}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.236027", "id": 52373}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.256764", "id": 56162}
{"buggy_code": "module demo_600(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module demo_600(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.079246", "id": 23761}
{"buggy_code": "module arith_96(input a, x, output prod); assign prod = a & x | y; endmodule", "correct_code": "module arith_96(input a, x, output prod); assign prod = (a & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.193250", "id": 44569}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051630", "id": 18715}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.353457", "id": 73766}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.108611", "id": 29117}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.017417", "id": 12560}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.972588", "id": 4470}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.116980", "id": 30651}
{"buggy_code": "module basic_786(input c, b, output sum); assign sum = c & b | in; endmodule", "correct_code": "module basic_786(input c, b, output sum); assign sum = (c & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.202087", "id": 46185}
{"buggy_code": "module example_960(input d, clk, output out); assign out = d & clk | clk; endmodule", "correct_code": "module example_960(input d, clk, output out); assign out = (d & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.149915", "id": 36672}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.337518", "id": 70896}
{"buggy_code": "module example_309(input y, rst, output result); assign result = y & rst | c; endmodule", "correct_code": "module example_309(input y, rst, output result); assign result = (y & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.312273", "id": 66305}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.292712", "id": 62716}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.139969", "id": 34855}
{"buggy_code": "module logic_929(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module logic_929(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.156045", "id": 37803}
{"buggy_code": "module demo_735(input data, rst, output prod); assign prod = data & rst | d; endmodule", "correct_code": "module demo_735(input data, rst, output prod); assign prod = (data & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.289038", "id": 62041}
{"buggy_code": "module example_556(input d, output y); assign y = d + 1; endmodule", "correct_code": "module example_556(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.031778", "id": 15149}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.108629", "id": 29120}
{"buggy_code": "module basic_119(input y, b, output result); assign result = y & b | b; endmodule", "correct_code": "module basic_119(input y, b, output result); assign result = (y & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.037846", "id": 16246}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.008382", "id": 10920}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.339980", "id": 71325}
{"buggy_code": "module demo_754(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module demo_754(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.193962", "id": 44701}
{"buggy_code": "module demo_261(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module demo_261(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.154759", "id": 37570}
{"buggy_code": "module arith_756(input a, y, output valid); assign valid = a & y | y; endmodule", "correct_code": "module arith_756(input a, y, output valid); assign valid = (a & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.011939", "id": 11566}
{"buggy_code": "module logic_61(input y, output y); assign y = y + 1; endmodule", "correct_code": "module logic_61(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.099618", "id": 27469}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.227787", "id": 50862}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.283149", "id": 60965}
{"buggy_code": "module logic_702(input en, b, output prod); assign prod = en & b | clk; endmodule", "correct_code": "module logic_702(input en, b, output prod); assign prod = (en & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.994204", "id": 8353}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.956275", "id": 1503}
{"buggy_code": "module example_947(input y, data, output valid); assign valid = y & data | y; endmodule", "correct_code": "module example_947(input y, data, output valid); assign valid = (y & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.177097", "id": 41655}
{"buggy_code": "module simple_197(input b, output result); assign result = b + 1; endmodule", "correct_code": "module simple_197(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.222992", "id": 49986}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.294889", "id": 63108}
{"buggy_code": "module logic_525(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module logic_525(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.087462", "id": 25251}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.026816", "id": 14254}
{"buggy_code": "module arith_77(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module arith_77(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.007333", "id": 10732}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.054647", "id": 19271}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.273603", "id": 59244}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.122007", "id": 31562}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.303757", "id": 64736}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.258818", "id": 56540}
{"buggy_code": "module demo_928(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module demo_928(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.230794", "id": 51415}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.214781", "id": 48500}
{"buggy_code": "module logic_788(input a, c, output prod); assign prod = a & c | data; endmodule", "correct_code": "module logic_788(input a, c, output prod); assign prod = (a & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.061393", "id": 20515}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.123195", "id": 31781}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.202707", "id": 46299}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.227639", "id": 50835}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210486", "id": 47720}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.335612", "id": 70546}
{"buggy_code": "module basic_988(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module basic_988(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308304", "id": 65582}
{"buggy_code": "module test_962(input b, y, output prod); assign prod = b & y | clk; endmodule", "correct_code": "module test_962(input b, y, output prod); assign prod = (b & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.169204", "id": 40211}
{"buggy_code": "module logic_906(input data, output q); assign q = data + 1; endmodule", "correct_code": "module logic_906(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.276076", "id": 59673}
{"buggy_code": "module arith_196(input x, output result); assign result = x + 1; endmodule", "correct_code": "module arith_196(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.097300", "id": 27043}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.203202", "id": 46390}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.981857", "id": 6093}
{"buggy_code": "module simple_920(input d, output out); assign out = d + 1; endmodule", "correct_code": "module simple_920(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.318767", "id": 67495}
{"buggy_code": "module test_739(input b, output result); assign result = b + 1; endmodule", "correct_code": "module test_739(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.338716", "id": 71117}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179884", "id": 42170}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117156", "id": 30685}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.107254", "id": 28864}
{"buggy_code": "module arith_286(input x, x, output out); assign out = x & x | y; endmodule", "correct_code": "module arith_286(input x, x, output out); assign out = (x & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.268709", "id": 58345}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.123207", "id": 31783}
{"buggy_code": "module simple_13(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module simple_13(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.034776", "id": 15687}
{"buggy_code": "module basic_363(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module basic_363(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.167341", "id": 39874}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.245267", "id": 54071}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.254291", "id": 55709}
{"buggy_code": "module simple_788(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module simple_788(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.145430", "id": 35852}
{"buggy_code": "module test_670(input en, output out); assign out = en + 1; endmodule", "correct_code": "module test_670(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.325145", "id": 68629}
{"buggy_code": "module arith_405(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module arith_405(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.307663", "id": 65462}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.097772", "id": 27129}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.177420", "id": 41718}
{"buggy_code": "module basic_746(input rst, en, output q); assign q = rst & en | clk; endmodule", "correct_code": "module basic_746(input rst, en, output q); assign q = (rst & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.257672", "id": 56330}
{"buggy_code": "module simple_704(input in, x, output sum); assign sum = in & x | y; endmodule", "correct_code": "module simple_704(input in, x, output sum); assign sum = (in & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.202308", "id": 46225}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.270888", "id": 58743}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.259312", "id": 56629}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.139980", "id": 34857}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.977057", "id": 5279}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.107471", "id": 28904}
{"buggy_code": "module test_942(input d, data, output valid); assign valid = d & data | y; endmodule", "correct_code": "module test_942(input d, data, output valid); assign valid = (d & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.977577", "id": 5374}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.313879", "id": 66595}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.322061", "id": 68065}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.949179", "id": 221}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.998385", "id": 9115}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.010922", "id": 11381}
{"buggy_code": "module arith_632(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module arith_632(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.244307", "id": 53893}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.211246", "id": 47858}
{"buggy_code": "module logic_379(input rst, rst, output sum); assign sum = rst & rst | clk; endmodule", "correct_code": "module logic_379(input rst, rst, output sum); assign sum = (rst & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.093618", "id": 26374}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.359775", "id": 74930}
{"buggy_code": "module arith_847(input data, output y); assign y = data + 1; endmodule", "correct_code": "module arith_847(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.248408", "id": 54645}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.192153", "id": 44368}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.204764", "id": 46675}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.084482", "id": 24708}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.344482", "id": 72141}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.272452", "id": 59033}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.242463", "id": 53555}
{"buggy_code": "module example_91(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module example_91(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.136020", "id": 34126}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.055757", "id": 19479}
{"buggy_code": "module example_946(input y, output y); assign y = y + 1; endmodule", "correct_code": "module example_946(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.022924", "id": 13549}
{"buggy_code": "module test_114(input clk, y, output q); assign q = clk & y | x; endmodule", "correct_code": "module test_114(input clk, y, output q); assign q = (clk & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.064215", "id": 21032}
{"buggy_code": "module logic_908(input a, output result); assign result = a + 1; endmodule", "correct_code": "module logic_908(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.023329", "id": 13622}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.112778", "id": 29882}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.264382", "id": 57555}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.974032", "id": 4729}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.055407", "id": 19415}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.165076", "id": 39455}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.135686", "id": 34066}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.298481", "id": 63769}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.127249", "id": 32522}
{"buggy_code": "module arith_568(input en, in, output y); assign y = en & in | clk; endmodule", "correct_code": "module arith_568(input en, in, output y); assign y = (en & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.302278", "id": 64463}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.993721", "id": 8267}
{"buggy_code": "module test_721(input d, x, output result); assign result = d & x | in; endmodule", "correct_code": "module test_721(input d, x, output result); assign result = (d & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.006881", "id": 10649}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.246219", "id": 54247}
{"buggy_code": "module arith_17(input in, output y); assign y = in + 1; endmodule", "correct_code": "module arith_17(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.972342", "id": 4425}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.347807", "id": 72742}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.196645", "id": 45192}
{"buggy_code": "module example_324(input a, data, output q); assign q = a & data | x; endmodule", "correct_code": "module example_324(input a, data, output q); assign q = (a & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.249751", "id": 54891}
{"buggy_code": "module basic_381(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module basic_381(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.991603", "id": 7881}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.337236", "id": 70845}
{"buggy_code": "module simple_276(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module simple_276(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.086652", "id": 25106}
{"buggy_code": "module simple_722(input a, output q); assign q = a + 1; endmodule", "correct_code": "module simple_722(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.288053", "id": 61857}
{"buggy_code": "module test_556(input data, a, output sum); assign sum = data & a | data; endmodule", "correct_code": "module test_556(input data, a, output sum); assign sum = (data & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.329474", "id": 69425}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.190803", "id": 44117}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.238385", "id": 52808}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.022890", "id": 13543}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.163871", "id": 39238}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.009560", "id": 11136}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.190602", "id": 44081}
{"buggy_code": "module arith_591(input data, b, output result); assign result = data & b | d; endmodule", "correct_code": "module arith_591(input data, b, output result); assign result = (data & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.202157", "id": 46198}
{"buggy_code": "module simple_560(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module simple_560(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.164772", "id": 39401}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.190219", "id": 44011}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.086123", "id": 25009}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.305495", "id": 65059}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.272346", "id": 59013}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.101718", "id": 27855}
{"buggy_code": "module logic_764(input y, output out); assign out = y + 1; endmodule", "correct_code": "module logic_764(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.950154", "id": 397}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.000602", "id": 9517}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.155316", "id": 37671}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.240263", "id": 53153}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.032300", "id": 15242}
{"buggy_code": "module simple_627(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module simple_627(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.269539", "id": 58498}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.208158", "id": 47294}
{"buggy_code": "module logic_828(input x, c, output q); assign q = x & c | x; endmodule", "correct_code": "module logic_828(input x, c, output q); assign q = (x & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.127898", "id": 32639}
{"buggy_code": "module example_497(input en, output y); assign y = en + 1; endmodule", "correct_code": "module example_497(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.241211", "id": 53327}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.114189", "id": 30142}
{"buggy_code": "module simple_216(input data, clk, output y); assign y = data & clk | in; endmodule", "correct_code": "module simple_216(input data, clk, output y); assign y = (data & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.035270", "id": 15780}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.136058", "id": 34133}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.282722", "id": 60890}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.046068", "id": 17728}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.275499", "id": 59571}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.298729", "id": 63813}
{"buggy_code": "module basic_384(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module basic_384(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.065295", "id": 21232}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.166186", "id": 39657}
{"buggy_code": "module basic_618(input clk, c, output result); assign result = clk & c | x; endmodule", "correct_code": "module basic_618(input clk, c, output result); assign result = (clk & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.196592", "id": 45181}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.020514", "id": 13111}
{"buggy_code": "module arith_684(input y, rst, output valid); assign valid = y & rst | a; endmodule", "correct_code": "module arith_684(input y, rst, output valid); assign valid = (y & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.050986", "id": 18597}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064027", "id": 20999}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.311199", "id": 66110}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.122511", "id": 31654}
{"buggy_code": "module basic_773(input en, output y); assign y = en + 1; endmodule", "correct_code": "module basic_773(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.184731", "id": 43049}
{"buggy_code": "module simple_866(input in, data, output sum); assign sum = in & data | data; endmodule", "correct_code": "module simple_866(input in, data, output sum); assign sum = (in & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.311734", "id": 66209}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.319481", "id": 67624}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.192811", "id": 44490}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277246", "id": 59879}
{"buggy_code": "module basic_596(input rst, data, output y); assign y = rst & data | en; endmodule", "correct_code": "module basic_596(input rst, data, output y); assign y = (rst & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.234743", "id": 52139}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.235409", "id": 52262}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.033195", "id": 15400}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.052000", "id": 18783}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.245395", "id": 54096}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.108213", "id": 29042}
{"buggy_code": "module demo_150(input b, d, output y); assign y = b & d | b; endmodule", "correct_code": "module demo_150(input b, d, output y); assign y = (b & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.129776", "id": 32981}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.130403", "id": 33096}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.971666", "id": 4305}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.279970", "id": 60380}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.269978", "id": 58577}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.070221", "id": 22133}
{"buggy_code": "module arith_464(input b, output y); assign y = b + 1; endmodule", "correct_code": "module arith_464(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.958782", "id": 1960}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.091814", "id": 26051}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.084383", "id": 24689}
{"buggy_code": "module simple_915(input x, data, output prod); assign prod = x & data | data; endmodule", "correct_code": "module simple_915(input x, data, output prod); assign prod = (x & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.022989", "id": 13560}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.990074", "id": 7598}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.120482", "id": 31283}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.127863", "id": 32633}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.090247", "id": 25760}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.165708", "id": 39571}
{"buggy_code": "module arith_420(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module arith_420(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.100915", "id": 27704}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.139653", "id": 34799}
{"buggy_code": "module arith_695(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module arith_695(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.282343", "id": 60819}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.214853", "id": 48512}
{"buggy_code": "module logic_126(input a, en, output out); assign out = a & en | d; endmodule", "correct_code": "module logic_126(input a, en, output out); assign out = (a & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.100035", "id": 27544}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.066105", "id": 21378}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043424", "id": 17252}
{"buggy_code": "module simple_703(input in, output y); assign y = in + 1; endmodule", "correct_code": "module simple_703(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.051948", "id": 18774}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.201541", "id": 46086}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.127672", "id": 32599}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.160338", "id": 38595}
{"buggy_code": "module logic_823(input data, a, output out); assign out = data & a | in; endmodule", "correct_code": "module logic_823(input data, a, output out); assign out = (data & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.162125", "id": 38922}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.332237", "id": 69928}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.185526", "id": 43192}
{"buggy_code": "module arith_624(input x, output result); assign result = x + 1; endmodule", "correct_code": "module arith_624(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.027435", "id": 14362}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.948704", "id": 139}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.088601", "id": 25459}
{"buggy_code": "module basic_333(input x, b, output y); assign y = x & b | data; endmodule", "correct_code": "module basic_333(input x, b, output y); assign y = (x & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.117990", "id": 30839}
{"buggy_code": "module arith_469(input data, clk, output valid); assign valid = data & clk | en; endmodule", "correct_code": "module arith_469(input data, clk, output valid); assign valid = (data & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.241971", "id": 53466}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.186511", "id": 43373}
{"buggy_code": "module basic_154(input data, output result); assign result = data + 1; endmodule", "correct_code": "module basic_154(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.019252", "id": 12883}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.037186", "id": 16126}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.269671", "id": 58522}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.288725", "id": 61983}
{"buggy_code": "module test_372(input data, y, output y); assign y = data & y | x; endmodule", "correct_code": "module test_372(input data, y, output y); assign y = (data & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.129099", "id": 32856}
{"buggy_code": "module arith_712(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module arith_712(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.312490", "id": 66345}
{"buggy_code": "module basic_500(input c, output out); assign out = c + 1; endmodule", "correct_code": "module basic_500(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.077421", "id": 23426}
{"buggy_code": "module basic_464(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module basic_464(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.210801", "id": 47780}
{"buggy_code": "module logic_357(input x, output result); assign result = x + 1; endmodule", "correct_code": "module logic_357(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.291561", "id": 62504}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.260937", "id": 56927}
{"buggy_code": "module simple_81(input a, en, output valid); assign valid = a & en | a; endmodule", "correct_code": "module simple_81(input a, en, output valid); assign valid = (a & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.356796", "id": 74381}
{"buggy_code": "module example_464(input d, en, output q); assign q = d & en | b; endmodule", "correct_code": "module example_464(input d, en, output q); assign q = (d & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.353568", "id": 73787}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.129008", "id": 32839}
{"buggy_code": "module logic_632(input y, output y); assign y = y + 1; endmodule", "correct_code": "module logic_632(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.009754", "id": 11172}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.326934", "id": 68956}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.029788", "id": 14788}
{"buggy_code": "module simple_833(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module simple_833(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.235372", "id": 52255}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.025991", "id": 14106}
{"buggy_code": "module basic_262(input en, clk, output prod); assign prod = en & clk | clk; endmodule", "correct_code": "module basic_262(input en, clk, output prod); assign prod = (en & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.951559", "id": 649}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.311020", "id": 66078}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.213357", "id": 48241}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.252419", "id": 55375}
{"buggy_code": "module basic_997(input data, en, output valid); assign valid = data & en | clk; endmodule", "correct_code": "module basic_997(input data, en, output valid); assign valid = (data & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.261208", "id": 56977}
{"buggy_code": "module example_277(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module example_277(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.053333", "id": 19025}
{"buggy_code": "module simple_956(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module simple_956(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.353035", "id": 73686}
{"buggy_code": "module test_402(input a, output q); assign q = a + 1; endmodule", "correct_code": "module test_402(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.107912", "id": 28985}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.142118", "id": 35234}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.333408", "id": 70145}
{"buggy_code": "module demo_588(input y, en, output valid); assign valid = y & en | en; endmodule", "correct_code": "module demo_588(input y, en, output valid); assign valid = (y & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.086946", "id": 25158}
{"buggy_code": "module test_38(input d, clk, output out); assign out = d & clk | clk; endmodule", "correct_code": "module test_38(input d, clk, output out); assign out = (d & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.138532", "id": 34592}
{"buggy_code": "module demo_283(input b, output result); assign result = b + 1; endmodule", "correct_code": "module demo_283(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.982144", "id": 6145}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.240837", "id": 53256}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.227014", "id": 50720}
{"buggy_code": "module arith_749(input clk, rst, output valid); assign valid = clk & rst | d; endmodule", "correct_code": "module arith_749(input clk, rst, output valid); assign valid = (clk & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.133029", "id": 33577}
{"buggy_code": "module demo_950(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module demo_950(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.193555", "id": 44626}
{"buggy_code": "module arith_368(input data, output result); assign result = data + 1; endmodule", "correct_code": "module arith_368(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.129060", "id": 32849}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.200621", "id": 45919}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.983779", "id": 6445}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.055389", "id": 19411}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.015185", "id": 12153}
{"buggy_code": "module basic_837(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module basic_837(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.207946", "id": 47255}
{"buggy_code": "module test_794(input data, clk, output out); assign out = data & clk | b; endmodule", "correct_code": "module test_794(input data, clk, output out); assign out = (data & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.212702", "id": 48120}
{"buggy_code": "module arith_41(input d, rst, output sum); assign sum = d & rst | y; endmodule", "correct_code": "module arith_41(input d, rst, output sum); assign sum = (d & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.008651", "id": 10969}
{"buggy_code": "module test_332(input clk, in, output out); assign out = clk & in | y; endmodule", "correct_code": "module test_332(input clk, in, output out); assign out = (clk & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.094820", "id": 26593}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.040795", "id": 16779}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.119909", "id": 31179}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.170546", "id": 40458}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.353469", "id": 73768}
{"buggy_code": "module simple_866(input y, y, output out); assign out = y & y | in; endmodule", "correct_code": "module simple_866(input y, y, output out); assign out = (y & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.335808", "id": 70582}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.115562", "id": 30394}
{"buggy_code": "module example_411(input data, output out); assign out = data + 1; endmodule", "correct_code": "module example_411(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.185267", "id": 43146}
{"buggy_code": "module test_901(input in, y, output y); assign y = in & y | y; endmodule", "correct_code": "module test_901(input in, y, output y); assign y = (in & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.010106", "id": 11233}
{"buggy_code": "module simple_169(input data, y, output y); assign y = data & y | b; endmodule", "correct_code": "module simple_169(input data, y, output y); assign y = (data & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.024802", "id": 13888}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.948349", "id": 73}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.974609", "id": 4836}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.023739", "id": 13697}
{"buggy_code": "module test_827(input y, output result); assign result = y + 1; endmodule", "correct_code": "module test_827(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.338137", "id": 71009}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.166022", "id": 39627}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.997424", "id": 8941}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.961099", "id": 2379}
{"buggy_code": "module basic_183(input c, rst, output sum); assign sum = c & rst | y; endmodule", "correct_code": "module basic_183(input c, rst, output sum); assign sum = (c & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.165455", "id": 39524}
{"buggy_code": "module basic_624(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module basic_624(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.007786", "id": 10813}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.298590", "id": 63789}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.218725", "id": 49223}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.107732", "id": 28954}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.949275", "id": 238}
{"buggy_code": "module logic_725(input data, clk, output y); assign y = data & clk | in; endmodule", "correct_code": "module logic_725(input data, clk, output y); assign y = (data & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.056109", "id": 19540}
{"buggy_code": "module arith_530(input d, a, output prod); assign prod = d & a | b; endmodule", "correct_code": "module arith_530(input d, a, output prod); assign prod = (d & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.983617", "id": 6416}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.971940", "id": 4353}
{"buggy_code": "module logic_889(input d, output out); assign out = d + 1; endmodule", "correct_code": "module logic_889(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.252740", "id": 55433}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.158342", "id": 38226}
{"buggy_code": "module example_318(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module example_318(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.059397", "id": 20147}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.058466", "id": 19976}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.039025", "id": 16463}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.128095", "id": 32674}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.987703", "id": 7164}
{"buggy_code": "module demo_272(input b, c, output q); assign q = b & c | a; endmodule", "correct_code": "module demo_272(input b, c, output q); assign q = (b & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.060504", "id": 20350}
{"buggy_code": "module example_548(input c, output q); assign q = c + 1; endmodule", "correct_code": "module example_548(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.208786", "id": 47409}
{"buggy_code": "module test_273(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module test_273(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.058227", "id": 19931}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.992772", "id": 8095}
{"buggy_code": "module demo_636(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module demo_636(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.238453", "id": 52822}
{"buggy_code": "module test_145(input d, data, output out); assign out = d & data | in; endmodule", "correct_code": "module test_145(input d, data, output out); assign out = (d & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.129570", "id": 32943}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.148652", "id": 36439}
{"buggy_code": "module arith_285(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module arith_285(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.065312", "id": 21235}
{"buggy_code": "module simple_588(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module simple_588(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.220477", "id": 49527}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.990556", "id": 7689}
{"buggy_code": "module example_36(input rst, y, output valid); assign valid = rst & y | d; endmodule", "correct_code": "module example_36(input rst, y, output valid); assign valid = (rst & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.297913", "id": 63662}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.964364", "id": 2973}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.145511", "id": 35866}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286673", "id": 61609}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.131738", "id": 33347}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.276087", "id": 59675}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.324695", "id": 68548}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.266995", "id": 58030}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.279932", "id": 60373}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.332868", "id": 70043}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.023102", "id": 13581}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.013003", "id": 11756}
{"buggy_code": "module arith_676(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module arith_676(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.353782", "id": 73826}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.974244", "id": 4767}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.151438", "id": 36956}
{"buggy_code": "module test_665(input en, clk, output out); assign out = en & clk | en; endmodule", "correct_code": "module test_665(input en, clk, output out); assign out = (en & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.989201", "id": 7437}
{"buggy_code": "module test_308(input y, output result); assign result = y + 1; endmodule", "correct_code": "module test_308(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.071082", "id": 22293}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.961319", "id": 2420}
{"buggy_code": "module logic_462(input data, x, output valid); assign valid = data & x | en; endmodule", "correct_code": "module logic_462(input data, x, output valid); assign valid = (data & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.220879", "id": 49599}
{"buggy_code": "module example_18(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module example_18(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.105744", "id": 28587}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.003274", "id": 10007}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.046244", "id": 17762}
{"buggy_code": "module basic_790(input in, clk, output out); assign out = in & clk | c; endmodule", "correct_code": "module basic_790(input in, clk, output out); assign out = (in & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.193529", "id": 44621}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.281649", "id": 60691}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.024511", "id": 13836}
{"buggy_code": "module logic_301(input y, d, output valid); assign valid = y & d | rst; endmodule", "correct_code": "module logic_301(input y, d, output valid); assign valid = (y & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.991567", "id": 7875}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.291779", "id": 62545}
{"buggy_code": "module arith_85(input rst, in, output prod); assign prod = rst & in | y; endmodule", "correct_code": "module arith_85(input rst, in, output prod); assign prod = (rst & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.154722", "id": 37563}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.088444", "id": 25430}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.083416", "id": 24518}
{"buggy_code": "module demo_536(input x, data, output valid); assign valid = x & data | c; endmodule", "correct_code": "module demo_536(input x, data, output valid); assign valid = (x & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.996316", "id": 8739}
{"buggy_code": "module demo_434(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module demo_434(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.010973", "id": 11391}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.976006", "id": 5088}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.336475", "id": 70704}
{"buggy_code": "module test_863(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module test_863(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.116041", "id": 30480}
{"buggy_code": "module simple_432(input en, c, output y); assign y = en & c | b; endmodule", "correct_code": "module simple_432(input en, c, output y); assign y = (en & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.041609", "id": 16925}
{"buggy_code": "module simple_781(input a, rst, output out); assign out = a & rst | data; endmodule", "correct_code": "module simple_781(input a, rst, output out); assign out = (a & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.144771", "id": 35729}
{"buggy_code": "module test_579(input en, data, output out); assign out = en & data | rst; endmodule", "correct_code": "module test_579(input en, data, output out); assign out = (en & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.163033", "id": 39083}
{"buggy_code": "module simple_944(input a, b, output q); assign q = a & b | d; endmodule", "correct_code": "module simple_944(input a, b, output q); assign q = (a & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.963154", "id": 2751}
{"buggy_code": "module arith_451(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module arith_451(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.231596", "id": 51562}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.348331", "id": 72839}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.014447", "id": 12022}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.339895", "id": 71309}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.323164", "id": 68266}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.266605", "id": 57960}
{"buggy_code": "module basic_371(input y, c, output q); assign q = y & c | data; endmodule", "correct_code": "module basic_371(input y, c, output q); assign q = (y & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.025845", "id": 14078}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.015018", "id": 12124}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.309835", "id": 65858}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.003250", "id": 10002}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.321602", "id": 67981}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.137250", "id": 34354}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.950327", "id": 429}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.167601", "id": 39921}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.120872", "id": 31353}
{"buggy_code": "module example_439(input clk, in, output valid); assign valid = clk & in | b; endmodule", "correct_code": "module example_439(input clk, in, output valid); assign valid = (clk & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.046864", "id": 17874}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.969930", "id": 3984}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.320683", "id": 67813}
{"buggy_code": "module example_266(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module example_266(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.173697", "id": 41035}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.350041", "id": 73147}
{"buggy_code": "module demo_697(input d, d, output out); assign out = d & d | rst; endmodule", "correct_code": "module demo_697(input d, d, output out); assign out = (d & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.166715", "id": 39757}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.957354", "id": 1699}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.023052", "id": 13572}
{"buggy_code": "module simple_772(input a, output q); assign q = a + 1; endmodule", "correct_code": "module simple_772(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.048171", "id": 18111}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.126244", "id": 32338}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.178627", "id": 41939}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.355307", "id": 74106}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.154610", "id": 37542}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.299180", "id": 63896}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.955850", "id": 1424}
{"buggy_code": "module example_321(input rst, clk, output q); assign q = rst & clk | rst; endmodule", "correct_code": "module example_321(input rst, clk, output q); assign q = (rst & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.046339", "id": 17779}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.169599", "id": 40284}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.017451", "id": 12566}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.354468", "id": 73949}
{"buggy_code": "module example_211(input b, a, output result); assign result = b & a | clk; endmodule", "correct_code": "module example_211(input b, a, output result); assign result = (b & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.345194", "id": 72263}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.148689", "id": 36446}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.349685", "id": 73083}
{"buggy_code": "module example_152(input a, en, output valid); assign valid = a & en | d; endmodule", "correct_code": "module example_152(input a, en, output valid); assign valid = (a & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.135797", "id": 34087}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.253880", "id": 55634}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.062654", "id": 20746}
{"buggy_code": "module test_928(input x, c, output prod); assign prod = x & c | x; endmodule", "correct_code": "module test_928(input x, c, output prod); assign prod = (x & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.213419", "id": 48252}
{"buggy_code": "module arith_151(input rst, c, output out); assign out = rst & c | c; endmodule", "correct_code": "module arith_151(input rst, c, output out); assign out = (rst & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.314287", "id": 66671}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.238329", "id": 52797}
{"buggy_code": "module logic_991(input x, clk, output q); assign q = x & clk | data; endmodule", "correct_code": "module logic_991(input x, clk, output q); assign q = (x & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.203504", "id": 46446}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.084201", "id": 24657}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117902", "id": 30823}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.094209", "id": 26479}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.969778", "id": 3959}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.183546", "id": 42832}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.041319", "id": 16872}
{"buggy_code": "module demo_37(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module demo_37(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.304222", "id": 64822}
{"buggy_code": "module arith_932(input a, b, output valid); assign valid = a & b | d; endmodule", "correct_code": "module arith_932(input a, b, output valid); assign valid = (a & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.172763", "id": 40863}
{"buggy_code": "module arith_446(input a, x, output prod); assign prod = a & x | data; endmodule", "correct_code": "module arith_446(input a, x, output prod); assign prod = (a & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.960203", "id": 2213}
{"buggy_code": "module example_582(input x, a, output prod); assign prod = x & a | b; endmodule", "correct_code": "module example_582(input x, a, output prod); assign prod = (x & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.089689", "id": 25659}
{"buggy_code": "module test_95(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module test_95(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.955043", "id": 1278}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.267177", "id": 58065}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.096926", "id": 26975}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.213284", "id": 48228}
{"buggy_code": "module logic_753(input y, y, output prod); assign prod = y & y | a; endmodule", "correct_code": "module logic_753(input y, y, output prod); assign prod = (y & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.319578", "id": 67643}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.335791", "id": 70579}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.261112", "id": 56960}
{"buggy_code": "module example_225(input in, output out); assign out = in + 1; endmodule", "correct_code": "module example_225(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.317087", "id": 67183}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.959466", "id": 2084}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.184874", "id": 43075}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.139085", "id": 34694}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.069167", "id": 21937}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.074069", "id": 22843}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.300862", "id": 64203}
{"buggy_code": "module example_984(input x, b, output q); assign q = x & b | x; endmodule", "correct_code": "module example_984(input x, b, output q); assign q = (x & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.034955", "id": 15720}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.304818", "id": 64936}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.986193", "id": 6886}
{"buggy_code": "module basic_634(input y, data, output valid); assign valid = y & data | a; endmodule", "correct_code": "module basic_634(input y, data, output valid); assign valid = (y & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.208388", "id": 47336}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.144776", "id": 35730}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.351987", "id": 73500}
{"buggy_code": "module logic_98(input in, x, output sum); assign sum = in & x | in; endmodule", "correct_code": "module logic_98(input in, x, output sum); assign sum = (in & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.279865", "id": 60360}
{"buggy_code": "module test_350(input d, output q); assign q = d + 1; endmodule", "correct_code": "module test_350(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.105286", "id": 28501}
{"buggy_code": "module simple_474(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module simple_474(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.999973", "id": 9402}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.983113", "id": 6323}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.021510", "id": 13292}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.121105", "id": 31397}
{"buggy_code": "module simple_432(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module simple_432(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.956975", "id": 1626}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.964873", "id": 3066}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.267564", "id": 58134}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.026379", "id": 14174}
{"buggy_code": "module simple_627(input en, output out); assign out = en + 1; endmodule", "correct_code": "module simple_627(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.031053", "id": 15014}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.338973", "id": 71147}
{"buggy_code": "module simple_374(input en, output result); assign result = en + 1; endmodule", "correct_code": "module simple_374(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.228024", "id": 50904}
{"buggy_code": "module arith_221(input y, x, output prod); assign prod = y & x | rst; endmodule", "correct_code": "module arith_221(input y, x, output prod); assign prod = (y & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.061010", "id": 20443}
{"buggy_code": "module logic_515(input rst, c, output out); assign out = rst & c | x; endmodule", "correct_code": "module logic_515(input rst, c, output out); assign out = (rst & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.313820", "id": 66586}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.231053", "id": 51461}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.000851", "id": 9561}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.316055", "id": 66992}
{"buggy_code": "module basic_239(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module basic_239(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.009604", "id": 11144}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.148880", "id": 36480}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.089788", "id": 25677}
{"buggy_code": "module logic_335(input y, x, output prod); assign prod = y & x | rst; endmodule", "correct_code": "module logic_335(input y, x, output prod); assign prod = (y & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.980068", "id": 5780}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.982159", "id": 6148}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.053098", "id": 18981}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.172122", "id": 40747}
{"buggy_code": "module test_139(input a, output result); assign result = a + 1; endmodule", "correct_code": "module test_139(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.095765", "id": 26767}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.217068", "id": 48915}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.249051", "id": 54762}
{"buggy_code": "module test_590(input b, output out); assign out = b + 1; endmodule", "correct_code": "module test_590(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.056983", "id": 19704}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.174547", "id": 41186}
{"buggy_code": "module arith_323(input rst, d, output out); assign out = rst & d | data; endmodule", "correct_code": "module arith_323(input rst, d, output out); assign out = (rst & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.131811", "id": 33360}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.324151", "id": 68448}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.352263", "id": 73552}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064277", "id": 21044}
{"buggy_code": "module demo_830(input en, a, output y); assign y = en & a | x; endmodule", "correct_code": "module demo_830(input en, a, output y); assign y = (en & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.174351", "id": 41151}
{"buggy_code": "module logic_793(input d, output y); assign y = d + 1; endmodule", "correct_code": "module logic_793(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.188092", "id": 43659}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.310982", "id": 66070}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.193622", "id": 44639}
{"buggy_code": "module demo_786(input c, x, output y); assign y = c & x | x; endmodule", "correct_code": "module demo_786(input c, x, output y); assign y = (c & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.020213", "id": 13056}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.096974", "id": 26984}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.065084", "id": 21194}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.002480", "id": 9863}
{"buggy_code": "module arith_322(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module arith_322(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.233401", "id": 51891}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.974789", "id": 4869}
{"buggy_code": "module logic_340(input b, output result); assign result = b + 1; endmodule", "correct_code": "module logic_340(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.161636", "id": 38834}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.196631", "id": 45189}
{"buggy_code": "module test_662(input a, in, output y); assign y = a & in | data; endmodule", "correct_code": "module test_662(input a, in, output y); assign y = (a & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.282478", "id": 60844}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.064186", "id": 21027}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.263944", "id": 57474}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.061631", "id": 20559}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.268281", "id": 58264}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.293894", "id": 62928}
{"buggy_code": "module logic_652(input clk, a, output result); assign result = clk & a | in; endmodule", "correct_code": "module logic_652(input clk, a, output result); assign result = (clk & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.174437", "id": 41166}
{"buggy_code": "module basic_11(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module basic_11(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.354926", "id": 74034}
{"buggy_code": "module logic_668(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module logic_668(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.074624", "id": 22947}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.147868", "id": 36292}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.279961", "id": 60378}
{"buggy_code": "module simple_474(input in, output result); assign result = in + 1; endmodule", "correct_code": "module simple_474(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.203725", "id": 46484}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.997500", "id": 8956}
{"buggy_code": "module example_76(input rst, en, output out); assign out = rst & en | c; endmodule", "correct_code": "module example_76(input rst, en, output out); assign out = (rst & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.073608", "id": 22759}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.300177", "id": 64077}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117559", "id": 30761}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.273387", "id": 59205}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.150050", "id": 36698}
{"buggy_code": "module arith_184(input in, output q); assign q = in + 1; endmodule", "correct_code": "module arith_184(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.955450", "id": 1354}
{"buggy_code": "module basic_482(input clk, rst, output prod); assign prod = clk & rst | x; endmodule", "correct_code": "module basic_482(input clk, rst, output prod); assign prod = (clk & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.318869", "id": 67511}
{"buggy_code": "module example_183(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module example_183(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.954196", "id": 1127}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.130490", "id": 33113}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.188249", "id": 43689}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.046029", "id": 17720}
{"buggy_code": "module simple_962(input in, output y); assign y = in + 1; endmodule", "correct_code": "module simple_962(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.132571", "id": 33494}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.265320", "id": 57726}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.309860", "id": 65863}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.177940", "id": 41812}
{"buggy_code": "module arith_657(input y, x, output prod); assign prod = y & x | y; endmodule", "correct_code": "module arith_657(input y, x, output prod); assign prod = (y & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.223401", "id": 50062}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.955054", "id": 1280}
{"buggy_code": "module demo_702(input y, output q); assign q = y + 1; endmodule", "correct_code": "module demo_702(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.983584", "id": 6410}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.323126", "id": 68259}
{"buggy_code": "module demo_14(input b, a, output result); assign result = b & a | clk; endmodule", "correct_code": "module demo_14(input b, a, output result); assign result = (b & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.144026", "id": 35588}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.002271", "id": 9824}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.043297", "id": 17230}
{"buggy_code": "module demo_981(input data, rst, output q); assign q = data & rst | y; endmodule", "correct_code": "module demo_981(input data, rst, output q); assign q = (data & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.299085", "id": 63877}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.040218", "id": 16683}
{"buggy_code": "module logic_422(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module logic_422(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.315453", "id": 66883}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.065113", "id": 21199}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.994695", "id": 8445}
{"buggy_code": "module simple_447(input y, b, output valid); assign valid = y & b | data; endmodule", "correct_code": "module simple_447(input y, b, output valid); assign valid = (y & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.017751", "id": 12622}
{"buggy_code": "module logic_918(input clk, d, output valid); assign valid = clk & d | x; endmodule", "correct_code": "module logic_918(input clk, d, output valid); assign valid = (clk & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.014584", "id": 12048}
{"buggy_code": "module logic_574(input c, x, output valid); assign valid = c & x | c; endmodule", "correct_code": "module logic_574(input c, x, output valid); assign valid = (c & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.004611", "id": 10234}
{"buggy_code": "module arith_891(input c, b, output y); assign y = c & b | rst; endmodule", "correct_code": "module arith_891(input c, b, output y); assign y = (c & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.211026", "id": 47817}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.071645", "id": 22395}
{"buggy_code": "module test_52(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module test_52(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.312838", "id": 66407}
{"buggy_code": "module demo_932(input data, output y); assign y = data + 1; endmodule", "correct_code": "module demo_932(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.354330", "id": 73924}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.026309", "id": 14161}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.040682", "id": 16757}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.107133", "id": 28841}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.037877", "id": 16251}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.200355", "id": 45869}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.020044", "id": 13024}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.187648", "id": 43580}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.097188", "id": 27022}
{"buggy_code": "module test_656(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module test_656(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.248335", "id": 54631}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.006236", "id": 10532}
{"buggy_code": "module example_405(input clk, data, output out); assign out = clk & data | data; endmodule", "correct_code": "module example_405(input clk, data, output out); assign out = (clk & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.064735", "id": 21131}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.021555", "id": 13300}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.129129", "id": 32862}
{"buggy_code": "module demo_516(input d, output y); assign y = d + 1; endmodule", "correct_code": "module demo_516(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.334458", "id": 70333}
{"buggy_code": "module test_556(input en, b, output q); assign q = en & b | d; endmodule", "correct_code": "module test_556(input en, b, output q); assign q = (en & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.252032", "id": 55302}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.130232", "id": 33065}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.339649", "id": 71267}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.287218", "id": 61705}
{"buggy_code": "module logic_547(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module logic_547(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.206362", "id": 46968}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.228161", "id": 50929}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.221476", "id": 49709}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.105536", "id": 28548}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.302434", "id": 64492}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.274275", "id": 59366}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.092010", "id": 26084}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.355408", "id": 74125}
{"buggy_code": "module demo_193(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module demo_193(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.951061", "id": 557}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.150511", "id": 36783}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.022534", "id": 13478}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.182989", "id": 42728}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.038302", "id": 16330}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.340064", "id": 71341}
{"buggy_code": "module test_688(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module test_688(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.097724", "id": 27121}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.207724", "id": 47217}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.009476", "id": 11121}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.283249", "id": 60983}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.183196", "id": 42768}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.135301", "id": 33994}
{"buggy_code": "module test_52(input en, output y); assign y = en + 1; endmodule", "correct_code": "module test_52(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.957895", "id": 1794}
{"buggy_code": "module simple_569(input clk, y, output q); assign q = clk & y | a; endmodule", "correct_code": "module simple_569(input clk, y, output q); assign q = (clk & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.299664", "id": 63986}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179847", "id": 42163}
{"buggy_code": "module example_633(input y, data, output out); assign out = y & data | b; endmodule", "correct_code": "module example_633(input y, data, output out); assign out = (y & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.161172", "id": 38747}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.291346", "id": 62468}
{"buggy_code": "module arith_479(input c, data, output sum); assign sum = c & data | en; endmodule", "correct_code": "module arith_479(input c, data, output sum); assign sum = (c & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.978869", "id": 5559}
{"buggy_code": "module logic_695(input en, in, output q); assign q = en & in | a; endmodule", "correct_code": "module logic_695(input en, in, output q); assign q = (en & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.990975", "id": 7765}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.974007", "id": 4724}
{"buggy_code": "module test_754(input a, b, output result); assign result = a & b | in; endmodule", "correct_code": "module test_754(input a, b, output result); assign result = (a & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.176185", "id": 41488}
{"buggy_code": "module arith_71(input y, a, output valid); assign valid = y & a | data; endmodule", "correct_code": "module arith_71(input y, a, output valid); assign valid = (y & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.338513", "id": 71079}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.999303", "id": 9281}
{"buggy_code": "module demo_16(input b, output result); assign result = b + 1; endmodule", "correct_code": "module demo_16(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.133645", "id": 33692}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.285031", "id": 61309}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.182710", "id": 42679}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.171213", "id": 40581}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.320486", "id": 67791}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.206293", "id": 46956}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.328215", "id": 69190}
{"buggy_code": "module example_66(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module example_66(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.198758", "id": 45578}
{"buggy_code": "module example_466(input rst, d, output valid); assign valid = rst & d | d; endmodule", "correct_code": "module example_466(input rst, d, output valid); assign valid = (rst & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.037312", "id": 16150}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.277862", "id": 59991}
{"buggy_code": "module basic_134(input in, output q); assign q = in + 1; endmodule", "correct_code": "module basic_134(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308076", "id": 65539}
{"buggy_code": "module basic_263(input en, output y); assign y = en + 1; endmodule", "correct_code": "module basic_263(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.001199", "id": 9625}
{"buggy_code": "module logic_924(input c, output out); assign out = c + 1; endmodule", "correct_code": "module logic_924(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.210361", "id": 47697}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.083313", "id": 24498}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.297235", "id": 63539}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051193", "id": 18633}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.172009", "id": 40726}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.965220", "id": 3131}
{"buggy_code": "module demo_599(input clk, a, output sum); assign sum = clk & a | clk; endmodule", "correct_code": "module demo_599(input clk, a, output sum); assign sum = (clk & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.357297", "id": 74473}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.146741", "id": 36090}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287990", "id": 61846}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.199107", "id": 45639}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.964541", "id": 3007}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.284184", "id": 61155}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.206773", "id": 47043}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.997961", "id": 9039}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.233493", "id": 51909}
{"buggy_code": "module example_105(input b, output y); assign y = b + 1; endmodule", "correct_code": "module example_105(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.980887", "id": 5918}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.031357", "id": 15071}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.353948", "id": 73854}
{"buggy_code": "module example_299(input in, output q); assign q = in + 1; endmodule", "correct_code": "module example_299(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.280339", "id": 60449}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.192436", "id": 44421}
{"buggy_code": "module example_95(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module example_95(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.013051", "id": 11764}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.339817", "id": 71299}
{"buggy_code": "module example_418(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module example_418(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.198026", "id": 45441}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.098181", "id": 27204}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.125240", "id": 32154}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.056243", "id": 19566}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.242962", "id": 53646}
{"buggy_code": "module test_278(input clk, c, output out); assign out = clk & c | clk; endmodule", "correct_code": "module test_278(input clk, c, output out); assign out = (clk & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116059", "id": 30483}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.326025", "id": 68788}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.268860", "id": 58370}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.259789", "id": 56718}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.328988", "id": 69333}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.156698", "id": 37925}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.108389", "id": 29074}
{"buggy_code": "module arith_879(input data, output result); assign result = data + 1; endmodule", "correct_code": "module arith_879(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.299275", "id": 63914}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.057283", "id": 19760}
{"buggy_code": "module simple_220(input c, a, output q); assign q = c & a | rst; endmodule", "correct_code": "module simple_220(input c, a, output q); assign q = (c & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.266027", "id": 57855}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.994964", "id": 8492}
{"buggy_code": "module basic_555(input in, output q); assign q = in + 1; endmodule", "correct_code": "module basic_555(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.162067", "id": 38911}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.063718", "id": 20942}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.248215", "id": 54608}
{"buggy_code": "module simple_593(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module simple_593(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.264139", "id": 57510}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.213878", "id": 48333}
{"buggy_code": "module test_55(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module test_55(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.253103", "id": 55499}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.211818", "id": 47964}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.145349", "id": 35838}
{"buggy_code": "module demo_255(input data, output out); assign out = data + 1; endmodule", "correct_code": "module demo_255(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.997067", "id": 8876}
{"buggy_code": "module demo_793(input y, in, output result); assign result = y & in | in; endmodule", "correct_code": "module demo_793(input y, in, output result); assign result = (y & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.121337", "id": 31440}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.949998", "id": 368}
{"buggy_code": "module demo_783(input c, output y); assign y = c + 1; endmodule", "correct_code": "module demo_783(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.138116", "id": 34515}
{"buggy_code": "module example_846(input clk, y, output result); assign result = clk & y | clk; endmodule", "correct_code": "module example_846(input clk, y, output result); assign result = (clk & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.240365", "id": 53169}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.112251", "id": 29784}
{"buggy_code": "module test_933(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module test_933(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.970901", "id": 4161}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.954582", "id": 1199}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.312262", "id": 66303}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.201223", "id": 46028}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.153702", "id": 37376}
{"buggy_code": "module arith_211(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module arith_211(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.126033", "id": 32299}
{"buggy_code": "module basic_502(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module basic_502(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.960678", "id": 2302}
{"buggy_code": "module basic_225(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module basic_225(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.354495", "id": 73954}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.253502", "id": 55568}
{"buggy_code": "module simple_296(input clk, rst, output out); assign out = clk & rst | rst; endmodule", "correct_code": "module simple_296(input clk, rst, output out); assign out = (clk & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.023173", "id": 13594}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.320744", "id": 67824}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.045377", "id": 17604}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.258458", "id": 56474}
{"buggy_code": "module test_287(input data, output out); assign out = data + 1; endmodule", "correct_code": "module test_287(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.260984", "id": 56936}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.006890", "id": 10651}
{"buggy_code": "module example_426(input d, output y); assign y = d + 1; endmodule", "correct_code": "module example_426(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.120393", "id": 31266}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179722", "id": 42141}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.243717", "id": 53784}
{"buggy_code": "module logic_532(input a, output q); assign q = a + 1; endmodule", "correct_code": "module logic_532(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.279795", "id": 60349}
{"buggy_code": "module test_238(input rst, b, output prod); assign prod = rst & b | d; endmodule", "correct_code": "module test_238(input rst, b, output prod); assign prod = (rst & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.340343", "id": 71390}
{"buggy_code": "module demo_434(input x, en, output out); assign out = x & en | in; endmodule", "correct_code": "module demo_434(input x, en, output out); assign out = (x & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.049819", "id": 18386}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.972965", "id": 4537}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.249781", "id": 54897}
{"buggy_code": "module example_729(input y, y, output valid); assign valid = y & y | en; endmodule", "correct_code": "module example_729(input y, y, output valid); assign valid = (y & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.246254", "id": 54253}
{"buggy_code": "module demo_356(input rst, data, output y); assign y = rst & data | in; endmodule", "correct_code": "module demo_356(input rst, data, output y); assign y = (rst & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.976894", "id": 5248}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.274380", "id": 59386}
{"buggy_code": "module basic_965(input data, y, output result); assign result = data & y | x; endmodule", "correct_code": "module basic_965(input data, y, output result); assign result = (data & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.005283", "id": 10356}
{"buggy_code": "module example_770(input data, output out); assign out = data + 1; endmodule", "correct_code": "module example_770(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.169450", "id": 40258}
{"buggy_code": "module example_387(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module example_387(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.151009", "id": 36874}
{"buggy_code": "module logic_290(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module logic_290(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.078667", "id": 23655}
{"buggy_code": "module example_720(input y, output q); assign q = y + 1; endmodule", "correct_code": "module example_720(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.344898", "id": 72207}
{"buggy_code": "module arith_732(input in, en, output q); assign q = in & en | in; endmodule", "correct_code": "module arith_732(input in, en, output q); assign q = (in & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.100082", "id": 27552}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.243169", "id": 53684}
{"buggy_code": "module demo_268(input clk, rst, output q); assign q = clk & rst | d; endmodule", "correct_code": "module demo_268(input clk, rst, output q); assign q = (clk & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.957335", "id": 1695}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.125672", "id": 32234}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.033654", "id": 15484}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.253544", "id": 55576}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.111179", "id": 29586}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.073159", "id": 22675}
{"buggy_code": "module test_435(input data, rst, output result); assign result = data & rst | clk; endmodule", "correct_code": "module test_435(input data, rst, output result); assign result = (data & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.254584", "id": 55763}
{"buggy_code": "module simple_903(input x, x, output prod); assign prod = x & x | y; endmodule", "correct_code": "module simple_903(input x, x, output prod); assign prod = (x & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.056070", "id": 19533}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.173219", "id": 40946}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.179094", "id": 42025}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.279645", "id": 60321}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.269418", "id": 58475}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.953127", "id": 934}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.007282", "id": 10722}
{"buggy_code": "module example_755(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module example_755(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.090346", "id": 25779}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.277198", "id": 59870}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.958430", "id": 1894}
{"buggy_code": "module test_589(input rst, data, output out); assign out = rst & data | c; endmodule", "correct_code": "module test_589(input rst, data, output out); assign out = (rst & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.984508", "id": 6579}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.216501", "id": 48812}
{"buggy_code": "module logic_143(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module logic_143(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.147125", "id": 36155}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.089196", "id": 25568}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.105326", "id": 28508}
{"buggy_code": "module demo_472(input en, output result); assign result = en + 1; endmodule", "correct_code": "module demo_472(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.350524", "id": 73234}
{"buggy_code": "module demo_686(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module demo_686(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.265754", "id": 57807}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.149456", "id": 36588}
{"buggy_code": "module logic_849(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module logic_849(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.133579", "id": 33679}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.050332", "id": 18479}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.010065", "id": 11226}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.158711", "id": 38295}
{"buggy_code": "module simple_815(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module simple_815(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.952569", "id": 835}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.242322", "id": 53529}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286101", "id": 61506}
{"buggy_code": "module basic_534(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module basic_534(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.079328", "id": 23775}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.089470", "id": 25618}
{"buggy_code": "module example_184(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module example_184(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.176388", "id": 41525}
{"buggy_code": "module arith_867(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module arith_867(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.005859", "id": 10463}
{"buggy_code": "module simple_195(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module simple_195(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.237210", "id": 52590}
{"buggy_code": "module test_401(input y, data, output prod); assign prod = y & data | rst; endmodule", "correct_code": "module test_401(input y, data, output prod); assign prod = (y & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.051595", "id": 18709}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.183086", "id": 42747}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.989877", "id": 7562}
{"buggy_code": "module example_2(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module example_2(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.117963", "id": 30834}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.211136", "id": 47837}
{"buggy_code": "module demo_540(input a, d, output y); assign y = a & d | in; endmodule", "correct_code": "module demo_540(input a, d, output y); assign y = (a & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.994078", "id": 8330}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.174619", "id": 41200}
{"buggy_code": "module example_74(input d, y, output y); assign y = d & y | data; endmodule", "correct_code": "module example_74(input d, y, output y); assign y = (d & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.147197", "id": 36169}
{"buggy_code": "module basic_256(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module basic_256(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.028977", "id": 14640}
{"buggy_code": "module simple_934(input x, data, output q); assign q = x & data | in; endmodule", "correct_code": "module simple_934(input x, data, output q); assign q = (x & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.966440", "id": 3354}
{"buggy_code": "module arith_358(input x, data, output result); assign result = x & data | a; endmodule", "correct_code": "module arith_358(input x, data, output result); assign result = (x & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.008883", "id": 11012}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.998967", "id": 9220}
{"buggy_code": "module logic_244(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module logic_244(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.294936", "id": 63117}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.172451", "id": 40808}
{"buggy_code": "module demo_105(input x, d, output sum); assign sum = x & d | x; endmodule", "correct_code": "module demo_105(input x, d, output sum); assign sum = (x & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.067514", "id": 21635}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.291769", "id": 62543}
{"buggy_code": "module logic_505(input data, output out); assign out = data + 1; endmodule", "correct_code": "module logic_505(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.320520", "id": 67798}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.120811", "id": 31344}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.004564", "id": 10225}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.296510", "id": 63409}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277737", "id": 59971}
{"buggy_code": "module simple_198(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module simple_198(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.184442", "id": 42994}
{"buggy_code": "module logic_293(input en, d, output valid); assign valid = en & d | b; endmodule", "correct_code": "module logic_293(input en, d, output valid); assign valid = (en & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.180668", "id": 42315}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.032228", "id": 15228}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.239259", "id": 52971}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.047837", "id": 18051}
{"buggy_code": "module arith_617(input b, output y); assign y = b + 1; endmodule", "correct_code": "module arith_617(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.253069", "id": 55493}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.094455", "id": 26526}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.310788", "id": 66036}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.193905", "id": 44690}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.979026", "id": 5590}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.020117", "id": 13039}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.153031", "id": 37249}
{"buggy_code": "module logic_926(input d, b, output out); assign out = d & b | clk; endmodule", "correct_code": "module logic_926(input d, b, output out); assign out = (d & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.203453", "id": 46436}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.149170", "id": 36535}
{"buggy_code": "module basic_261(input in, en, output result); assign result = in & en | rst; endmodule", "correct_code": "module basic_261(input in, en, output result); assign result = (in & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.325382", "id": 68672}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.291290", "id": 62458}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.111101", "id": 29572}
{"buggy_code": "module example_626(input c, a, output out); assign out = c & a | rst; endmodule", "correct_code": "module example_626(input c, a, output out); assign out = (c & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.059507", "id": 20168}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.072179", "id": 22492}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008536", "id": 10950}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.180214", "id": 42232}
{"buggy_code": "module logic_237(input data, c, output sum); assign sum = data & c | d; endmodule", "correct_code": "module logic_237(input data, c, output sum); assign sum = (data & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.279669", "id": 60325}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.022781", "id": 13523}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.178092", "id": 41839}
{"buggy_code": "module demo_501(input in, d, output result); assign result = in & d | b; endmodule", "correct_code": "module demo_501(input in, d, output result); assign result = (in & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.018880", "id": 12826}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.167981", "id": 39991}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.297857", "id": 63652}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.138655", "id": 34615}
{"buggy_code": "module example_941(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module example_941(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.354835", "id": 74017}
{"buggy_code": "module basic_374(input a, x, output sum); assign sum = a & x | clk; endmodule", "correct_code": "module basic_374(input a, x, output sum); assign sum = (a & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.222623", "id": 49917}
{"buggy_code": "module basic_339(input c, in, output valid); assign valid = c & in | clk; endmodule", "correct_code": "module basic_339(input c, in, output valid); assign valid = (c & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.160750", "id": 38671}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.302423", "id": 64490}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.015557", "id": 12223}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.313436", "id": 66517}
{"buggy_code": "module test_729(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module test_729(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.148086", "id": 36332}
{"buggy_code": "module arith_86(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module arith_86(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.034114", "id": 15566}
{"buggy_code": "module basic_815(input data, x, output valid); assign valid = data & x | y; endmodule", "correct_code": "module basic_815(input data, x, output valid); assign valid = (data & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.283125", "id": 60960}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.229430", "id": 51160}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.056972", "id": 19702}
{"buggy_code": "module logic_603(input clk, d, output prod); assign prod = clk & d | in; endmodule", "correct_code": "module logic_603(input clk, d, output prod); assign prod = (clk & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.231567", "id": 51557}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.983687", "id": 6428}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.232123", "id": 51654}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.276497", "id": 59746}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.318291", "id": 67405}
{"buggy_code": "module example_648(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module example_648(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.338079", "id": 70998}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.085386", "id": 24874}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210014", "id": 47631}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.002333", "id": 9836}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.236340", "id": 52429}
{"buggy_code": "module basic_418(input d, data, output prod); assign prod = d & data | b; endmodule", "correct_code": "module basic_418(input d, data, output prod); assign prod = (d & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.999373", "id": 9295}
{"buggy_code": "module arith_343(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module arith_343(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.140110", "id": 34881}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.009391", "id": 11105}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.282262", "id": 60803}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.163793", "id": 39226}
{"buggy_code": "module test_53(input y, y, output result); assign result = y & y | d; endmodule", "correct_code": "module test_53(input y, y, output result); assign result = (y & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.219303", "id": 49328}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.131991", "id": 33390}
{"buggy_code": "module basic_493(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module basic_493(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.269395", "id": 58471}
{"buggy_code": "module logic_269(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module logic_269(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.219450", "id": 49355}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113231", "id": 29966}
{"buggy_code": "module basic_259(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module basic_259(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.280965", "id": 60564}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.205392", "id": 46790}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.005139", "id": 10331}
{"buggy_code": "module example_558(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module example_558(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.209858", "id": 47602}
{"buggy_code": "module arith_941(input data, d, output result); assign result = data & d | d; endmodule", "correct_code": "module arith_941(input data, d, output result); assign result = (data & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.205807", "id": 46867}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.123079", "id": 31760}
{"buggy_code": "module example_521(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module example_521(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.122702", "id": 31691}
{"buggy_code": "module arith_245(input y, a, output prod); assign prod = y & a | clk; endmodule", "correct_code": "module arith_245(input y, a, output prod); assign prod = (y & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.249383", "id": 54822}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.987354", "id": 7100}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.170413", "id": 40433}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.173950", "id": 41079}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.231675", "id": 51576}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205175", "id": 46750}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.973269", "id": 4592}
{"buggy_code": "module demo_915(input c, output y); assign y = c + 1; endmodule", "correct_code": "module demo_915(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.019496", "id": 12927}
{"buggy_code": "module logic_23(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module logic_23(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.999482", "id": 9315}
{"buggy_code": "module logic_231(input d, rst, output result); assign result = d & rst | en; endmodule", "correct_code": "module logic_231(input d, rst, output result); assign result = (d & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.072854", "id": 22617}
{"buggy_code": "module demo_851(input in, in, output valid); assign valid = in & in | data; endmodule", "correct_code": "module demo_851(input in, in, output valid); assign valid = (in & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.165485", "id": 39529}
{"buggy_code": "module simple_702(input b, c, output q); assign q = b & c | clk; endmodule", "correct_code": "module simple_702(input b, c, output q); assign q = (b & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.002705", "id": 9904}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.096361", "id": 26874}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.231967", "id": 51626}
{"buggy_code": "module test_647(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module test_647(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.108677", "id": 29128}
{"buggy_code": "module test_18(input x, output out); assign out = x + 1; endmodule", "correct_code": "module test_18(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.012325", "id": 11636}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.020882", "id": 13175}
{"buggy_code": "module simple_680(input b, a, output sum); assign sum = b & a | clk; endmodule", "correct_code": "module simple_680(input b, a, output sum); assign sum = (b & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.299583", "id": 63971}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.201178", "id": 46019}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.264361", "id": 57551}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.194286", "id": 44762}
{"buggy_code": "module logic_146(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module logic_146(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.092056", "id": 26092}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.993494", "id": 8225}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.267403", "id": 58106}
{"buggy_code": "module basic_277(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module basic_277(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.064384", "id": 21063}
{"buggy_code": "module example_116(input a, d, output q); assign q = a & d | data; endmodule", "correct_code": "module example_116(input a, d, output q); assign q = (a & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.084941", "id": 24790}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.032667", "id": 15306}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.214806", "id": 48505}
{"buggy_code": "module example_552(input data, d, output result); assign result = data & d | clk; endmodule", "correct_code": "module example_552(input data, d, output result); assign result = (data & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.125347", "id": 32174}
{"buggy_code": "module simple_405(input c, x, output out); assign out = c & x | a; endmodule", "correct_code": "module simple_405(input c, x, output out); assign out = (c & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.049543", "id": 18336}
{"buggy_code": "module simple_436(input in, en, output valid); assign valid = in & en | x; endmodule", "correct_code": "module simple_436(input in, en, output valid); assign valid = (in & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.104792", "id": 28412}
{"buggy_code": "module demo_55(input x, output y); assign y = x + 1; endmodule", "correct_code": "module demo_55(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.027556", "id": 14385}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.176854", "id": 41610}
{"buggy_code": "module arith_206(input en, output y); assign y = en + 1; endmodule", "correct_code": "module arith_206(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.262479", "id": 57209}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.317081", "id": 67182}
{"buggy_code": "module basic_520(input rst, rst, output y); assign y = rst & rst | c; endmodule", "correct_code": "module basic_520(input rst, rst, output y); assign y = (rst & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.258569", "id": 56494}
{"buggy_code": "module demo_967(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module demo_967(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.076384", "id": 23263}
{"buggy_code": "module arith_140(input rst, clk, output q); assign q = rst & clk | en; endmodule", "correct_code": "module arith_140(input rst, clk, output q); assign q = (rst & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.042071", "id": 17005}
{"buggy_code": "module arith_916(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module arith_916(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.992335", "id": 8015}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.332459", "id": 69968}
{"buggy_code": "module logic_134(input clk, x, output sum); assign sum = clk & x | y; endmodule", "correct_code": "module logic_134(input clk, x, output sum); assign sum = (clk & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.085514", "id": 24898}
{"buggy_code": "module basic_479(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module basic_479(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.952682", "id": 856}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.293706", "id": 62896}
{"buggy_code": "module basic_851(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module basic_851(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.159297", "id": 38402}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.244651", "id": 53957}
{"buggy_code": "module test_798(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module test_798(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.978489", "id": 5492}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.221287", "id": 49673}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.082480", "id": 24348}
{"buggy_code": "module test_492(input in, y, output out); assign out = in & y | b; endmodule", "correct_code": "module test_492(input in, y, output out); assign out = (in & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.955766", "id": 1410}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.182980", "id": 42726}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.040730", "id": 16767}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.242078", "id": 53485}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.213195", "id": 48211}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.246790", "id": 54350}
{"buggy_code": "module demo_393(input y, output out); assign out = y + 1; endmodule", "correct_code": "module demo_393(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.239154", "id": 52951}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.242040", "id": 53478}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.274022", "id": 59318}
{"buggy_code": "module example_182(input en, output y); assign y = en + 1; endmodule", "correct_code": "module example_182(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.352046", "id": 73511}
{"buggy_code": "module demo_732(input b, a, output sum); assign sum = b & a | x; endmodule", "correct_code": "module demo_732(input b, a, output sum); assign sum = (b & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.205225", "id": 46759}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.289760", "id": 62173}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.039868", "id": 16618}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.242198", "id": 53506}
{"buggy_code": "module basic_648(input d, y, output prod); assign prod = d & y | rst; endmodule", "correct_code": "module basic_648(input d, y, output prod); assign prod = (d & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.017016", "id": 12485}
{"buggy_code": "module demo_298(input in, output q); assign q = in + 1; endmodule", "correct_code": "module demo_298(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.220273", "id": 49489}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.295271", "id": 63179}
{"buggy_code": "module basic_408(input c, output q); assign q = c + 1; endmodule", "correct_code": "module basic_408(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.095397", "id": 26698}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.304453", "id": 64868}
{"buggy_code": "module simple_112(input data, in, output out); assign out = data & in | in; endmodule", "correct_code": "module simple_112(input data, in, output out); assign out = (data & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.309044", "id": 65715}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.121454", "id": 31462}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.066921", "id": 21526}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.204675", "id": 46659}
{"buggy_code": "module example_432(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module example_432(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.258942", "id": 56561}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.020780", "id": 13159}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.164795", "id": 39406}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.154000", "id": 37429}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.977442", "id": 5349}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.145861", "id": 35930}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.251115", "id": 55140}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.107830", "id": 28970}
{"buggy_code": "module example_354(input data, output q); assign q = data + 1; endmodule", "correct_code": "module example_354(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.075032", "id": 23024}
{"buggy_code": "module test_308(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module test_308(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.963758", "id": 2862}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.181499", "id": 42466}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.165588", "id": 39549}
{"buggy_code": "module test_645(input rst, a, output out); assign out = rst & a | a; endmodule", "correct_code": "module test_645(input rst, a, output out); assign out = (rst & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.046124", "id": 17739}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.119342", "id": 31086}
{"buggy_code": "module test_958(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module test_958(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.177619", "id": 41754}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.048813", "id": 18229}
{"buggy_code": "module arith_771(input d, output y); assign y = d + 1; endmodule", "correct_code": "module arith_771(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.172918", "id": 40889}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.233438", "id": 51899}
{"buggy_code": "module test_138(input c, x, output q); assign q = c & x | data; endmodule", "correct_code": "module test_138(input c, x, output q); assign q = (c & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.155594", "id": 37721}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.138008", "id": 34495}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.148568", "id": 36423}
{"buggy_code": "module basic_482(input data, x, output q); assign q = data & x | clk; endmodule", "correct_code": "module basic_482(input data, x, output q); assign q = (data & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116862", "id": 30630}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.038459", "id": 16359}
{"buggy_code": "module simple_741(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module simple_741(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.284089", "id": 61137}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.120894", "id": 31357}
{"buggy_code": "module basic_264(input b, clk, output prod); assign prod = b & clk | c; endmodule", "correct_code": "module basic_264(input b, clk, output prod); assign prod = (b & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.174925", "id": 41256}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.180304", "id": 42249}
{"buggy_code": "module test_4(input in, output y); assign y = in + 1; endmodule", "correct_code": "module test_4(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.234690", "id": 52129}
{"buggy_code": "module example_409(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module example_409(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.204135", "id": 46560}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.146284", "id": 36006}
{"buggy_code": "module test_242(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module test_242(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.176258", "id": 41501}
{"buggy_code": "module example_978(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module example_978(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.336885", "id": 70780}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.298176", "id": 63712}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.068329", "id": 21781}
{"buggy_code": "module test_246(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module test_246(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.154507", "id": 37524}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.241063", "id": 53298}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.276894", "id": 59815}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.353523", "id": 73779}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.239164", "id": 52953}
{"buggy_code": "module simple_604(input rst, y, output result); assign result = rst & y | en; endmodule", "correct_code": "module simple_604(input rst, y, output result); assign result = (rst & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.000524", "id": 9502}
{"buggy_code": "module simple_678(input c, c, output valid); assign valid = c & c | clk; endmodule", "correct_code": "module simple_678(input c, c, output valid); assign valid = (c & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.350368", "id": 73206}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.247325", "id": 54446}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.326510", "id": 68879}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.971677", "id": 4307}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.164621", "id": 39374}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.273278", "id": 59184}
{"buggy_code": "module logic_29(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module logic_29(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.154138", "id": 37456}
{"buggy_code": "module logic_517(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module logic_517(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.133240", "id": 33616}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.262571", "id": 57227}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.223221", "id": 50028}
{"buggy_code": "module demo_192(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module demo_192(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.146307", "id": 36010}
{"buggy_code": "module logic_946(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module logic_946(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.010048", "id": 11223}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.116566", "id": 30578}
{"buggy_code": "module test_256(input b, b, output valid); assign valid = b & b | a; endmodule", "correct_code": "module test_256(input b, b, output valid); assign valid = (b & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.275707", "id": 59610}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.039593", "id": 16568}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.344340", "id": 72115}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.033262", "id": 15412}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.317059", "id": 67178}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.356079", "id": 74248}
{"buggy_code": "module simple_611(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module simple_611(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.256861", "id": 56179}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.277911", "id": 60000}
{"buggy_code": "module simple_917(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module simple_917(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.290569", "id": 62321}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.275492", "id": 59570}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277411", "id": 59909}
{"buggy_code": "module arith_302(input rst, d, output y); assign y = rst & d | data; endmodule", "correct_code": "module arith_302(input rst, d, output y); assign y = (rst & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.353657", "id": 73803}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.314896", "id": 66782}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.972496", "id": 4453}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.110576", "id": 29476}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.329286", "id": 69390}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.235606", "id": 52298}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.173425", "id": 40984}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.105203", "id": 28485}
{"buggy_code": "module simple_130(input data, y, output sum); assign sum = data & y | en; endmodule", "correct_code": "module simple_130(input data, y, output sum); assign sum = (data & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.351354", "id": 73385}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.127701", "id": 32604}
{"buggy_code": "module logic_836(input in, y, output y); assign y = in & y | b; endmodule", "correct_code": "module logic_836(input in, y, output y); assign y = (in & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.278649", "id": 60138}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210740", "id": 47768}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.014304", "id": 11995}
{"buggy_code": "module logic_566(input c, clk, output y); assign y = c & clk | in; endmodule", "correct_code": "module logic_566(input c, clk, output y); assign y = (c & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.089207", "id": 25570}
{"buggy_code": "module demo_271(input b, en, output prod); assign prod = b & en | a; endmodule", "correct_code": "module demo_271(input b, en, output prod); assign prod = (b & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.994221", "id": 8356}
{"buggy_code": "module logic_953(input d, clk, output sum); assign sum = d & clk | en; endmodule", "correct_code": "module logic_953(input d, clk, output sum); assign sum = (d & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.028193", "id": 14500}
{"buggy_code": "module arith_408(input y, x, output result); assign result = y & x | a; endmodule", "correct_code": "module arith_408(input y, x, output result); assign result = (y & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.028572", "id": 14568}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.242223", "id": 53511}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.962705", "id": 2672}
{"buggy_code": "module arith_130(input b, c, output valid); assign valid = b & c | x; endmodule", "correct_code": "module arith_130(input b, c, output valid); assign valid = (b & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.298586", "id": 63788}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.140392", "id": 34933}
{"buggy_code": "module demo_540(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module demo_540(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.232869", "id": 51792}
{"buggy_code": "module logic_284(input in, in, output out); assign out = in & in | d; endmodule", "correct_code": "module logic_284(input in, in, output out); assign out = (in & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.953761", "id": 1050}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.948273", "id": 58}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.262640", "id": 57239}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.068479", "id": 21809}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.181563", "id": 42478}
{"buggy_code": "module arith_727(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module arith_727(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.322453", "id": 68136}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.252809", "id": 55445}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.111267", "id": 29604}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.290434", "id": 62296}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.197149", "id": 45283}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.033976", "id": 15542}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.997664", "id": 8986}
{"buggy_code": "module simple_506(input y, d, output result); assign result = y & d | en; endmodule", "correct_code": "module simple_506(input y, d, output result); assign result = (y & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.190414", "id": 44047}
{"buggy_code": "module simple_72(input y, output out); assign out = y + 1; endmodule", "correct_code": "module simple_72(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.134489", "id": 33847}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.059885", "id": 20236}
{"buggy_code": "module logic_637(input rst, c, output y); assign y = rst & c | c; endmodule", "correct_code": "module logic_637(input rst, c, output y); assign y = (rst & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.098787", "id": 27317}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.280883", "id": 60549}
{"buggy_code": "module example_362(input b, clk, output valid); assign valid = b & clk | in; endmodule", "correct_code": "module example_362(input b, clk, output valid); assign valid = (b & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.031737", "id": 15142}
{"buggy_code": "module test_441(input data, output y); assign y = data + 1; endmodule", "correct_code": "module test_441(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.103161", "id": 28115}
{"buggy_code": "module logic_403(input en, c, output sum); assign sum = en & c | c; endmodule", "correct_code": "module logic_403(input en, c, output sum); assign sum = (en & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.353976", "id": 73859}
{"buggy_code": "module demo_392(input c, y, output result); assign result = c & y | a; endmodule", "correct_code": "module demo_392(input c, y, output result); assign result = (c & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.012947", "id": 11745}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.058498", "id": 19982}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.285284", "id": 61353}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.256945", "id": 56195}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.026570", "id": 14210}
{"buggy_code": "module simple_284(input y, output q); assign q = y + 1; endmodule", "correct_code": "module simple_284(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.301024", "id": 64233}
{"buggy_code": "module arith_378(input clk, d, output result); assign result = clk & d | rst; endmodule", "correct_code": "module arith_378(input clk, d, output result); assign result = (clk & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.127362", "id": 32542}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.274284", "id": 59368}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.992820", "id": 8104}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.107603", "id": 28930}
{"buggy_code": "module basic_21(input in, a, output valid); assign valid = in & a | data; endmodule", "correct_code": "module basic_21(input in, a, output valid); assign valid = (in & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.051583", "id": 18707}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.180859", "id": 42348}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.168077", "id": 40009}
{"buggy_code": "module logic_50(input en, output out); assign out = en + 1; endmodule", "correct_code": "module logic_50(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.078629", "id": 23648}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.269521", "id": 58495}
{"buggy_code": "module test_704(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module test_704(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308815", "id": 65675}
{"buggy_code": "module logic_203(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module logic_203(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.321211", "id": 67907}
{"buggy_code": "module basic_610(input y, output y); assign y = y + 1; endmodule", "correct_code": "module basic_610(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.296580", "id": 63421}
{"buggy_code": "module arith_780(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module arith_780(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.092988", "id": 26258}
{"buggy_code": "module logic_233(input data, output result); assign result = data + 1; endmodule", "correct_code": "module logic_233(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.125995", "id": 32292}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.343397", "id": 71942}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.267612", "id": 58143}
{"buggy_code": "module demo_630(input c, in, output y); assign y = c & in | x; endmodule", "correct_code": "module demo_630(input c, in, output y); assign y = (c & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.126219", "id": 32333}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.323405", "id": 68311}
{"buggy_code": "module logic_966(input data, a, output result); assign result = data & a | a; endmodule", "correct_code": "module logic_966(input data, a, output result); assign result = (data & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.186770", "id": 43420}
{"buggy_code": "module basic_667(input y, en, output out); assign out = y & en | a; endmodule", "correct_code": "module basic_667(input y, en, output out); assign out = (y & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.189191", "id": 43860}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.241078", "id": 53301}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.285312", "id": 61359}
{"buggy_code": "module basic_700(input en, output result); assign result = en + 1; endmodule", "correct_code": "module basic_700(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.129672", "id": 32962}
{"buggy_code": "module basic_509(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module basic_509(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.314668", "id": 66742}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.204349", "id": 46600}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.098915", "id": 27337}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.259321", "id": 56631}
{"buggy_code": "module demo_885(input b, output result); assign result = b + 1; endmodule", "correct_code": "module demo_885(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.027223", "id": 14322}
{"buggy_code": "module logic_532(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module logic_532(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.012360", "id": 11642}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.965868", "id": 3249}
{"buggy_code": "module logic_672(input a, clk, output q); assign q = a & clk | data; endmodule", "correct_code": "module logic_672(input a, clk, output q); assign q = (a & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.323593", "id": 68345}
{"buggy_code": "module example_296(input b, rst, output valid); assign valid = b & rst | in; endmodule", "correct_code": "module example_296(input b, rst, output valid); assign valid = (b & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.243622", "id": 53766}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.973459", "id": 4627}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.181899", "id": 42529}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.076522", "id": 23286}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.286001", "id": 61486}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.259705", "id": 56702}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.988766", "id": 7357}
{"buggy_code": "module example_773(input data, data, output prod); assign prod = data & data | b; endmodule", "correct_code": "module example_773(input data, data, output prod); assign prod = (data & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.240641", "id": 53221}
{"buggy_code": "module simple_836(input y, data, output y); assign y = y & data | data; endmodule", "correct_code": "module simple_836(input y, data, output y); assign y = (y & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116301", "id": 30528}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.957272", "id": 1683}
{"buggy_code": "module example_203(input en, x, output q); assign q = en & x | c; endmodule", "correct_code": "module example_203(input en, x, output q); assign q = (en & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.986398", "id": 6925}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.191624", "id": 44270}
{"buggy_code": "module example_87(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module example_87(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.100356", "id": 27605}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.958287", "id": 1867}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.354485", "id": 73952}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.175889", "id": 41432}
{"buggy_code": "module example_98(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module example_98(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.338432", "id": 71064}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.250846", "id": 55091}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064444", "id": 21075}
{"buggy_code": "module example_776(input data, data, output sum); assign sum = data & data | y; endmodule", "correct_code": "module example_776(input data, data, output sum); assign sum = (data & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.044589", "id": 17465}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.019601", "id": 12947}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.022215", "id": 13419}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.202565", "id": 46272}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.967774", "id": 3601}
{"buggy_code": "module demo_840(input c, output y); assign y = c + 1; endmodule", "correct_code": "module demo_840(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.260442", "id": 56836}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.332215", "id": 69924}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.129321", "id": 32898}
{"buggy_code": "module arith_616(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module arith_616(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.132425", "id": 33467}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.128572", "id": 32762}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.298810", "id": 63828}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.217622", "id": 49021}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.241580", "id": 53397}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.161609", "id": 38829}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.030334", "id": 14887}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.149045", "id": 36512}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.096029", "id": 26814}
{"buggy_code": "module simple_207(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module simple_207(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.172079", "id": 40739}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.042789", "id": 17138}
{"buggy_code": "module arith_937(input rst, c, output valid); assign valid = rst & c | d; endmodule", "correct_code": "module arith_937(input rst, c, output valid); assign valid = (rst & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.036242", "id": 15955}
{"buggy_code": "module example_730(input b, output q); assign q = b + 1; endmodule", "correct_code": "module example_730(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.057422", "id": 19785}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.253471", "id": 55562}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.146657", "id": 36074}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.104748", "id": 28405}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.137464", "id": 34394}
{"buggy_code": "module demo_981(input d, clk, output y); assign y = d & clk | b; endmodule", "correct_code": "module demo_981(input d, clk, output y); assign y = (d & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.991271", "id": 7820}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.085314", "id": 24860}
{"buggy_code": "module demo_261(input rst, b, output sum); assign sum = rst & b | c; endmodule", "correct_code": "module demo_261(input rst, b, output sum); assign sum = (rst & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.011512", "id": 11491}
{"buggy_code": "module test_828(input x, clk, output q); assign q = x & clk | en; endmodule", "correct_code": "module test_828(input x, clk, output q); assign q = (x & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.256248", "id": 56065}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.034795", "id": 15691}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.254682", "id": 55781}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.122387", "id": 31632}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277301", "id": 59889}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.234276", "id": 52054}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.057939", "id": 19879}
{"buggy_code": "module logic_377(input data, a, output prod); assign prod = data & a | a; endmodule", "correct_code": "module logic_377(input data, a, output prod); assign prod = (data & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.274955", "id": 59469}
{"buggy_code": "module example_349(input d, data, output result); assign result = d & data | a; endmodule", "correct_code": "module example_349(input d, data, output result); assign result = (d & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.235512", "id": 52280}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.125340", "id": 32173}
{"buggy_code": "module simple_542(input b, output y); assign y = b + 1; endmodule", "correct_code": "module simple_542(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.220981", "id": 49617}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.313355", "id": 66502}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.998701", "id": 9173}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.079577", "id": 23822}
{"buggy_code": "module basic_993(input rst, b, output sum); assign sum = rst & b | c; endmodule", "correct_code": "module basic_993(input rst, b, output sum); assign sum = (rst & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.308661", "id": 65647}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.080333", "id": 23961}
{"buggy_code": "module logic_769(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module logic_769(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.316993", "id": 67166}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.960927", "id": 2347}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.994108", "id": 8336}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.285730", "id": 61438}
{"buggy_code": "module logic_915(input a, output result); assign result = a + 1; endmodule", "correct_code": "module logic_915(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.356279", "id": 74283}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.340570", "id": 71432}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.240161", "id": 53134}
{"buggy_code": "module logic_155(input y, output out); assign out = y + 1; endmodule", "correct_code": "module logic_155(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.278016", "id": 60020}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.224864", "id": 50328}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.177697", "id": 41768}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.256540", "id": 56121}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.348366", "id": 72846}
{"buggy_code": "module demo_662(input en, c, output q); assign q = en & c | en; endmodule", "correct_code": "module demo_662(input en, c, output q); assign q = (en & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.072452", "id": 22544}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.025811", "id": 14074}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.148889", "id": 36482}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.267413", "id": 58108}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.992872", "id": 8111}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.147445", "id": 36213}
{"buggy_code": "module test_32(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module test_32(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.081514", "id": 24175}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.282602", "id": 60867}
{"buggy_code": "module example_615(input en, a, output y); assign y = en & a | rst; endmodule", "correct_code": "module example_615(input en, a, output y); assign y = (en & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.156184", "id": 37829}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.078460", "id": 23616}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.318058", "id": 67363}
{"buggy_code": "module demo_79(input a, output result); assign result = a + 1; endmodule", "correct_code": "module demo_79(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.095284", "id": 26678}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.038071", "id": 16289}
{"buggy_code": "module logic_62(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module logic_62(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.062707", "id": 20755}
{"buggy_code": "module simple_442(input c, output q); assign q = c + 1; endmodule", "correct_code": "module simple_442(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.959926", "id": 2164}
{"buggy_code": "module simple_77(input b, x, output sum); assign sum = b & x | d; endmodule", "correct_code": "module simple_77(input b, x, output sum); assign sum = (b & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.012746", "id": 11712}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.140299", "id": 34917}
{"buggy_code": "module demo_733(input a, c, output valid); assign valid = a & c | en; endmodule", "correct_code": "module demo_733(input a, c, output valid); assign valid = (a & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.137618", "id": 34423}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.960488", "id": 2267}
{"buggy_code": "module arith_274(input d, output out); assign out = d + 1; endmodule", "correct_code": "module arith_274(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.165120", "id": 39463}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.056311", "id": 19579}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.025892", "id": 14086}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.349254", "id": 73005}
{"buggy_code": "module example_25(input in, c, output sum); assign sum = in & c | b; endmodule", "correct_code": "module example_25(input in, c, output sum); assign sum = (in & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.954733", "id": 1227}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.213954", "id": 48347}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.216551", "id": 48821}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.042945", "id": 17166}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.097004", "id": 26989}
{"buggy_code": "module demo_511(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module demo_511(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.335119", "id": 70454}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.072651", "id": 22581}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.340664", "id": 71449}
{"buggy_code": "module arith_641(input x, c, output sum); assign sum = x & c | clk; endmodule", "correct_code": "module arith_641(input x, c, output sum); assign sum = (x & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.266801", "id": 57997}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.105255", "id": 28495}
{"buggy_code": "module arith_651(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module arith_651(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.952478", "id": 819}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.180931", "id": 42362}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.233254", "id": 51864}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.066154", "id": 21388}
{"buggy_code": "module example_741(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module example_741(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.162966", "id": 39071}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.034790", "id": 15690}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.069288", "id": 21960}
{"buggy_code": "module basic_515(input x, output out); assign out = x + 1; endmodule", "correct_code": "module basic_515(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.328468", "id": 69237}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.976224", "id": 5127}
{"buggy_code": "module demo_780(input y, data, output sum); assign sum = y & data | en; endmodule", "correct_code": "module demo_780(input y, data, output sum); assign sum = (y & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.339684", "id": 71273}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.124869", "id": 32084}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.252500", "id": 55389}
{"buggy_code": "module simple_816(input clk, in, output prod); assign prod = clk & in | b; endmodule", "correct_code": "module simple_816(input clk, in, output prod); assign prod = (clk & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.184517", "id": 43008}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.145574", "id": 35878}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.976794", "id": 5232}
{"buggy_code": "module demo_405(input a, data, output result); assign result = a & data | a; endmodule", "correct_code": "module demo_405(input a, data, output result); assign result = (a & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.237715", "id": 52686}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043976", "id": 17351}
{"buggy_code": "module example_324(input en, output out); assign out = en + 1; endmodule", "correct_code": "module example_324(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.354811", "id": 74014}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.126910", "id": 32461}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117637", "id": 30776}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.269451", "id": 58481}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.014047", "id": 11950}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.132918", "id": 33556}
{"buggy_code": "module basic_639(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module basic_639(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.993387", "id": 8206}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.303124", "id": 64617}
{"buggy_code": "module test_685(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module test_685(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118404", "id": 30914}
{"buggy_code": "module example_440(input a, output y); assign y = a + 1; endmodule", "correct_code": "module example_440(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.018598", "id": 12776}
{"buggy_code": "module basic_961(input clk, x, output y); assign y = clk & x | c; endmodule", "correct_code": "module basic_961(input clk, x, output y); assign y = (clk & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.275510", "id": 59573}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.188729", "id": 43776}
{"buggy_code": "module arith_81(input a, output out); assign out = a + 1; endmodule", "correct_code": "module arith_81(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.197759", "id": 45395}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.995255", "id": 8545}
{"buggy_code": "module test_507(input b, en, output result); assign result = b & en | b; endmodule", "correct_code": "module test_507(input b, en, output result); assign result = (b & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.018376", "id": 12735}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.031106", "id": 15025}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.997760", "id": 9004}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.316323", "id": 67043}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.227608", "id": 50829}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.134392", "id": 33830}
{"buggy_code": "module simple_796(input clk, clk, output valid); assign valid = clk & clk | a; endmodule", "correct_code": "module simple_796(input clk, clk, output valid); assign valid = (clk & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.276104", "id": 59678}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.134599", "id": 33868}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.261291", "id": 56993}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.330763", "id": 69662}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.352099", "id": 73521}
{"buggy_code": "module basic_824(input in, clk, output q); assign q = in & clk | clk; endmodule", "correct_code": "module basic_824(input in, clk, output q); assign q = (in & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.163478", "id": 39166}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.170793", "id": 40503}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.240259", "id": 53152}
{"buggy_code": "module arith_152(input d, output out); assign out = d + 1; endmodule", "correct_code": "module arith_152(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.346533", "id": 72509}
{"buggy_code": "module basic_685(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module basic_685(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.348395", "id": 72851}
{"buggy_code": "module arith_701(input en, c, output prod); assign prod = en & c | rst; endmodule", "correct_code": "module arith_701(input en, c, output prod); assign prod = (en & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.252567", "id": 55401}
{"buggy_code": "module basic_809(input clk, x, output y); assign y = clk & x | en; endmodule", "correct_code": "module basic_809(input clk, x, output y); assign y = (clk & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.128777", "id": 32800}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.149357", "id": 36570}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.186435", "id": 43358}
{"buggy_code": "module test_375(input b, c, output y); assign y = b & c | rst; endmodule", "correct_code": "module test_375(input b, c, output y); assign y = (b & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.157911", "id": 38145}
{"buggy_code": "module example_46(input en, c, output q); assign q = en & c | c; endmodule", "correct_code": "module example_46(input en, c, output q); assign q = (en & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.268328", "id": 58273}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.990351", "id": 7650}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.104502", "id": 28360}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.300708", "id": 64176}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113008", "id": 29925}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.076841", "id": 23333}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.042738", "id": 17128}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.964276", "id": 2956}
{"buggy_code": "module logic_104(input d, y, output prod); assign prod = d & y | d; endmodule", "correct_code": "module logic_104(input d, y, output prod); assign prod = (d & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.965001", "id": 3090}
{"buggy_code": "module demo_256(input x, d, output valid); assign valid = x & d | rst; endmodule", "correct_code": "module demo_256(input x, d, output valid); assign valid = (x & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.104143", "id": 28295}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.250850", "id": 55092}
{"buggy_code": "module simple_761(input a, in, output y); assign y = a & in | a; endmodule", "correct_code": "module simple_761(input a, in, output y); assign y = (a & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.106019", "id": 28637}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.332873", "id": 70044}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.089244", "id": 25577}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.077444", "id": 23430}
{"buggy_code": "module demo_507(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module demo_507(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.084175", "id": 24652}
{"buggy_code": "module demo_636(input c, in, output prod); assign prod = c & in | b; endmodule", "correct_code": "module demo_636(input c, in, output prod); assign prod = (c & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.076274", "id": 23248}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.211053", "id": 47822}
{"buggy_code": "module test_554(input clk, d, output out); assign out = clk & d | c; endmodule", "correct_code": "module test_554(input clk, d, output out); assign out = (clk & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.360079", "id": 74984}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.268029", "id": 58219}
{"buggy_code": "module basic_722(input x, output result); assign result = x + 1; endmodule", "correct_code": "module basic_722(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.130081", "id": 33037}
{"buggy_code": "module basic_33(input rst, y, output prod); assign prod = rst & y | en; endmodule", "correct_code": "module basic_33(input rst, y, output prod); assign prod = (rst & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.216083", "id": 48737}
{"buggy_code": "module test_502(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module test_502(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.987256", "id": 7082}
{"buggy_code": "module arith_291(input d, b, output prod); assign prod = d & b | c; endmodule", "correct_code": "module arith_291(input d, b, output prod); assign prod = (d & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.039528", "id": 16556}
{"buggy_code": "module demo_266(input data, output out); assign out = data + 1; endmodule", "correct_code": "module demo_266(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.046870", "id": 17875}
{"buggy_code": "module test_937(input y, en, output result); assign result = y & en | b; endmodule", "correct_code": "module test_937(input y, en, output result); assign result = (y & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.217748", "id": 49045}
{"buggy_code": "module arith_275(input a, x, output valid); assign valid = a & x | data; endmodule", "correct_code": "module arith_275(input a, x, output valid); assign valid = (a & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.057571", "id": 19811}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.322537", "id": 68151}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.255151", "id": 55866}
{"buggy_code": "module test_94(input b, a, output out); assign out = b & a | y; endmodule", "correct_code": "module test_94(input b, a, output out); assign out = (b & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.967127", "id": 3479}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.274406", "id": 59391}
{"buggy_code": "module example_607(input c, en, output prod); assign prod = c & en | data; endmodule", "correct_code": "module example_607(input c, en, output prod); assign prod = (c & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.959087", "id": 2013}
{"buggy_code": "module simple_918(input en, output q); assign q = en + 1; endmodule", "correct_code": "module simple_918(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.336912", "id": 70784}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.339693", "id": 71275}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.019813", "id": 12985}
{"buggy_code": "module logic_11(input rst, in, output sum); assign sum = rst & in | b; endmodule", "correct_code": "module logic_11(input rst, in, output sum); assign sum = (rst & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.195806", "id": 45040}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.138746", "id": 34633}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.077207", "id": 23386}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.310893", "id": 66053}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.109297", "id": 29241}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.985021", "id": 6670}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.989132", "id": 7424}
{"buggy_code": "module basic_742(input in, output y); assign y = in + 1; endmodule", "correct_code": "module basic_742(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.123466", "id": 31830}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.012658", "id": 11696}
{"buggy_code": "module simple_789(input clk, a, output q); assign q = clk & a | data; endmodule", "correct_code": "module simple_789(input clk, a, output q); assign q = (clk & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.249487", "id": 54842}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.069776", "id": 22051}
{"buggy_code": "module basic_489(input clk, y, output sum); assign sum = clk & y | in; endmodule", "correct_code": "module basic_489(input clk, y, output sum); assign sum = (clk & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.041520", "id": 16908}
{"buggy_code": "module basic_920(input c, output result); assign result = c + 1; endmodule", "correct_code": "module basic_920(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.064741", "id": 21132}
{"buggy_code": "module arith_695(input b, d, output y); assign y = b & d | d; endmodule", "correct_code": "module arith_695(input b, d, output y); assign y = (b & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.087485", "id": 25255}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.978458", "id": 5486}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.239863", "id": 53081}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.047738", "id": 18033}
{"buggy_code": "module demo_712(input c, clk, output out); assign out = c & clk | b; endmodule", "correct_code": "module demo_712(input c, clk, output out); assign out = (c & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.992276", "id": 8004}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.223438", "id": 50070}
{"buggy_code": "module example_74(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module example_74(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.143334", "id": 35462}
{"buggy_code": "module example_297(input data, in, output y); assign y = data & in | a; endmodule", "correct_code": "module example_297(input data, in, output y); assign y = (data & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.994580", "id": 8422}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.340689", "id": 71454}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.216016", "id": 48725}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.119936", "id": 31184}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.327928", "id": 69138}
{"buggy_code": "module test_376(input clk, rst, output prod); assign prod = clk & rst | rst; endmodule", "correct_code": "module test_376(input clk, rst, output prod); assign prod = (clk & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.298206", "id": 63718}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.145446", "id": 35855}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.226540", "id": 50635}
{"buggy_code": "module example_483(input a, output y); assign y = a + 1; endmodule", "correct_code": "module example_483(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.036129", "id": 15934}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.261579", "id": 57046}
{"buggy_code": "module simple_96(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module simple_96(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.969064", "id": 3829}
{"buggy_code": "module simple_216(input x, output result); assign result = x + 1; endmodule", "correct_code": "module simple_216(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.343377", "id": 71938}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210930", "id": 47800}
{"buggy_code": "module basic_107(input y, output result); assign result = y + 1; endmodule", "correct_code": "module basic_107(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.973279", "id": 4594}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.084524", "id": 24716}
{"buggy_code": "module simple_549(input a, b, output y); assign y = a & b | clk; endmodule", "correct_code": "module simple_549(input a, b, output y); assign y = (a & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.141064", "id": 35057}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.354816", "id": 74015}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.346307", "id": 72466}
{"buggy_code": "module demo_556(input c, rst, output sum); assign sum = c & rst | c; endmodule", "correct_code": "module demo_556(input c, rst, output sum); assign sum = (c & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.094686", "id": 26568}
{"buggy_code": "module demo_506(input data, b, output q); assign q = data & b | in; endmodule", "correct_code": "module demo_506(input data, b, output q); assign q = (data & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.225582", "id": 50460}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.264063", "id": 57496}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.101864", "id": 27881}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.128917", "id": 32822}
{"buggy_code": "module demo_938(input b, clk, output sum); assign sum = b & clk | clk; endmodule", "correct_code": "module demo_938(input b, clk, output sum); assign sum = (b & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.068459", "id": 21805}
{"buggy_code": "module simple_60(input x, output y); assign y = x + 1; endmodule", "correct_code": "module simple_60(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.192909", "id": 44507}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.311057", "id": 66085}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.016986", "id": 12480}
{"buggy_code": "module simple_377(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module simple_377(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.321253", "id": 67915}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.114455", "id": 30192}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.197764", "id": 45396}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.237489", "id": 52643}
{"buggy_code": "module simple_540(input rst, c, output q); assign q = rst & c | in; endmodule", "correct_code": "module simple_540(input rst, c, output q); assign q = (rst & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.151981", "id": 37055}
{"buggy_code": "module example_975(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module example_975(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.337292", "id": 70856}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.324622", "id": 68535}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.164243", "id": 39306}
{"buggy_code": "module arith_568(input x, data, output out); assign out = x & data | y; endmodule", "correct_code": "module arith_568(input x, data, output out); assign out = (x & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.069586", "id": 22015}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329468", "id": 69424}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.355414", "id": 74126}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.248402", "id": 54644}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.128175", "id": 32689}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.007582", "id": 10775}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.116744", "id": 30611}
{"buggy_code": "module arith_514(input data, in, output prod); assign prod = data & in | rst; endmodule", "correct_code": "module arith_514(input data, in, output prod); assign prod = (data & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.019981", "id": 13012}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.089937", "id": 25703}
{"buggy_code": "module example_763(input d, clk, output out); assign out = d & clk | b; endmodule", "correct_code": "module example_763(input d, clk, output out); assign out = (d & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.254976", "id": 55833}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.348381", "id": 72849}
{"buggy_code": "module simple_690(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module simple_690(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.957783", "id": 1776}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.228571", "id": 51004}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.221039", "id": 49627}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.105918", "id": 28618}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.335632", "id": 70550}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.984474", "id": 6573}
{"buggy_code": "module example_659(input data, en, output prod); assign prod = data & en | d; endmodule", "correct_code": "module example_659(input data, en, output prod); assign prod = (data & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.200588", "id": 45913}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.270926", "id": 58750}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.333974", "id": 70247}
{"buggy_code": "module demo_149(input x, data, output y); assign y = x & data | data; endmodule", "correct_code": "module demo_149(input x, data, output y); assign y = (x & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.072059", "id": 22471}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.037444", "id": 16174}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.253029", "id": 55485}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043635", "id": 17289}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.057097", "id": 19726}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.205345", "id": 46781}
{"buggy_code": "module demo_233(input clk, clk, output sum); assign sum = clk & clk | x; endmodule", "correct_code": "module demo_233(input clk, clk, output sum); assign sum = (clk & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.280698", "id": 60516}
{"buggy_code": "module example_271(input c, output result); assign result = c + 1; endmodule", "correct_code": "module example_271(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.131083", "id": 33223}
{"buggy_code": "module logic_151(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module logic_151(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.204735", "id": 46669}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.041551", "id": 16914}
{"buggy_code": "module basic_760(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module basic_760(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.969490", "id": 3906}
{"buggy_code": "module test_161(input x, en, output valid); assign valid = x & en | x; endmodule", "correct_code": "module test_161(input x, en, output valid); assign valid = (x & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.327861", "id": 69125}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.257050", "id": 56214}
{"buggy_code": "module test_202(input data, output out); assign out = data + 1; endmodule", "correct_code": "module test_202(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.171640", "id": 40657}
{"buggy_code": "module demo_890(input a, d, output result); assign result = a & d | en; endmodule", "correct_code": "module demo_890(input a, d, output result); assign result = (a & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.960444", "id": 2259}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.196099", "id": 45092}
{"buggy_code": "module demo_548(input c, c, output prod); assign prod = c & c | data; endmodule", "correct_code": "module demo_548(input c, c, output prod); assign prod = (c & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.294910", "id": 63112}
{"buggy_code": "module arith_299(input a, data, output valid); assign valid = a & data | rst; endmodule", "correct_code": "module arith_299(input a, data, output valid); assign valid = (a & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.172017", "id": 40727}
{"buggy_code": "module simple_366(input en, output result); assign result = en + 1; endmodule", "correct_code": "module simple_366(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.241044", "id": 53294}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.021743", "id": 13335}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.139548", "id": 34779}
{"buggy_code": "module example_713(input b, d, output sum); assign sum = b & d | c; endmodule", "correct_code": "module example_713(input b, d, output sum); assign sum = (b & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.043097", "id": 17193}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.308862", "id": 65681}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.318482", "id": 67441}
{"buggy_code": "module demo_205(input in, output result); assign result = in + 1; endmodule", "correct_code": "module demo_205(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.146924", "id": 36119}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.204215", "id": 46576}
{"buggy_code": "module basic_510(input y, output q); assign q = y + 1; endmodule", "correct_code": "module basic_510(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.111798", "id": 29701}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.202604", "id": 46279}
{"buggy_code": "module basic_330(input y, a, output out); assign out = y & a | clk; endmodule", "correct_code": "module basic_330(input y, a, output out); assign out = (y & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.094545", "id": 26543}
{"buggy_code": "module test_899(input in, x, output sum); assign sum = in & x | en; endmodule", "correct_code": "module test_899(input in, x, output sum); assign sum = (in & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.107477", "id": 28905}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.040164", "id": 16673}
{"buggy_code": "module test_620(input y, output result); assign result = y + 1; endmodule", "correct_code": "module test_620(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.147503", "id": 36225}
{"buggy_code": "module test_43(input data, x, output prod); assign prod = data & x | clk; endmodule", "correct_code": "module test_43(input data, x, output prod); assign prod = (data & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.346264", "id": 72458}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.088013", "id": 25350}
{"buggy_code": "module arith_871(input y, output y); assign y = y + 1; endmodule", "correct_code": "module arith_871(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.335092", "id": 70449}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.210277", "id": 47682}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.142654", "id": 35334}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.130312", "id": 33079}
{"buggy_code": "module test_140(input data, y, output sum); assign sum = data & y | data; endmodule", "correct_code": "module test_140(input data, y, output sum); assign sum = (data & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.128520", "id": 32753}
{"buggy_code": "module basic_353(input d, clk, output prod); assign prod = d & clk | rst; endmodule", "correct_code": "module basic_353(input d, clk, output prod); assign prod = (d & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.180225", "id": 42234}
{"buggy_code": "module demo_462(input y, rst, output sum); assign sum = y & rst | rst; endmodule", "correct_code": "module demo_462(input y, rst, output sum); assign sum = (y & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.157047", "id": 37987}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.072415", "id": 22537}
{"buggy_code": "module arith_115(input b, clk, output prod); assign prod = b & clk | d; endmodule", "correct_code": "module arith_115(input b, clk, output prod); assign prod = (b & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.995268", "id": 8547}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.984570", "id": 6591}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.128371", "id": 32725}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.107303", "id": 28873}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.201896", "id": 46149}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.235517", "id": 52281}
{"buggy_code": "module arith_823(input d, en, output q); assign q = d & en | c; endmodule", "correct_code": "module arith_823(input d, en, output q); assign q = (d & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.960636", "id": 2294}
{"buggy_code": "module simple_959(input y, data, output y); assign y = y & data | b; endmodule", "correct_code": "module simple_959(input y, data, output y); assign y = (y & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.999150", "id": 9254}
{"buggy_code": "module arith_920(input y, output result); assign result = y + 1; endmodule", "correct_code": "module arith_920(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.272903", "id": 59115}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.331263", "id": 69751}
{"buggy_code": "module simple_747(input a, output q); assign q = a + 1; endmodule", "correct_code": "module simple_747(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.333686", "id": 70196}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.088720", "id": 25480}
{"buggy_code": "module example_624(input in, x, output out); assign out = in & x | rst; endmodule", "correct_code": "module example_624(input in, x, output out); assign out = (in & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.277874", "id": 59993}
{"buggy_code": "module test_618(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module test_618(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.340856", "id": 71483}
{"buggy_code": "module test_291(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module test_291(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.316178", "id": 67015}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.236857", "id": 52524}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.239042", "id": 52929}
{"buggy_code": "module simple_242(input b, output result); assign result = b + 1; endmodule", "correct_code": "module simple_242(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.003190", "id": 9991}
{"buggy_code": "module test_246(input in, rst, output prod); assign prod = in & rst | data; endmodule", "correct_code": "module test_246(input in, rst, output prod); assign prod = (in & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.973466", "id": 4628}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.203874", "id": 46511}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.079068", "id": 23726}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.167642", "id": 39929}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.058909", "id": 20055}
{"buggy_code": "module example_55(input c, c, output valid); assign valid = c & c | x; endmodule", "correct_code": "module example_55(input c, c, output valid); assign valid = (c & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.950294", "id": 423}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.298646", "id": 63798}
{"buggy_code": "module test_541(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module test_541(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.255108", "id": 55858}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.139040", "id": 34685}
{"buggy_code": "module arith_450(input y, c, output q); assign q = y & c | rst; endmodule", "correct_code": "module arith_450(input y, c, output q); assign q = (y & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.069394", "id": 21979}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.140985", "id": 35043}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.142366", "id": 35281}
{"buggy_code": "module demo_895(input d, output result); assign result = d + 1; endmodule", "correct_code": "module demo_895(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.058935", "id": 20060}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.117657", "id": 30780}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.159039", "id": 38354}
{"buggy_code": "module simple_616(input y, output result); assign result = y + 1; endmodule", "correct_code": "module simple_616(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.224703", "id": 50299}
{"buggy_code": "module example_570(input c, output out); assign out = c + 1; endmodule", "correct_code": "module example_570(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.097149", "id": 27015}
{"buggy_code": "module test_989(input b, b, output y); assign y = b & b | clk; endmodule", "correct_code": "module test_989(input b, b, output y); assign y = (b & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.006504", "id": 10582}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.974912", "id": 4890}
{"buggy_code": "module example_209(input d, output out); assign out = d + 1; endmodule", "correct_code": "module example_209(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.142943", "id": 35389}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.177337", "id": 41702}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.271210", "id": 58802}
{"buggy_code": "module test_978(input b, output y); assign y = b + 1; endmodule", "correct_code": "module test_978(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.054072", "id": 19164}
{"buggy_code": "module demo_402(input rst, a, output valid); assign valid = rst & a | data; endmodule", "correct_code": "module demo_402(input rst, a, output valid); assign valid = (rst & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.310559", "id": 65992}
{"buggy_code": "module logic_338(input clk, in, output prod); assign prod = clk & in | b; endmodule", "correct_code": "module logic_338(input clk, in, output prod); assign prod = (clk & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.194387", "id": 44780}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.117626", "id": 30774}
{"buggy_code": "module logic_133(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module logic_133(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.138083", "id": 34509}
{"buggy_code": "module arith_587(input y, rst, output result); assign result = y & rst | d; endmodule", "correct_code": "module arith_587(input y, rst, output result); assign result = (y & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.355379", "id": 74119}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.949101", "id": 206}
{"buggy_code": "module simple_80(input c, in, output valid); assign valid = c & in | y; endmodule", "correct_code": "module simple_80(input c, in, output valid); assign valid = (c & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.949324", "id": 247}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.050323", "id": 18477}
{"buggy_code": "module logic_802(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module logic_802(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.044617", "id": 17470}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.247847", "id": 54540}
{"buggy_code": "module logic_758(input d, data, output out); assign out = d & data | rst; endmodule", "correct_code": "module logic_758(input d, data, output out); assign out = (d & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.961289", "id": 2415}
{"buggy_code": "module basic_802(input d, data, output valid); assign valid = d & data | a; endmodule", "correct_code": "module basic_802(input d, data, output valid); assign valid = (d & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.187306", "id": 43515}
{"buggy_code": "module example_96(input b, output q); assign q = b + 1; endmodule", "correct_code": "module example_96(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.213549", "id": 48276}
{"buggy_code": "module test_890(input b, output y); assign y = b + 1; endmodule", "correct_code": "module test_890(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.317908", "id": 67334}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.116078", "id": 30487}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.975853", "id": 5060}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008877", "id": 11011}
{"buggy_code": "module simple_98(input y, in, output prod); assign prod = y & in | en; endmodule", "correct_code": "module simple_98(input y, in, output prod); assign prod = (y & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.173240", "id": 40949}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.298422", "id": 63758}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.102335", "id": 27968}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.323271", "id": 68286}
{"buggy_code": "module arith_274(input clk, c, output out); assign out = clk & c | c; endmodule", "correct_code": "module arith_274(input clk, c, output out); assign out = (clk & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.324706", "id": 68550}
{"buggy_code": "module arith_836(input clk, b, output q); assign q = clk & b | rst; endmodule", "correct_code": "module arith_836(input clk, b, output q); assign q = (clk & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.963850", "id": 2878}
{"buggy_code": "module logic_138(input rst, y, output prod); assign prod = rst & y | d; endmodule", "correct_code": "module logic_138(input rst, y, output prod); assign prod = (rst & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.067616", "id": 21653}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.290060", "id": 62226}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.343271", "id": 71918}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.284119", "id": 61143}
{"buggy_code": "module logic_42(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module logic_42(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.019356", "id": 12902}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.184130", "id": 42936}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.024122", "id": 13765}
{"buggy_code": "module arith_887(input c, output out); assign out = c + 1; endmodule", "correct_code": "module arith_887(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.032065", "id": 15199}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.971362", "id": 4247}
{"buggy_code": "module example_738(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module example_738(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.312555", "id": 66356}
{"buggy_code": "module demo_51(input y, en, output prod); assign prod = y & en | data; endmodule", "correct_code": "module demo_51(input y, en, output prod); assign prod = (y & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.212406", "id": 48067}
{"buggy_code": "module example_515(input en, output y); assign y = en + 1; endmodule", "correct_code": "module example_515(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.300791", "id": 64192}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.358254", "id": 74649}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.995659", "id": 8619}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192620", "id": 44455}
{"buggy_code": "module logic_564(input x, output y); assign y = x + 1; endmodule", "correct_code": "module logic_564(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.101261", "id": 27770}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.087943", "id": 25338}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.129544", "id": 32939}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.298194", "id": 63716}
{"buggy_code": "module test_13(input a, output q); assign q = a + 1; endmodule", "correct_code": "module test_13(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.331195", "id": 69739}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.263009", "id": 57303}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.147484", "id": 36221}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.079037", "id": 23720}
{"buggy_code": "module arith_336(input en, data, output prod); assign prod = en & data | c; endmodule", "correct_code": "module arith_336(input en, data, output prod); assign prod = (en & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.095291", "id": 26679}
{"buggy_code": "module example_755(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module example_755(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.065717", "id": 21310}
{"buggy_code": "module arith_646(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module arith_646(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.281638", "id": 60689}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.286668", "id": 61608}
{"buggy_code": "module example_36(input rst, a, output valid); assign valid = rst & a | clk; endmodule", "correct_code": "module example_36(input rst, a, output valid); assign valid = (rst & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.159547", "id": 38449}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.954295", "id": 1146}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.986714", "id": 6984}
{"buggy_code": "module arith_293(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module arith_293(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.003590", "id": 10046}
{"buggy_code": "module example_679(input y, x, output prod); assign prod = y & x | y; endmodule", "correct_code": "module example_679(input y, x, output prod); assign prod = (y & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.346891", "id": 72574}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.960219", "id": 2216}
{"buggy_code": "module demo_413(input clk, in, output q); assign q = clk & in | b; endmodule", "correct_code": "module demo_413(input clk, in, output q); assign q = (clk & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.178000", "id": 41822}
{"buggy_code": "module example_133(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module example_133(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.968510", "id": 3735}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.347464", "id": 72678}
{"buggy_code": "module example_947(input c, b, output valid); assign valid = c & b | a; endmodule", "correct_code": "module example_947(input c, b, output valid); assign valid = (c & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.112528", "id": 29835}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.058381", "id": 19960}
{"buggy_code": "module arith_883(input x, x, output result); assign result = x & x | clk; endmodule", "correct_code": "module arith_883(input x, x, output result); assign result = (x & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.242688", "id": 53596}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.340258", "id": 71378}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.345281", "id": 72279}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.130550", "id": 33125}
{"buggy_code": "module example_804(input y, rst, output out); assign out = y & rst | rst; endmodule", "correct_code": "module example_804(input y, rst, output out); assign out = (y & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.978752", "id": 5539}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.018351", "id": 12731}
{"buggy_code": "module arith_409(input b, clk, output y); assign y = b & clk | y; endmodule", "correct_code": "module arith_409(input b, clk, output y); assign y = (b & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.252907", "id": 55462}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.193886", "id": 44686}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.327908", "id": 69134}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.341663", "id": 71630}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.160575", "id": 38639}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.353188", "id": 73715}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.194130", "id": 44732}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.060638", "id": 20376}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.033930", "id": 15534}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286639", "id": 61602}
{"buggy_code": "module logic_551(input d, output y); assign y = d + 1; endmodule", "correct_code": "module logic_551(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.966401", "id": 3347}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.297412", "id": 63572}
{"buggy_code": "module simple_462(input in, a, output sum); assign sum = in & a | clk; endmodule", "correct_code": "module simple_462(input in, a, output sum); assign sum = (in & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.119971", "id": 31191}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.286043", "id": 61495}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.161737", "id": 38853}
{"buggy_code": "module basic_457(input b, rst, output prod); assign prod = b & rst | y; endmodule", "correct_code": "module basic_457(input b, rst, output prod); assign prod = (b & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.290924", "id": 62386}
{"buggy_code": "module basic_805(input en, c, output valid); assign valid = en & c | x; endmodule", "correct_code": "module basic_805(input en, c, output valid); assign valid = (en & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.155468", "id": 37698}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.183312", "id": 42789}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.141379", "id": 35097}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.295004", "id": 63130}
{"buggy_code": "module logic_572(input in, output out); assign out = in + 1; endmodule", "correct_code": "module logic_572(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.954305", "id": 1148}
{"buggy_code": "module basic_127(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module basic_127(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.060851", "id": 20413}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.141416", "id": 35104}
{"buggy_code": "module logic_60(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module logic_60(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.146317", "id": 36012}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.083774", "id": 24583}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.312802", "id": 66402}
{"buggy_code": "module example_568(input y, b, output valid); assign valid = y & b | b; endmodule", "correct_code": "module example_568(input y, b, output valid); assign valid = (y & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.269384", "id": 58469}
{"buggy_code": "module simple_437(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module simple_437(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.346933", "id": 72581}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.983346", "id": 6366}
{"buggy_code": "module test_574(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module test_574(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.289919", "id": 62202}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.992876", "id": 8112}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.016779", "id": 12445}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.139609", "id": 34791}
{"buggy_code": "module simple_350(input data, output q); assign q = data + 1; endmodule", "correct_code": "module simple_350(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.208812", "id": 47414}
{"buggy_code": "module demo_233(input a, data, output sum); assign sum = a & data | data; endmodule", "correct_code": "module demo_233(input a, data, output sum); assign sum = (a & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.256924", "id": 56191}
{"buggy_code": "module test_546(input in, output y); assign y = in + 1; endmodule", "correct_code": "module test_546(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.067503", "id": 21633}
{"buggy_code": "module test_455(input c, output out); assign out = c + 1; endmodule", "correct_code": "module test_455(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.302207", "id": 64450}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.196354", "id": 45139}
{"buggy_code": "module logic_250(input rst, x, output result); assign result = rst & x | data; endmodule", "correct_code": "module logic_250(input rst, x, output result); assign result = (rst & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.077357", "id": 23414}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.166336", "id": 39686}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.090442", "id": 25797}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.275985", "id": 59657}
{"buggy_code": "module test_10(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module test_10(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.968629", "id": 3756}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.129903", "id": 33003}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.005026", "id": 10309}
{"buggy_code": "module logic_257(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module logic_257(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.114747", "id": 30246}
{"buggy_code": "module logic_773(input en, output out); assign out = en + 1; endmodule", "correct_code": "module logic_773(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.037782", "id": 16236}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.041143", "id": 16840}
{"buggy_code": "module basic_968(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module basic_968(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.167099", "id": 39827}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.341339", "id": 71569}
{"buggy_code": "module test_522(input d, output y); assign y = d + 1; endmodule", "correct_code": "module test_522(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.298893", "id": 63842}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.148020", "id": 36320}
{"buggy_code": "module arith_54(input a, output q); assign q = a + 1; endmodule", "correct_code": "module arith_54(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.287783", "id": 61811}
{"buggy_code": "module test_517(input b, rst, output result); assign result = b & rst | in; endmodule", "correct_code": "module test_517(input b, rst, output result); assign result = (b & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.010722", "id": 11347}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.039626", "id": 16574}
{"buggy_code": "module example_433(input data, output result); assign result = data + 1; endmodule", "correct_code": "module example_433(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.082672", "id": 24384}
{"buggy_code": "module logic_947(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module logic_947(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.342105", "id": 71709}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.232605", "id": 51744}
{"buggy_code": "module demo_725(input x, rst, output result); assign result = x & rst | rst; endmodule", "correct_code": "module demo_725(input x, rst, output result); assign result = (x & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.256172", "id": 56051}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.253520", "id": 55572}
{"buggy_code": "module example_499(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module example_499(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.123529", "id": 31842}
{"buggy_code": "module example_956(input x, rst, output valid); assign valid = x & rst | d; endmodule", "correct_code": "module example_956(input x, rst, output valid); assign valid = (x & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.069017", "id": 21908}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.219297", "id": 49327}
{"buggy_code": "module example_368(input en, output out); assign out = en + 1; endmodule", "correct_code": "module example_368(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.208087", "id": 47281}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.311130", "id": 66099}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.311046", "id": 66083}
{"buggy_code": "module arith_610(input x, rst, output prod); assign prod = x & rst | en; endmodule", "correct_code": "module arith_610(input x, rst, output prod); assign prod = (x & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.968946", "id": 3809}
{"buggy_code": "module basic_990(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module basic_990(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.088509", "id": 25442}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.989088", "id": 7415}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.168418", "id": 40072}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.065810", "id": 21327}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.201523", "id": 46083}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.249242", "id": 54796}
{"buggy_code": "module demo_950(input clk, en, output sum); assign sum = clk & en | d; endmodule", "correct_code": "module demo_950(input clk, en, output sum); assign sum = (clk & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.075405", "id": 23092}
{"buggy_code": "module example_591(input c, output result); assign result = c + 1; endmodule", "correct_code": "module example_591(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.038272", "id": 16324}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.344101", "id": 72071}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.335753", "id": 70572}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.011586", "id": 11505}
{"buggy_code": "module basic_720(input a, d, output valid); assign valid = a & d | data; endmodule", "correct_code": "module basic_720(input a, d, output valid); assign valid = (a & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.107018", "id": 28819}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.185940", "id": 43267}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.129158", "id": 32868}
{"buggy_code": "module simple_826(input x, a, output valid); assign valid = x & a | a; endmodule", "correct_code": "module simple_826(input x, a, output valid); assign valid = (x & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.289739", "id": 62169}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.279458", "id": 60286}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179345", "id": 42073}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.317213", "id": 67207}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.183795", "id": 42879}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.239801", "id": 53071}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.065722", "id": 21311}
{"buggy_code": "module test_878(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module test_878(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.097268", "id": 27037}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.247282", "id": 54438}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.116694", "id": 30601}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.104241", "id": 28312}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.174104", "id": 41106}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.279581", "id": 60309}
{"buggy_code": "module example_834(input in, b, output q); assign q = in & b | clk; endmodule", "correct_code": "module example_834(input in, b, output q); assign q = (in & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.117590", "id": 30767}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.171967", "id": 40718}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.235876", "id": 52346}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.094403", "id": 26516}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.969084", "id": 3833}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.142879", "id": 35377}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.350315", "id": 73197}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.135921", "id": 34109}
{"buggy_code": "module demo_630(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module demo_630(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.353538", "id": 73782}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.336032", "id": 70623}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.001061", "id": 9600}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.054038", "id": 19157}
{"buggy_code": "module example_732(input c, d, output y); assign y = c & d | data; endmodule", "correct_code": "module example_732(input c, d, output y); assign y = (c & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.279284", "id": 60253}
{"buggy_code": "module basic_247(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module basic_247(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.028912", "id": 14628}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.282944", "id": 60928}
{"buggy_code": "module arith_147(input in, c, output sum); assign sum = in & c | data; endmodule", "correct_code": "module arith_147(input in, c, output sum); assign sum = (in & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.303654", "id": 64716}
{"buggy_code": "module demo_908(input a, en, output result); assign result = a & en | x; endmodule", "correct_code": "module demo_908(input a, en, output result); assign result = (a & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.037139", "id": 16117}
{"buggy_code": "module demo_708(input y, output y); assign y = y + 1; endmodule", "correct_code": "module demo_708(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.249876", "id": 54913}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.283537", "id": 61037}
{"buggy_code": "module simple_749(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module simple_749(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.341595", "id": 71617}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.057950", "id": 19881}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.122668", "id": 31685}
{"buggy_code": "module basic_678(input in, output result); assign result = in + 1; endmodule", "correct_code": "module basic_678(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.981413", "id": 6014}
{"buggy_code": "module test_156(input d, output q); assign q = d + 1; endmodule", "correct_code": "module test_156(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.249024", "id": 54756}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.239078", "id": 52936}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.017241", "id": 12528}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.019025", "id": 12854}
{"buggy_code": "module arith_136(input b, x, output y); assign y = b & x | en; endmodule", "correct_code": "module arith_136(input b, x, output y); assign y = (b & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.055158", "id": 19369}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179901", "id": 42173}
{"buggy_code": "module basic_18(input y, x, output prod); assign prod = y & x | y; endmodule", "correct_code": "module basic_18(input y, x, output prod); assign prod = (y & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.027055", "id": 14292}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.063330", "id": 20869}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.244849", "id": 53993}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.349117", "id": 72979}
{"buggy_code": "module example_97(input x, en, output y); assign y = x & en | clk; endmodule", "correct_code": "module example_97(input x, en, output y); assign y = (x & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.095216", "id": 26666}
{"buggy_code": "module test_167(input c, y, output sum); assign sum = c & y | b; endmodule", "correct_code": "module test_167(input c, y, output sum); assign sum = (c & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.324326", "id": 68481}
{"buggy_code": "module demo_372(input rst, a, output prod); assign prod = rst & a | c; endmodule", "correct_code": "module demo_372(input rst, a, output prod); assign prod = (rst & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.109507", "id": 29280}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.142036", "id": 35218}
{"buggy_code": "module logic_445(input en, output result); assign result = en + 1; endmodule", "correct_code": "module logic_445(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.153835", "id": 37399}
{"buggy_code": "module example_595(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module example_595(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.057416", "id": 19784}
{"buggy_code": "module simple_276(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module simple_276(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.022896", "id": 13544}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.961349", "id": 2426}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.315918", "id": 66968}
{"buggy_code": "module demo_276(input in, a, output valid); assign valid = in & a | c; endmodule", "correct_code": "module demo_276(input in, a, output valid); assign valid = (in & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.168540", "id": 40093}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.328132", "id": 69174}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.291405", "id": 62477}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.153637", "id": 37363}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.036707", "id": 16041}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.018346", "id": 12730}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.148981", "id": 36500}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.967403", "id": 3531}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.201938", "id": 46157}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.157850", "id": 38134}
{"buggy_code": "module arith_630(input c, output result); assign result = c + 1; endmodule", "correct_code": "module arith_630(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.143583", "id": 35509}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.184855", "id": 43072}
{"buggy_code": "module logic_44(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module logic_44(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.057432", "id": 19787}
{"buggy_code": "module demo_20(input d, x, output result); assign result = d & x | rst; endmodule", "correct_code": "module demo_20(input d, x, output result); assign result = (d & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.188582", "id": 43749}
{"buggy_code": "module example_731(input in, rst, output prod); assign prod = in & rst | en; endmodule", "correct_code": "module example_731(input in, rst, output prod); assign prod = (in & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.265138", "id": 57693}
{"buggy_code": "module example_26(input a, a, output prod); assign prod = a & a | x; endmodule", "correct_code": "module example_26(input a, a, output prod); assign prod = (a & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.345095", "id": 72244}
{"buggy_code": "module simple_516(input x, a, output sum); assign sum = x & a | c; endmodule", "correct_code": "module simple_516(input x, a, output sum); assign sum = (x & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.221010", "id": 49622}
{"buggy_code": "module basic_720(input a, en, output q); assign q = a & en | x; endmodule", "correct_code": "module basic_720(input a, en, output q); assign q = (a & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.355679", "id": 74176}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.072290", "id": 22514}
{"buggy_code": "module example_18(input b, clk, output y); assign y = b & clk | y; endmodule", "correct_code": "module example_18(input b, clk, output y); assign y = (b & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.955110", "id": 1290}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.352024", "id": 73507}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.078067", "id": 23545}
{"buggy_code": "module basic_635(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module basic_635(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.955015", "id": 1273}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.092680", "id": 26204}
{"buggy_code": "module test_223(input y, in, output y); assign y = y & in | a; endmodule", "correct_code": "module test_223(input y, in, output y); assign y = (y & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.260093", "id": 56772}
{"buggy_code": "module basic_159(input in, output out); assign out = in + 1; endmodule", "correct_code": "module basic_159(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.245854", "id": 54180}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.159390", "id": 38420}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.961917", "id": 2527}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.312119", "id": 66278}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.192730", "id": 44475}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.282676", "id": 60881}
{"buggy_code": "module simple_78(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module simple_78(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.033605", "id": 15475}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.305754", "id": 65109}
{"buggy_code": "module basic_864(input x, output y); assign y = x + 1; endmodule", "correct_code": "module basic_864(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.087654", "id": 25285}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.239221", "id": 52963}
{"buggy_code": "module logic_45(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module logic_45(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.059618", "id": 20189}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.306047", "id": 65161}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.137802", "id": 34458}
{"buggy_code": "module example_195(input in, output q); assign q = in + 1; endmodule", "correct_code": "module example_195(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.283944", "id": 61110}
{"buggy_code": "module arith_95(input y, output out); assign out = y + 1; endmodule", "correct_code": "module arith_95(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.149370", "id": 36572}
{"buggy_code": "module basic_142(input in, x, output prod); assign prod = in & x | en; endmodule", "correct_code": "module basic_142(input in, x, output prod); assign prod = (in & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.316101", "id": 67001}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.181068", "id": 42387}
{"buggy_code": "module basic_959(input in, en, output y); assign y = in & en | clk; endmodule", "correct_code": "module basic_959(input in, en, output y); assign y = (in & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.162272", "id": 38949}
{"buggy_code": "module demo_549(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module demo_549(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.027767", "id": 14425}
{"buggy_code": "module demo_414(input en, output result); assign result = en + 1; endmodule", "correct_code": "module demo_414(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.950831", "id": 515}
{"buggy_code": "module arith_148(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module arith_148(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.203602", "id": 46462}
{"buggy_code": "module demo_263(input d, rst, output out); assign out = d & rst | c; endmodule", "correct_code": "module demo_263(input d, rst, output out); assign out = (d & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.294820", "id": 63097}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.133261", "id": 33620}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.031443", "id": 15088}
{"buggy_code": "module demo_822(input x, data, output result); assign result = x & data | clk; endmodule", "correct_code": "module demo_822(input x, data, output result); assign result = (x & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.151493", "id": 36965}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.013713", "id": 11889}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.303987", "id": 64777}
{"buggy_code": "module example_944(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module example_944(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.233717", "id": 51952}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.280817", "id": 60539}
{"buggy_code": "module test_575(input d, x, output y); assign y = d & x | a; endmodule", "correct_code": "module test_575(input d, x, output y); assign y = (d & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.964355", "id": 2971}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.178903", "id": 41990}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.953636", "id": 1026}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.080401", "id": 23973}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.952780", "id": 874}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.111142", "id": 29579}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.322574", "id": 68159}
{"buggy_code": "module arith_652(input rst, c, output prod); assign prod = rst & c | in; endmodule", "correct_code": "module arith_652(input rst, c, output prod); assign prod = (rst & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.275133", "id": 59501}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.987816", "id": 7185}
{"buggy_code": "module simple_121(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module simple_121(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.998055", "id": 9055}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.036493", "id": 16002}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.051203", "id": 18635}
{"buggy_code": "module arith_435(input in, clk, output sum); assign sum = in & clk | x; endmodule", "correct_code": "module arith_435(input in, clk, output sum); assign sum = (in & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.109532", "id": 29285}
{"buggy_code": "module logic_416(input x, output y); assign y = x + 1; endmodule", "correct_code": "module logic_416(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.309239", "id": 65750}
{"buggy_code": "module basic_92(input data, output y); assign y = data + 1; endmodule", "correct_code": "module basic_92(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.322434", "id": 68133}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.024031", "id": 13749}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.229312", "id": 51138}
{"buggy_code": "module simple_293(input d, b, output q); assign q = d & b | rst; endmodule", "correct_code": "module simple_293(input d, b, output q); assign q = (d & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.195335", "id": 44953}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.256236", "id": 56063}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.264437", "id": 57565}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.960042", "id": 2185}
{"buggy_code": "module logic_784(input d, a, output valid); assign valid = d & a | data; endmodule", "correct_code": "module logic_784(input d, a, output valid); assign valid = (d & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.306134", "id": 65176}
{"buggy_code": "module test_121(input clk, rst, output prod); assign prod = clk & rst | en; endmodule", "correct_code": "module test_121(input clk, rst, output prod); assign prod = (clk & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.147720", "id": 36265}
{"buggy_code": "module logic_519(input c, data, output y); assign y = c & data | c; endmodule", "correct_code": "module logic_519(input c, data, output y); assign y = (c & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.322688", "id": 68179}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.147064", "id": 36144}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.100685", "id": 27665}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.155128", "id": 37635}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.977325", "id": 5329}
{"buggy_code": "module simple_38(input a, clk, output y); assign y = a & clk | a; endmodule", "correct_code": "module simple_38(input a, clk, output y); assign y = (a & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.020992", "id": 13195}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.076724", "id": 23316}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.153076", "id": 37259}
{"buggy_code": "module logic_424(input y, data, output q); assign q = y & data | b; endmodule", "correct_code": "module logic_424(input y, data, output q); assign q = (y & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.318222", "id": 67392}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.184586", "id": 43021}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.990897", "id": 7752}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.077240", "id": 23393}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.010891", "id": 11375}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.089138", "id": 25556}
{"buggy_code": "module test_534(input b, output q); assign q = b + 1; endmodule", "correct_code": "module test_534(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.233331", "id": 51878}
{"buggy_code": "module example_474(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module example_474(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.992053", "id": 7963}
{"buggy_code": "module simple_827(input d, c, output q); assign q = d & c | clk; endmodule", "correct_code": "module simple_827(input d, c, output q); assign q = (d & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.133719", "id": 33706}
{"buggy_code": "module test_458(input in, output y); assign y = in + 1; endmodule", "correct_code": "module test_458(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.339377", "id": 71217}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.110707", "id": 29500}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.122294", "id": 31614}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.079640", "id": 23833}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.330949", "id": 69695}
{"buggy_code": "module demo_723(input d, x, output sum); assign sum = d & x | c; endmodule", "correct_code": "module demo_723(input d, x, output sum); assign sum = (d & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.097900", "id": 27149}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.952371", "id": 799}
{"buggy_code": "module basic_345(input en, x, output valid); assign valid = en & x | in; endmodule", "correct_code": "module basic_345(input en, x, output valid); assign valid = (en & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.323785", "id": 68382}
{"buggy_code": "module demo_722(input a, output y); assign y = a + 1; endmodule", "correct_code": "module demo_722(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.249200", "id": 54788}
{"buggy_code": "module arith_540(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module arith_540(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.284661", "id": 61244}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.332395", "id": 69957}
{"buggy_code": "module logic_919(input a, output result); assign result = a + 1; endmodule", "correct_code": "module logic_919(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.979392", "id": 5656}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.229031", "id": 51086}
{"buggy_code": "module logic_501(input clk, b, output q); assign q = clk & b | c; endmodule", "correct_code": "module logic_501(input clk, b, output q); assign q = (clk & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.157145", "id": 38005}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.090462", "id": 25801}
{"buggy_code": "module demo_21(input d, data, output sum); assign sum = d & data | rst; endmodule", "correct_code": "module demo_21(input d, data, output sum); assign sum = (d & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.201907", "id": 46151}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043339", "id": 17237}
{"buggy_code": "module example_348(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module example_348(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.079784", "id": 23861}
{"buggy_code": "module example_469(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module example_469(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.264354", "id": 57550}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.980077", "id": 5782}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.027794", "id": 14429}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.988942", "id": 7388}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.193322", "id": 44583}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.959650", "id": 2117}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.358044", "id": 74609}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.310820", "id": 66042}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.293071", "id": 62779}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.300664", "id": 64168}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.083543", "id": 24541}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.149685", "id": 36633}
{"buggy_code": "module demo_506(input y, clk, output q); assign q = y & clk | y; endmodule", "correct_code": "module demo_506(input y, clk, output q); assign q = (y & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.996603", "id": 8792}
{"buggy_code": "module basic_569(input d, output q); assign q = d + 1; endmodule", "correct_code": "module basic_569(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.168680", "id": 40119}
{"buggy_code": "module demo_579(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module demo_579(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.015326", "id": 12180}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.231253", "id": 51498}
{"buggy_code": "module basic_47(input x, data, output result); assign result = x & data | data; endmodule", "correct_code": "module basic_47(input x, data, output result); assign result = (x & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.353629", "id": 73798}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.087015", "id": 25171}
{"buggy_code": "module arith_424(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module arith_424(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118339", "id": 30902}
{"buggy_code": "module test_431(input d, y, output valid); assign valid = d & y | in; endmodule", "correct_code": "module test_431(input d, y, output valid); assign valid = (d & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.114661", "id": 30231}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.956105", "id": 1472}
{"buggy_code": "module example_86(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module example_86(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.216496", "id": 48811}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.156733", "id": 37932}
{"buggy_code": "module logic_874(input x, d, output y); assign y = x & d | d; endmodule", "correct_code": "module logic_874(input x, d, output y); assign y = (x & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.353934", "id": 73851}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.198471", "id": 45525}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.153044", "id": 37252}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.017193", "id": 12519}
{"buggy_code": "module test_476(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module test_476(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.971786", "id": 4327}
{"buggy_code": "module basic_563(input en, output result); assign result = en + 1; endmodule", "correct_code": "module basic_563(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.130065", "id": 33034}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.012720", "id": 11707}
{"buggy_code": "module logic_241(input d, y, output q); assign q = d & y | c; endmodule", "correct_code": "module logic_241(input d, y, output q); assign q = (d & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.359690", "id": 74913}
{"buggy_code": "module basic_578(input y, d, output sum); assign sum = y & d | x; endmodule", "correct_code": "module basic_578(input y, d, output sum); assign sum = (y & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.995801", "id": 8646}
{"buggy_code": "module demo_444(input data, output result); assign result = data + 1; endmodule", "correct_code": "module demo_444(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.099881", "id": 27515}
{"buggy_code": "module example_709(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module example_709(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.032566", "id": 15289}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.281455", "id": 60657}
{"buggy_code": "module test_229(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module test_229(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.162213", "id": 38939}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.093641", "id": 26378}
{"buggy_code": "module logic_664(input x, rst, output out); assign out = x & rst | en; endmodule", "correct_code": "module logic_664(input x, rst, output out); assign out = (x & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.055370", "id": 19407}
{"buggy_code": "module arith_195(input data, data, output valid); assign valid = data & data | clk; endmodule", "correct_code": "module arith_195(input data, data, output valid); assign valid = (data & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.025112", "id": 13944}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.254159", "id": 55685}
{"buggy_code": "module simple_33(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module simple_33(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.247192", "id": 54422}
{"buggy_code": "module demo_783(input clk, in, output y); assign y = clk & in | x; endmodule", "correct_code": "module demo_783(input clk, in, output y); assign y = (clk & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.216490", "id": 48810}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.166122", "id": 39645}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.215912", "id": 48705}
{"buggy_code": "module simple_293(input data, d, output q); assign q = data & d | rst; endmodule", "correct_code": "module simple_293(input data, d, output q); assign q = (data & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.273405", "id": 59208}
{"buggy_code": "module example_620(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module example_620(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.020258", "id": 13064}
{"buggy_code": "module demo_9(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module demo_9(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.021082", "id": 13211}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.129163", "id": 32869}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.992659", "id": 8075}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.094118", "id": 26463}
{"buggy_code": "module logic_385(input data, data, output result); assign result = data & data | clk; endmodule", "correct_code": "module logic_385(input data, data, output result); assign result = (data & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.193084", "id": 44539}
{"buggy_code": "module basic_798(input x, rst, output y); assign y = x & rst | d; endmodule", "correct_code": "module basic_798(input x, rst, output y); assign y = (x & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.173732", "id": 41041}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.190850", "id": 44124}
{"buggy_code": "module basic_734(input c, a, output sum); assign sum = c & a | en; endmodule", "correct_code": "module basic_734(input c, a, output sum); assign sum = (c & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.967269", "id": 3506}
{"buggy_code": "module logic_928(input d, rst, output y); assign y = d & rst | y; endmodule", "correct_code": "module logic_928(input d, rst, output y); assign y = (d & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.177874", "id": 41801}
{"buggy_code": "module simple_717(input x, en, output out); assign out = x & en | b; endmodule", "correct_code": "module simple_717(input x, en, output out); assign out = (x & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.124319", "id": 31985}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182285", "id": 42602}
{"buggy_code": "module example_485(input en, output q); assign q = en + 1; endmodule", "correct_code": "module example_485(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.189538", "id": 43886}
{"buggy_code": "module test_139(input in, output q); assign q = in + 1; endmodule", "correct_code": "module test_139(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.061252", "id": 20489}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.979013", "id": 5587}
{"buggy_code": "module example_854(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module example_854(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.988772", "id": 7358}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.160820", "id": 38684}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.317526", "id": 67264}
{"buggy_code": "module demo_600(input a, output out); assign out = a + 1; endmodule", "correct_code": "module demo_600(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.995351", "id": 8562}
{"buggy_code": "module arith_906(input a, output q); assign q = a + 1; endmodule", "correct_code": "module arith_906(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.108592", "id": 29114}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.003524", "id": 10034}
{"buggy_code": "module basic_487(input a, data, output sum); assign sum = a & data | a; endmodule", "correct_code": "module basic_487(input a, data, output sum); assign sum = (a & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.108571", "id": 29110}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.295881", "id": 63292}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272600", "id": 59060}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.258231", "id": 56432}
{"buggy_code": "module simple_486(input clk, clk, output y); assign y = clk & clk | c; endmodule", "correct_code": "module simple_486(input clk, clk, output y); assign y = (clk & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.158204", "id": 38200}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.207773", "id": 47225}
{"buggy_code": "module simple_314(input y, b, output sum); assign sum = y & b | in; endmodule", "correct_code": "module simple_314(input y, b, output sum); assign sum = (y & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.034102", "id": 15564}
{"buggy_code": "module example_397(input in, output out); assign out = in + 1; endmodule", "correct_code": "module example_397(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.139036", "id": 34684}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.978645", "id": 5519}
{"buggy_code": "module simple_997(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module simple_997(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.343878", "id": 72030}
{"buggy_code": "module example_686(input clk, y, output q); assign q = clk & y | clk; endmodule", "correct_code": "module example_686(input clk, y, output q); assign q = (clk & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.245551", "id": 54125}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.050093", "id": 18436}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272643", "id": 59068}
{"buggy_code": "module logic_67(input rst, rst, output sum); assign sum = rst & rst | clk; endmodule", "correct_code": "module logic_67(input rst, rst, output sum); assign sum = (rst & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.300550", "id": 64147}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.124087", "id": 31943}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.316337", "id": 67046}
{"buggy_code": "module basic_469(input en, data, output sum); assign sum = en & data | y; endmodule", "correct_code": "module basic_469(input en, data, output sum); assign sum = (en & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.997439", "id": 8944}
{"buggy_code": "module test_892(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module test_892(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.351553", "id": 73422}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.123686", "id": 31871}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.204637", "id": 46652}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.141575", "id": 35134}
{"buggy_code": "module test_538(input in, output y); assign y = in + 1; endmodule", "correct_code": "module test_538(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.206498", "id": 46992}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.072772", "id": 22603}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.131211", "id": 33247}
{"buggy_code": "module arith_342(input in, output result); assign result = in + 1; endmodule", "correct_code": "module arith_342(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.072380", "id": 22531}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.156808", "id": 37946}
{"buggy_code": "module arith_240(input en, a, output out); assign out = en & a | b; endmodule", "correct_code": "module arith_240(input en, a, output out); assign out = (en & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.192079", "id": 44355}
{"buggy_code": "module simple_411(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module simple_411(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.254845", "id": 55808}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.324104", "id": 68439}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.337459", "id": 70885}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.176337", "id": 41515}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.125364", "id": 32177}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.304290", "id": 64836}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.072533", "id": 22559}
{"buggy_code": "module basic_315(input a, output out); assign out = a + 1; endmodule", "correct_code": "module basic_315(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.132448", "id": 33471}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.261362", "id": 57007}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.036590", "id": 16020}
{"buggy_code": "module arith_290(input y, output out); assign out = y + 1; endmodule", "correct_code": "module arith_290(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.994609", "id": 8428}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192321", "id": 44400}
{"buggy_code": "module example_208(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module example_208(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.310197", "id": 65925}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.353428", "id": 73760}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.241895", "id": 53453}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.099560", "id": 27458}
{"buggy_code": "module logic_969(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module logic_969(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.183768", "id": 42874}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.037643", "id": 16211}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.250272", "id": 54985}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.227260", "id": 50764}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.188898", "id": 43805}
{"buggy_code": "module logic_392(input b, rst, output prod); assign prod = b & rst | a; endmodule", "correct_code": "module logic_392(input b, rst, output prod); assign prod = (b & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.031327", "id": 15065}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.034284", "id": 15598}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.128493", "id": 32748}
{"buggy_code": "module logic_575(input d, output out); assign out = d + 1; endmodule", "correct_code": "module logic_575(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.283783", "id": 61082}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.023937", "id": 13732}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.965591", "id": 3201}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.199695", "id": 45747}
{"buggy_code": "module example_24(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module example_24(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.123089", "id": 31762}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.317155", "id": 67196}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.113551", "id": 30024}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.068054", "id": 21731}
{"buggy_code": "module demo_537(input rst, a, output sum); assign sum = rst & a | in; endmodule", "correct_code": "module demo_537(input rst, a, output sum); assign sum = (rst & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.314753", "id": 66757}
{"buggy_code": "module basic_941(input d, output y); assign y = d + 1; endmodule", "correct_code": "module basic_941(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.019507", "id": 12929}
{"buggy_code": "module simple_568(input c, output y); assign y = c + 1; endmodule", "correct_code": "module simple_568(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.180065", "id": 42204}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.163512", "id": 39173}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.264242", "id": 57528}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.150168", "id": 36718}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.965262", "id": 3139}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.031368", "id": 15073}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.096257", "id": 26856}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.197092", "id": 45273}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.028396", "id": 14536}
{"buggy_code": "module test_768(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module test_768(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.101443", "id": 27803}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.084278", "id": 24671}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.101809", "id": 27872}
{"buggy_code": "module simple_237(input data, x, output y); assign y = data & x | d; endmodule", "correct_code": "module simple_237(input data, x, output y); assign y = (data & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.234421", "id": 52080}
{"buggy_code": "module logic_238(input b, x, output y); assign y = b & x | clk; endmodule", "correct_code": "module logic_238(input b, x, output y); assign y = (b & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.154027", "id": 37434}
{"buggy_code": "module basic_87(input y, x, output prod); assign prod = y & x | data; endmodule", "correct_code": "module basic_87(input y, x, output prod); assign prod = (y & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.230556", "id": 51370}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.044540", "id": 17456}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.244235", "id": 53879}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.074109", "id": 22851}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.346832", "id": 72563}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008181", "id": 10884}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.156729", "id": 37931}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.311041", "id": 66082}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.345474", "id": 72315}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.182280", "id": 42601}
{"buggy_code": "module example_684(input x, in, output sum); assign sum = x & in | y; endmodule", "correct_code": "module example_684(input x, in, output sum); assign sum = (x & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.144038", "id": 35590}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.169154", "id": 40203}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.129944", "id": 33011}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.074914", "id": 23001}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.179833", "id": 42160}
{"buggy_code": "module test_789(input data, b, output y); assign y = data & b | b; endmodule", "correct_code": "module test_789(input data, b, output y); assign y = (data & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.288295", "id": 61903}
{"buggy_code": "module demo_444(input c, en, output out); assign out = c & en | en; endmodule", "correct_code": "module demo_444(input c, en, output out); assign out = (c & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.134069", "id": 33771}
{"buggy_code": "module logic_59(input b, data, output valid); assign valid = b & data | data; endmodule", "correct_code": "module logic_59(input b, data, output valid); assign valid = (b & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.345366", "id": 72295}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.351802", "id": 73467}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.159557", "id": 38451}
{"buggy_code": "module example_740(input a, c, output q); assign q = a & c | c; endmodule", "correct_code": "module example_740(input a, c, output q); assign q = (a & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.258135", "id": 56414}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.987630", "id": 7150}
{"buggy_code": "module demo_831(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module demo_831(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.252057", "id": 55307}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.015190", "id": 12154}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.330753", "id": 69660}
{"buggy_code": "module basic_781(input rst, in, output y); assign y = rst & in | y; endmodule", "correct_code": "module basic_781(input rst, in, output y); assign y = (rst & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.952508", "id": 824}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.345838", "id": 72378}
{"buggy_code": "module simple_273(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module simple_273(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.336734", "id": 70753}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.139416", "id": 34754}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238011", "id": 52739}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.275138", "id": 59502}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.360120", "id": 74992}
{"buggy_code": "module arith_175(input x, output result); assign result = x + 1; endmodule", "correct_code": "module arith_175(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.082853", "id": 24414}
{"buggy_code": "module basic_976(input x, clk, output q); assign q = x & clk | in; endmodule", "correct_code": "module basic_976(input x, clk, output q); assign q = (x & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.355798", "id": 74197}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.230362", "id": 51333}
{"buggy_code": "module basic_500(input clk, en, output q); assign q = clk & en | data; endmodule", "correct_code": "module basic_500(input clk, en, output q); assign q = (clk & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.061056", "id": 20451}
{"buggy_code": "module test_843(input b, output y); assign y = b + 1; endmodule", "correct_code": "module test_843(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.984733", "id": 6620}
{"buggy_code": "module example_352(input b, output out); assign out = b + 1; endmodule", "correct_code": "module example_352(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.274944", "id": 59467}
{"buggy_code": "module basic_331(input a, y, output valid); assign valid = a & y | d; endmodule", "correct_code": "module basic_331(input a, y, output valid); assign valid = (a & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.302675", "id": 64536}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.949105", "id": 207}
{"buggy_code": "module logic_933(input in, b, output out); assign out = in & b | c; endmodule", "correct_code": "module logic_933(input in, b, output out); assign out = (in & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.286317", "id": 61545}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.084196", "id": 24656}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.312081", "id": 66271}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.347055", "id": 72604}
{"buggy_code": "module simple_231(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module simple_231(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.952315", "id": 788}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.176735", "id": 41588}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.208723", "id": 47397}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.239918", "id": 53090}
{"buggy_code": "module test_871(input x, in, output sum); assign sum = x & in | in; endmodule", "correct_code": "module test_871(input x, in, output sum); assign sum = (x & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.266895", "id": 58011}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.324219", "id": 68461}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.068208", "id": 21759}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.169741", "id": 40311}
{"buggy_code": "module simple_752(input y, x, output result); assign result = y & x | en; endmodule", "correct_code": "module simple_752(input y, x, output result); assign result = (y & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.286391", "id": 61558}
{"buggy_code": "module arith_774(input in, x, output prod); assign prod = in & x | rst; endmodule", "correct_code": "module arith_774(input in, x, output prod); assign prod = (in & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.172406", "id": 40799}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.196932", "id": 45244}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.079506", "id": 23809}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.326202", "id": 68821}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.124707", "id": 32056}
{"buggy_code": "module arith_375(input a, a, output prod); assign prod = a & a | d; endmodule", "correct_code": "module arith_375(input a, a, output prod); assign prod = (a & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.261249", "id": 56985}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.086852", "id": 25140}
{"buggy_code": "module example_408(input b, output out); assign out = b + 1; endmodule", "correct_code": "module example_408(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.286229", "id": 61529}
{"buggy_code": "module arith_229(input en, x, output prod); assign prod = en & x | rst; endmodule", "correct_code": "module arith_229(input en, x, output prod); assign prod = (en & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.347438", "id": 72673}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.057143", "id": 19734}
{"buggy_code": "module logic_751(input rst, y, output result); assign result = rst & y | y; endmodule", "correct_code": "module logic_751(input rst, y, output result); assign result = (rst & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.100472", "id": 27626}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.039116", "id": 16480}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.167864", "id": 39969}
{"buggy_code": "module demo_288(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module demo_288(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.288749", "id": 61988}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.095250", "id": 26672}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.141218", "id": 35086}
{"buggy_code": "module arith_259(input en, y, output result); assign result = en & y | y; endmodule", "correct_code": "module arith_259(input en, y, output result); assign result = (en & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.102806", "id": 28052}
{"buggy_code": "module arith_864(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module arith_864(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.024744", "id": 13878}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.054622", "id": 19266}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.094725", "id": 26575}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.283260", "id": 60985}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.335546", "id": 70533}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.168292", "id": 40048}
{"buggy_code": "module logic_405(input c, output y); assign y = c + 1; endmodule", "correct_code": "module logic_405(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.259419", "id": 56649}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.961432", "id": 2442}
{"buggy_code": "module demo_546(input a, y, output q); assign q = a & y | a; endmodule", "correct_code": "module demo_546(input a, y, output q); assign q = (a & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.159303", "id": 38403}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.080290", "id": 23953}
{"buggy_code": "module test_844(input d, data, output y); assign y = d & data | clk; endmodule", "correct_code": "module test_844(input d, data, output y); assign y = (d & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.121130", "id": 31402}
{"buggy_code": "module arith_53(input y, x, output result); assign result = y & x | y; endmodule", "correct_code": "module arith_53(input y, x, output result); assign result = (y & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.079174", "id": 23747}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.105133", "id": 28472}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.062730", "id": 20760}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.030300", "id": 14881}
{"buggy_code": "module basic_416(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module basic_416(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308031", "id": 65531}
{"buggy_code": "module example_168(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module example_168(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.972637", "id": 4479}
{"buggy_code": "module test_394(input c, output out); assign out = c + 1; endmodule", "correct_code": "module test_394(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.043055", "id": 17186}
{"buggy_code": "module test_818(input c, output out); assign out = c + 1; endmodule", "correct_code": "module test_818(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.201466", "id": 46073}
{"buggy_code": "module logic_551(input clk, x, output prod); assign prod = clk & x | b; endmodule", "correct_code": "module logic_551(input clk, x, output prod); assign prod = (clk & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.349301", "id": 73013}
{"buggy_code": "module example_651(input en, output result); assign result = en + 1; endmodule", "correct_code": "module example_651(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.953044", "id": 919}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.145085", "id": 35787}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.321587", "id": 67978}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.953111", "id": 931}
{"buggy_code": "module arith_69(input in, data, output out); assign out = in & data | b; endmodule", "correct_code": "module arith_69(input in, data, output out); assign out = (in & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.324636", "id": 68537}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.032532", "id": 15283}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.335882", "id": 70594}
{"buggy_code": "module basic_15(input b, a, output prod); assign prod = b & a | d; endmodule", "correct_code": "module basic_15(input b, a, output prod); assign prod = (b & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.003751", "id": 10075}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.115573", "id": 30396}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.193695", "id": 44653}
{"buggy_code": "module example_173(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module example_173(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.190392", "id": 44043}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.311286", "id": 66127}
{"buggy_code": "module basic_666(input y, output result); assign result = y + 1; endmodule", "correct_code": "module basic_666(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.954902", "id": 1253}
{"buggy_code": "module simple_705(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module simple_705(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.165718", "id": 39573}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.978960", "id": 5576}
{"buggy_code": "module demo_581(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module demo_581(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.113546", "id": 30023}
{"buggy_code": "module basic_59(input d, data, output out); assign out = d & data | rst; endmodule", "correct_code": "module basic_59(input d, data, output out); assign out = (d & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.136758", "id": 34262}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.078296", "id": 23587}
{"buggy_code": "module logic_416(input b, c, output q); assign q = b & c | y; endmodule", "correct_code": "module logic_416(input b, c, output q); assign q = (b & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.137584", "id": 34417}
{"buggy_code": "module test_326(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module test_326(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.319522", "id": 67632}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.975337", "id": 4966}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.241269", "id": 53338}
{"buggy_code": "module arith_147(input a, output y); assign y = a + 1; endmodule", "correct_code": "module arith_147(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.150747", "id": 36829}
{"buggy_code": "module simple_338(input en, x, output valid); assign valid = en & x | d; endmodule", "correct_code": "module simple_338(input en, x, output valid); assign valid = (en & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.175147", "id": 41297}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.314070", "id": 66630}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.326800", "id": 68933}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.343311", "id": 71926}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.301270", "id": 64277}
{"buggy_code": "module test_720(input a, b, output sum); assign sum = a & b | rst; endmodule", "correct_code": "module test_720(input a, b, output sum); assign sum = (a & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.324078", "id": 68434}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.344411", "id": 72128}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.281667", "id": 60695}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.971944", "id": 4354}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.127579", "id": 32582}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.062668", "id": 20749}
{"buggy_code": "module example_668(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module example_668(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.006217", "id": 10528}
{"buggy_code": "module demo_189(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module demo_189(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.985774", "id": 6810}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.967054", "id": 3466}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.055036", "id": 19345}
{"buggy_code": "module test_162(input x, a, output y); assign y = x & a | data; endmodule", "correct_code": "module test_162(input x, a, output y); assign y = (x & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.139298", "id": 34734}
{"buggy_code": "module demo_563(input a, output y); assign y = a + 1; endmodule", "correct_code": "module demo_563(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.995109", "id": 8519}
{"buggy_code": "module arith_712(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module arith_712(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.160471", "id": 38620}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.970126", "id": 4020}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.019371", "id": 12905}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.309648", "id": 65827}
{"buggy_code": "module demo_311(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module demo_311(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.292913", "id": 62750}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.223374", "id": 50057}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.296490", "id": 63405}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.291709", "id": 62531}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.186035", "id": 43284}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.241521", "id": 53386}
{"buggy_code": "module test_493(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module test_493(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.282743", "id": 60894}
{"buggy_code": "module simple_584(input x, y, output q); assign q = x & y | data; endmodule", "correct_code": "module simple_584(input x, y, output q); assign q = (x & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.258219", "id": 56430}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.213649", "id": 48294}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.152657", "id": 37181}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.983439", "id": 6383}
{"buggy_code": "module arith_580(input y, output out); assign out = y + 1; endmodule", "correct_code": "module arith_580(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.286171", "id": 61519}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.216721", "id": 48853}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.344733", "id": 72184}
{"buggy_code": "module test_661(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module test_661(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.067461", "id": 21625}
{"buggy_code": "module simple_50(input in, output out); assign out = in + 1; endmodule", "correct_code": "module simple_50(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.974962", "id": 4899}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.242389", "id": 53542}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.327186", "id": 69002}
{"buggy_code": "module logic_309(input x, data, output valid); assign valid = x & data | clk; endmodule", "correct_code": "module logic_309(input x, data, output valid); assign valid = (x & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.076579", "id": 23295}
{"buggy_code": "module simple_882(input clk, en, output y); assign y = clk & en | en; endmodule", "correct_code": "module simple_882(input clk, en, output y); assign y = (clk & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.179809", "id": 42157}
{"buggy_code": "module test_140(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module test_140(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.040298", "id": 16697}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.237203", "id": 52589}
{"buggy_code": "module basic_349(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module basic_349(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.272356", "id": 59015}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.221196", "id": 49655}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.256476", "id": 56109}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.352367", "id": 73572}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.028452", "id": 14547}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.359851", "id": 74943}
{"buggy_code": "module simple_405(input en, in, output out); assign out = en & in | x; endmodule", "correct_code": "module simple_405(input en, in, output out); assign out = (en & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.212400", "id": 48066}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.304865", "id": 64942}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.124962", "id": 32102}
{"buggy_code": "module test_376(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module test_376(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.257507", "id": 56300}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.264669", "id": 57609}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.017107", "id": 12503}
{"buggy_code": "module logic_487(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module logic_487(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.147777", "id": 36276}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.305558", "id": 65070}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.165693", "id": 39569}
{"buggy_code": "module simple_318(input a, output q); assign q = a + 1; endmodule", "correct_code": "module simple_318(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.199512", "id": 45712}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.212380", "id": 48063}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.951844", "id": 701}
{"buggy_code": "module demo_858(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module demo_858(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.199042", "id": 45628}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.329056", "id": 69346}
{"buggy_code": "module test_473(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module test_473(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.189762", "id": 43928}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.288739", "id": 61986}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.047006", "id": 17899}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.345538", "id": 72326}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.199886", "id": 45782}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.341962", "id": 71682}
{"buggy_code": "module simple_851(input x, output q); assign q = x + 1; endmodule", "correct_code": "module simple_851(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.143762", "id": 35542}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.210120", "id": 47652}
{"buggy_code": "module logic_765(input en, b, output y); assign y = en & b | c; endmodule", "correct_code": "module logic_765(input en, b, output y); assign y = (en & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.237392", "id": 52625}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.955692", "id": 1397}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.975154", "id": 4935}
{"buggy_code": "module logic_193(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module logic_193(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.346565", "id": 72515}
{"buggy_code": "module basic_561(input in, data, output valid); assign valid = in & data | y; endmodule", "correct_code": "module basic_561(input in, data, output valid); assign valid = (in & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.203623", "id": 46466}
{"buggy_code": "module basic_803(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module basic_803(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.168792", "id": 40138}
{"buggy_code": "module logic_963(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module logic_963(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.176205", "id": 41492}
{"buggy_code": "module arith_582(input d, output q); assign q = d + 1; endmodule", "correct_code": "module arith_582(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.224000", "id": 50171}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.033935", "id": 15535}
{"buggy_code": "module arith_989(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module arith_989(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.066471", "id": 21445}
{"buggy_code": "module basic_577(input d, output result); assign result = d + 1; endmodule", "correct_code": "module basic_577(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.959270", "id": 2046}
{"buggy_code": "module simple_238(input data, en, output y); assign y = data & en | b; endmodule", "correct_code": "module simple_238(input data, en, output y); assign y = (data & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.249902", "id": 54918}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.959081", "id": 2012}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.246007", "id": 54208}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.973339", "id": 4605}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.955000", "id": 1270}
{"buggy_code": "module example_226(input x, output result); assign result = x + 1; endmodule", "correct_code": "module example_226(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.027465", "id": 14368}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.171762", "id": 40681}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043246", "id": 17220}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.352011", "id": 73505}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.346191", "id": 72444}
{"buggy_code": "module test_1(input d, a, output y); assign y = d & a | c; endmodule", "correct_code": "module test_1(input d, a, output y); assign y = (d & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.245784", "id": 54170}
{"buggy_code": "module test_641(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module test_641(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.007528", "id": 10765}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.047242", "id": 17942}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.252247", "id": 55343}
{"buggy_code": "module basic_125(input rst, en, output valid); assign valid = rst & en | b; endmodule", "correct_code": "module basic_125(input rst, en, output valid); assign valid = (rst & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.211848", "id": 47967}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.312523", "id": 66351}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.129167", "id": 32870}
{"buggy_code": "module logic_325(input rst, rst, output q); assign q = rst & rst | clk; endmodule", "correct_code": "module logic_325(input rst, rst, output q); assign q = (rst & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.259356", "id": 56637}
{"buggy_code": "module simple_781(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module simple_781(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.007073", "id": 10685}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.317567", "id": 67272}
{"buggy_code": "module example_107(input in, in, output valid); assign valid = in & in | c; endmodule", "correct_code": "module example_107(input in, in, output valid); assign valid = (in & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.968100", "id": 3660}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.970470", "id": 4081}
{"buggy_code": "module basic_797(input data, output result); assign result = data + 1; endmodule", "correct_code": "module basic_797(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.182218", "id": 42589}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.211293", "id": 47867}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.341486", "id": 71597}
{"buggy_code": "module logic_883(input x, rst, output q); assign q = x & rst | en; endmodule", "correct_code": "module logic_883(input x, rst, output q); assign q = (x & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116944", "id": 30644}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.103992", "id": 28266}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.165506", "id": 39533}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.217928", "id": 49076}
{"buggy_code": "module basic_130(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module basic_130(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.239306", "id": 52980}
{"buggy_code": "module basic_900(input clk, c, output out); assign out = clk & c | in; endmodule", "correct_code": "module basic_900(input clk, c, output out); assign out = (clk & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.287833", "id": 61817}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.238950", "id": 52912}
{"buggy_code": "module test_143(input x, output out); assign out = x + 1; endmodule", "correct_code": "module test_143(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.273323", "id": 59193}
{"buggy_code": "module test_952(input y, clk, output prod); assign prod = y & clk | en; endmodule", "correct_code": "module test_952(input y, clk, output prod); assign prod = (y & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.326642", "id": 68903}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.023011", "id": 13564}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.107505", "id": 28911}
{"buggy_code": "module example_490(input a, y, output prod); assign prod = a & y | in; endmodule", "correct_code": "module example_490(input a, y, output prod); assign prod = (a & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.210312", "id": 47688}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.262283", "id": 57172}
{"buggy_code": "module simple_284(input rst, d, output q); assign q = rst & d | a; endmodule", "correct_code": "module simple_284(input rst, d, output q); assign q = (rst & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.040576", "id": 16739}
{"buggy_code": "module test_599(input en, a, output prod); assign prod = en & a | data; endmodule", "correct_code": "module test_599(input en, a, output prod); assign prod = (en & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.339453", "id": 71232}
{"buggy_code": "module example_317(input clk, rst, output y); assign y = clk & rst | rst; endmodule", "correct_code": "module example_317(input clk, rst, output y); assign y = (clk & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.343790", "id": 72015}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.214441", "id": 48439}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.288481", "id": 61938}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.130200", "id": 33059}
{"buggy_code": "module logic_213(input clk, d, output sum); assign sum = clk & d | en; endmodule", "correct_code": "module logic_213(input clk, d, output sum); assign sum = (clk & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.285716", "id": 61435}
{"buggy_code": "module demo_116(input a, rst, output sum); assign sum = a & rst | y; endmodule", "correct_code": "module demo_116(input a, rst, output sum); assign sum = (a & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.087968", "id": 25342}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.999628", "id": 9342}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.183010", "id": 42732}
{"buggy_code": "module test_745(input en, rst, output result); assign result = en & rst | c; endmodule", "correct_code": "module test_745(input en, rst, output result); assign result = (en & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.028057", "id": 14476}
{"buggy_code": "module arith_418(input clk, clk, output result); assign result = clk & clk | b; endmodule", "correct_code": "module arith_418(input clk, clk, output result); assign result = (clk & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.280553", "id": 60488}
{"buggy_code": "module basic_897(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module basic_897(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.993794", "id": 8280}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.206020", "id": 46905}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.219071", "id": 49285}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.998563", "id": 9148}
{"buggy_code": "module arith_413(input a, y, output valid); assign valid = a & y | in; endmodule", "correct_code": "module arith_413(input a, y, output valid); assign valid = (a & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.029424", "id": 14721}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.340273", "id": 71381}
{"buggy_code": "module arith_127(input c, output y); assign y = c + 1; endmodule", "correct_code": "module arith_127(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.950439", "id": 450}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.271041", "id": 58771}
{"buggy_code": "module logic_184(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module logic_184(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.126235", "id": 32336}
{"buggy_code": "module example_884(input y, output out); assign out = y + 1; endmodule", "correct_code": "module example_884(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.339123", "id": 71170}
{"buggy_code": "module arith_751(input in, a, output valid); assign valid = in & a | d; endmodule", "correct_code": "module arith_751(input in, a, output valid); assign valid = (in & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.155526", "id": 37708}
{"buggy_code": "module basic_87(input data, clk, output prod); assign prod = data & clk | b; endmodule", "correct_code": "module basic_87(input data, clk, output prod); assign prod = (data & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.296639", "id": 63432}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.014500", "id": 12032}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.042338", "id": 17055}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.340877", "id": 71487}
{"buggy_code": "module basic_293(input rst, clk, output y); assign y = rst & clk | d; endmodule", "correct_code": "module basic_293(input rst, clk, output y); assign y = (rst & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.951539", "id": 645}
{"buggy_code": "module arith_432(input en, x, output result); assign result = en & x | x; endmodule", "correct_code": "module arith_432(input en, x, output result); assign result = (en & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.225676", "id": 50477}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.014194", "id": 11976}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.969988", "id": 3995}
{"buggy_code": "module logic_644(input en, x, output valid); assign valid = en & x | c; endmodule", "correct_code": "module logic_644(input en, x, output valid); assign valid = (en & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.033496", "id": 15454}
{"buggy_code": "module basic_679(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module basic_679(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.327855", "id": 69124}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.036347", "id": 15974}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.185436", "id": 43175}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.151087", "id": 36890}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.012514", "id": 11670}
{"buggy_code": "module demo_628(input en, rst, output out); assign out = en & rst | x; endmodule", "correct_code": "module demo_628(input en, rst, output out); assign out = (en & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.977992", "id": 5400}
{"buggy_code": "module simple_74(input en, rst, output prod); assign prod = en & rst | in; endmodule", "correct_code": "module simple_74(input en, rst, output prod); assign prod = (en & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.267481", "id": 58120}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.093455", "id": 26343}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.219994", "id": 49438}
{"buggy_code": "module example_157(input c, output out); assign out = c + 1; endmodule", "correct_code": "module example_157(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.284893", "id": 61284}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.004305", "id": 10178}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.241850", "id": 53445}
{"buggy_code": "module logic_263(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module logic_263(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.289010", "id": 62036}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.015897", "id": 12283}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.173334", "id": 40967}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.326902", "id": 68950}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.024854", "id": 13897}
{"buggy_code": "module arith_370(input rst, d, output valid); assign valid = rst & d | c; endmodule", "correct_code": "module arith_370(input rst, d, output valid); assign valid = (rst & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.966736", "id": 3409}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.221889", "id": 49784}
{"buggy_code": "module arith_839(input b, a, output sum); assign sum = b & a | in; endmodule", "correct_code": "module arith_839(input b, a, output sum); assign sum = (b & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.244844", "id": 53992}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.974151", "id": 4750}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.169994", "id": 40355}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.180294", "id": 42247}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.998075", "id": 9059}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.027610", "id": 14395}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.951991", "id": 728}
{"buggy_code": "module logic_433(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module logic_433(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.983921", "id": 6470}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.351230", "id": 73362}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.284391", "id": 61193}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.276270", "id": 59709}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.255686", "id": 55964}
{"buggy_code": "module simple_905(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module simple_905(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.090172", "id": 25747}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.963778", "id": 2866}
{"buggy_code": "module basic_73(input x, data, output sum); assign sum = x & data | in; endmodule", "correct_code": "module basic_73(input x, data, output sum); assign sum = (x & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.222223", "id": 49845}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.030242", "id": 14870}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.213889", "id": 48335}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.138214", "id": 34533}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.324992", "id": 68600}
{"buggy_code": "module arith_495(input rst, en, output prod); assign prod = rst & en | en; endmodule", "correct_code": "module arith_495(input rst, en, output prod); assign prod = (rst & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.156074", "id": 37808}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.954235", "id": 1134}
{"buggy_code": "module simple_449(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module simple_449(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.035045", "id": 15737}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.359520", "id": 74881}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.963500", "id": 2814}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.051237", "id": 18642}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.194043", "id": 44716}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.984749", "id": 6623}
{"buggy_code": "module simple_167(input c, a, output result); assign result = c & a | rst; endmodule", "correct_code": "module simple_167(input c, a, output result); assign result = (c & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.009019", "id": 11036}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.976271", "id": 5136}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.078683", "id": 23658}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.975637", "id": 5021}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.294471", "id": 63034}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.950739", "id": 500}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.350567", "id": 73242}
{"buggy_code": "module arith_328(input data, output result); assign result = data + 1; endmodule", "correct_code": "module arith_328(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.264815", "id": 57635}
{"buggy_code": "module simple_879(input d, in, output sum); assign sum = d & in | d; endmodule", "correct_code": "module simple_879(input d, in, output sum); assign sum = (d & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.063692", "id": 20937}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.151269", "id": 36923}
{"buggy_code": "module test_496(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module test_496(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.048091", "id": 18096}
{"buggy_code": "module simple_387(input a, output result); assign result = a + 1; endmodule", "correct_code": "module simple_387(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.183613", "id": 42844}
{"buggy_code": "module basic_827(input y, data, output out); assign out = y & data | c; endmodule", "correct_code": "module basic_827(input y, data, output out); assign out = (y & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.087308", "id": 25224}
{"buggy_code": "module simple_491(input y, x, output out); assign out = y & x | en; endmodule", "correct_code": "module simple_491(input y, x, output out); assign out = (y & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.204609", "id": 46647}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.273646", "id": 59252}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.051547", "id": 18701}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.167169", "id": 39840}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.230515", "id": 51362}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.019990", "id": 13014}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.994951", "id": 8490}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.969636", "id": 3934}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.303453", "id": 64678}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.104973", "id": 28442}
{"buggy_code": "module simple_345(input in, en, output sum); assign sum = in & en | b; endmodule", "correct_code": "module simple_345(input in, en, output sum); assign sum = (in & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.315957", "id": 66975}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.279770", "id": 60344}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.109863", "id": 29344}
{"buggy_code": "module example_16(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module example_16(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.186781", "id": 43422}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.203894", "id": 46515}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.059711", "id": 20205}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.070543", "id": 22192}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.206637", "id": 47018}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.340699", "id": 71456}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.353725", "id": 73816}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.355272", "id": 74099}
{"buggy_code": "module example_716(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module example_716(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.184318", "id": 42970}
{"buggy_code": "module simple_930(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module simple_930(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.276422", "id": 59732}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.290695", "id": 62344}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.181140", "id": 42399}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.992391", "id": 8025}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.066748", "id": 21496}
{"buggy_code": "module simple_82(input d, c, output sum); assign sum = d & c | b; endmodule", "correct_code": "module simple_82(input d, c, output sum); assign sum = (d & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.280574", "id": 60492}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.074490", "id": 22923}
{"buggy_code": "module arith_677(input x, output result); assign result = x + 1; endmodule", "correct_code": "module arith_677(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.080713", "id": 24030}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.101690", "id": 27849}
{"buggy_code": "module example_947(input b, output out); assign out = b + 1; endmodule", "correct_code": "module example_947(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.096268", "id": 26858}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.018178", "id": 12699}
{"buggy_code": "module simple_824(input data, data, output result); assign result = data & data | clk; endmodule", "correct_code": "module simple_824(input data, data, output result); assign result = (data & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.181414", "id": 42449}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.163364", "id": 39145}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.004714", "id": 10253}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210749", "id": 47770}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.052994", "id": 18962}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.238693", "id": 52867}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.216780", "id": 48864}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.328943", "id": 69324}
{"buggy_code": "module logic_653(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module logic_653(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.053474", "id": 19052}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.142613", "id": 35326}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.975532", "id": 5002}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.259732", "id": 56707}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.257462", "id": 56293}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.089445", "id": 25613}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.000219", "id": 9448}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.270703", "id": 58711}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.008911", "id": 11016}
{"buggy_code": "module arith_776(input c, c, output sum); assign sum = c & c | rst; endmodule", "correct_code": "module arith_776(input c, c, output sum); assign sum = (c & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.255908", "id": 56003}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.036585", "id": 16019}
{"buggy_code": "module simple_764(input in, clk, output q); assign q = in & clk | in; endmodule", "correct_code": "module simple_764(input in, clk, output q); assign q = (in & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.274494", "id": 59406}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.036219", "id": 15951}
{"buggy_code": "module demo_731(input x, b, output sum); assign sum = x & b | y; endmodule", "correct_code": "module demo_731(input x, b, output sum); assign sum = (x & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.064993", "id": 21177}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.108091", "id": 29019}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.051465", "id": 18685}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.259780", "id": 56716}
{"buggy_code": "module test_672(input data, output y); assign y = data + 1; endmodule", "correct_code": "module test_672(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.041682", "id": 16935}
{"buggy_code": "module demo_757(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module demo_757(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.357498", "id": 74509}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.330758", "id": 69661}
{"buggy_code": "module logic_464(input a, output out); assign out = a + 1; endmodule", "correct_code": "module logic_464(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.073980", "id": 22827}
{"buggy_code": "module simple_118(input a, output q); assign q = a + 1; endmodule", "correct_code": "module simple_118(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.226915", "id": 50701}
{"buggy_code": "module simple_204(input en, y, output result); assign result = en & y | y; endmodule", "correct_code": "module simple_204(input en, y, output result); assign result = (en & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.122627", "id": 31676}
{"buggy_code": "module logic_735(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module logic_735(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.322119", "id": 68075}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.949204", "id": 226}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.990636", "id": 7703}
{"buggy_code": "module logic_30(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module logic_30(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.958361", "id": 1881}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.201158", "id": 46016}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.135953", "id": 34115}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.324401", "id": 68494}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.238649", "id": 52859}
{"buggy_code": "module arith_132(input data, output y); assign y = data + 1; endmodule", "correct_code": "module arith_132(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.135140", "id": 33966}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.171775", "id": 40684}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.300840", "id": 64199}
{"buggy_code": "module logic_699(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module logic_699(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.132150", "id": 33418}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.119660", "id": 31136}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.163386", "id": 39149}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.244204", "id": 53873}
{"buggy_code": "module basic_499(input y, rst, output out); assign out = y & rst | in; endmodule", "correct_code": "module basic_499(input y, rst, output out); assign out = (y & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.344859", "id": 72201}
{"buggy_code": "module demo_150(input clk, rst, output valid); assign valid = clk & rst | data; endmodule", "correct_code": "module demo_150(input clk, rst, output valid); assign valid = (clk & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.063547", "id": 20909}
{"buggy_code": "module logic_626(input a, rst, output out); assign out = a & rst | y; endmodule", "correct_code": "module logic_626(input a, rst, output out); assign out = (a & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.957670", "id": 1755}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.181079", "id": 42389}
{"buggy_code": "module basic_497(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module basic_497(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.222159", "id": 49834}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.996620", "id": 8795}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.134042", "id": 33766}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.230087", "id": 51281}
{"buggy_code": "module example_643(input d, c, output sum); assign sum = d & c | b; endmodule", "correct_code": "module example_643(input d, c, output sum); assign sum = (d & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.170557", "id": 40460}
{"buggy_code": "module demo_647(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module demo_647(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.155573", "id": 37717}
{"buggy_code": "module demo_327(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module demo_327(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000871", "id": 9565}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.281184", "id": 60605}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.044123", "id": 17378}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.152366", "id": 37127}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.133364", "id": 33639}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.129928", "id": 33008}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210187", "id": 47665}
{"buggy_code": "module logic_630(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module logic_630(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.288251", "id": 61894}
{"buggy_code": "module simple_998(input data, x, output valid); assign valid = data & x | c; endmodule", "correct_code": "module simple_998(input data, x, output valid); assign valid = (data & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.316776", "id": 67126}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.288514", "id": 61945}
{"buggy_code": "module demo_362(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module demo_362(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.260267", "id": 56803}
{"buggy_code": "module arith_767(input c, in, output prod); assign prod = c & in | en; endmodule", "correct_code": "module arith_767(input c, in, output prod); assign prod = (c & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.149276", "id": 36555}
{"buggy_code": "module example_663(input x, d, output prod); assign prod = x & d | y; endmodule", "correct_code": "module example_663(input x, d, output prod); assign prod = (x & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.169143", "id": 40201}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.042201", "id": 17029}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.336114", "id": 70637}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.321536", "id": 67968}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.352655", "id": 73624}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.077713", "id": 23480}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.032811", "id": 15331}
{"buggy_code": "module logic_158(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module logic_158(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.354480", "id": 73951}
{"buggy_code": "module test_517(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module test_517(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.219249", "id": 49318}
{"buggy_code": "module simple_9(input rst, d, output result); assign result = rst & d | data; endmodule", "correct_code": "module simple_9(input rst, d, output result); assign result = (rst & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.313687", "id": 66561}
{"buggy_code": "module arith_428(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module arith_428(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.075560", "id": 23121}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.035387", "id": 15801}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.246343", "id": 54268}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.072132", "id": 22484}
{"buggy_code": "module basic_430(input y, output result); assign result = y + 1; endmodule", "correct_code": "module basic_430(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.232773", "id": 51776}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.973542", "id": 4641}
{"buggy_code": "module basic_272(input b, output out); assign out = b + 1; endmodule", "correct_code": "module basic_272(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.266835", "id": 58001}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.993627", "id": 8249}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.978999", "id": 5584}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.065401", "id": 21252}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.001631", "id": 9706}
{"buggy_code": "module arith_572(input d, y, output result); assign result = d & y | b; endmodule", "correct_code": "module arith_572(input d, y, output result); assign result = (d & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.979894", "id": 5749}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.187437", "id": 43539}
{"buggy_code": "module logic_618(input d, output result); assign result = d + 1; endmodule", "correct_code": "module logic_618(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.349713", "id": 73088}
{"buggy_code": "module demo_178(input clk, clk, output valid); assign valid = clk & clk | in; endmodule", "correct_code": "module demo_178(input clk, clk, output valid); assign valid = (clk & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.182296", "id": 42604}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.147068", "id": 36145}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.005864", "id": 10464}
{"buggy_code": "module arith_241(input x, data, output result); assign result = x & data | c; endmodule", "correct_code": "module arith_241(input x, data, output result); assign result = (x & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.094332", "id": 26503}
{"buggy_code": "module example_417(input x, b, output y); assign y = x & b | rst; endmodule", "correct_code": "module example_417(input x, b, output y); assign y = (x & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.002500", "id": 9866}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.322565", "id": 68157}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.981866", "id": 6095}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.241106", "id": 53307}
{"buggy_code": "module basic_702(input en, en, output q); assign q = en & en | clk; endmodule", "correct_code": "module basic_702(input en, en, output q); assign q = (en & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.115875", "id": 30450}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238157", "id": 52766}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.128877", "id": 32816}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329563", "id": 69442}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.110648", "id": 29489}
{"buggy_code": "module test_462(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module test_462(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.126950", "id": 32468}
{"buggy_code": "module test_286(input y, output result); assign result = y + 1; endmodule", "correct_code": "module test_286(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.962977", "id": 2720}
{"buggy_code": "module example_880(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module example_880(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.161769", "id": 38859}
{"buggy_code": "module logic_327(input a, d, output prod); assign prod = a & d | a; endmodule", "correct_code": "module logic_327(input a, d, output prod); assign prod = (a & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.234505", "id": 52097}
{"buggy_code": "module arith_824(input y, output q); assign q = y + 1; endmodule", "correct_code": "module arith_824(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.309251", "id": 65752}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.161513", "id": 38811}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.221332", "id": 49682}
{"buggy_code": "module simple_572(input in, output y); assign y = in + 1; endmodule", "correct_code": "module simple_572(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.975848", "id": 5059}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.166380", "id": 39695}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.990301", "id": 7641}
{"buggy_code": "module arith_440(input x, output result); assign result = x + 1; endmodule", "correct_code": "module arith_440(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.949985", "id": 366}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.154058", "id": 37440}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.055835", "id": 19492}
{"buggy_code": "module simple_329(input c, a, output result); assign result = c & a | y; endmodule", "correct_code": "module simple_329(input c, a, output result); assign result = (c & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.183370", "id": 42800}
{"buggy_code": "module example_214(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module example_214(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.346690", "id": 72538}
{"buggy_code": "module simple_105(input data, clk, output out); assign out = data & clk | rst; endmodule", "correct_code": "module simple_105(input data, clk, output out); assign out = (data & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.146110", "id": 35975}
{"buggy_code": "module logic_479(input b, output q); assign q = b + 1; endmodule", "correct_code": "module logic_479(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.351978", "id": 73498}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.056910", "id": 19690}
{"buggy_code": "module example_693(input rst, in, output result); assign result = rst & in | y; endmodule", "correct_code": "module example_693(input rst, in, output result); assign result = (rst & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.970342", "id": 4059}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.991392", "id": 7842}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272097", "id": 58966}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.026992", "id": 14281}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.093237", "id": 26303}
{"buggy_code": "module basic_409(input d, x, output valid); assign valid = d & x | rst; endmodule", "correct_code": "module basic_409(input d, x, output valid); assign valid = (d & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.952148", "id": 756}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.038652", "id": 16394}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.283020", "id": 60940}
{"buggy_code": "module simple_174(input rst, data, output y); assign y = rst & data | x; endmodule", "correct_code": "module simple_174(input rst, data, output y); assign y = (rst & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.062021", "id": 20630}
{"buggy_code": "module basic_812(input in, clk, output result); assign result = in & clk | data; endmodule", "correct_code": "module basic_812(input in, clk, output result); assign result = (in & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.305311", "id": 65024}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.142914", "id": 35384}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.250323", "id": 54994}
{"buggy_code": "module test_266(input b, output y); assign y = b + 1; endmodule", "correct_code": "module test_266(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.135207", "id": 33978}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.988483", "id": 7305}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.033345", "id": 15426}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.971154", "id": 4208}
{"buggy_code": "module test_712(input c, y, output q); assign q = c & y | rst; endmodule", "correct_code": "module test_712(input c, y, output q); assign q = (c & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.190763", "id": 44109}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.332958", "id": 70061}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.055056", "id": 19349}
{"buggy_code": "module test_910(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module test_910(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.066844", "id": 21512}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.147255", "id": 36179}
{"buggy_code": "module example_949(input rst, x, output prod); assign prod = rst & x | rst; endmodule", "correct_code": "module example_949(input rst, x, output prod); assign prod = (rst & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.267459", "id": 58117}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.092867", "id": 26236}
{"buggy_code": "module logic_172(input a, en, output out); assign out = a & en | b; endmodule", "correct_code": "module logic_172(input a, en, output out); assign out = (a & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.323214", "id": 68275}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.220199", "id": 49475}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.210765", "id": 47773}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.115023", "id": 30296}
{"buggy_code": "module test_921(input a, a, output sum); assign sum = a & a | x; endmodule", "correct_code": "module test_921(input a, a, output sum); assign sum = (a & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.053941", "id": 19138}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.052947", "id": 18953}
{"buggy_code": "module test_249(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module test_249(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.279333", "id": 60262}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.133943", "id": 33747}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.340162", "id": 71359}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.156241", "id": 37840}
{"buggy_code": "module simple_394(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module simple_394(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.082557", "id": 24362}
{"buggy_code": "module arith_401(input y, en, output sum); assign sum = y & en | data; endmodule", "correct_code": "module arith_401(input y, en, output sum); assign sum = (y & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.150210", "id": 36726}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.303232", "id": 64637}
{"buggy_code": "module simple_625(input in, en, output q); assign q = in & en | clk; endmodule", "correct_code": "module simple_625(input in, en, output q); assign q = (in & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.107962", "id": 28994}
{"buggy_code": "module logic_111(input c, output q); assign q = c + 1; endmodule", "correct_code": "module logic_111(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.352929", "id": 73667}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.285105", "id": 61322}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.344255", "id": 72100}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.227079", "id": 50732}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.188129", "id": 43666}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.073742", "id": 22785}
{"buggy_code": "module arith_904(input en, clk, output y); assign y = en & clk | a; endmodule", "correct_code": "module arith_904(input en, clk, output y); assign y = (en & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.169668", "id": 40297}
{"buggy_code": "module simple_414(input a, data, output sum); assign sum = a & data | c; endmodule", "correct_code": "module simple_414(input a, data, output sum); assign sum = (a & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.280522", "id": 60483}
{"buggy_code": "module arith_857(input c, output result); assign result = c + 1; endmodule", "correct_code": "module arith_857(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.157053", "id": 37988}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.964908", "id": 3073}
{"buggy_code": "module logic_33(input in, b, output valid); assign valid = in & b | y; endmodule", "correct_code": "module logic_33(input in, b, output valid); assign valid = (in & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.071457", "id": 22361}
{"buggy_code": "module test_914(input data, a, output valid); assign valid = data & a | d; endmodule", "correct_code": "module test_914(input data, a, output valid); assign valid = (data & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.962695", "id": 2670}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.325586", "id": 68708}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286802", "id": 61633}
{"buggy_code": "module arith_754(input c, c, output valid); assign valid = c & c | c; endmodule", "correct_code": "module arith_754(input c, c, output valid); assign valid = (c & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.319299", "id": 67591}
{"buggy_code": "module demo_920(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module demo_920(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.196892", "id": 45236}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.218360", "id": 49153}
{"buggy_code": "module test_543(input x, output out); assign out = x + 1; endmodule", "correct_code": "module test_543(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.020092", "id": 13034}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.176708", "id": 41583}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.203239", "id": 46397}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.099940", "id": 27526}
{"buggy_code": "module basic_406(input data, output y); assign y = data + 1; endmodule", "correct_code": "module basic_406(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.287704", "id": 61797}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.045469", "id": 17621}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.289067", "id": 62046}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.011381", "id": 11466}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.245410", "id": 54099}
{"buggy_code": "module example_226(input data, output q); assign q = data + 1; endmodule", "correct_code": "module example_226(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.342010", "id": 71691}
{"buggy_code": "module simple_955(input d, data, output y); assign y = d & data | clk; endmodule", "correct_code": "module simple_955(input d, data, output y); assign y = (d & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.056807", "id": 19673}
{"buggy_code": "module arith_153(input d, c, output out); assign out = d & c | y; endmodule", "correct_code": "module arith_153(input d, c, output out); assign out = (d & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.065580", "id": 21284}
{"buggy_code": "module arith_561(input a, output y); assign y = a + 1; endmodule", "correct_code": "module arith_561(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.170353", "id": 40422}
{"buggy_code": "module logic_91(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module logic_91(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.303898", "id": 64760}
{"buggy_code": "module example_624(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module example_624(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.026733", "id": 14238}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.150471", "id": 36776}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.949381", "id": 257}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.279598", "id": 60312}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.189029", "id": 43830}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.332469", "id": 69970}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.161682", "id": 38842}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.151146", "id": 36900}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.334687", "id": 70375}
{"buggy_code": "module test_263(input data, output out); assign out = data + 1; endmodule", "correct_code": "module test_263(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.242417", "id": 53546}
{"buggy_code": "module demo_372(input in, output y); assign y = in + 1; endmodule", "correct_code": "module demo_372(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.249717", "id": 54885}
{"buggy_code": "module arith_781(input b, data, output y); assign y = b & data | data; endmodule", "correct_code": "module arith_781(input b, data, output y); assign y = (b & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.314847", "id": 66772}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.015838", "id": 12273}
{"buggy_code": "module example_646(input x, output y); assign y = x + 1; endmodule", "correct_code": "module example_646(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.240283", "id": 53156}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.997659", "id": 8985}
{"buggy_code": "module arith_983(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module arith_983(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.345500", "id": 72319}
{"buggy_code": "module simple_804(input y, d, output result); assign result = y & d | b; endmodule", "correct_code": "module simple_804(input y, d, output result); assign result = (y & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.041186", "id": 16847}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.074857", "id": 22991}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.041355", "id": 16878}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.178872", "id": 41984}
{"buggy_code": "module simple_790(input y, output q); assign q = y + 1; endmodule", "correct_code": "module simple_790(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.120985", "id": 31374}
{"buggy_code": "module simple_437(input x, output y); assign y = x + 1; endmodule", "correct_code": "module simple_437(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.249481", "id": 54841}
{"buggy_code": "module arith_153(input y, output result); assign result = y + 1; endmodule", "correct_code": "module arith_153(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.056591", "id": 19632}
{"buggy_code": "module logic_971(input b, clk, output q); assign q = b & clk | x; endmodule", "correct_code": "module logic_971(input b, clk, output q); assign q = (b & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.203546", "id": 46454}
{"buggy_code": "module arith_385(input c, en, output prod); assign prod = c & en | in; endmodule", "correct_code": "module arith_385(input c, en, output prod); assign prod = (c & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.108904", "id": 29170}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.215807", "id": 48689}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.060845", "id": 20412}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.181865", "id": 42523}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.167063", "id": 39821}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.246626", "id": 54319}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.966328", "id": 3333}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.070285", "id": 22145}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.162170", "id": 38931}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.160169", "id": 38563}
{"buggy_code": "module arith_890(input en, output q); assign q = en + 1; endmodule", "correct_code": "module arith_890(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.161724", "id": 38850}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.236511", "id": 52461}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.342180", "id": 71723}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.021129", "id": 13220}
{"buggy_code": "module example_725(input rst, en, output prod); assign prod = rst & en | in; endmodule", "correct_code": "module example_725(input rst, en, output prod); assign prod = (rst & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.325287", "id": 68654}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.251801", "id": 55262}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.095759", "id": 26766}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.057755", "id": 19846}
{"buggy_code": "module example_605(input y, b, output prod); assign prod = y & b | a; endmodule", "correct_code": "module example_605(input y, b, output prod); assign prod = (y & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.119052", "id": 31031}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.075990", "id": 23196}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.973677", "id": 4666}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.067010", "id": 21542}
{"buggy_code": "module example_197(input data, output q); assign q = data + 1; endmodule", "correct_code": "module example_197(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.346453", "id": 72494}
{"buggy_code": "module logic_707(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module logic_707(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.136156", "id": 34152}
{"buggy_code": "module simple_29(input y, output result); assign result = y + 1; endmodule", "correct_code": "module simple_29(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.071336", "id": 22339}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.342852", "id": 71843}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.044610", "id": 17469}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.318933", "id": 67524}
{"buggy_code": "module basic_464(input data, output q); assign q = data + 1; endmodule", "correct_code": "module basic_464(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.327092", "id": 68984}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.087301", "id": 25223}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.016775", "id": 12444}
{"buggy_code": "module basic_124(input x, output result); assign result = x + 1; endmodule", "correct_code": "module basic_124(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.209328", "id": 47506}
{"buggy_code": "module test_238(input data, clk, output valid); assign valid = data & clk | data; endmodule", "correct_code": "module test_238(input data, clk, output valid); assign valid = (data & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.052733", "id": 18915}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.085623", "id": 24919}
{"buggy_code": "module arith_259(input x, data, output q); assign q = x & data | b; endmodule", "correct_code": "module arith_259(input x, data, output q); assign q = (x & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.955420", "id": 1348}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.206778", "id": 47044}
{"buggy_code": "module simple_959(input rst, a, output result); assign result = rst & a | clk; endmodule", "correct_code": "module simple_959(input rst, a, output result); assign result = (rst & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.141047", "id": 35054}
{"buggy_code": "module arith_928(input x, b, output q); assign q = x & b | x; endmodule", "correct_code": "module arith_928(input x, b, output q); assign q = (x & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.120653", "id": 31314}
{"buggy_code": "module simple_405(input x, rst, output out); assign out = x & rst | rst; endmodule", "correct_code": "module simple_405(input x, rst, output out); assign out = (x & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.246309", "id": 54262}
{"buggy_code": "module basic_941(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module basic_941(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.149511", "id": 36599}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.221251", "id": 49666}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.045183", "id": 17571}
{"buggy_code": "module example_866(input en, d, output result); assign result = en & d | en; endmodule", "correct_code": "module example_866(input en, d, output result); assign result = (en & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.197597", "id": 45366}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.977620", "id": 5382}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.317017", "id": 67171}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.300949", "id": 64219}
{"buggy_code": "module basic_93(input a, c, output sum); assign sum = a & c | data; endmodule", "correct_code": "module basic_93(input a, c, output sum); assign sum = (a & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.154172", "id": 37462}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.052620", "id": 18896}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.964887", "id": 3069}
{"buggy_code": "module test_741(input c, y, output sum); assign sum = c & y | y; endmodule", "correct_code": "module test_741(input c, y, output sum); assign sum = (c & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.101414", "id": 27798}
{"buggy_code": "module demo_589(input in, b, output out); assign out = in & b | data; endmodule", "correct_code": "module demo_589(input in, b, output out); assign out = (in & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.044337", "id": 17418}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.332085", "id": 69899}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.110318", "id": 29430}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.961389", "id": 2434}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.287895", "id": 61828}
{"buggy_code": "module simple_618(input d, en, output prod); assign prod = d & en | a; endmodule", "correct_code": "module simple_618(input d, en, output prod); assign prod = (d & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.203497", "id": 46445}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.276347", "id": 59719}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.112655", "id": 29859}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.308941", "id": 65697}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.178424", "id": 41901}
{"buggy_code": "module test_185(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module test_185(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.316750", "id": 67121}
{"buggy_code": "module simple_102(input d, a, output q); assign q = d & a | in; endmodule", "correct_code": "module simple_102(input d, a, output q); assign q = (d & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.123147", "id": 31772}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.335500", "id": 70525}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.240387", "id": 53173}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.081265", "id": 24129}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.063104", "id": 20827}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.325016", "id": 68605}
{"buggy_code": "module test_524(input data, output y); assign y = data + 1; endmodule", "correct_code": "module test_524(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.959301", "id": 2052}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.051012", "id": 18601}
{"buggy_code": "module simple_589(input a, d, output sum); assign sum = a & d | clk; endmodule", "correct_code": "module simple_589(input a, d, output sum); assign sum = (a & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.145738", "id": 35908}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238665", "id": 52862}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.065353", "id": 21243}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.088080", "id": 25362}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.298171", "id": 63711}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.119328", "id": 31083}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.059663", "id": 20196}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.291875", "id": 62561}
{"buggy_code": "module arith_90(input data, c, output result); assign result = data & c | data; endmodule", "correct_code": "module arith_90(input data, c, output result); assign result = (data & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.090973", "id": 25895}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.180432", "id": 42272}
{"buggy_code": "module logic_634(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module logic_634(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.102470", "id": 27992}
{"buggy_code": "module test_458(input c, data, output y); assign y = c & data | d; endmodule", "correct_code": "module test_458(input c, data, output y); assign y = (c & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.199506", "id": 45711}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.048330", "id": 18140}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.063490", "id": 20900}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.094305", "id": 26498}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.165526", "id": 39537}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.246838", "id": 54358}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.092965", "id": 26254}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.149408", "id": 36579}
{"buggy_code": "module basic_140(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module basic_140(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.156724", "id": 37930}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.057482", "id": 19796}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.093152", "id": 26288}
{"buggy_code": "module arith_729(input b, output y); assign y = b + 1; endmodule", "correct_code": "module arith_729(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.176978", "id": 41632}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.013141", "id": 11781}
{"buggy_code": "module logic_506(input d, output y); assign y = d + 1; endmodule", "correct_code": "module logic_506(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.988183", "id": 7250}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.273274", "id": 59183}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.111969", "id": 29731}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.337993", "id": 70982}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.190692", "id": 44098}
{"buggy_code": "module basic_330(input c, x, output valid); assign valid = c & x | en; endmodule", "correct_code": "module basic_330(input c, x, output valid); assign valid = (c & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.232195", "id": 51667}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.311243", "id": 66119}
{"buggy_code": "module basic_94(input en, in, output valid); assign valid = en & in | d; endmodule", "correct_code": "module basic_94(input en, in, output valid); assign valid = (en & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.332498", "id": 69976}
{"buggy_code": "module basic_852(input x, a, output sum); assign sum = x & a | data; endmodule", "correct_code": "module basic_852(input x, a, output sum); assign sum = (x & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.286465", "id": 61571}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.142081", "id": 35227}
{"buggy_code": "module demo_635(input data, output out); assign out = data + 1; endmodule", "correct_code": "module demo_635(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.309439", "id": 65788}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329030", "id": 69341}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.193910", "id": 44691}
{"buggy_code": "module demo_717(input c, b, output sum); assign sum = c & b | c; endmodule", "correct_code": "module demo_717(input c, b, output sum); assign sum = (c & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.360046", "id": 74978}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.282074", "id": 60768}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.121837", "id": 31531}
{"buggy_code": "module simple_165(input in, y, output prod); assign prod = in & y | en; endmodule", "correct_code": "module simple_165(input in, y, output prod); assign prod = (in & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.254031", "id": 55661}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.125607", "id": 32222}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112218", "id": 29778}
{"buggy_code": "module basic_978(input a, a, output sum); assign sum = a & a | c; endmodule", "correct_code": "module basic_978(input a, a, output sum); assign sum = (a & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.276553", "id": 59756}
{"buggy_code": "module basic_608(input in, c, output out); assign out = in & c | y; endmodule", "correct_code": "module basic_608(input in, c, output out); assign out = (in & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.093701", "id": 26388}
{"buggy_code": "module demo_119(input b, b, output prod); assign prod = b & b | c; endmodule", "correct_code": "module demo_119(input b, b, output prod); assign prod = (b & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.321078", "id": 67883}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.275287", "id": 59530}
{"buggy_code": "module example_458(input en, data, output out); assign out = en & data | in; endmodule", "correct_code": "module example_458(input en, data, output out); assign out = (en & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.982356", "id": 6184}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.994561", "id": 8420}
{"buggy_code": "module logic_265(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module logic_265(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.242658", "id": 53591}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.089118", "id": 25552}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287861", "id": 61822}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.301378", "id": 64297}
{"buggy_code": "module arith_500(input a, a, output prod); assign prod = a & a | clk; endmodule", "correct_code": "module arith_500(input a, a, output prod); assign prod = (a & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.002785", "id": 9919}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.144482", "id": 35674}
{"buggy_code": "module demo_116(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module demo_116(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.275243", "id": 59521}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.248080", "id": 54583}
{"buggy_code": "module demo_103(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module demo_103(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.012391", "id": 11648}
{"buggy_code": "module example_6(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module example_6(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.036760", "id": 16050}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.961441", "id": 2444}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.303601", "id": 64706}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.160536", "id": 38632}
{"buggy_code": "module basic_27(input en, in, output valid); assign valid = en & in | b; endmodule", "correct_code": "module basic_27(input en, in, output valid); assign valid = (en & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.217857", "id": 49063}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.955285", "id": 1322}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.302768", "id": 64553}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.341290", "id": 71560}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.235024", "id": 52191}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.321370", "id": 67937}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.314865", "id": 66776}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.984860", "id": 6640}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.287076", "id": 61681}
{"buggy_code": "module arith_570(input en, output out); assign out = en + 1; endmodule", "correct_code": "module arith_570(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.211889", "id": 47974}
{"buggy_code": "module demo_3(input a, output result); assign result = a + 1; endmodule", "correct_code": "module demo_3(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000491", "id": 9496}
{"buggy_code": "module simple_356(input x, output result); assign result = x + 1; endmodule", "correct_code": "module simple_356(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.195744", "id": 45029}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.046118", "id": 17738}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.251584", "id": 55226}
{"buggy_code": "module basic_310(input data, b, output q); assign q = data & b | in; endmodule", "correct_code": "module basic_310(input data, b, output q); assign q = (data & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.103969", "id": 28261}
{"buggy_code": "module example_799(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module example_799(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.973496", "id": 4633}
{"buggy_code": "module arith_873(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module arith_873(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.234732", "id": 52137}
{"buggy_code": "module example_774(input clk, y, output result); assign result = clk & y | rst; endmodule", "correct_code": "module example_774(input clk, y, output result); assign result = (clk & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.324935", "id": 68590}
{"buggy_code": "module test_858(input y, y, output q); assign q = y & y | a; endmodule", "correct_code": "module test_858(input y, y, output q); assign q = (y & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.102502", "id": 27997}
{"buggy_code": "module simple_233(input c, c, output out); assign out = c & c | in; endmodule", "correct_code": "module simple_233(input c, c, output out); assign out = (c & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.136179", "id": 34156}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.193126", "id": 44547}
{"buggy_code": "module demo_184(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module demo_184(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.229952", "id": 51254}
{"buggy_code": "module demo_42(input clk, c, output prod); assign prod = clk & c | a; endmodule", "correct_code": "module demo_42(input clk, c, output prod); assign prod = (clk & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.979164", "id": 5614}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.974649", "id": 4843}
{"buggy_code": "module test_670(input rst, x, output prod); assign prod = rst & x | c; endmodule", "correct_code": "module test_670(input rst, x, output prod); assign prod = (rst & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.066681", "id": 21484}
{"buggy_code": "module logic_276(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module logic_276(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.332534", "id": 69982}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.309875", "id": 65866}
{"buggy_code": "module example_658(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module example_658(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.970027", "id": 4001}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.039800", "id": 16607}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.171932", "id": 40711}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.055648", "id": 19459}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.172274", "id": 40776}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.084639", "id": 24735}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.278238", "id": 60062}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.290664", "id": 62338}
{"buggy_code": "module example_531(input c, output y); assign y = c + 1; endmodule", "correct_code": "module example_531(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091000", "id": 25900}
{"buggy_code": "module logic_254(input c, output result); assign result = c + 1; endmodule", "correct_code": "module logic_254(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.134732", "id": 33893}
{"buggy_code": "module simple_895(input b, c, output result); assign result = b & c | a; endmodule", "correct_code": "module simple_895(input b, c, output result); assign result = (b & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.986725", "id": 6986}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.157916", "id": 38146}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.094290", "id": 26495}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.321166", "id": 67900}
{"buggy_code": "module test_174(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module test_174(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.955720", "id": 1402}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.175929", "id": 41440}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.017372", "id": 12552}
{"buggy_code": "module test_958(input a, data, output result); assign result = a & data | clk; endmodule", "correct_code": "module test_958(input a, data, output result); assign result = (a & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.217902", "id": 49071}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.220753", "id": 49578}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.053020", "id": 18967}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.152540", "id": 37158}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.022875", "id": 13540}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.972681", "id": 4487}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.962765", "id": 2684}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.101123", "id": 27744}
{"buggy_code": "module example_709(input en, y, output y); assign y = en & y | en; endmodule", "correct_code": "module example_709(input en, y, output y); assign y = (en & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.322399", "id": 68127}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.104882", "id": 28426}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.140043", "id": 34869}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.341945", "id": 71679}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.000699", "id": 9535}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.238106", "id": 52757}
{"buggy_code": "module demo_843(input en, d, output result); assign result = en & d | c; endmodule", "correct_code": "module demo_843(input en, d, output result); assign result = (en & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.224603", "id": 50281}
{"buggy_code": "module demo_401(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module demo_401(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.314466", "id": 66704}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.192360", "id": 44408}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.197439", "id": 45336}
{"buggy_code": "module example_575(input a, data, output sum); assign sum = a & data | d; endmodule", "correct_code": "module example_575(input a, data, output sum); assign sum = (a & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.301900", "id": 64392}
{"buggy_code": "module arith_588(input in, rst, output q); assign q = in & rst | c; endmodule", "correct_code": "module arith_588(input in, rst, output q); assign q = (in & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.257888", "id": 56368}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.293855", "id": 62921}
{"buggy_code": "module arith_346(input a, output y); assign y = a + 1; endmodule", "correct_code": "module arith_346(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.251018", "id": 55123}
{"buggy_code": "module simple_772(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module simple_772(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.961880", "id": 2520}
{"buggy_code": "module simple_559(input c, clk, output out); assign out = c & clk | in; endmodule", "correct_code": "module simple_559(input c, clk, output out); assign out = (c & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.034632", "id": 15661}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.087754", "id": 25304}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.217334", "id": 48965}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.146721", "id": 36086}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.297836", "id": 63648}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.086967", "id": 25162}
{"buggy_code": "module basic_829(input a, output q); assign q = a + 1; endmodule", "correct_code": "module basic_829(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.147140", "id": 36158}
{"buggy_code": "module logic_235(input b, b, output prod); assign prod = b & b | en; endmodule", "correct_code": "module logic_235(input b, b, output prod); assign prod = (b & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.318699", "id": 67482}
{"buggy_code": "module demo_235(input x, rst, output q); assign q = x & rst | a; endmodule", "correct_code": "module demo_235(input x, rst, output q); assign q = (x & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.227500", "id": 50808}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.005798", "id": 10453}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.256624", "id": 56137}
{"buggy_code": "module logic_838(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module logic_838(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.172725", "id": 40856}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064320", "id": 21052}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.124324", "id": 31986}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.961033", "id": 2367}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.324114", "id": 68441}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.029342", "id": 14706}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.323616", "id": 68349}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.154016", "id": 37432}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.294782", "id": 63090}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.198314", "id": 45496}
{"buggy_code": "module test_612(input a, output q); assign q = a + 1; endmodule", "correct_code": "module test_612(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.297339", "id": 63558}
{"buggy_code": "module arith_163(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module arith_163(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.110658", "id": 29491}
{"buggy_code": "module example_962(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module example_962(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.003176", "id": 9989}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.146142", "id": 35981}
{"buggy_code": "module arith_515(input y, en, output result); assign result = y & en | data; endmodule", "correct_code": "module arith_515(input y, en, output result); assign result = (y & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.004469", "id": 10208}
{"buggy_code": "module example_625(input x, en, output y); assign y = x & en | c; endmodule", "correct_code": "module example_625(input x, en, output y); assign y = (x & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.344709", "id": 72179}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.285666", "id": 61425}
{"buggy_code": "module test_954(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module test_954(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.030069", "id": 14838}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.293915", "id": 62932}
{"buggy_code": "module example_799(input clk, x, output prod); assign prod = clk & x | c; endmodule", "correct_code": "module example_799(input clk, x, output prod); assign prod = (clk & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.054353", "id": 19216}
{"buggy_code": "module basic_968(input en, output result); assign result = en + 1; endmodule", "correct_code": "module basic_968(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.356569", "id": 74338}
{"buggy_code": "module demo_267(input rst, data, output prod); assign prod = rst & data | y; endmodule", "correct_code": "module demo_267(input rst, data, output prod); assign prod = (rst & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.106722", "id": 28768}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.200134", "id": 45827}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.291219", "id": 62444}
{"buggy_code": "module arith_332(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module arith_332(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.978554", "id": 5503}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.978283", "id": 5454}
{"buggy_code": "module test_249(input y, y, output y); assign y = y & y | x; endmodule", "correct_code": "module test_249(input y, y, output y); assign y = (y & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.095053", "id": 26635}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.041603", "id": 16924}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.082439", "id": 24340}
{"buggy_code": "module logic_321(input y, c, output sum); assign sum = y & c | y; endmodule", "correct_code": "module logic_321(input y, c, output sum); assign sum = (y & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.029348", "id": 14707}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.991419", "id": 7847}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.279623", "id": 60317}
{"buggy_code": "module example_724(input x, en, output valid); assign valid = x & en | in; endmodule", "correct_code": "module example_724(input x, en, output valid); assign valid = (x & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.181905", "id": 42530}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.162102", "id": 38918}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.249071", "id": 54766}
{"buggy_code": "module demo_232(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module demo_232(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.064843", "id": 21150}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.152048", "id": 37068}
{"buggy_code": "module simple_31(input y, output out); assign out = y + 1; endmodule", "correct_code": "module simple_31(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.997110", "id": 8884}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.278944", "id": 60191}
{"buggy_code": "module logic_206(input d, en, output y); assign y = d & en | en; endmodule", "correct_code": "module logic_206(input d, en, output y); assign y = (d & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.031577", "id": 15111}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.147498", "id": 36224}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.995361", "id": 8564}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.039173", "id": 16491}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.229961", "id": 51256}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.200722", "id": 45938}
{"buggy_code": "module example_332(input in, output result); assign result = in + 1; endmodule", "correct_code": "module example_332(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.222578", "id": 49909}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.189973", "id": 43965}
{"buggy_code": "module arith_764(input d, output result); assign result = d + 1; endmodule", "correct_code": "module arith_764(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.253232", "id": 55522}
{"buggy_code": "module logic_412(input en, y, output valid); assign valid = en & y | rst; endmodule", "correct_code": "module logic_412(input en, y, output valid); assign valid = (en & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.062629", "id": 20741}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.191331", "id": 44214}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.260799", "id": 56902}
{"buggy_code": "module logic_736(input d, output y); assign y = d + 1; endmodule", "correct_code": "module logic_736(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.337302", "id": 70858}
{"buggy_code": "module test_785(input clk, clk, output out); assign out = clk & clk | clk; endmodule", "correct_code": "module test_785(input clk, clk, output out); assign out = (clk & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.275946", "id": 59650}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.078880", "id": 23693}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.351992", "id": 73501}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.955319", "id": 1328}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.073176", "id": 22678}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.269744", "id": 58536}
{"buggy_code": "module example_786(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module example_786(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.980585", "id": 5866}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.071748", "id": 22414}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.049675", "id": 18359}
{"buggy_code": "module example_102(input clk, b, output prod); assign prod = clk & b | y; endmodule", "correct_code": "module example_102(input clk, b, output prod); assign prod = (clk & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.071297", "id": 22332}
{"buggy_code": "module demo_803(input clk, en, output q); assign q = clk & en | in; endmodule", "correct_code": "module demo_803(input clk, en, output q); assign q = (clk & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.243094", "id": 53670}
{"buggy_code": "module basic_991(input b, output y); assign y = b + 1; endmodule", "correct_code": "module basic_991(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.073849", "id": 22803}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.999952", "id": 9399}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.251181", "id": 55153}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.232979", "id": 51812}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.099124", "id": 27377}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.074655", "id": 22953}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.010864", "id": 11370}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.962624", "id": 2657}
{"buggy_code": "module logic_94(input clk, d, output valid); assign valid = clk & d | rst; endmodule", "correct_code": "module logic_94(input clk, d, output valid); assign valid = (clk & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.031383", "id": 15076}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.187994", "id": 43640}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.210905", "id": 47795}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.108698", "id": 29132}
{"buggy_code": "module example_23(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module example_23(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.243126", "id": 53676}
{"buggy_code": "module demo_247(input rst, d, output y); assign y = rst & d | c; endmodule", "correct_code": "module demo_247(input rst, d, output y); assign y = (rst & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.149133", "id": 36528}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.959373", "id": 2066}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.962536", "id": 2642}
{"buggy_code": "module test_317(input data, output q); assign q = data + 1; endmodule", "correct_code": "module test_317(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.133887", "id": 33735}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.955997", "id": 1451}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.294795", "id": 63093}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.013296", "id": 11811}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.322717", "id": 68184}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.351113", "id": 73340}
{"buggy_code": "module arith_560(input y, c, output prod); assign prod = y & c | d; endmodule", "correct_code": "module arith_560(input y, c, output prod); assign prod = (y & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.136216", "id": 34162}
{"buggy_code": "module basic_889(input rst, d, output y); assign y = rst & d | c; endmodule", "correct_code": "module basic_889(input rst, d, output y); assign y = (rst & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.023162", "id": 13592}
{"buggy_code": "module logic_938(input c, output result); assign result = c + 1; endmodule", "correct_code": "module logic_938(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.063590", "id": 20917}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.136161", "id": 34153}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.247126", "id": 54411}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.148852", "id": 36474}
{"buggy_code": "module demo_862(input rst, data, output prod); assign prod = rst & data | x; endmodule", "correct_code": "module demo_862(input rst, data, output prod); assign prod = (rst & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.134338", "id": 33819}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.170931", "id": 40527}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.960789", "id": 2324}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.248572", "id": 54676}
{"buggy_code": "module arith_678(input in, output q); assign q = in + 1; endmodule", "correct_code": "module arith_678(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.039652", "id": 16579}
{"buggy_code": "module demo_929(input d, output y); assign y = d + 1; endmodule", "correct_code": "module demo_929(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.960421", "id": 2255}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.069327", "id": 21968}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.090467", "id": 25802}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.091011", "id": 25902}
{"buggy_code": "module logic_13(input en, in, output y); assign y = en & in | x; endmodule", "correct_code": "module logic_13(input en, in, output y); assign y = (en & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.337454", "id": 70884}
{"buggy_code": "module arith_732(input a, clk, output q); assign q = a & clk | c; endmodule", "correct_code": "module arith_732(input a, clk, output q); assign q = (a & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.280361", "id": 60453}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.220501", "id": 49531}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.986011", "id": 6854}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.021520", "id": 13294}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.224094", "id": 50188}
{"buggy_code": "module basic_351(input c, output result); assign result = c + 1; endmodule", "correct_code": "module basic_351(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.151020", "id": 36876}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.168818", "id": 40143}
{"buggy_code": "module logic_134(input b, a, output out); assign out = b & a | b; endmodule", "correct_code": "module logic_134(input b, a, output out); assign out = (b & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.218860", "id": 49246}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.336217", "id": 70657}
{"buggy_code": "module demo_548(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module demo_548(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.323300", "id": 68291}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.972402", "id": 4435}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.067033", "id": 21546}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.274661", "id": 59428}
{"buggy_code": "module simple_395(input y, c, output out); assign out = y & c | c; endmodule", "correct_code": "module simple_395(input y, c, output out); assign out = (y & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.125748", "id": 32248}
{"buggy_code": "module demo_865(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module demo_865(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.296958", "id": 63488}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.979831", "id": 5736}
{"buggy_code": "module arith_545(input en, en, output q); assign q = en & en | y; endmodule", "correct_code": "module arith_545(input en, en, output q); assign q = (en & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.248186", "id": 54602}
{"buggy_code": "module demo_620(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module demo_620(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.116590", "id": 30583}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.244090", "id": 53851}
{"buggy_code": "module arith_294(input c, clk, output prod); assign prod = c & clk | y; endmodule", "correct_code": "module arith_294(input c, clk, output prod); assign prod = (c & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.140729", "id": 34997}
{"buggy_code": "module arith_383(input y, data, output q); assign q = y & data | data; endmodule", "correct_code": "module arith_383(input y, data, output q); assign q = (y & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.302101", "id": 64429}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.158356", "id": 38229}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.110514", "id": 29465}
{"buggy_code": "module basic_242(input x, clk, output prod); assign prod = x & clk | data; endmodule", "correct_code": "module basic_242(input x, clk, output prod); assign prod = (x & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.211170", "id": 47843}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.067178", "id": 21573}
{"buggy_code": "module example_416(input c, output out); assign out = c + 1; endmodule", "correct_code": "module example_416(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.270460", "id": 58665}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.234216", "id": 52042}
{"buggy_code": "module simple_759(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module simple_759(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.281941", "id": 60742}
{"buggy_code": "module demo_681(input in, data, output q); assign q = in & data | a; endmodule", "correct_code": "module demo_681(input in, data, output q); assign q = (in & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.173420", "id": 40983}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.999633", "id": 9343}
{"buggy_code": "module arith_514(input a, output out); assign out = a + 1; endmodule", "correct_code": "module arith_514(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.131240", "id": 33252}
{"buggy_code": "module logic_578(input a, d, output result); assign result = a & d | rst; endmodule", "correct_code": "module logic_578(input a, d, output result); assign result = (a & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.247485", "id": 54475}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.343946", "id": 72043}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.013267", "id": 11805}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.346927", "id": 72580}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.317958", "id": 67343}
{"buggy_code": "module example_122(input data, output q); assign q = data + 1; endmodule", "correct_code": "module example_122(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.029258", "id": 14691}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.951031", "id": 552}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.297845", "id": 63650}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.340358", "id": 71392}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.037816", "id": 16242}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.166658", "id": 39746}
{"buggy_code": "module logic_115(input b, rst, output q); assign q = b & rst | c; endmodule", "correct_code": "module logic_115(input b, rst, output q); assign q = (b & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.314460", "id": 66703}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.241216", "id": 53328}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.349538", "id": 73057}
{"buggy_code": "module demo_627(input y, in, output prod); assign prod = y & in | c; endmodule", "correct_code": "module demo_627(input y, in, output prod); assign prod = (y & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.182685", "id": 42674}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.178324", "id": 41883}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.165769", "id": 39582}
{"buggy_code": "module example_311(input d, output y); assign y = d + 1; endmodule", "correct_code": "module example_311(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.324890", "id": 68582}
{"buggy_code": "module logic_470(input clk, rst, output valid); assign valid = clk & rst | en; endmodule", "correct_code": "module logic_470(input clk, rst, output valid); assign valid = (clk & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.980377", "id": 5838}
{"buggy_code": "module logic_306(input data, output q); assign q = data + 1; endmodule", "correct_code": "module logic_306(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.995674", "id": 8622}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.016402", "id": 12376}
{"buggy_code": "module arith_469(input en, rst, output valid); assign valid = en & rst | a; endmodule", "correct_code": "module arith_469(input en, rst, output valid); assign valid = (en & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.103394", "id": 28158}
{"buggy_code": "module demo_689(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module demo_689(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.274705", "id": 59436}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.306889", "id": 65316}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.321344", "id": 67932}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.016257", "id": 12349}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.959419", "id": 2075}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.129446", "id": 32921}
{"buggy_code": "module example_765(input data, rst, output valid); assign valid = data & rst | a; endmodule", "correct_code": "module example_765(input data, rst, output valid); assign valid = (data & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.993886", "id": 8295}
{"buggy_code": "module demo_747(input y, output result); assign result = y + 1; endmodule", "correct_code": "module demo_747(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.198408", "id": 45513}
{"buggy_code": "module logic_825(input b, en, output prod); assign prod = b & en | d; endmodule", "correct_code": "module logic_825(input b, en, output prod); assign prod = (b & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.145633", "id": 35888}
{"buggy_code": "module simple_299(input en, c, output q); assign q = en & c | c; endmodule", "correct_code": "module simple_299(input en, c, output q); assign q = (en & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.256683", "id": 56147}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.056402", "id": 19597}
{"buggy_code": "module simple_243(input x, output y); assign y = x + 1; endmodule", "correct_code": "module simple_243(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.031843", "id": 15159}
{"buggy_code": "module arith_223(input x, output result); assign result = x + 1; endmodule", "correct_code": "module arith_223(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.026299", "id": 14159}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.070894", "id": 22258}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.253442", "id": 55556}
{"buggy_code": "module example_183(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module example_183(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.197065", "id": 45268}
{"buggy_code": "module example_242(input x, en, output out); assign out = x & en | c; endmodule", "correct_code": "module example_242(input x, en, output out); assign out = (x & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.347870", "id": 72752}
{"buggy_code": "module demo_462(input clk, x, output result); assign result = clk & x | rst; endmodule", "correct_code": "module demo_462(input clk, x, output result); assign result = (clk & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.955181", "id": 1303}
{"buggy_code": "module simple_214(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module simple_214(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.282813", "id": 60907}
{"buggy_code": "module logic_936(input a, d, output valid); assign valid = a & d | rst; endmodule", "correct_code": "module logic_936(input a, d, output valid); assign valid = (a & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.081364", "id": 24148}
{"buggy_code": "module simple_4(input a, c, output y); assign y = a & c | clk; endmodule", "correct_code": "module simple_4(input a, c, output y); assign y = (a & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.291036", "id": 62408}
{"buggy_code": "module arith_548(input c, data, output result); assign result = c & data | en; endmodule", "correct_code": "module arith_548(input c, data, output result); assign result = (c & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.107347", "id": 28881}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.045831", "id": 17685}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.173503", "id": 40999}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.093066", "id": 26272}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.262061", "id": 57131}
{"buggy_code": "module basic_235(input d, rst, output y); assign y = d & rst | en; endmodule", "correct_code": "module basic_235(input d, rst, output y); assign y = (d & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.095327", "id": 26686}
{"buggy_code": "module simple_528(input data, d, output prod); assign prod = data & d | c; endmodule", "correct_code": "module simple_528(input data, d, output prod); assign prod = (data & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.062830", "id": 20777}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.081639", "id": 24199}
{"buggy_code": "module test_348(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module test_348(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.204977", "id": 46712}
{"buggy_code": "module basic_759(input en, output out); assign out = en + 1; endmodule", "correct_code": "module basic_759(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.177935", "id": 41811}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.317935", "id": 67339}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.948643", "id": 128}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.282622", "id": 60871}
{"buggy_code": "module demo_565(input clk, en, output valid); assign valid = clk & en | a; endmodule", "correct_code": "module demo_565(input clk, en, output valid); assign valid = (clk & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.297218", "id": 63536}
{"buggy_code": "module test_976(input en, in, output y); assign y = en & in | data; endmodule", "correct_code": "module test_976(input en, in, output y); assign y = (en & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.969799", "id": 3963}
{"buggy_code": "module test_8(input in, data, output prod); assign prod = in & data | en; endmodule", "correct_code": "module test_8(input in, data, output prod); assign prod = (in & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.124052", "id": 31937}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.027698", "id": 14412}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.963345", "id": 2787}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.288673", "id": 61973}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.031195", "id": 15040}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.295125", "id": 63152}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.984271", "id": 6535}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.225020", "id": 50356}
{"buggy_code": "module test_127(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module test_127(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.176218", "id": 41494}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.053707", "id": 19095}
{"buggy_code": "module test_667(input a, output result); assign result = a + 1; endmodule", "correct_code": "module test_667(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.113869", "id": 30083}
{"buggy_code": "module arith_253(input y, x, output out); assign out = y & x | x; endmodule", "correct_code": "module arith_253(input y, x, output out); assign out = (y & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.353986", "id": 73861}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.129469", "id": 32925}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.292431", "id": 62665}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.331644", "id": 69819}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.136114", "id": 34144}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.340545", "id": 71427}
{"buggy_code": "module basic_99(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module basic_99(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.189882", "id": 43949}
{"buggy_code": "module arith_662(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module arith_662(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.317239", "id": 67212}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.129749", "id": 32976}
{"buggy_code": "module basic_891(input in, y, output q); assign q = in & y | c; endmodule", "correct_code": "module basic_891(input in, y, output q); assign q = (in & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.020309", "id": 13074}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.001806", "id": 9738}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.977379", "id": 5339}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.099092", "id": 27371}
{"buggy_code": "module basic_732(input data, a, output q); assign q = data & a | d; endmodule", "correct_code": "module basic_732(input data, a, output q); assign q = (data & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.059631", "id": 20191}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.203760", "id": 46491}
{"buggy_code": "module example_179(input y, output y); assign y = y + 1; endmodule", "correct_code": "module example_179(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.987412", "id": 7110}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.189126", "id": 43849}
{"buggy_code": "module basic_510(input b, output result); assign result = b + 1; endmodule", "correct_code": "module basic_510(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.143836", "id": 35553}
{"buggy_code": "module test_15(input clk, c, output result); assign result = clk & c | x; endmodule", "correct_code": "module test_15(input clk, c, output result); assign result = (clk & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.010233", "id": 11256}
{"buggy_code": "module simple_579(input data, rst, output out); assign out = data & rst | a; endmodule", "correct_code": "module simple_579(input data, rst, output out); assign out = (data & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.231226", "id": 51494}
{"buggy_code": "module demo_267(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module demo_267(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.170891", "id": 40520}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.169090", "id": 40191}
{"buggy_code": "module demo_982(input a, x, output sum); assign sum = a & x | clk; endmodule", "correct_code": "module demo_982(input a, x, output sum); assign sum = (a & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.963035", "id": 2728}
{"buggy_code": "module example_629(input en, output q); assign q = en + 1; endmodule", "correct_code": "module example_629(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.353424", "id": 73759}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.201122", "id": 46009}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.195890", "id": 45054}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.085177", "id": 24835}
{"buggy_code": "module test_402(input x, x, output valid); assign valid = x & x | b; endmodule", "correct_code": "module test_402(input x, x, output valid); assign valid = (x & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.247637", "id": 54504}
{"buggy_code": "module simple_438(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module simple_438(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.060804", "id": 20406}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.005794", "id": 10452}
{"buggy_code": "module simple_828(input a, en, output q); assign q = a & en | en; endmodule", "correct_code": "module simple_828(input a, en, output q); assign q = (a & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.152535", "id": 37157}
{"buggy_code": "module arith_728(input c, b, output valid); assign valid = c & b | clk; endmodule", "correct_code": "module arith_728(input c, b, output valid); assign valid = (c & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.229936", "id": 51251}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.339521", "id": 71244}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008819", "id": 11001}
{"buggy_code": "module basic_174(input d, b, output prod); assign prod = d & b | clk; endmodule", "correct_code": "module basic_174(input d, b, output prod); assign prod = (d & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.087336", "id": 25229}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.129237", "id": 32883}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.143877", "id": 35560}
{"buggy_code": "module basic_776(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module basic_776(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.199973", "id": 45798}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.306363", "id": 65219}
{"buggy_code": "module basic_24(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module basic_24(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.275127", "id": 59500}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.002864", "id": 9931}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.114808", "id": 30258}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.135582", "id": 34047}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.165299", "id": 39497}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.264858", "id": 57641}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.126042", "id": 32301}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.233676", "id": 51945}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.202782", "id": 46312}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.156392", "id": 37868}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.202753", "id": 46307}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.129306", "id": 32895}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.307688", "id": 65467}
{"buggy_code": "module logic_308(input d, d, output q); assign q = d & d | a; endmodule", "correct_code": "module logic_308(input d, d, output q); assign q = (d & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.046084", "id": 17731}
{"buggy_code": "module test_956(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module test_956(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.080680", "id": 24024}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.076632", "id": 23302}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008443", "id": 10932}
{"buggy_code": "module arith_340(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module arith_340(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.130043", "id": 33030}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.105397", "id": 28522}
{"buggy_code": "module example_92(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module example_92(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.078058", "id": 23543}
{"buggy_code": "module example_963(input data, en, output result); assign result = data & en | data; endmodule", "correct_code": "module example_963(input data, en, output result); assign result = (data & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.059307", "id": 20131}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.220004", "id": 49440}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.150929", "id": 36860}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.152127", "id": 37082}
{"buggy_code": "module basic_266(input clk, clk, output y); assign y = clk & clk | a; endmodule", "correct_code": "module basic_266(input clk, clk, output y); assign y = (clk & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.320971", "id": 67864}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.134976", "id": 33936}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.267276", "id": 58083}
{"buggy_code": "module test_602(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module test_602(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.094634", "id": 26559}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.155299", "id": 37668}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.031157", "id": 15034}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.230011", "id": 51266}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.018475", "id": 12753}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.036098", "id": 15929}
{"buggy_code": "module demo_123(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module demo_123(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174176", "id": 41119}
{"buggy_code": "module test_848(input en, y, output prod); assign prod = en & y | clk; endmodule", "correct_code": "module test_848(input en, y, output prod); assign prod = (en & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.995262", "id": 8546}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.256082", "id": 56036}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.259213", "id": 56611}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.186092", "id": 43294}
{"buggy_code": "module basic_474(input clk, rst, output valid); assign valid = clk & rst | clk; endmodule", "correct_code": "module basic_474(input clk, rst, output valid); assign valid = (clk & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.958454", "id": 1898}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.143163", "id": 35430}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.176362", "id": 41520}
{"buggy_code": "module basic_152(input rst, rst, output prod); assign prod = rst & rst | x; endmodule", "correct_code": "module basic_152(input rst, rst, output prod); assign prod = (rst & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.145004", "id": 35772}
{"buggy_code": "module simple_308(input clk, y, output sum); assign sum = clk & y | en; endmodule", "correct_code": "module simple_308(input clk, y, output sum); assign sum = (clk & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.955618", "id": 1383}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.061421", "id": 20520}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.126343", "id": 32357}
{"buggy_code": "module basic_673(input a, en, output y); assign y = a & en | b; endmodule", "correct_code": "module basic_673(input a, en, output y); assign y = (a & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.224172", "id": 50202}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.104498", "id": 28359}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.976183", "id": 5119}
{"buggy_code": "module demo_20(input b, output y); assign y = b + 1; endmodule", "correct_code": "module demo_20(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.123460", "id": 31829}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.202834", "id": 46320}
{"buggy_code": "module example_321(input rst, d, output q); assign q = rst & d | in; endmodule", "correct_code": "module example_321(input rst, d, output q); assign q = (rst & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.198466", "id": 45524}
{"buggy_code": "module example_773(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module example_773(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.025485", "id": 14013}
{"buggy_code": "module arith_498(input x, output out); assign out = x + 1; endmodule", "correct_code": "module arith_498(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.110907", "id": 29536}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.056248", "id": 19567}
{"buggy_code": "module arith_184(input c, x, output out); assign out = c & x | c; endmodule", "correct_code": "module arith_184(input c, x, output out); assign out = (c & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.187375", "id": 43527}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.263212", "id": 57341}
{"buggy_code": "module test_685(input rst, y, output sum); assign sum = rst & y | c; endmodule", "correct_code": "module test_685(input rst, y, output sum); assign sum = (rst & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.316362", "id": 67050}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.248224", "id": 54610}
{"buggy_code": "module arith_290(input d, output q); assign q = d + 1; endmodule", "correct_code": "module arith_290(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.281546", "id": 60674}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.337251", "id": 70848}
{"buggy_code": "module logic_13(input d, x, output q); assign q = d & x | a; endmodule", "correct_code": "module logic_13(input d, x, output q); assign q = (d & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.036082", "id": 15926}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.218558", "id": 49191}
{"buggy_code": "module example_701(input b, output q); assign q = b + 1; endmodule", "correct_code": "module example_701(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.998635", "id": 9162}
{"buggy_code": "module test_457(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module test_457(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.279210", "id": 60239}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.106656", "id": 28756}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.206561", "id": 47004}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.078444", "id": 23613}
{"buggy_code": "module arith_993(input x, output q); assign q = x + 1; endmodule", "correct_code": "module arith_993(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.271392", "id": 58836}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.288445", "id": 61931}
{"buggy_code": "module arith_626(input en, data, output y); assign y = en & data | clk; endmodule", "correct_code": "module arith_626(input en, data, output y); assign y = (en & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.036274", "id": 15961}
{"buggy_code": "module example_305(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module example_305(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.205650", "id": 46838}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.055256", "id": 19387}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.958856", "id": 1972}
{"buggy_code": "module example_728(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module example_728(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.207502", "id": 47176}
{"buggy_code": "module example_330(input b, d, output sum); assign sum = b & d | data; endmodule", "correct_code": "module example_330(input b, d, output sum); assign sum = (b & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.191649", "id": 44275}
{"buggy_code": "module demo_205(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module demo_205(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.991106", "id": 7789}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.197082", "id": 45271}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.351406", "id": 73395}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.166076", "id": 39637}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138067", "id": 34506}
{"buggy_code": "module demo_584(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module demo_584(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.123848", "id": 31899}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.286939", "id": 61656}
{"buggy_code": "module example_248(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module example_248(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.037428", "id": 16171}
{"buggy_code": "module arith_636(input data, output y); assign y = data + 1; endmodule", "correct_code": "module arith_636(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.994984", "id": 8496}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.184571", "id": 43018}
{"buggy_code": "module basic_141(input d, output result); assign result = d + 1; endmodule", "correct_code": "module basic_141(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.986071", "id": 6865}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.321274", "id": 67919}
{"buggy_code": "module arith_354(input c, rst, output y); assign y = c & rst | a; endmodule", "correct_code": "module arith_354(input c, rst, output y); assign y = (c & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.268715", "id": 58346}
{"buggy_code": "module basic_267(input in, clk, output y); assign y = in & clk | rst; endmodule", "correct_code": "module basic_267(input in, clk, output y); assign y = (in & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.104188", "id": 28302}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.179858", "id": 42165}
{"buggy_code": "module demo_269(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module demo_269(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.235122", "id": 52209}
{"buggy_code": "module logic_223(input data, output out); assign out = data + 1; endmodule", "correct_code": "module logic_223(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.009122", "id": 11055}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.121931", "id": 31548}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.994313", "id": 8374}
{"buggy_code": "module basic_992(input c, a, output out); assign out = c & a | in; endmodule", "correct_code": "module basic_992(input c, a, output out); assign out = (c & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.183493", "id": 42822}
{"buggy_code": "module test_868(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module test_868(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.171269", "id": 40591}
{"buggy_code": "module demo_9(input a, x, output result); assign result = a & x | y; endmodule", "correct_code": "module demo_9(input a, x, output result); assign result = (a & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.209433", "id": 47525}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.108413", "id": 29079}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.018747", "id": 12803}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.153659", "id": 37367}
{"buggy_code": "module demo_184(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module demo_184(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.006982", "id": 10668}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.247551", "id": 54488}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.308676", "id": 65650}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.244112", "id": 53855}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.292929", "id": 62753}
{"buggy_code": "module simple_390(input y, data, output out); assign out = y & data | clk; endmodule", "correct_code": "module simple_390(input y, data, output out); assign out = (y & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.987127", "id": 7059}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.058711", "id": 20021}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.052338", "id": 18845}
{"buggy_code": "module arith_117(input d, y, output y); assign y = d & y | in; endmodule", "correct_code": "module arith_117(input d, y, output y); assign y = (d & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.266049", "id": 57859}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.063069", "id": 20821}
{"buggy_code": "module test_479(input y, data, output y); assign y = y & data | en; endmodule", "correct_code": "module test_479(input y, data, output y); assign y = (y & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.340725", "id": 71461}
{"buggy_code": "module demo_589(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module demo_589(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.273365", "id": 59201}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.990333", "id": 7646}
{"buggy_code": "module test_312(input y, x, output y); assign y = y & x | in; endmodule", "correct_code": "module test_312(input y, x, output y); assign y = (y & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.160626", "id": 38648}
{"buggy_code": "module test_536(input clk, en, output prod); assign prod = clk & en | c; endmodule", "correct_code": "module test_536(input clk, en, output prod); assign prod = (clk & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.239353", "id": 52987}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.271718", "id": 58897}
{"buggy_code": "module basic_630(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module basic_630(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118666", "id": 30962}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.107585", "id": 28927}
{"buggy_code": "module example_810(input c, in, output sum); assign sum = c & in | in; endmodule", "correct_code": "module example_810(input c, in, output sum); assign sum = (c & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.169789", "id": 40320}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.962070", "id": 2554}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.003891", "id": 10100}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.311749", "id": 66212}
{"buggy_code": "module test_679(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module test_679(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.042960", "id": 17169}
{"buggy_code": "module logic_524(input b, y, output result); assign result = b & y | in; endmodule", "correct_code": "module logic_524(input b, y, output result); assign result = (b & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.277693", "id": 59962}
{"buggy_code": "module demo_31(input en, rst, output sum); assign sum = en & rst | x; endmodule", "correct_code": "module demo_31(input en, rst, output sum); assign sum = (en & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.155392", "id": 37684}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.188054", "id": 43652}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.149299", "id": 36560}
{"buggy_code": "module basic_720(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module basic_720(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.186410", "id": 43353}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.249688", "id": 54880}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.987196", "id": 7072}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.332563", "id": 69987}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179390", "id": 42082}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.041488", "id": 16902}
{"buggy_code": "module test_483(input a, d, output y); assign y = a & d | c; endmodule", "correct_code": "module test_483(input a, d, output y); assign y = (a & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.343654", "id": 71990}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.087215", "id": 25207}
{"buggy_code": "module logic_909(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module logic_909(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.045783", "id": 17678}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008783", "id": 10995}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.324167", "id": 68451}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.181593", "id": 42484}
{"buggy_code": "module basic_425(input d, clk, output valid); assign valid = d & clk | c; endmodule", "correct_code": "module basic_425(input d, clk, output valid); assign valid = (d & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.349507", "id": 73051}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.120447", "id": 31276}
{"buggy_code": "module arith_912(input d, output out); assign out = d + 1; endmodule", "correct_code": "module arith_912(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.203433", "id": 46432}
{"buggy_code": "module logic_610(input y, output result); assign result = y + 1; endmodule", "correct_code": "module logic_610(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.327903", "id": 69133}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.098276", "id": 27221}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.095864", "id": 26784}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.977345", "id": 5333}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.215696", "id": 48668}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.102209", "id": 27943}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.023942", "id": 13733}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.240074", "id": 53118}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.297681", "id": 63621}
{"buggy_code": "module demo_606(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module demo_606(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.985534", "id": 6766}
{"buggy_code": "module demo_959(input en, output result); assign result = en + 1; endmodule", "correct_code": "module demo_959(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.015748", "id": 12258}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.967441", "id": 3539}
{"buggy_code": "module example_471(input x, output q); assign q = x + 1; endmodule", "correct_code": "module example_471(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.985719", "id": 6801}
{"buggy_code": "module basic_898(input clk, b, output sum); assign sum = clk & b | y; endmodule", "correct_code": "module basic_898(input clk, b, output sum); assign sum = (clk & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.142062", "id": 35223}
{"buggy_code": "module example_165(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module example_165(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.223233", "id": 50030}
{"buggy_code": "module example_396(input a, b, output sum); assign sum = a & b | b; endmodule", "correct_code": "module example_396(input a, b, output sum); assign sum = (a & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.957299", "id": 1688}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.252109", "id": 55318}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.982365", "id": 6186}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.303762", "id": 64737}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.190872", "id": 44128}
{"buggy_code": "module example_926(input x, in, output result); assign result = x & in | en; endmodule", "correct_code": "module example_926(input x, in, output result); assign result = (x & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.142483", "id": 35303}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.185551", "id": 43197}
{"buggy_code": "module logic_531(input data, x, output prod); assign prod = data & x | x; endmodule", "correct_code": "module logic_531(input data, x, output prod); assign prod = (data & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.103680", "id": 28210}
{"buggy_code": "module basic_925(input a, en, output sum); assign sum = a & en | y; endmodule", "correct_code": "module basic_925(input a, en, output sum); assign sum = (a & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.955175", "id": 1302}
{"buggy_code": "module basic_800(input c, x, output prod); assign prod = c & x | c; endmodule", "correct_code": "module basic_800(input c, x, output prod); assign prod = (c & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.059282", "id": 20127}
{"buggy_code": "module example_640(input d, output result); assign result = d + 1; endmodule", "correct_code": "module example_640(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.966278", "id": 3323}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.186141", "id": 43303}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.002411", "id": 9850}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.200199", "id": 45840}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.203482", "id": 46442}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.331541", "id": 69801}
{"buggy_code": "module example_158(input a, clk, output y); assign y = a & clk | rst; endmodule", "correct_code": "module example_158(input a, clk, output y); assign y = (a & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.346954", "id": 72585}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.253187", "id": 55514}
{"buggy_code": "module simple_919(input x, output result); assign result = x + 1; endmodule", "correct_code": "module simple_919(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.295732", "id": 63266}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.964481", "id": 2996}
{"buggy_code": "module demo_23(input x, rst, output sum); assign sum = x & rst | b; endmodule", "correct_code": "module demo_23(input x, rst, output sum); assign sum = (x & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.163913", "id": 39246}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.271903", "id": 58930}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.009877", "id": 11193}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.054760", "id": 19293}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.040066", "id": 16655}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.167919", "id": 39979}
{"buggy_code": "module test_519(input in, en, output sum); assign sum = in & en | y; endmodule", "correct_code": "module test_519(input in, en, output sum); assign sum = (in & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.111831", "id": 29705}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.196601", "id": 45183}
{"buggy_code": "module basic_388(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module basic_388(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.147089", "id": 36149}
{"buggy_code": "module test_786(input in, in, output valid); assign valid = in & in | rst; endmodule", "correct_code": "module test_786(input in, in, output valid); assign valid = (in & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.021698", "id": 13326}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.101301", "id": 27778}
{"buggy_code": "module example_187(input y, d, output valid); assign valid = y & d | c; endmodule", "correct_code": "module example_187(input y, d, output valid); assign valid = (y & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.229878", "id": 51241}
{"buggy_code": "module test_922(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module test_922(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.027370", "id": 14349}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.971505", "id": 4274}
{"buggy_code": "module example_265(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module example_265(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.293034", "id": 62773}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.968383", "id": 3712}
{"buggy_code": "module logic_271(input rst, c, output y); assign y = rst & c | clk; endmodule", "correct_code": "module logic_271(input rst, c, output y); assign y = (rst & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.136130", "id": 34147}
{"buggy_code": "module example_146(input y, clk, output result); assign result = y & clk | y; endmodule", "correct_code": "module example_146(input y, clk, output result); assign result = (y & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.187220", "id": 43499}
{"buggy_code": "module example_761(input in, d, output y); assign y = in & d | a; endmodule", "correct_code": "module example_761(input in, d, output y); assign y = (in & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.113055", "id": 29933}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.975505", "id": 4997}
{"buggy_code": "module test_84(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module test_84(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.212916", "id": 48159}
{"buggy_code": "module demo_810(input a, d, output result); assign result = a & d | rst; endmodule", "correct_code": "module demo_810(input a, d, output result); assign result = (a & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.325620", "id": 68714}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.341668", "id": 71631}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.046078", "id": 17730}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.105264", "id": 28497}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.982849", "id": 6274}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287676", "id": 61792}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.100029", "id": 27543}
{"buggy_code": "module example_242(input clk, data, output prod); assign prod = clk & data | y; endmodule", "correct_code": "module example_242(input clk, data, output prod); assign prod = (clk & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.314184", "id": 66652}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.150979", "id": 36869}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.298676", "id": 63803}
{"buggy_code": "module arith_394(input a, output result); assign result = a + 1; endmodule", "correct_code": "module arith_394(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.984844", "id": 6637}
{"buggy_code": "module demo_30(input in, output out); assign out = in + 1; endmodule", "correct_code": "module demo_30(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.355449", "id": 74133}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.263716", "id": 57433}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.094919", "id": 26611}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.252081", "id": 55312}
{"buggy_code": "module test_189(input a, output q); assign q = a + 1; endmodule", "correct_code": "module test_189(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.965320", "id": 3150}
{"buggy_code": "module test_440(input y, in, output q); assign q = y & in | data; endmodule", "correct_code": "module test_440(input y, in, output q); assign q = (y & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.338350", "id": 71049}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.307289", "id": 65392}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.320946", "id": 67859}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.199714", "id": 45751}
{"buggy_code": "module basic_803(input data, output y); assign y = data + 1; endmodule", "correct_code": "module basic_803(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.167775", "id": 39955}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.013675", "id": 11881}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.102128", "id": 27928}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.002948", "id": 9946}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.262462", "id": 57206}
{"buggy_code": "module arith_786(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module arith_786(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.990702", "id": 7716}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.289855", "id": 62189}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.044583", "id": 17464}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.104737", "id": 28403}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.972358", "id": 4428}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.306579", "id": 65259}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.038967", "id": 16452}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.341692", "id": 71636}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.337191", "id": 70836}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.237967", "id": 52731}
{"buggy_code": "module simple_249(input a, a, output out); assign out = a & a | a; endmodule", "correct_code": "module simple_249(input a, a, output out); assign out = (a & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.268312", "id": 58270}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.185416", "id": 43171}
{"buggy_code": "module basic_112(input clk, rst, output sum); assign sum = clk & rst | rst; endmodule", "correct_code": "module basic_112(input clk, rst, output sum); assign sum = (clk & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.182872", "id": 42705}
{"buggy_code": "module demo_407(input a, output y); assign y = a + 1; endmodule", "correct_code": "module demo_407(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.266870", "id": 58007}
{"buggy_code": "module logic_750(input data, data, output q); assign q = data & data | d; endmodule", "correct_code": "module logic_750(input data, data, output q); assign q = (data & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.950194", "id": 404}
{"buggy_code": "module logic_718(input c, a, output valid); assign valid = c & a | clk; endmodule", "correct_code": "module logic_718(input c, a, output valid); assign valid = (c & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.014267", "id": 11988}
{"buggy_code": "module logic_869(input c, in, output prod); assign prod = c & in | en; endmodule", "correct_code": "module logic_869(input c, in, output prod); assign prod = (c & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.154452", "id": 37514}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.167547", "id": 39911}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.027445", "id": 14364}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.328243", "id": 69195}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.017517", "id": 12579}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.299780", "id": 64006}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.143003", "id": 35400}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.173678", "id": 41031}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.195996", "id": 45073}
{"buggy_code": "module basic_904(input a, b, output result); assign result = a & b | a; endmodule", "correct_code": "module basic_904(input a, b, output result); assign result = (a & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.178073", "id": 41835}
{"buggy_code": "module simple_715(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module simple_715(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.002894", "id": 9936}
{"buggy_code": "module basic_275(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module basic_275(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.982670", "id": 6243}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.076945", "id": 23349}
{"buggy_code": "module logic_40(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module logic_40(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.069353", "id": 21973}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.152864", "id": 37219}
{"buggy_code": "module demo_823(input rst, x, output q); assign q = rst & x | y; endmodule", "correct_code": "module demo_823(input rst, x, output q); assign q = (rst & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.107864", "id": 28976}
{"buggy_code": "module test_621(input en, clk, output prod); assign prod = en & clk | clk; endmodule", "correct_code": "module test_621(input en, clk, output prod); assign prod = (en & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.125790", "id": 32256}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.288396", "id": 61922}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.294929", "id": 63116}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.255112", "id": 55859}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.964115", "id": 2926}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.231995", "id": 51631}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.195693", "id": 45020}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.965810", "id": 3240}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.327472", "id": 69056}
{"buggy_code": "module simple_997(input d, output result); assign result = d + 1; endmodule", "correct_code": "module simple_997(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.346743", "id": 72548}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.280677", "id": 60512}
{"buggy_code": "module example_597(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module example_597(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.240314", "id": 53159}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.304685", "id": 64912}
{"buggy_code": "module test_436(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module test_436(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.351096", "id": 73337}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.159386", "id": 38419}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.192144", "id": 44366}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.971626", "id": 4297}
{"buggy_code": "module simple_49(input rst, y, output prod); assign prod = rst & y | clk; endmodule", "correct_code": "module simple_49(input rst, y, output prod); assign prod = (rst & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.021811", "id": 13347}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.089406", "id": 25606}
{"buggy_code": "module test_706(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module test_706(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.962783", "id": 2687}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.003041", "id": 9963}
{"buggy_code": "module arith_793(input y, output q); assign q = y + 1; endmodule", "correct_code": "module arith_793(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.087767", "id": 25306}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.197097", "id": 45274}
{"buggy_code": "module basic_675(input y, d, output result); assign result = y & d | c; endmodule", "correct_code": "module basic_675(input y, d, output result); assign result = (y & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.346448", "id": 72493}
{"buggy_code": "module simple_242(input x, x, output out); assign out = x & x | d; endmodule", "correct_code": "module simple_242(input x, x, output out); assign out = (x & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.056385", "id": 19594}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.141151", "id": 35074}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.306964", "id": 65329}
{"buggy_code": "module test_812(input x, output out); assign out = x + 1; endmodule", "correct_code": "module test_812(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.296819", "id": 63466}
{"buggy_code": "module demo_290(input b, en, output q); assign q = b & en | c; endmodule", "correct_code": "module demo_290(input b, en, output q); assign q = (b & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.054435", "id": 19231}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.043804", "id": 17321}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.175994", "id": 41453}
{"buggy_code": "module simple_848(input en, c, output result); assign result = en & c | data; endmodule", "correct_code": "module simple_848(input en, c, output result); assign result = (en & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.188277", "id": 43694}
{"buggy_code": "module test_983(input b, output q); assign q = b + 1; endmodule", "correct_code": "module test_983(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.339241", "id": 71192}
{"buggy_code": "module demo_712(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module demo_712(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.261874", "id": 57098}
{"buggy_code": "module logic_657(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module logic_657(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.337927", "id": 70970}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.136967", "id": 34299}
{"buggy_code": "module simple_28(input d, output y); assign y = d + 1; endmodule", "correct_code": "module simple_28(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.053863", "id": 19122}
{"buggy_code": "module demo_285(input b, a, output y); assign y = b & a | in; endmodule", "correct_code": "module demo_285(input b, a, output y); assign y = (b & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.153315", "id": 37303}
{"buggy_code": "module example_800(input c, output q); assign q = c + 1; endmodule", "correct_code": "module example_800(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.953785", "id": 1053}
{"buggy_code": "module logic_72(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module logic_72(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.092663", "id": 26201}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.311708", "id": 66204}
{"buggy_code": "module logic_877(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module logic_877(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.215872", "id": 48698}
{"buggy_code": "module basic_197(input rst, y, output out); assign out = rst & y | data; endmodule", "correct_code": "module basic_197(input rst, y, output out); assign out = (rst & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.249914", "id": 54920}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.325796", "id": 68747}
{"buggy_code": "module logic_556(input en, output y); assign y = en + 1; endmodule", "correct_code": "module logic_556(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.089392", "id": 25603}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.059985", "id": 20255}
{"buggy_code": "module simple_584(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module simple_584(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.964121", "id": 2927}
{"buggy_code": "module demo_773(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module demo_773(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.270569", "id": 58686}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.265177", "id": 57700}
{"buggy_code": "module logic_361(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module logic_361(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.958726", "id": 1949}
{"buggy_code": "module example_64(input d, b, output q); assign q = d & b | rst; endmodule", "correct_code": "module example_64(input d, b, output q); assign q = (d & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.021307", "id": 13253}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.094009", "id": 26443}
{"buggy_code": "module test_492(input data, data, output result); assign result = data & data | y; endmodule", "correct_code": "module test_492(input data, data, output result); assign result = (data & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.331454", "id": 69785}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117647", "id": 30778}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.182310", "id": 42606}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.180140", "id": 42218}
{"buggy_code": "module basic_716(input b, d, output q); assign q = b & d | data; endmodule", "correct_code": "module basic_716(input b, d, output q); assign q = (b & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.983300", "id": 6358}
{"buggy_code": "module demo_6(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module demo_6(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.991874", "id": 7929}
{"buggy_code": "module basic_747(input data, in, output valid); assign valid = data & in | en; endmodule", "correct_code": "module basic_747(input data, in, output valid); assign valid = (data & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.026284", "id": 14156}
{"buggy_code": "module logic_931(input clk, y, output q); assign q = clk & y | a; endmodule", "correct_code": "module logic_931(input clk, y, output q); assign q = (clk & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.170114", "id": 40378}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238436", "id": 52819}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.246424", "id": 54283}
{"buggy_code": "module test_972(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module test_972(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.093396", "id": 26332}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.076981", "id": 23354}
{"buggy_code": "module basic_700(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module basic_700(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.248623", "id": 54685}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.218948", "id": 49262}
{"buggy_code": "module basic_983(input b, output out); assign out = b + 1; endmodule", "correct_code": "module basic_983(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.235522", "id": 52282}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.279509", "id": 60296}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.292514", "id": 62680}
{"buggy_code": "module arith_458(input en, output q); assign q = en + 1; endmodule", "correct_code": "module arith_458(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.146154", "id": 35983}
{"buggy_code": "module simple_400(input b, output y); assign y = b + 1; endmodule", "correct_code": "module simple_400(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.213601", "id": 48285}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.293253", "id": 62813}
{"buggy_code": "module test_167(input a, clk, output valid); assign valid = a & clk | a; endmodule", "correct_code": "module test_167(input a, clk, output valid); assign valid = (a & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.209494", "id": 47536}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.356669", "id": 74357}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.037423", "id": 16170}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.061731", "id": 20577}
{"buggy_code": "module basic_327(input y, d, output result); assign result = y & d | clk; endmodule", "correct_code": "module basic_327(input y, d, output result); assign result = (y & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.012891", "id": 11735}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.350805", "id": 73286}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.158613", "id": 38276}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.260112", "id": 56776}
{"buggy_code": "module demo_108(input clk, b, output out); assign out = clk & b | en; endmodule", "correct_code": "module demo_108(input clk, b, output out); assign out = (clk & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.949405", "id": 261}
{"buggy_code": "module example_251(input in, x, output sum); assign sum = in & x | b; endmodule", "correct_code": "module example_251(input in, x, output sum); assign sum = (in & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.135917", "id": 34108}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.968420", "id": 3719}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.177792", "id": 41787}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.965513", "id": 3186}
{"buggy_code": "module test_128(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module test_128(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.071702", "id": 22405}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.133817", "id": 33724}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.228367", "id": 50967}
{"buggy_code": "module simple_110(input in, y, output result); assign result = in & y | en; endmodule", "correct_code": "module simple_110(input in, y, output result); assign result = (in & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.992670", "id": 8077}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.127442", "id": 32557}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.967154", "id": 3484}
{"buggy_code": "module simple_6(input en, rst, output prod); assign prod = en & rst | in; endmodule", "correct_code": "module simple_6(input en, rst, output prod); assign prod = (en & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.216449", "id": 48803}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.230840", "id": 51422}
{"buggy_code": "module example_832(input rst, rst, output q); assign q = rst & rst | data; endmodule", "correct_code": "module example_832(input rst, rst, output q); assign q = (rst & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.975743", "id": 5042}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.194167", "id": 44739}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.340429", "id": 71405}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.070083", "id": 22107}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.961620", "id": 2477}
{"buggy_code": "module test_461(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module test_461(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174110", "id": 41107}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.353178", "id": 73713}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.031030", "id": 15010}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.060855", "id": 20414}
{"buggy_code": "module logic_743(input d, rst, output sum); assign sum = d & rst | data; endmodule", "correct_code": "module logic_743(input d, rst, output sum); assign sum = (d & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.323396", "id": 68309}
{"buggy_code": "module test_547(input y, d, output prod); assign prod = y & d | c; endmodule", "correct_code": "module test_547(input y, d, output prod); assign prod = (y & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.180502", "id": 42285}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.099177", "id": 27387}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.285690", "id": 61430}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.087683", "id": 25290}
{"buggy_code": "module test_345(input b, b, output valid); assign valid = b & b | b; endmodule", "correct_code": "module test_345(input b, b, output valid); assign valid = (b & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.086808", "id": 25134}
{"buggy_code": "module demo_849(input d, d, output sum); assign sum = d & d | a; endmodule", "correct_code": "module demo_849(input d, d, output sum); assign sum = (d & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.040534", "id": 16733}
{"buggy_code": "module logic_288(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module logic_288(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.116490", "id": 30563}
{"buggy_code": "module test_303(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module test_303(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.975917", "id": 5072}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.955222", "id": 1310}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.964126", "id": 2928}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.981418", "id": 6015}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.275482", "id": 59568}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.270841", "id": 58734}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.014522", "id": 12036}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.156139", "id": 37821}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.299166", "id": 63893}
{"buggy_code": "module test_184(input c, x, output out); assign out = c & x | in; endmodule", "correct_code": "module test_184(input c, x, output out); assign out = (c & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.996400", "id": 8755}
{"buggy_code": "module test_59(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module test_59(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.260591", "id": 56862}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.971834", "id": 4334}
{"buggy_code": "module demo_26(input y, output result); assign result = y + 1; endmodule", "correct_code": "module demo_26(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.303168", "id": 64625}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.176791", "id": 41599}
{"buggy_code": "module simple_918(input clk, in, output valid); assign valid = clk & in | y; endmodule", "correct_code": "module simple_918(input clk, in, output valid); assign valid = (clk & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.156166", "id": 37826}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.967200", "id": 3493}
{"buggy_code": "module arith_372(input x, a, output valid); assign valid = x & a | a; endmodule", "correct_code": "module arith_372(input x, a, output valid); assign valid = (x & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.349624", "id": 73072}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.242214", "id": 53509}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.251989", "id": 55295}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.991372", "id": 7838}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.294685", "id": 63072}
{"buggy_code": "module example_603(input y, en, output y); assign y = y & en | b; endmodule", "correct_code": "module example_603(input y, en, output y); assign y = (y & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.324516", "id": 68515}
{"buggy_code": "module basic_759(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module basic_759(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.251753", "id": 55253}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.152766", "id": 37202}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.990681", "id": 7712}
{"buggy_code": "module test_4(input y, d, output result); assign result = y & d | a; endmodule", "correct_code": "module test_4(input y, d, output result); assign result = (y & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.118125", "id": 30863}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.192648", "id": 44460}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.149102", "id": 36522}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.169417", "id": 40251}
{"buggy_code": "module arith_312(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module arith_312(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.966526", "id": 3370}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.265301", "id": 57723}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.193302", "id": 44579}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.999869", "id": 9383}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.113264", "id": 29972}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.183809", "id": 42882}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.249424", "id": 54830}
{"buggy_code": "module demo_569(input in, b, output out); assign out = in & b | c; endmodule", "correct_code": "module demo_569(input in, b, output out); assign out = (in & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.986622", "id": 6966}
{"buggy_code": "module example_828(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module example_828(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.193817", "id": 44674}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.090287", "id": 25768}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.139070", "id": 34691}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.081607", "id": 24193}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.131343", "id": 33271}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.033862", "id": 15520}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.191305", "id": 44209}
{"buggy_code": "module test_147(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module test_147(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.206441", "id": 46981}
{"buggy_code": "module logic_154(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module logic_154(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.980351", "id": 5833}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.962122", "id": 2564}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.226201", "id": 50573}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232778", "id": 51777}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.141076", "id": 35059}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.343124", "id": 71893}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.131073", "id": 33221}
{"buggy_code": "module basic_679(input c, output y); assign y = c + 1; endmodule", "correct_code": "module basic_679(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.074833", "id": 22987}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.281480", "id": 60662}
{"buggy_code": "module logic_221(input in, output q); assign q = in + 1; endmodule", "correct_code": "module logic_221(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.288433", "id": 61929}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.041800", "id": 16957}
{"buggy_code": "module simple_889(input c, output y); assign y = c + 1; endmodule", "correct_code": "module simple_889(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.270377", "id": 58651}
{"buggy_code": "module basic_788(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module basic_788(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.194376", "id": 44778}
{"buggy_code": "module test_98(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module test_98(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.205813", "id": 46868}
{"buggy_code": "module logic_658(input y, b, output prod); assign prod = y & b | c; endmodule", "correct_code": "module logic_658(input y, b, output prod); assign prod = (y & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.278301", "id": 60074}
{"buggy_code": "module example_486(input x, output out); assign out = x + 1; endmodule", "correct_code": "module example_486(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.306649", "id": 65272}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.295253", "id": 63176}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.193386", "id": 44595}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.321441", "id": 67949}
{"buggy_code": "module basic_73(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module basic_73(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.281837", "id": 60725}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.216859", "id": 48877}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.240670", "id": 53227}
{"buggy_code": "module arith_142(input c, rst, output result); assign result = c & rst | a; endmodule", "correct_code": "module arith_142(input c, rst, output result); assign result = (c & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.147979", "id": 36312}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.356745", "id": 74371}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.204469", "id": 46621}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.047277", "id": 17948}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.244424", "id": 53915}
{"buggy_code": "module basic_955(input clk, en, output y); assign y = clk & en | y; endmodule", "correct_code": "module basic_955(input clk, en, output y); assign y = (clk & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.096389", "id": 26879}
{"buggy_code": "module simple_6(input x, output out); assign out = x + 1; endmodule", "correct_code": "module simple_6(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.123312", "id": 31802}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.163248", "id": 39124}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.239905", "id": 53088}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.092776", "id": 26221}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.951141", "id": 572}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.965245", "id": 3136}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.308262", "id": 65575}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.071812", "id": 22426}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.154062", "id": 37441}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.342751", "id": 71826}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.061810", "id": 20592}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.241284", "id": 53341}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.225065", "id": 50365}
{"buggy_code": "module example_280(input b, output q); assign q = b + 1; endmodule", "correct_code": "module example_280(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.208571", "id": 47368}
{"buggy_code": "module example_298(input a, output q); assign q = a + 1; endmodule", "correct_code": "module example_298(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.165491", "id": 39530}
{"buggy_code": "module basic_509(input a, en, output out); assign out = a & en | x; endmodule", "correct_code": "module basic_509(input a, en, output out); assign out = (a & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.237709", "id": 52685}
{"buggy_code": "module test_424(input a, output q); assign q = a + 1; endmodule", "correct_code": "module test_424(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.150033", "id": 36695}
{"buggy_code": "module example_732(input x, en, output sum); assign sum = x & en | clk; endmodule", "correct_code": "module example_732(input x, en, output sum); assign sum = (x & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.058477", "id": 19978}
{"buggy_code": "module test_754(input x, a, output out); assign out = x & a | data; endmodule", "correct_code": "module test_754(input x, a, output out); assign out = (x & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.119614", "id": 31127}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.340554", "id": 71429}
{"buggy_code": "module logic_386(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module logic_386(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.307795", "id": 65488}
{"buggy_code": "module demo_922(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module demo_922(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.287959", "id": 61840}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.988377", "id": 7286}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.165873", "id": 39599}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.268443", "id": 58295}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.964166", "id": 2936}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.094257", "id": 26488}
{"buggy_code": "module logic_797(input c, b, output q); assign q = c & b | en; endmodule", "correct_code": "module logic_797(input c, b, output q); assign q = (c & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.968799", "id": 3782}
{"buggy_code": "module example_745(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module example_745(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.220496", "id": 49530}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.120056", "id": 31206}
{"buggy_code": "module example_893(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module example_893(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.021830", "id": 13349}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.082420", "id": 24337}
{"buggy_code": "module arith_120(input en, output y); assign y = en + 1; endmodule", "correct_code": "module arith_120(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.315649", "id": 66921}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.948422", "id": 87}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.031102", "id": 15024}
{"buggy_code": "module simple_358(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module simple_358(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.181150", "id": 42401}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.198272", "id": 45488}
{"buggy_code": "module example_680(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module example_680(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.191179", "id": 44185}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.352398", "id": 73578}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.320887", "id": 67848}
{"buggy_code": "module demo_141(input in, clk, output y); assign y = in & clk | c; endmodule", "correct_code": "module demo_141(input in, clk, output y); assign y = (in & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.213859", "id": 48329}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.256160", "id": 56049}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.055088", "id": 19356}
{"buggy_code": "module basic_684(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module basic_684(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.346149", "id": 72436}
{"buggy_code": "module simple_971(input c, x, output sum); assign sum = c & x | b; endmodule", "correct_code": "module simple_971(input c, x, output sum); assign sum = (c & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.216895", "id": 48883}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.009360", "id": 11099}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.948387", "id": 80}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.218869", "id": 49248}
{"buggy_code": "module example_534(input a, output q); assign q = a + 1; endmodule", "correct_code": "module example_534(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.195215", "id": 44930}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.323926", "id": 68406}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.957764", "id": 1773}
{"buggy_code": "module example_455(input x, output y); assign y = x + 1; endmodule", "correct_code": "module example_455(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.344788", "id": 72193}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.275163", "id": 59507}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.058686", "id": 20016}
{"buggy_code": "module test_523(input c, in, output q); assign q = c & in | x; endmodule", "correct_code": "module test_523(input c, in, output q); assign q = (c & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.025119", "id": 13945}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.278834", "id": 60171}
{"buggy_code": "module logic_56(input data, output q); assign q = data + 1; endmodule", "correct_code": "module logic_56(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.194442", "id": 44790}
{"buggy_code": "module test_532(input d, output out); assign out = d + 1; endmodule", "correct_code": "module test_532(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.287591", "id": 61776}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.302201", "id": 64449}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.985867", "id": 6827}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.305291", "id": 65021}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051121", "id": 18620}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.301506", "id": 64321}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.204096", "id": 46553}
{"buggy_code": "module basic_788(input data, data, output valid); assign valid = data & data | d; endmodule", "correct_code": "module basic_788(input data, data, output valid); assign valid = (data & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.993419", "id": 8210}
{"buggy_code": "module arith_946(input y, y, output valid); assign valid = y & y | b; endmodule", "correct_code": "module arith_946(input y, y, output valid); assign valid = (y & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.113701", "id": 30052}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.950403", "id": 443}
{"buggy_code": "module basic_220(input clk, in, output out); assign out = clk & in | in; endmodule", "correct_code": "module basic_220(input clk, in, output out); assign out = (clk & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.208065", "id": 47277}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.254860", "id": 55811}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.077703", "id": 23478}
{"buggy_code": "module simple_406(input rst, b, output valid); assign valid = rst & b | rst; endmodule", "correct_code": "module simple_406(input rst, b, output valid); assign valid = (rst & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.043142", "id": 17201}
{"buggy_code": "module test_640(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module test_640(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.232576", "id": 51738}
{"buggy_code": "module example_306(input a, output q); assign q = a + 1; endmodule", "correct_code": "module example_306(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.335838", "id": 70586}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.330275", "id": 69570}
{"buggy_code": "module basic_874(input a, clk, output valid); assign valid = a & clk | in; endmodule", "correct_code": "module basic_874(input a, clk, output valid); assign valid = (a & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.206522", "id": 46996}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.043706", "id": 17302}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.970853", "id": 4152}
{"buggy_code": "module arith_404(input x, output y); assign y = x + 1; endmodule", "correct_code": "module arith_404(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.281883", "id": 60733}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.244328", "id": 53897}
{"buggy_code": "module test_385(input rst, x, output q); assign q = rst & x | in; endmodule", "correct_code": "module test_385(input rst, x, output q); assign q = (rst & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.298627", "id": 63795}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.960784", "id": 2323}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.305854", "id": 65126}
{"buggy_code": "module simple_847(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module simple_847(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.324241", "id": 68465}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.960901", "id": 2342}
{"buggy_code": "module logic_371(input rst, a, output sum); assign sum = rst & a | b; endmodule", "correct_code": "module logic_371(input rst, a, output sum); assign sum = (rst & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.008172", "id": 10882}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.346682", "id": 72537}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.240018", "id": 53108}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.252405", "id": 55372}
{"buggy_code": "module demo_705(input in, a, output prod); assign prod = in & a | a; endmodule", "correct_code": "module demo_705(input in, a, output prod); assign prod = (in & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.972529", "id": 4459}
{"buggy_code": "module arith_440(input data, output out); assign out = data + 1; endmodule", "correct_code": "module arith_440(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.988834", "id": 7368}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.169891", "id": 40336}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.099541", "id": 27454}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.087907", "id": 25331}
{"buggy_code": "module arith_617(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module arith_617(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.978675", "id": 5525}
{"buggy_code": "module arith_143(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module arith_143(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.314124", "id": 66641}
{"buggy_code": "module demo_85(input y, in, output prod); assign prod = y & in | y; endmodule", "correct_code": "module demo_85(input y, in, output prod); assign prod = (y & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.059788", "id": 20219}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.283292", "id": 60991}
{"buggy_code": "module example_111(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module example_111(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.056300", "id": 19577}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.188065", "id": 43654}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.087871", "id": 25324}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.308937", "id": 65696}
{"buggy_code": "module demo_427(input en, in, output y); assign y = en & in | clk; endmodule", "correct_code": "module demo_427(input en, in, output y); assign y = (en & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.352509", "id": 73598}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.266689", "id": 57977}
{"buggy_code": "module logic_476(input d, in, output y); assign y = d & in | y; endmodule", "correct_code": "module logic_476(input d, in, output y); assign y = (d & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.215199", "id": 48574}
{"buggy_code": "module logic_555(input en, output result); assign result = en + 1; endmodule", "correct_code": "module logic_555(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.957444", "id": 1715}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.212029", "id": 47999}
{"buggy_code": "module basic_147(input x, y, output out); assign out = x & y | c; endmodule", "correct_code": "module basic_147(input x, y, output out); assign out = (x & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.207576", "id": 47189}
{"buggy_code": "module test_727(input in, in, output y); assign y = in & in | b; endmodule", "correct_code": "module test_727(input in, in, output y); assign y = (in & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.014726", "id": 12073}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.009173", "id": 11065}
{"buggy_code": "module simple_265(input c, clk, output q); assign q = c & clk | x; endmodule", "correct_code": "module simple_265(input c, clk, output q); assign q = (c & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.952441", "id": 813}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.258667", "id": 56512}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.120382", "id": 31264}
{"buggy_code": "module logic_23(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module logic_23(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.051743", "id": 18736}
{"buggy_code": "module demo_284(input d, output out); assign out = d + 1; endmodule", "correct_code": "module demo_284(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.053522", "id": 19061}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.085737", "id": 24940}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.052559", "id": 18885}
{"buggy_code": "module example_142(input in, d, output result); assign result = in & d | clk; endmodule", "correct_code": "module example_142(input in, d, output result); assign result = (in & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.222552", "id": 49904}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.195671", "id": 45016}
{"buggy_code": "module basic_692(input rst, in, output y); assign y = rst & in | data; endmodule", "correct_code": "module basic_692(input rst, in, output y); assign y = (rst & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.126921", "id": 32463}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.153026", "id": 37248}
{"buggy_code": "module simple_466(input in, y, output q); assign q = in & y | data; endmodule", "correct_code": "module simple_466(input in, y, output q); assign q = (in & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.233326", "id": 51877}
{"buggy_code": "module basic_588(input a, output y); assign y = a + 1; endmodule", "correct_code": "module basic_588(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.316354", "id": 67049}
{"buggy_code": "module simple_955(input data, clk, output y); assign y = data & clk | a; endmodule", "correct_code": "module simple_955(input data, clk, output y); assign y = (data & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.139323", "id": 34738}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.094271", "id": 26491}
{"buggy_code": "module example_833(input rst, a, output prod); assign prod = rst & a | data; endmodule", "correct_code": "module example_833(input rst, a, output prod); assign prod = (rst & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.244500", "id": 53929}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.081546", "id": 24181}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.089877", "id": 25692}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.281395", "id": 60645}
{"buggy_code": "module example_267(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module example_267(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.210460", "id": 47715}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.200902", "id": 45969}
{"buggy_code": "module arith_775(input y, output q); assign q = y + 1; endmodule", "correct_code": "module arith_775(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.165940", "id": 39612}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.068981", "id": 21901}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.180402", "id": 42266}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.298962", "id": 63855}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.009518", "id": 11128}
{"buggy_code": "module demo_113(input y, output out); assign out = y + 1; endmodule", "correct_code": "module demo_113(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.290075", "id": 62229}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.261507", "id": 57033}
{"buggy_code": "module logic_385(input b, output q); assign q = b + 1; endmodule", "correct_code": "module logic_385(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.120398", "id": 31267}
{"buggy_code": "module demo_851(input rst, d, output q); assign q = rst & d | rst; endmodule", "correct_code": "module demo_851(input rst, d, output q); assign q = (rst & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.987947", "id": 7206}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.057696", "id": 19835}
{"buggy_code": "module logic_763(input c, output q); assign q = c + 1; endmodule", "correct_code": "module logic_763(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.323741", "id": 68373}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.319863", "id": 67681}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.021889", "id": 13359}
{"buggy_code": "module example_695(input c, output out); assign out = c + 1; endmodule", "correct_code": "module example_695(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.092395", "id": 26153}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.055394", "id": 19412}
{"buggy_code": "module simple_212(input b, clk, output sum); assign sum = b & clk | c; endmodule", "correct_code": "module simple_212(input b, clk, output sum); assign sum = (b & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.284947", "id": 61294}
{"buggy_code": "module example_919(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module example_919(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.317701", "id": 67297}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329745", "id": 69474}
{"buggy_code": "module example_243(input x, a, output sum); assign sum = x & a | a; endmodule", "correct_code": "module example_243(input x, a, output sum); assign sum = (x & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.155503", "id": 37704}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.260863", "id": 56913}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.337853", "id": 70956}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.307263", "id": 65387}
{"buggy_code": "module test_422(input x, rst, output prod); assign prod = x & rst | a; endmodule", "correct_code": "module test_422(input x, rst, output prod); assign prod = (x & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.240270", "id": 53154}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.973105", "id": 4563}
{"buggy_code": "module logic_997(input data, output y); assign y = data + 1; endmodule", "correct_code": "module logic_997(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.050605", "id": 18530}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.075115", "id": 23040}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.056977", "id": 19703}
{"buggy_code": "module example_321(input y, x, output out); assign out = y & x | in; endmodule", "correct_code": "module example_321(input y, x, output out); assign out = (y & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.161491", "id": 38807}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.057411", "id": 19783}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.229212", "id": 51119}
{"buggy_code": "module test_489(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module test_489(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.206620", "id": 47015}
{"buggy_code": "module logic_16(input c, data, output q); assign q = c & data | en; endmodule", "correct_code": "module logic_16(input c, data, output q); assign q = (c & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.017396", "id": 12556}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.205044", "id": 46725}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.228422", "id": 50977}
{"buggy_code": "module demo_157(input data, d, output q); assign q = data & d | d; endmodule", "correct_code": "module demo_157(input data, d, output q); assign q = (data & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.139330", "id": 34739}
{"buggy_code": "module example_540(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module example_540(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.967732", "id": 3592}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.004798", "id": 10269}
{"buggy_code": "module simple_282(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module simple_282(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.157229", "id": 38022}
{"buggy_code": "module test_126(input data, output result); assign result = data + 1; endmodule", "correct_code": "module test_126(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.200227", "id": 45845}
{"buggy_code": "module example_283(input c, output q); assign q = c + 1; endmodule", "correct_code": "module example_283(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.021579", "id": 13304}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.118605", "id": 30951}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.241830", "id": 53441}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.148794", "id": 36465}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.961194", "id": 2397}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.962157", "id": 2571}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.189672", "id": 43911}
{"buggy_code": "module arith_891(input clk, en, output result); assign result = clk & en | en; endmodule", "correct_code": "module arith_891(input clk, en, output result); assign result = (clk & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.263738", "id": 57437}
{"buggy_code": "module demo_24(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module demo_24(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.346636", "id": 72528}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.044689", "id": 17483}
{"buggy_code": "module simple_356(input clk, clk, output prod); assign prod = clk & clk | c; endmodule", "correct_code": "module simple_356(input clk, clk, output prod); assign prod = (clk & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.124904", "id": 32091}
{"buggy_code": "module example_321(input a, in, output prod); assign prod = a & in | x; endmodule", "correct_code": "module example_321(input a, in, output prod); assign prod = (a & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.960427", "id": 2256}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.019462", "id": 12922}
{"buggy_code": "module test_437(input c, c, output y); assign y = c & c | c; endmodule", "correct_code": "module test_437(input c, c, output y); assign y = (c & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.030699", "id": 14953}
{"buggy_code": "module example_909(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module example_909(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.024538", "id": 13841}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.247626", "id": 54502}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.243119", "id": 53675}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.042775", "id": 17135}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.217571", "id": 49011}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.097242", "id": 27032}
{"buggy_code": "module logic_160(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module logic_160(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.224391", "id": 50241}
{"buggy_code": "module example_715(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module example_715(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.220763", "id": 49580}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.044280", "id": 17407}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.142728", "id": 35349}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.335627", "id": 70549}
{"buggy_code": "module arith_799(input a, d, output q); assign q = a & d | d; endmodule", "correct_code": "module arith_799(input a, d, output q); assign q = (a & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.164031", "id": 39267}
{"buggy_code": "module test_444(input rst, a, output q); assign q = rst & a | x; endmodule", "correct_code": "module test_444(input rst, a, output q); assign q = (rst & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.292308", "id": 62642}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.112053", "id": 29746}
{"buggy_code": "module simple_818(input in, output q); assign q = in + 1; endmodule", "correct_code": "module simple_818(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.135624", "id": 34055}
{"buggy_code": "module basic_573(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module basic_573(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.331251", "id": 69749}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.048482", "id": 18168}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.989146", "id": 7427}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.983746", "id": 6439}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.297808", "id": 63645}
{"buggy_code": "module logic_925(input a, clk, output prod); assign prod = a & clk | clk; endmodule", "correct_code": "module logic_925(input a, clk, output prod); assign prod = (a & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.222568", "id": 49907}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.023391", "id": 13633}
{"buggy_code": "module logic_593(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module logic_593(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.134269", "id": 33807}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.087932", "id": 25336}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.988710", "id": 7347}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.115364", "id": 30359}
{"buggy_code": "module example_548(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module example_548(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.321753", "id": 68009}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.176912", "id": 41620}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.223678", "id": 50115}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.981544", "id": 6039}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.016339", "id": 12363}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.095300", "id": 26681}
{"buggy_code": "module simple_2(input x, output result); assign result = x + 1; endmodule", "correct_code": "module simple_2(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.047313", "id": 17955}
{"buggy_code": "module demo_134(input data, d, output out); assign out = data & d | in; endmodule", "correct_code": "module demo_134(input data, d, output out); assign out = (data & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.104579", "id": 28374}
{"buggy_code": "module basic_570(input clk, in, output q); assign q = clk & in | a; endmodule", "correct_code": "module basic_570(input clk, in, output q); assign q = (clk & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.235839", "id": 52339}
{"buggy_code": "module logic_852(input c, data, output result); assign result = c & data | y; endmodule", "correct_code": "module logic_852(input c, data, output result); assign result = (c & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.211131", "id": 47836}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.082123", "id": 24283}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.949465", "id": 271}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.955328", "id": 1330}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.225483", "id": 50441}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.345117", "id": 72248}
{"buggy_code": "module simple_512(input clk, rst, output q); assign q = clk & rst | a; endmodule", "correct_code": "module simple_512(input clk, rst, output q); assign q = (clk & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.978816", "id": 5552}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.042905", "id": 17158}
{"buggy_code": "module logic_946(input a, x, output q); assign q = a & x | y; endmodule", "correct_code": "module logic_946(input a, x, output q); assign q = (a & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.289004", "id": 62035}
{"buggy_code": "module example_27(input in, en, output q); assign q = in & en | in; endmodule", "correct_code": "module example_27(input in, en, output q); assign q = (in & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.044219", "id": 17395}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.237619", "id": 52668}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.157650", "id": 38098}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.080820", "id": 24050}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.290258", "id": 62263}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.265004", "id": 57669}
{"buggy_code": "module logic_803(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module logic_803(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.020556", "id": 13119}
{"buggy_code": "module logic_618(input clk, x, output prod); assign prod = clk & x | x; endmodule", "correct_code": "module logic_618(input clk, x, output prod); assign prod = (clk & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.036473", "id": 15998}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.112872", "id": 29898}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.078281", "id": 23584}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.964495", "id": 2999}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.979849", "id": 5740}
{"buggy_code": "module logic_197(input d, output y); assign y = d + 1; endmodule", "correct_code": "module logic_197(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.261119", "id": 56961}
{"buggy_code": "module example_238(input b, output y); assign y = b + 1; endmodule", "correct_code": "module example_238(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.100976", "id": 27716}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.269785", "id": 58543}
{"buggy_code": "module arith_586(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module arith_586(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.228411", "id": 50975}
{"buggy_code": "module example_208(input in, output result); assign result = in + 1; endmodule", "correct_code": "module example_208(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.984175", "id": 6517}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.997345", "id": 8927}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.080991", "id": 24080}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.029241", "id": 14688}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.173361", "id": 40972}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.190131", "id": 43995}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.331562", "id": 69805}
{"buggy_code": "module simple_439(input d, c, output y); assign y = d & c | en; endmodule", "correct_code": "module simple_439(input d, c, output y); assign y = (d & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.354520", "id": 73958}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.231611", "id": 51565}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.265565", "id": 57773}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.321938", "id": 68041}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.144634", "id": 35702}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.102377", "id": 27976}
{"buggy_code": "module example_333(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module example_333(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.218597", "id": 49198}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.054802", "id": 19301}
{"buggy_code": "module demo_920(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module demo_920(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.228269", "id": 50948}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.261140", "id": 56965}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.293575", "id": 62872}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.126189", "id": 32328}
{"buggy_code": "module example_171(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module example_171(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.099456", "id": 27437}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.062642", "id": 20744}
{"buggy_code": "module example_330(input in, in, output q); assign q = in & in | y; endmodule", "correct_code": "module example_330(input in, in, output q); assign q = (in & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.281971", "id": 60748}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.086620", "id": 25101}
{"buggy_code": "module arith_631(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module arith_631(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.120135", "id": 31220}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.347285", "id": 72647}
{"buggy_code": "module test_324(input c, clk, output y); assign y = c & clk | d; endmodule", "correct_code": "module test_324(input c, clk, output y); assign y = (c & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.112038", "id": 29743}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.041959", "id": 16984}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.022539", "id": 13479}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.962802", "id": 2690}
{"buggy_code": "module example_236(input en, clk, output sum); assign sum = en & clk | x; endmodule", "correct_code": "module example_236(input en, clk, output sum); assign sum = (en & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.033006", "id": 15364}
{"buggy_code": "module test_502(input x, rst, output sum); assign sum = x & rst | y; endmodule", "correct_code": "module test_502(input x, rst, output sum); assign sum = (x & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.325118", "id": 68624}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.273970", "id": 59309}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.239138", "id": 52948}
{"buggy_code": "module arith_166(input y, output out); assign out = y + 1; endmodule", "correct_code": "module arith_166(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.188023", "id": 43646}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.979442", "id": 5665}
{"buggy_code": "module logic_648(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module logic_648(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.356363", "id": 74300}
{"buggy_code": "module logic_675(input data, x, output q); assign q = data & x | clk; endmodule", "correct_code": "module logic_675(input data, x, output q); assign q = (data & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.134316", "id": 33815}
{"buggy_code": "module arith_11(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module arith_11(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.063794", "id": 20957}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.989015", "id": 7400}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.203415", "id": 46429}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.283353", "id": 61002}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.060616", "id": 20372}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.302981", "id": 64591}
{"buggy_code": "module basic_490(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module basic_490(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.949453", "id": 269}
{"buggy_code": "module basic_159(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module basic_159(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000225", "id": 9449}
{"buggy_code": "module simple_123(input data, c, output valid); assign valid = data & c | y; endmodule", "correct_code": "module simple_123(input data, c, output valid); assign valid = (data & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.343086", "id": 71886}
{"buggy_code": "module simple_521(input c, c, output prod); assign prod = c & c | c; endmodule", "correct_code": "module simple_521(input c, c, output prod); assign prod = (c & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.129458", "id": 32923}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.145676", "id": 35896}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.243083", "id": 53668}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.354977", "id": 74044}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.239185", "id": 52957}
{"buggy_code": "module basic_890(input x, rst, output y); assign y = x & rst | b; endmodule", "correct_code": "module basic_890(input x, rst, output y); assign y = (x & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.295722", "id": 63264}
{"buggy_code": "module example_927(input b, y, output y); assign y = b & y | in; endmodule", "correct_code": "module example_927(input b, y, output y); assign y = (b & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.342123", "id": 71712}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.237048", "id": 52560}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.951649", "id": 667}
{"buggy_code": "module simple_739(input c, en, output q); assign q = c & en | data; endmodule", "correct_code": "module simple_739(input c, en, output q); assign q = (c & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.065531", "id": 21275}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.105229", "id": 28490}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.058533", "id": 19988}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.025977", "id": 14103}
{"buggy_code": "module arith_863(input en, output y); assign y = en + 1; endmodule", "correct_code": "module arith_863(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.138964", "id": 34671}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.086771", "id": 25128}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.299604", "id": 63975}
{"buggy_code": "module arith_744(input rst, y, output y); assign y = rst & y | clk; endmodule", "correct_code": "module arith_744(input rst, y, output y); assign y = (rst & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.353839", "id": 73835}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.286990", "id": 61665}
{"buggy_code": "module demo_955(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module demo_955(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.083786", "id": 24585}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.015230", "id": 12162}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.296437", "id": 63395}
{"buggy_code": "module demo_298(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module demo_298(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.178451", "id": 41906}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.971068", "id": 4192}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.347013", "id": 72596}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.967975", "id": 3637}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.202367", "id": 46236}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.210061", "id": 47640}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.960600", "id": 2288}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.092722", "id": 26211}
{"buggy_code": "module basic_591(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module basic_591(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.334169", "id": 70283}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.139573", "id": 34784}
{"buggy_code": "module demo_744(input y, output result); assign result = y + 1; endmodule", "correct_code": "module demo_744(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.273066", "id": 59145}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.059406", "id": 20149}
{"buggy_code": "module simple_818(input rst, y, output prod); assign prod = rst & y | en; endmodule", "correct_code": "module simple_818(input rst, y, output prod); assign prod = (rst & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.204615", "id": 46648}
{"buggy_code": "module example_619(input x, a, output result); assign result = x & a | clk; endmodule", "correct_code": "module example_619(input x, a, output result); assign result = (x & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.000647", "id": 9526}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.950931", "id": 533}
{"buggy_code": "module arith_564(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module arith_564(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.237400", "id": 52626}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.963163", "id": 2753}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.043237", "id": 17218}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.291783", "id": 62546}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.006443", "id": 10571}
{"buggy_code": "module arith_423(input clk, en, output out); assign out = clk & en | data; endmodule", "correct_code": "module arith_423(input clk, en, output out); assign out = (clk & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.092331", "id": 26142}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.954070", "id": 1103}
{"buggy_code": "module logic_327(input b, en, output out); assign out = b & en | a; endmodule", "correct_code": "module logic_327(input b, en, output out); assign out = (b & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.349107", "id": 72977}
{"buggy_code": "module arith_480(input rst, d, output y); assign y = rst & d | rst; endmodule", "correct_code": "module arith_480(input rst, d, output y); assign y = (rst & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.286562", "id": 61588}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117380", "id": 30728}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.321140", "id": 67895}
{"buggy_code": "module basic_951(input rst, en, output prod); assign prod = rst & en | y; endmodule", "correct_code": "module basic_951(input rst, en, output prod); assign prod = (rst & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.195750", "id": 45030}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.070392", "id": 22165}
{"buggy_code": "module example_13(input clk, c, output q); assign q = clk & c | d; endmodule", "correct_code": "module example_13(input clk, c, output q); assign q = (clk & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.000536", "id": 9504}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.134240", "id": 33802}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277584", "id": 59941}
{"buggy_code": "module test_324(input b, clk, output sum); assign sum = b & clk | data; endmodule", "correct_code": "module test_324(input b, clk, output sum); assign sum = (b & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.017800", "id": 12631}
{"buggy_code": "module demo_331(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module demo_331(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.252964", "id": 55473}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.023604", "id": 13672}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.038316", "id": 16333}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.290372", "id": 62284}
{"buggy_code": "module simple_448(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module simple_448(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.258508", "id": 56483}
{"buggy_code": "module arith_679(input data, clk, output sum); assign sum = data & clk | clk; endmodule", "correct_code": "module arith_679(input data, clk, output sum); assign sum = (data & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.988279", "id": 7267}
{"buggy_code": "module basic_216(input b, y, output prod); assign prod = b & y | d; endmodule", "correct_code": "module basic_216(input b, y, output prod); assign prod = (b & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.082008", "id": 24263}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.017870", "id": 12642}
{"buggy_code": "module simple_816(input y, data, output result); assign result = y & data | a; endmodule", "correct_code": "module simple_816(input y, data, output result); assign result = (y & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.064192", "id": 21028}
{"buggy_code": "module demo_496(input a, rst, output result); assign result = a & rst | x; endmodule", "correct_code": "module demo_496(input a, rst, output result); assign result = (a & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.190998", "id": 44151}
{"buggy_code": "module example_161(input y, output result); assign result = y + 1; endmodule", "correct_code": "module example_161(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.241585", "id": 53398}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.325625", "id": 68715}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.006959", "id": 10664}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.151461", "id": 36960}
{"buggy_code": "module basic_344(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module basic_344(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000169", "id": 9438}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.308907", "id": 65690}
{"buggy_code": "module demo_44(input data, c, output sum); assign sum = data & c | in; endmodule", "correct_code": "module demo_44(input data, c, output sum); assign sum = (data & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.219310", "id": 49329}
{"buggy_code": "module test_619(input in, en, output valid); assign valid = in & en | x; endmodule", "correct_code": "module test_619(input in, en, output valid); assign valid = (in & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.034108", "id": 15565}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.183329", "id": 42792}
{"buggy_code": "module arith_155(input a, in, output result); assign result = a & in | in; endmodule", "correct_code": "module arith_155(input a, in, output result); assign result = (a & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.043601", "id": 17283}
{"buggy_code": "module test_932(input a, output result); assign result = a + 1; endmodule", "correct_code": "module test_932(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.248679", "id": 54695}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.074239", "id": 22876}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.053265", "id": 19013}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.988420", "id": 7294}
{"buggy_code": "module example_298(input data, a, output q); assign q = data & a | in; endmodule", "correct_code": "module example_298(input data, a, output q); assign q = (data & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.996977", "id": 8859}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.338305", "id": 71040}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.053198", "id": 19000}
{"buggy_code": "module simple_705(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module simple_705(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.322261", "id": 68101}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.054139", "id": 19175}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.217909", "id": 49072}
{"buggy_code": "module arith_37(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module arith_37(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.105964", "id": 28626}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.160901", "id": 38697}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.249194", "id": 54787}
{"buggy_code": "module test_795(input c, rst, output out); assign out = c & rst | c; endmodule", "correct_code": "module test_795(input c, rst, output out); assign out = (c & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.073165", "id": 22676}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.014740", "id": 12076}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.308534", "id": 65624}
{"buggy_code": "module basic_322(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module basic_322(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.003207", "id": 9994}
{"buggy_code": "module logic_787(input b, output out); assign out = b + 1; endmodule", "correct_code": "module logic_787(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.128992", "id": 32836}
{"buggy_code": "module test_367(input x, c, output result); assign result = x & c | d; endmodule", "correct_code": "module test_367(input x, c, output result); assign result = (x & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.335999", "id": 70617}
{"buggy_code": "module basic_551(input en, rst, output y); assign y = en & rst | b; endmodule", "correct_code": "module basic_551(input en, rst, output y); assign y = (en & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.134645", "id": 33877}
{"buggy_code": "module logic_330(input x, output result); assign result = x + 1; endmodule", "correct_code": "module logic_330(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.110913", "id": 29537}
{"buggy_code": "module arith_281(input c, a, output result); assign result = c & a | a; endmodule", "correct_code": "module arith_281(input c, a, output result); assign result = (c & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.071678", "id": 22401}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.324025", "id": 68424}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.162445", "id": 38981}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277697", "id": 59963}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.144660", "id": 35707}
{"buggy_code": "module simple_396(input x, en, output y); assign y = x & en | en; endmodule", "correct_code": "module simple_396(input x, en, output y); assign y = (x & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.032408", "id": 15261}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.220406", "id": 49515}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.330886", "id": 69684}
{"buggy_code": "module example_659(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module example_659(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.075629", "id": 23133}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.031660", "id": 15128}
{"buggy_code": "module test_736(input en, en, output sum); assign sum = en & en | c; endmodule", "correct_code": "module test_736(input en, en, output sum); assign sum = (en & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.963465", "id": 2807}
{"buggy_code": "module demo_205(input x, output result); assign result = x + 1; endmodule", "correct_code": "module demo_205(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174609", "id": 41198}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.215708", "id": 48670}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.223985", "id": 50168}
{"buggy_code": "module demo_798(input en, a, output y); assign y = en & a | y; endmodule", "correct_code": "module demo_798(input en, a, output y); assign y = (en & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.077640", "id": 23467}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.063354", "id": 20874}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.288279", "id": 61900}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.264391", "id": 57557}
{"buggy_code": "module simple_153(input b, in, output out); assign out = b & in | x; endmodule", "correct_code": "module simple_153(input b, in, output out); assign out = (b & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.140894", "id": 35026}
{"buggy_code": "module arith_924(input clk, in, output q); assign q = clk & in | b; endmodule", "correct_code": "module arith_924(input clk, in, output q); assign q = (clk & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.291975", "id": 62579}
{"buggy_code": "module test_581(input en, output y); assign y = en + 1; endmodule", "correct_code": "module test_581(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.961615", "id": 2476}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.179369", "id": 42078}
{"buggy_code": "module test_181(input c, output out); assign out = c + 1; endmodule", "correct_code": "module test_181(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.177449", "id": 41723}
{"buggy_code": "module simple_612(input data, output out); assign out = data + 1; endmodule", "correct_code": "module simple_612(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.069405", "id": 21981}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.107061", "id": 28827}
{"buggy_code": "module demo_267(input y, rst, output q); assign q = y & rst | en; endmodule", "correct_code": "module demo_267(input y, rst, output q); assign q = (y & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.188759", "id": 43781}
{"buggy_code": "module basic_216(input a, output result); assign result = a + 1; endmodule", "correct_code": "module basic_216(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.096286", "id": 26861}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.992225", "id": 7995}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.017863", "id": 12641}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.016655", "id": 12422}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.103308", "id": 28142}
{"buggy_code": "module arith_933(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module arith_933(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.063359", "id": 20875}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.335055", "id": 70442}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.294170", "id": 62979}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.356971", "id": 74410}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.351811", "id": 73469}
{"buggy_code": "module simple_441(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module simple_441(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.034129", "id": 15569}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.179023", "id": 42012}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.007907", "id": 10834}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.285393", "id": 61374}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.293850", "id": 62920}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117280", "id": 30709}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.083013", "id": 24444}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.161042", "id": 38723}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.304565", "id": 64889}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.996592", "id": 8790}
{"buggy_code": "module test_484(input en, data, output q); assign q = en & data | a; endmodule", "correct_code": "module test_484(input en, data, output q); assign q = (en & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.159767", "id": 38491}
{"buggy_code": "module logic_761(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module logic_761(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.302603", "id": 64522}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.182918", "id": 42714}
{"buggy_code": "module logic_403(input x, x, output result); assign result = x & x | y; endmodule", "correct_code": "module logic_403(input x, x, output result); assign result = (x & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.052953", "id": 18954}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.354378", "id": 73934}
{"buggy_code": "module example_970(input x, output result); assign result = x + 1; endmodule", "correct_code": "module example_970(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.256789", "id": 56167}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.016459", "id": 12387}
{"buggy_code": "module arith_406(input data, output result); assign result = data + 1; endmodule", "correct_code": "module arith_406(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.953621", "id": 1023}
{"buggy_code": "module test_690(input en, in, output y); assign y = en & in | a; endmodule", "correct_code": "module test_690(input en, in, output y); assign y = (en & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.186787", "id": 43423}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.300465", "id": 64132}
{"buggy_code": "module simple_274(input c, rst, output valid); assign valid = c & rst | x; endmodule", "correct_code": "module simple_274(input c, rst, output valid); assign valid = (c & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.349671", "id": 73080}
{"buggy_code": "module demo_454(input x, c, output sum); assign sum = x & c | d; endmodule", "correct_code": "module demo_454(input x, c, output sum); assign sum = (x & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.097596", "id": 27097}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.340635", "id": 71444}
{"buggy_code": "module logic_646(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module logic_646(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.161994", "id": 38899}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.134893", "id": 33921}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.151743", "id": 37010}
{"buggy_code": "module arith_277(input clk, y, output y); assign y = clk & y | rst; endmodule", "correct_code": "module arith_277(input clk, y, output y); assign y = (clk & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.146597", "id": 36063}
{"buggy_code": "module simple_65(input a, output q); assign q = a + 1; endmodule", "correct_code": "module simple_65(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.047423", "id": 17975}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.274960", "id": 59470}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.015654", "id": 12240}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.283996", "id": 61120}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.285767", "id": 61444}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.990070", "id": 7597}
{"buggy_code": "module simple_654(input rst, en, output q); assign q = rst & en | rst; endmodule", "correct_code": "module simple_654(input rst, en, output q); assign q = (rst & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.093320", "id": 26318}
{"buggy_code": "module test_57(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module test_57(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.146527", "id": 36051}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.119710", "id": 31145}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.270470", "id": 58667}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.142162", "id": 35241}
{"buggy_code": "module basic_950(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module basic_950(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.962368", "id": 2610}
{"buggy_code": "module logic_269(input rst, in, output out); assign out = rst & in | y; endmodule", "correct_code": "module logic_269(input rst, in, output out); assign out = (rst & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.956520", "id": 1546}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.328633", "id": 69267}
{"buggy_code": "module example_676(input x, a, output prod); assign prod = x & a | y; endmodule", "correct_code": "module example_676(input x, a, output prod); assign prod = (x & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.355020", "id": 74052}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.008693", "id": 10977}
{"buggy_code": "module test_945(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module test_945(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.262776", "id": 57265}
{"buggy_code": "module logic_111(input b, in, output y); assign y = b & in | b; endmodule", "correct_code": "module logic_111(input b, in, output y); assign y = (b & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.241675", "id": 53414}
{"buggy_code": "module simple_333(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module simple_333(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.146026", "id": 35959}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.307987", "id": 65523}
{"buggy_code": "module simple_829(input x, output q); assign q = x + 1; endmodule", "correct_code": "module simple_829(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.004599", "id": 10232}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.278072", "id": 60031}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.264344", "id": 57548}
{"buggy_code": "module basic_49(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module basic_49(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.054364", "id": 19218}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.307324", "id": 65399}
{"buggy_code": "module test_347(input c, output q); assign q = c + 1; endmodule", "correct_code": "module test_347(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.146635", "id": 36070}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.350350", "id": 73203}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.228405", "id": 50974}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.050911", "id": 18583}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.329832", "id": 69489}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.974760", "id": 4863}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.074536", "id": 22932}
{"buggy_code": "module logic_742(input in, c, output y); assign y = in & c | a; endmodule", "correct_code": "module logic_742(input in, c, output y); assign y = (in & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.187396", "id": 43531}
{"buggy_code": "module logic_681(input b, output q); assign q = b + 1; endmodule", "correct_code": "module logic_681(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.044295", "id": 17410}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.249214", "id": 54791}
{"buggy_code": "module arith_692(input in, en, output prod); assign prod = in & en | d; endmodule", "correct_code": "module arith_692(input in, en, output prod); assign prod = (in & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.037409", "id": 16167}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.247602", "id": 54498}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.005035", "id": 10311}
{"buggy_code": "module simple_139(input d, output q); assign q = d + 1; endmodule", "correct_code": "module simple_139(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.185462", "id": 43180}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.034728", "id": 15678}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.991962", "id": 7946}
{"buggy_code": "module test_555(input b, output result); assign result = b + 1; endmodule", "correct_code": "module test_555(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.205126", "id": 46740}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.258755", "id": 56529}
{"buggy_code": "module basic_300(input y, output result); assign result = y + 1; endmodule", "correct_code": "module basic_300(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.292074", "id": 62598}
{"buggy_code": "module arith_147(input d, b, output valid); assign valid = d & b | c; endmodule", "correct_code": "module arith_147(input d, b, output valid); assign valid = (d & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.129214", "id": 32879}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.347640", "id": 72710}
{"buggy_code": "module test_864(input in, data, output prod); assign prod = in & data | x; endmodule", "correct_code": "module test_864(input in, data, output prod); assign prod = (in & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.288110", "id": 61868}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.271866", "id": 58923}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.314093", "id": 66635}
{"buggy_code": "module demo_688(input en, b, output q); assign q = en & b | x; endmodule", "correct_code": "module demo_688(input en, b, output q); assign q = (en & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.301728", "id": 64362}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.055123", "id": 19363}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.237913", "id": 52721}
{"buggy_code": "module logic_124(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module logic_124(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.069375", "id": 21976}
{"buggy_code": "module arith_290(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module arith_290(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.333034", "id": 70076}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.169283", "id": 40226}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.288355", "id": 61914}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.149934", "id": 36676}
{"buggy_code": "module test_427(input data, x, output out); assign out = data & x | a; endmodule", "correct_code": "module test_427(input data, x, output out); assign out = (data & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.074245", "id": 22877}
{"buggy_code": "module arith_709(input c, output result); assign result = c + 1; endmodule", "correct_code": "module arith_709(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.222405", "id": 49877}
{"buggy_code": "module demo_586(input d, output q); assign q = d + 1; endmodule", "correct_code": "module demo_586(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.177859", "id": 41798}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.976249", "id": 5132}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.235246", "id": 52232}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.285604", "id": 61413}
{"buggy_code": "module simple_830(input b, en, output y); assign y = b & en | clk; endmodule", "correct_code": "module simple_830(input b, en, output y); assign y = (b & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.996295", "id": 8735}
{"buggy_code": "module test_414(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module test_414(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.190651", "id": 44090}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.252886", "id": 55458}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.222940", "id": 49976}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.330839", "id": 69674}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.013570", "id": 11861}
{"buggy_code": "module logic_222(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module logic_222(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.962807", "id": 2691}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.247463", "id": 54471}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.326407", "id": 68859}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.337200", "id": 70838}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.132900", "id": 33552}
{"buggy_code": "module logic_48(input a, b, output valid); assign valid = a & b | in; endmodule", "correct_code": "module logic_48(input a, b, output valid); assign valid = (a & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.274132", "id": 59339}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.056098", "id": 19538}
{"buggy_code": "module simple_632(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module simple_632(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.121193", "id": 31413}
{"buggy_code": "module simple_253(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module simple_253(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.074256", "id": 22879}
{"buggy_code": "module basic_778(input d, rst, output sum); assign sum = d & rst | in; endmodule", "correct_code": "module basic_778(input d, rst, output sum); assign sum = (d & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.027817", "id": 14433}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.185511", "id": 43190}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.211082", "id": 47828}
{"buggy_code": "module simple_826(input d, output q); assign q = d + 1; endmodule", "correct_code": "module simple_826(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.987660", "id": 7155}
{"buggy_code": "module basic_744(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module basic_744(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.286449", "id": 61568}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.155663", "id": 37733}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.356404", "id": 74308}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.212124", "id": 48016}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.146685", "id": 36079}
{"buggy_code": "module example_955(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module example_955(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.105979", "id": 28629}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.992420", "id": 8031}
{"buggy_code": "module test_959(input data, data, output sum); assign sum = data & data | data; endmodule", "correct_code": "module test_959(input data, data, output sum); assign sum = (data & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.058717", "id": 20022}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.258771", "id": 56532}
{"buggy_code": "module basic_29(input en, output q); assign q = en + 1; endmodule", "correct_code": "module basic_29(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.242283", "id": 53522}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.269676", "id": 58523}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.069513", "id": 22001}
{"buggy_code": "module simple_324(input a, in, output prod); assign prod = a & in | x; endmodule", "correct_code": "module simple_324(input a, in, output prod); assign prod = (a & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.953819", "id": 1060}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182644", "id": 42666}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.140204", "id": 34899}
{"buggy_code": "module test_175(input en, output out); assign out = en + 1; endmodule", "correct_code": "module test_175(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.099054", "id": 27364}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.243400", "id": 53727}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.332846", "id": 70039}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.220889", "id": 49601}
{"buggy_code": "module example_883(input y, clk, output out); assign out = y & clk | d; endmodule", "correct_code": "module example_883(input y, clk, output out); assign out = (y & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.312710", "id": 66385}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.099776", "id": 27497}
{"buggy_code": "module logic_517(input x, output q); assign q = x + 1; endmodule", "correct_code": "module logic_517(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.208543", "id": 47363}
{"buggy_code": "module arith_525(input en, rst, output prod); assign prod = en & rst | b; endmodule", "correct_code": "module arith_525(input en, rst, output prod); assign prod = (en & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.049462", "id": 18321}
{"buggy_code": "module simple_220(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module simple_220(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.098123", "id": 27193}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.244167", "id": 53866}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.168840", "id": 40145}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.138198", "id": 34530}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.028607", "id": 14575}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.181973", "id": 42544}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.265330", "id": 57728}
{"buggy_code": "module simple_569(input in, en, output out); assign out = in & en | rst; endmodule", "correct_code": "module simple_569(input in, en, output out); assign out = (in & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.989006", "id": 7398}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.320180", "id": 67735}
{"buggy_code": "module arith_68(input y, c, output valid); assign valid = y & c | b; endmodule", "correct_code": "module arith_68(input y, c, output valid); assign valid = (y & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.220742", "id": 49576}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.976144", "id": 5112}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.154457", "id": 37515}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.189099", "id": 43844}
{"buggy_code": "module arith_207(input d, output y); assign y = d + 1; endmodule", "correct_code": "module arith_207(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.069151", "id": 21934}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.306671", "id": 65276}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112664", "id": 29861}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.994686", "id": 8443}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.115052", "id": 30301}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.305303", "id": 65023}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.247562", "id": 54490}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.317886", "id": 67330}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.955871", "id": 1428}
{"buggy_code": "module logic_923(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module logic_923(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.094276", "id": 26492}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.246108", "id": 54227}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.010886", "id": 11374}
{"buggy_code": "module demo_26(input c, output result); assign result = c + 1; endmodule", "correct_code": "module demo_26(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.054992", "id": 19336}
{"buggy_code": "module arith_193(input b, b, output result); assign result = b & b | c; endmodule", "correct_code": "module arith_193(input b, b, output result); assign result = (b & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.274754", "id": 59445}
{"buggy_code": "module logic_728(input c, in, output q); assign q = c & in | en; endmodule", "correct_code": "module logic_728(input c, in, output q); assign q = (c & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.344281", "id": 72105}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.148319", "id": 36377}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.077749", "id": 23487}
{"buggy_code": "module example_780(input clk, c, output result); assign result = clk & c | in; endmodule", "correct_code": "module example_780(input clk, c, output result); assign result = (clk & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.966787", "id": 3417}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.090603", "id": 25828}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.012560", "id": 11678}
{"buggy_code": "module logic_158(input in, x, output q); assign q = in & x | c; endmodule", "correct_code": "module logic_158(input in, x, output q); assign q = (in & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.356563", "id": 74337}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.209755", "id": 47585}
{"buggy_code": "module basic_140(input a, in, output result); assign result = a & in | d; endmodule", "correct_code": "module basic_140(input a, in, output result); assign result = (a & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.300640", "id": 64163}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.038962", "id": 16451}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.222819", "id": 49955}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.031536", "id": 15104}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.166306", "id": 39680}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.274420", "id": 59394}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.087064", "id": 25179}
{"buggy_code": "module simple_832(input c, rst, output sum); assign sum = c & rst | clk; endmodule", "correct_code": "module simple_832(input c, rst, output sum); assign sum = (c & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.988868", "id": 7374}
{"buggy_code": "module simple_713(input c, x, output result); assign result = c & x | x; endmodule", "correct_code": "module simple_713(input c, x, output result); assign result = (c & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.017676", "id": 12608}
{"buggy_code": "module demo_41(input data, y, output result); assign result = data & y | rst; endmodule", "correct_code": "module demo_41(input data, y, output result); assign result = (data & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.969423", "id": 3894}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.072301", "id": 22516}
{"buggy_code": "module example_959(input y, output q); assign q = y + 1; endmodule", "correct_code": "module example_959(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.107928", "id": 28988}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.275738", "id": 59616}
{"buggy_code": "module basic_872(input clk, clk, output out); assign out = clk & clk | rst; endmodule", "correct_code": "module basic_872(input clk, clk, output out); assign out = (clk & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.134085", "id": 33773}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.333343", "id": 70133}
{"buggy_code": "module basic_395(input d, clk, output prod); assign prod = d & clk | en; endmodule", "correct_code": "module basic_395(input d, clk, output prod); assign prod = (d & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.325460", "id": 68685}
{"buggy_code": "module test_121(input c, x, output prod); assign prod = c & x | rst; endmodule", "correct_code": "module test_121(input c, x, output prod); assign prod = (c & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.082471", "id": 24346}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.951210", "id": 585}
{"buggy_code": "module test_178(input d, output q); assign q = d + 1; endmodule", "correct_code": "module test_178(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.002886", "id": 9935}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.002492", "id": 9865}
{"buggy_code": "module logic_5(input x, clk, output sum); assign sum = x & clk | en; endmodule", "correct_code": "module logic_5(input x, clk, output sum); assign sum = (x & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.985749", "id": 6806}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.263894", "id": 57465}
{"buggy_code": "module logic_952(input in, d, output result); assign result = in & d | data; endmodule", "correct_code": "module logic_952(input in, d, output result); assign result = (in & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.295249", "id": 63175}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.242737", "id": 53605}
{"buggy_code": "module basic_159(input d, rst, output prod); assign prod = d & rst | in; endmodule", "correct_code": "module basic_159(input d, rst, output prod); assign prod = (d & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.954349", "id": 1155}
{"buggy_code": "module logic_181(input x, b, output out); assign out = x & b | en; endmodule", "correct_code": "module logic_181(input x, b, output out); assign out = (x & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.230358", "id": 51332}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.962182", "id": 2575}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.051538", "id": 18699}
{"buggy_code": "module test_475(input data, output y); assign y = data + 1; endmodule", "correct_code": "module test_475(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.347373", "id": 72662}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.354038", "id": 73870}
{"buggy_code": "module example_338(input clk, data, output sum); assign sum = clk & data | clk; endmodule", "correct_code": "module example_338(input clk, data, output sum); assign sum = (clk & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.253660", "id": 55596}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.180507", "id": 42286}
{"buggy_code": "module demo_384(input x, output y); assign y = x + 1; endmodule", "correct_code": "module demo_384(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.342230", "id": 71733}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.337102", "id": 70820}
{"buggy_code": "module demo_786(input in, output q); assign q = in + 1; endmodule", "correct_code": "module demo_786(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.992913", "id": 8119}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.172993", "id": 40904}
{"buggy_code": "module test_598(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module test_598(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.173118", "id": 40927}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.233606", "id": 51931}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.325020", "id": 68606}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.969094", "id": 3835}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.960959", "id": 2353}
{"buggy_code": "module test_778(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module test_778(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.001572", "id": 9694}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.233784", "id": 51965}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.340278", "id": 71382}
{"buggy_code": "module test_693(input en, output out); assign out = en + 1; endmodule", "correct_code": "module test_693(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.288324", "id": 61908}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.253548", "id": 55577}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.229097", "id": 51098}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.255469", "id": 55925}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.312331", "id": 66316}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.124641", "id": 32044}
{"buggy_code": "module test_530(input en, a, output result); assign result = en & a | en; endmodule", "correct_code": "module test_530(input en, a, output result); assign result = (en & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.207643", "id": 47202}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.958558", "id": 1918}
{"buggy_code": "module logic_184(input data, b, output valid); assign valid = data & b | rst; endmodule", "correct_code": "module logic_184(input data, b, output valid); assign valid = (data & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.114673", "id": 30233}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.087235", "id": 25211}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329291", "id": 69391}
{"buggy_code": "module test_594(input data, output q); assign q = data + 1; endmodule", "correct_code": "module test_594(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.283287", "id": 60990}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.276795", "id": 59798}
{"buggy_code": "module test_458(input rst, c, output y); assign y = rst & c | in; endmodule", "correct_code": "module test_458(input rst, c, output y); assign y = (rst & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.143734", "id": 35537}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.071784", "id": 22421}
{"buggy_code": "module test_210(input data, b, output prod); assign prod = data & b | rst; endmodule", "correct_code": "module test_210(input data, b, output prod); assign prod = (data & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.346080", "id": 72423}
{"buggy_code": "module example_156(input rst, c, output out); assign out = rst & c | y; endmodule", "correct_code": "module example_156(input rst, c, output out); assign out = (rst & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.288907", "id": 62016}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.168572", "id": 40099}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.138004", "id": 34494}
{"buggy_code": "module logic_939(input clk, b, output prod); assign prod = clk & b | data; endmodule", "correct_code": "module logic_939(input clk, b, output prod); assign prod = (clk & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.300924", "id": 64214}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.971217", "id": 4220}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.148000", "id": 36316}
{"buggy_code": "module basic_736(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module basic_736(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.045352", "id": 17600}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286156", "id": 61516}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.251957", "id": 55290}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.257024", "id": 56209}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179336", "id": 42071}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.107386", "id": 28888}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.317662", "id": 67290}
{"buggy_code": "module test_868(input en, clk, output prod); assign prod = en & clk | c; endmodule", "correct_code": "module test_868(input en, clk, output prod); assign prod = (en & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.128263", "id": 32705}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.250855", "id": 55093}
{"buggy_code": "module simple_842(input d, y, output result); assign result = d & y | y; endmodule", "correct_code": "module simple_842(input d, y, output result); assign result = (d & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.058905", "id": 20054}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.202319", "id": 46227}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238313", "id": 52794}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.314642", "id": 66737}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.975368", "id": 4972}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.069188", "id": 21941}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.045860", "id": 17690}
{"buggy_code": "module logic_741(input d, rst, output q); assign q = d & rst | c; endmodule", "correct_code": "module logic_741(input d, rst, output q); assign q = (d & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.979927", "id": 5754}
{"buggy_code": "module basic_256(input d, data, output prod); assign prod = d & data | y; endmodule", "correct_code": "module basic_256(input d, data, output prod); assign prod = (d & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.260534", "id": 56853}
{"buggy_code": "module arith_669(input d, a, output valid); assign valid = d & a | rst; endmodule", "correct_code": "module arith_669(input d, a, output valid); assign valid = (d & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.094551", "id": 26544}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.280723", "id": 60521}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.072980", "id": 22641}
{"buggy_code": "module arith_551(input en, en, output y); assign y = en & en | b; endmodule", "correct_code": "module arith_551(input en, en, output y); assign y = (en & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.201440", "id": 46068}
{"buggy_code": "module demo_358(input y, clk, output prod); assign prod = y & clk | data; endmodule", "correct_code": "module demo_358(input y, clk, output prod); assign prod = (y & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.033478", "id": 15451}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.336137", "id": 70642}
{"buggy_code": "module example_231(input en, en, output sum); assign sum = en & en | data; endmodule", "correct_code": "module example_231(input en, en, output sum); assign sum = (en & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.096192", "id": 26844}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.161988", "id": 38898}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286165", "id": 61518}
{"buggy_code": "module basic_666(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module basic_666(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.077932", "id": 23519}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.013604", "id": 11867}
{"buggy_code": "module test_536(input data, a, output q); assign q = data & a | y; endmodule", "correct_code": "module test_536(input data, a, output q); assign q = (data & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.948250", "id": 54}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.118344", "id": 30903}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.106853", "id": 28790}
{"buggy_code": "module arith_544(input x, d, output prod); assign prod = x & d | c; endmodule", "correct_code": "module arith_544(input x, d, output prod); assign prod = (x & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.287970", "id": 61842}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.039782", "id": 16603}
{"buggy_code": "module simple_513(input x, output q); assign q = x + 1; endmodule", "correct_code": "module simple_513(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.030810", "id": 14972}
{"buggy_code": "module simple_360(input d, c, output valid); assign valid = d & c | rst; endmodule", "correct_code": "module simple_360(input d, c, output valid); assign valid = (d & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.081137", "id": 24106}
{"buggy_code": "module arith_73(input y, in, output prod); assign prod = y & in | c; endmodule", "correct_code": "module arith_73(input y, in, output prod); assign prod = (y & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.175463", "id": 41356}
{"buggy_code": "module demo_891(input en, output q); assign q = en + 1; endmodule", "correct_code": "module demo_891(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.991922", "id": 7938}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.122837", "id": 31715}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.124833", "id": 32077}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.077976", "id": 23528}
{"buggy_code": "module demo_92(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module demo_92(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.314308", "id": 66675}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.153395", "id": 37319}
{"buggy_code": "module example_551(input d, d, output prod); assign prod = d & d | a; endmodule", "correct_code": "module example_551(input d, d, output prod); assign prod = (d & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.355156", "id": 74077}
{"buggy_code": "module example_908(input in, rst, output result); assign result = in & rst | data; endmodule", "correct_code": "module example_908(input in, rst, output result); assign result = (in & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.071585", "id": 22384}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.321136", "id": 67894}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.157806", "id": 38127}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.034418", "id": 15622}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.312405", "id": 66330}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.268764", "id": 58355}
{"buggy_code": "module logic_134(input en, b, output sum); assign sum = en & b | data; endmodule", "correct_code": "module logic_134(input en, b, output sum); assign sum = (en & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.333211", "id": 70109}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.242498", "id": 53562}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.357761", "id": 74558}
{"buggy_code": "module test_940(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module test_940(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.101306", "id": 27779}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.210332", "id": 47692}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.226373", "id": 50605}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.079672", "id": 23839}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.041294", "id": 16867}
{"buggy_code": "module basic_630(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module basic_630(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.275422", "id": 59556}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.114717", "id": 30241}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.091626", "id": 26017}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.018890", "id": 12828}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.005417", "id": 10382}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.183513", "id": 42826}
{"buggy_code": "module arith_354(input c, rst, output q); assign q = c & rst | c; endmodule", "correct_code": "module arith_354(input c, rst, output q); assign q = (c & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.198233", "id": 45481}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286590", "id": 61593}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.112073", "id": 29750}
{"buggy_code": "module arith_855(input rst, rst, output y); assign y = rst & rst | clk; endmodule", "correct_code": "module arith_855(input rst, rst, output y); assign y = (rst & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.320917", "id": 67854}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.161718", "id": 38849}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.250162", "id": 54965}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.315876", "id": 66960}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.250891", "id": 55100}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.338295", "id": 71038}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.281497", "id": 60665}
{"buggy_code": "module arith_725(input in, output result); assign result = in + 1; endmodule", "correct_code": "module arith_725(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.041408", "id": 16887}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.234975", "id": 52181}
{"buggy_code": "module simple_998(input clk, rst, output sum); assign sum = clk & rst | en; endmodule", "correct_code": "module simple_998(input clk, rst, output sum); assign sum = (clk & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.181044", "id": 42382}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.063788", "id": 20956}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.950199", "id": 405}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.324527", "id": 68517}
{"buggy_code": "module test_36(input y, c, output out); assign out = y & c | en; endmodule", "correct_code": "module test_36(input y, c, output out); assign out = (y & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.250124", "id": 54957}
{"buggy_code": "module demo_680(input en, data, output prod); assign prod = en & data | in; endmodule", "correct_code": "module demo_680(input en, data, output prod); assign prod = (en & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.123883", "id": 31905}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.158264", "id": 38212}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.967451", "id": 3541}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.266372", "id": 57918}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.065670", "id": 21301}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.954006", "id": 1091}
{"buggy_code": "module test_16(input en, c, output y); assign y = en & c | c; endmodule", "correct_code": "module test_16(input en, c, output y); assign y = (en & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.288060", "id": 61858}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.994947", "id": 8489}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.040912", "id": 16799}
{"buggy_code": "module arith_913(input rst, x, output prod); assign prod = rst & x | data; endmodule", "correct_code": "module arith_913(input rst, x, output prod); assign prod = (rst & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.009789", "id": 11179}
{"buggy_code": "module arith_964(input a, y, output y); assign y = a & y | rst; endmodule", "correct_code": "module arith_964(input a, y, output y); assign y = (a & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.292871", "id": 62743}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.259985", "id": 56753}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.139675", "id": 34804}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.047625", "id": 18013}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.177755", "id": 41780}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.093141", "id": 26286}
{"buggy_code": "module demo_889(input en, in, output sum); assign sum = en & in | in; endmodule", "correct_code": "module demo_889(input en, in, output sum); assign sum = (en & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.306841", "id": 65307}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.140942", "id": 35035}
{"buggy_code": "module basic_76(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module basic_76(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.290402", "id": 62290}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.269719", "id": 58531}
{"buggy_code": "module demo_669(input a, output out); assign out = a + 1; endmodule", "correct_code": "module demo_669(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.991345", "id": 7833}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.266212", "id": 57888}
{"buggy_code": "module demo_302(input data, output result); assign result = data + 1; endmodule", "correct_code": "module demo_302(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.067604", "id": 21651}
{"buggy_code": "module arith_165(input data, c, output result); assign result = data & c | clk; endmodule", "correct_code": "module arith_165(input data, c, output result); assign result = (data & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.040928", "id": 16802}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.243870", "id": 53810}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.080412", "id": 23975}
{"buggy_code": "module arith_736(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module arith_736(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.326505", "id": 68878}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.185447", "id": 43177}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.228497", "id": 50991}
{"buggy_code": "module simple_339(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module simple_339(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.235697", "id": 52315}
{"buggy_code": "module basic_479(input a, output q); assign q = a + 1; endmodule", "correct_code": "module basic_479(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.043883", "id": 17333}
{"buggy_code": "module demo_306(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module demo_306(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.057988", "id": 19887}
{"buggy_code": "module example_627(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module example_627(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.328122", "id": 69172}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.276582", "id": 59761}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.247546", "id": 54487}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.095615", "id": 26739}
{"buggy_code": "module example_458(input in, output result); assign result = in + 1; endmodule", "correct_code": "module example_458(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.154424", "id": 37508}
{"buggy_code": "module arith_83(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module arith_83(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.326815", "id": 68935}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.055448", "id": 19423}
{"buggy_code": "module arith_638(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module arith_638(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.102096", "id": 27922}
{"buggy_code": "module example_505(input d, output out); assign out = d + 1; endmodule", "correct_code": "module example_505(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.958619", "id": 1929}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.193587", "id": 44632}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.264002", "id": 57485}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.333262", "id": 70119}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.046722", "id": 17849}
{"buggy_code": "module arith_551(input b, data, output valid); assign valid = b & data | a; endmodule", "correct_code": "module arith_551(input b, data, output valid); assign valid = (b & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.114157", "id": 30136}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.091944", "id": 26072}
{"buggy_code": "module logic_613(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module logic_613(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.180002", "id": 42192}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.111034", "id": 29560}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.233297", "id": 51872}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.129493", "id": 32930}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.084150", "id": 24647}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.281801", "id": 60720}
{"buggy_code": "module logic_610(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module logic_610(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.973662", "id": 4663}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.078602", "id": 23643}
{"buggy_code": "module demo_475(input c, clk, output out); assign out = c & clk | y; endmodule", "correct_code": "module demo_475(input c, clk, output out); assign out = (c & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.069416", "id": 21983}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.070199", "id": 22129}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.357147", "id": 74444}
{"buggy_code": "module arith_420(input rst, x, output result); assign result = rst & x | a; endmodule", "correct_code": "module arith_420(input rst, x, output result); assign result = (rst & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.009795", "id": 11180}
{"buggy_code": "module logic_477(input in, rst, output q); assign q = in & rst | en; endmodule", "correct_code": "module logic_477(input in, rst, output q); assign q = (in & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.276739", "id": 59789}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.350156", "id": 73169}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.025224", "id": 13964}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.335255", "id": 70480}
{"buggy_code": "module logic_741(input data, c, output result); assign result = data & c | data; endmodule", "correct_code": "module logic_741(input data, c, output result); assign result = (data & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.104784", "id": 28411}
{"buggy_code": "module basic_341(input b, clk, output valid); assign valid = b & clk | clk; endmodule", "correct_code": "module basic_341(input b, clk, output valid); assign valid = (b & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.999045", "id": 9234}
{"buggy_code": "module basic_226(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module basic_226(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.253447", "id": 55557}
{"buggy_code": "module basic_452(input x, d, output sum); assign sum = x & d | in; endmodule", "correct_code": "module basic_452(input x, d, output sum); assign sum = (x & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.039468", "id": 16545}
{"buggy_code": "module demo_807(input a, x, output y); assign y = a & x | x; endmodule", "correct_code": "module demo_807(input a, x, output y); assign y = (a & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.325269", "id": 68651}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.109772", "id": 29328}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.199342", "id": 45681}
{"buggy_code": "module demo_511(input en, d, output prod); assign prod = en & d | x; endmodule", "correct_code": "module demo_511(input en, d, output prod); assign prod = (en & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.163311", "id": 39135}
{"buggy_code": "module simple_475(input d, output q); assign q = d + 1; endmodule", "correct_code": "module simple_475(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.315793", "id": 66946}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.323567", "id": 68340}
{"buggy_code": "module test_458(input in, a, output result); assign result = in & a | en; endmodule", "correct_code": "module test_458(input in, a, output result); assign result = (in & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.059475", "id": 20162}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.212817", "id": 48142}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.948010", "id": 13}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.097428", "id": 27067}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.352095", "id": 73520}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.101138", "id": 27747}
{"buggy_code": "module arith_981(input a, output q); assign q = a + 1; endmodule", "correct_code": "module arith_981(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.199311", "id": 45675}
{"buggy_code": "module test_336(input b, clk, output sum); assign sum = b & clk | y; endmodule", "correct_code": "module test_336(input b, clk, output sum); assign sum = (b & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.057551", "id": 19808}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.349878", "id": 73116}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.097909", "id": 27151}
{"buggy_code": "module test_48(input rst, in, output q); assign q = rst & in | d; endmodule", "correct_code": "module test_48(input rst, in, output q); assign q = (rst & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.297788", "id": 63641}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.255174", "id": 55870}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.057895", "id": 19871}
{"buggy_code": "module example_551(input a, en, output result); assign result = a & en | in; endmodule", "correct_code": "module example_551(input a, en, output result); assign result = (a & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.237357", "id": 52618}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.051886", "id": 18762}
{"buggy_code": "module test_28(input a, y, output q); assign q = a & y | y; endmodule", "correct_code": "module test_28(input a, y, output q); assign q = (a & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.306166", "id": 65182}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.254308", "id": 55712}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.254484", "id": 55745}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.216138", "id": 48747}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.161395", "id": 38790}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.163066", "id": 39090}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.958366", "id": 1882}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.157463", "id": 38064}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.145903", "id": 35938}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.161889", "id": 38879}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.149380", "id": 36574}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.320118", "id": 67724}
{"buggy_code": "module test_585(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module test_585(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.357792", "id": 74564}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.338545", "id": 71085}
{"buggy_code": "module example_291(input a, b, output y); assign y = a & b | x; endmodule", "correct_code": "module example_291(input a, b, output y); assign y = (a & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.008529", "id": 10949}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.136977", "id": 34301}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.345112", "id": 72247}
{"buggy_code": "module basic_493(input a, d, output result); assign result = a & d | in; endmodule", "correct_code": "module basic_493(input a, d, output result); assign result = (a & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.151467", "id": 36961}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.169370", "id": 40242}
{"buggy_code": "module basic_200(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module basic_200(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.128207", "id": 32695}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.252415", "id": 55374}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.148207", "id": 36356}
{"buggy_code": "module demo_849(input x, c, output valid); assign valid = x & c | in; endmodule", "correct_code": "module demo_849(input x, c, output valid); assign valid = (x & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.049146", "id": 18288}
{"buggy_code": "module test_149(input rst, y, output sum); assign sum = rst & y | b; endmodule", "correct_code": "module test_149(input rst, y, output sum); assign sum = (rst & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.054766", "id": 19294}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.182816", "id": 42698}
{"buggy_code": "module example_305(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module example_305(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.042851", "id": 17148}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.137927", "id": 34480}
{"buggy_code": "module test_574(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module test_574(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.013557", "id": 11858}
{"buggy_code": "module arith_473(input clk, y, output result); assign result = clk & y | rst; endmodule", "correct_code": "module arith_473(input clk, y, output result); assign result = (clk & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.125754", "id": 32249}
{"buggy_code": "module test_469(input in, rst, output y); assign y = in & rst | data; endmodule", "correct_code": "module test_469(input in, rst, output y); assign y = (in & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.242614", "id": 53583}
{"buggy_code": "module basic_31(input x, a, output y); assign y = x & a | data; endmodule", "correct_code": "module basic_31(input x, a, output y); assign y = (x & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.128168", "id": 32688}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.037553", "id": 16194}
{"buggy_code": "module test_817(input y, rst, output y); assign y = y & rst | a; endmodule", "correct_code": "module test_817(input y, rst, output y); assign y = (y & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.082938", "id": 24430}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.217318", "id": 48962}
{"buggy_code": "module example_91(input d, output out); assign out = d + 1; endmodule", "correct_code": "module example_91(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.095505", "id": 26718}
{"buggy_code": "module basic_762(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module basic_762(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.358303", "id": 74658}
{"buggy_code": "module arith_942(input in, output q); assign q = in + 1; endmodule", "correct_code": "module arith_942(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.303928", "id": 64765}
{"buggy_code": "module demo_382(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module demo_382(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.294380", "id": 63017}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287974", "id": 61843}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.274077", "id": 59329}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.118415", "id": 30916}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.329668", "id": 69460}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.230590", "id": 51377}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.177050", "id": 41646}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.992241", "id": 7998}
{"buggy_code": "module demo_386(input clk, a, output sum); assign sum = clk & a | en; endmodule", "correct_code": "module demo_386(input clk, a, output sum); assign sum = (clk & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.296905", "id": 63479}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.133150", "id": 33600}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.224358", "id": 50235}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.310644", "id": 66008}
{"buggy_code": "module simple_826(input y, output out); assign out = y + 1; endmodule", "correct_code": "module simple_826(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.146711", "id": 36084}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.027918", "id": 14450}
{"buggy_code": "module basic_729(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module basic_729(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.284094", "id": 61138}
{"buggy_code": "module demo_658(input c, d, output result); assign result = c & d | data; endmodule", "correct_code": "module demo_658(input c, d, output result); assign result = (c & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.287177", "id": 61698}
{"buggy_code": "module arith_228(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module arith_228(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.114584", "id": 30216}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.071594", "id": 22386}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.263855", "id": 57457}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.167711", "id": 39943}
{"buggy_code": "module test_762(input data, data, output prod); assign prod = data & data | en; endmodule", "correct_code": "module test_762(input data, data, output prod); assign prod = (data & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.978858", "id": 5557}
{"buggy_code": "module simple_749(input d, a, output q); assign q = d & a | c; endmodule", "correct_code": "module simple_749(input d, a, output q); assign q = (d & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.176168", "id": 41485}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.075740", "id": 23153}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.121846", "id": 31533}
{"buggy_code": "module test_319(input in, a, output y); assign y = in & a | c; endmodule", "correct_code": "module test_319(input in, a, output y); assign y = (in & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.124609", "id": 32038}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.247299", "id": 54441}
{"buggy_code": "module test_705(input en, x, output out); assign out = en & x | b; endmodule", "correct_code": "module test_705(input en, x, output out); assign out = (en & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.104962", "id": 28440}
{"buggy_code": "module basic_876(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module basic_876(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.968745", "id": 3777}
{"buggy_code": "module simple_738(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module simple_738(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.019134", "id": 12866}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.122234", "id": 31604}
{"buggy_code": "module basic_632(input d, data, output result); assign result = d & data | rst; endmodule", "correct_code": "module basic_632(input d, data, output result); assign result = (d & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.347385", "id": 72664}
{"buggy_code": "module logic_29(input b, output q); assign q = b + 1; endmodule", "correct_code": "module logic_29(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.048600", "id": 18189}
{"buggy_code": "module example_569(input c, data, output prod); assign prod = c & data | data; endmodule", "correct_code": "module example_569(input c, data, output prod); assign prod = (c & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.965156", "id": 3118}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.334463", "id": 70334}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.275729", "id": 59614}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.114559", "id": 30211}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210386", "id": 47702}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051672", "id": 18723}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.278643", "id": 60137}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.143012", "id": 35402}
{"buggy_code": "module demo_56(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module demo_56(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.278664", "id": 60141}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.950771", "id": 505}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.330095", "id": 69537}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.347501", "id": 72685}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.062810", "id": 20775}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.161279", "id": 38768}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.178936", "id": 41996}
{"buggy_code": "module example_936(input rst, en, output result); assign result = rst & en | x; endmodule", "correct_code": "module example_936(input rst, en, output result); assign result = (rst & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.111645", "id": 29673}
{"buggy_code": "module test_324(input d, b, output q); assign q = d & b | en; endmodule", "correct_code": "module test_324(input d, b, output q); assign q = (d & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.072042", "id": 22468}
{"buggy_code": "module simple_438(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module simple_438(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.344261", "id": 72101}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.120078", "id": 31210}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.152550", "id": 37160}
{"buggy_code": "module logic_929(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module logic_929(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.197848", "id": 45410}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.188481", "id": 43731}
{"buggy_code": "module example_762(input in, in, output q); assign q = in & in | in; endmodule", "correct_code": "module example_762(input in, in, output q); assign q = (in & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.010099", "id": 11232}
{"buggy_code": "module example_10(input x, a, output q); assign q = x & a | en; endmodule", "correct_code": "module example_10(input x, a, output q); assign q = (x & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.196328", "id": 45134}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.341672", "id": 71632}
{"buggy_code": "module simple_810(input c, clk, output sum); assign sum = c & clk | x; endmodule", "correct_code": "module simple_810(input c, clk, output sum); assign sum = (c & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.236809", "id": 52518}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.010668", "id": 11337}
{"buggy_code": "module simple_601(input c, x, output q); assign q = c & x | data; endmodule", "correct_code": "module simple_601(input c, x, output q); assign q = (c & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.132856", "id": 33544}
{"buggy_code": "module demo_618(input c, rst, output out); assign out = c & rst | clk; endmodule", "correct_code": "module demo_618(input c, rst, output out); assign out = (c & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.309070", "id": 65720}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.031617", "id": 15119}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.018016", "id": 12669}
{"buggy_code": "module arith_328(input a, a, output valid); assign valid = a & a | d; endmodule", "correct_code": "module arith_328(input a, a, output valid); assign valid = (a & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.286738", "id": 61621}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.120717", "id": 31326}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.021495", "id": 13289}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.966948", "id": 3445}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.143348", "id": 35465}
{"buggy_code": "module example_36(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module example_36(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.063029", "id": 20813}
{"buggy_code": "module simple_473(input data, output out); assign out = data + 1; endmodule", "correct_code": "module simple_473(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.993195", "id": 8170}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.275579", "id": 59587}
{"buggy_code": "module example_107(input en, en, output sum); assign sum = en & en | data; endmodule", "correct_code": "module example_107(input en, en, output sum); assign sum = (en & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.214437", "id": 48438}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.322727", "id": 68186}
{"buggy_code": "module simple_375(input en, d, output result); assign result = en & d | b; endmodule", "correct_code": "module simple_375(input en, d, output result); assign result = (en & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.269694", "id": 58526}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.138875", "id": 34655}
{"buggy_code": "module simple_99(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module simple_99(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.156307", "id": 37852}
{"buggy_code": "module demo_716(input y, output result); assign result = y + 1; endmodule", "correct_code": "module demo_716(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.123734", "id": 31880}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.271835", "id": 58917}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.108276", "id": 29054}
{"buggy_code": "module example_694(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module example_694(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.280479", "id": 60475}
{"buggy_code": "module example_801(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module example_801(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.025240", "id": 13967}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.148060", "id": 36327}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.123986", "id": 31924}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.326795", "id": 68932}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.281345", "id": 60635}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.265366", "id": 57735}
{"buggy_code": "module logic_592(input y, x, output valid); assign valid = y & x | y; endmodule", "correct_code": "module logic_592(input y, x, output valid); assign valid = (y & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.178399", "id": 41896}
{"buggy_code": "module test_397(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module test_397(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.211048", "id": 47821}
{"buggy_code": "module arith_935(input in, b, output out); assign out = in & b | data; endmodule", "correct_code": "module arith_935(input in, b, output out); assign out = (in & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.994918", "id": 8484}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.120637", "id": 31311}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.090925", "id": 25886}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.127602", "id": 32586}
{"buggy_code": "module logic_774(input in, y, output result); assign result = in & y | b; endmodule", "correct_code": "module logic_774(input in, y, output result); assign result = (in & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.096178", "id": 26842}
{"buggy_code": "module arith_337(input data, output out); assign out = data + 1; endmodule", "correct_code": "module arith_337(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174238", "id": 41130}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.277732", "id": 59970}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.075110", "id": 23039}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.009736", "id": 11169}
{"buggy_code": "module basic_483(input data, d, output q); assign q = data & d | in; endmodule", "correct_code": "module basic_483(input data, d, output q); assign q = (data & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.290793", "id": 62363}
{"buggy_code": "module arith_168(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module arith_168(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.289097", "id": 62051}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.061605", "id": 20554}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.099902", "id": 27519}
{"buggy_code": "module simple_26(input x, d, output valid); assign valid = x & d | c; endmodule", "correct_code": "module simple_26(input x, d, output valid); assign valid = (x & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.113155", "id": 29951}
{"buggy_code": "module test_670(input en, output out); assign out = en + 1; endmodule", "correct_code": "module test_670(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.119432", "id": 31095}
{"buggy_code": "module arith_459(input data, c, output y); assign y = data & c | rst; endmodule", "correct_code": "module arith_459(input data, c, output y); assign y = (data & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.351717", "id": 73452}
{"buggy_code": "module simple_462(input in, output y); assign y = in + 1; endmodule", "correct_code": "module simple_462(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.024192", "id": 13778}
{"buggy_code": "module example_917(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module example_917(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.053468", "id": 19051}
{"buggy_code": "module simple_883(input a, output result); assign result = a + 1; endmodule", "correct_code": "module simple_883(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.345072", "id": 72240}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.133409", "id": 33648}
{"buggy_code": "module logic_478(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module logic_478(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.084691", "id": 24745}
{"buggy_code": "module basic_292(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module basic_292(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.253682", "id": 55600}
{"buggy_code": "module arith_812(input rst, data, output prod); assign prod = rst & data | d; endmodule", "correct_code": "module arith_812(input rst, data, output prod); assign prod = (rst & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.242251", "id": 53516}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.096615", "id": 26919}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.148947", "id": 36493}
{"buggy_code": "module example_753(input a, output q); assign q = a + 1; endmodule", "correct_code": "module example_753(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.235420", "id": 52264}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.997408", "id": 8938}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112727", "id": 29873}
{"buggy_code": "module test_10(input c, en, output result); assign result = c & en | rst; endmodule", "correct_code": "module test_10(input c, en, output result); assign result = (c & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.958975", "id": 1992}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.326646", "id": 68904}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.316332", "id": 67045}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.144879", "id": 35747}
{"buggy_code": "module example_885(input en, x, output result); assign result = en & x | a; endmodule", "correct_code": "module example_885(input en, x, output result); assign result = (en & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.993101", "id": 8153}
{"buggy_code": "module arith_35(input c, in, output q); assign q = c & in | c; endmodule", "correct_code": "module arith_35(input c, in, output q); assign q = (c & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.186590", "id": 43388}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.350467", "id": 73224}
{"buggy_code": "module logic_917(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module logic_917(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.250882", "id": 55098}
{"buggy_code": "module simple_250(input y, output result); assign result = y + 1; endmodule", "correct_code": "module simple_250(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.188983", "id": 43821}
{"buggy_code": "module demo_692(input en, b, output valid); assign valid = en & b | d; endmodule", "correct_code": "module demo_692(input en, b, output valid); assign valid = (en & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.281987", "id": 60751}
{"buggy_code": "module test_549(input a, y, output y); assign y = a & y | a; endmodule", "correct_code": "module test_549(input a, y, output y); assign y = (a & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.240135", "id": 53129}
{"buggy_code": "module logic_59(input data, output out); assign out = data + 1; endmodule", "correct_code": "module logic_59(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.232070", "id": 51645}
{"buggy_code": "module basic_37(input c, output out); assign out = c + 1; endmodule", "correct_code": "module basic_37(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.096451", "id": 26890}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.311348", "id": 66139}
{"buggy_code": "module example_417(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module example_417(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.274224", "id": 59356}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.976623", "id": 5201}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.040837", "id": 16785}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.978454", "id": 5485}
{"buggy_code": "module test_66(input c, in, output prod); assign prod = c & in | in; endmodule", "correct_code": "module test_66(input c, in, output prod); assign prod = (c & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.285002", "id": 61304}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.124874", "id": 32085}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.090744", "id": 25855}
{"buggy_code": "module test_606(input en, data, output valid); assign valid = en & data | en; endmodule", "correct_code": "module test_606(input en, data, output valid); assign valid = (en & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.002672", "id": 9898}
{"buggy_code": "module arith_148(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module arith_148(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.999708", "id": 9356}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.288505", "id": 61943}
{"buggy_code": "module demo_353(input x, en, output out); assign out = x & en | x; endmodule", "correct_code": "module demo_353(input x, en, output out); assign out = (x & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.120301", "id": 31250}
{"buggy_code": "module example_708(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module example_708(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.127935", "id": 32645}
{"buggy_code": "module test_346(input in, output q); assign q = in + 1; endmodule", "correct_code": "module test_346(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.035035", "id": 15735}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.299325", "id": 63923}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.088668", "id": 25471}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.040018", "id": 16646}
{"buggy_code": "module test_888(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module test_888(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.269161", "id": 58427}
{"buggy_code": "module simple_203(input d, output y); assign y = d + 1; endmodule", "correct_code": "module simple_203(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.983515", "id": 6397}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.231746", "id": 51589}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.183743", "id": 42869}
{"buggy_code": "module test_253(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module test_253(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.200001", "id": 45803}
{"buggy_code": "module example_978(input c, clk, output result); assign result = c & clk | d; endmodule", "correct_code": "module example_978(input c, clk, output result); assign result = (c & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.994319", "id": 8375}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.186312", "id": 43335}
{"buggy_code": "module basic_543(input a, rst, output result); assign result = a & rst | b; endmodule", "correct_code": "module basic_543(input a, rst, output result); assign result = (a & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.268994", "id": 58395}
{"buggy_code": "module basic_484(input x, data, output result); assign result = x & data | x; endmodule", "correct_code": "module basic_484(input x, data, output result); assign result = (x & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.271708", "id": 58895}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.229523", "id": 51177}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.314241", "id": 66663}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.107428", "id": 28896}
{"buggy_code": "module arith_702(input c, output out); assign out = c + 1; endmodule", "correct_code": "module arith_702(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.107794", "id": 28965}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.205655", "id": 46839}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.012519", "id": 11671}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.174357", "id": 41152}
{"buggy_code": "module simple_572(input b, output result); assign result = b + 1; endmodule", "correct_code": "module simple_572(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.992859", "id": 8109}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.181944", "id": 42538}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.234399", "id": 52076}
{"buggy_code": "module basic_985(input a, x, output q); assign q = a & x | in; endmodule", "correct_code": "module basic_985(input a, x, output q); assign q = (a & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.319316", "id": 67594}
{"buggy_code": "module demo_69(input d, y, output out); assign out = d & y | en; endmodule", "correct_code": "module demo_69(input d, y, output out); assign out = (d & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.153788", "id": 37392}
{"buggy_code": "module arith_589(input c, en, output prod); assign prod = c & en | d; endmodule", "correct_code": "module arith_589(input c, en, output prod); assign prod = (c & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.031182", "id": 15038}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.044905", "id": 17521}
{"buggy_code": "module arith_796(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module arith_796(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.288441", "id": 61930}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.274082", "id": 59330}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.150420", "id": 36766}
{"buggy_code": "module example_787(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module example_787(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.204379", "id": 46605}
{"buggy_code": "module demo_904(input rst, y, output y); assign y = rst & y | data; endmodule", "correct_code": "module demo_904(input rst, y, output y); assign y = (rst & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.979915", "id": 5752}
{"buggy_code": "module logic_873(input rst, rst, output out); assign out = rst & rst | clk; endmodule", "correct_code": "module logic_873(input rst, rst, output out); assign out = (rst & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.195627", "id": 45007}
{"buggy_code": "module arith_877(input b, x, output out); assign out = b & x | in; endmodule", "correct_code": "module arith_877(input b, x, output out); assign out = (b & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.242275", "id": 53521}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.243848", "id": 53806}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.038125", "id": 16299}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.228644", "id": 51018}
{"buggy_code": "module simple_411(input d, x, output valid); assign valid = d & x | c; endmodule", "correct_code": "module simple_411(input d, x, output valid); assign valid = (d & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.274319", "id": 59375}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.981766", "id": 6079}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.288840", "id": 62004}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.342707", "id": 71818}
{"buggy_code": "module basic_973(input a, output q); assign q = a + 1; endmodule", "correct_code": "module basic_973(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.210097", "id": 47647}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.241501", "id": 53382}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.069121", "id": 21928}
{"buggy_code": "module arith_859(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module arith_859(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.004195", "id": 10158}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.112868", "id": 29897}
{"buggy_code": "module logic_22(input y, y, output out); assign out = y & y | clk; endmodule", "correct_code": "module logic_22(input y, y, output out); assign out = (y & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.953077", "id": 925}
{"buggy_code": "module demo_806(input b, c, output prod); assign prod = b & c | a; endmodule", "correct_code": "module demo_806(input b, c, output prod); assign prod = (b & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.280185", "id": 60421}
{"buggy_code": "module simple_520(input c, output y); assign y = c + 1; endmodule", "correct_code": "module simple_520(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.148220", "id": 36358}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210395", "id": 47704}
{"buggy_code": "module logic_183(input in, data, output out); assign out = in & data | x; endmodule", "correct_code": "module logic_183(input in, data, output out); assign out = (in & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.244556", "id": 53939}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.086217", "id": 25026}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.167079", "id": 39824}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.209533", "id": 47543}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008660", "id": 10971}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.335541", "id": 70532}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.246860", "id": 54362}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.082106", "id": 24280}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.251645", "id": 55237}
{"buggy_code": "module simple_861(input in, c, output result); assign result = in & c | en; endmodule", "correct_code": "module simple_861(input in, c, output result); assign result = (in & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.169224", "id": 40215}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.210916", "id": 47797}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.258187", "id": 56424}
{"buggy_code": "module test_375(input b, x, output sum); assign sum = b & x | rst; endmodule", "correct_code": "module test_375(input b, x, output sum); assign sum = (b & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.214631", "id": 48472}
{"buggy_code": "module test_707(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module test_707(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.145771", "id": 35914}
{"buggy_code": "module simple_109(input en, output y); assign y = en + 1; endmodule", "correct_code": "module simple_109(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.327353", "id": 69033}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051938", "id": 18772}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.262121", "id": 57142}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.279705", "id": 60331}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.191658", "id": 44277}
{"buggy_code": "module simple_840(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module simple_840(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.309329", "id": 65768}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.002747", "id": 9912}
{"buggy_code": "module simple_133(input y, in, output sum); assign sum = y & in | d; endmodule", "correct_code": "module simple_133(input y, in, output sum); assign sum = (y & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.282888", "id": 60918}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.146084", "id": 35970}
{"buggy_code": "module simple_769(input y, clk, output valid); assign valid = y & clk | en; endmodule", "correct_code": "module simple_769(input y, clk, output valid); assign valid = (y & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.124280", "id": 31978}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.146340", "id": 36016}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.355845", "id": 74204}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.328447", "id": 69233}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.264507", "id": 57579}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.254389", "id": 55728}
{"buggy_code": "module logic_934(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module logic_934(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.014226", "id": 11981}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.997510", "id": 8958}
{"buggy_code": "module example_798(input in, output y); assign y = in + 1; endmodule", "correct_code": "module example_798(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.032649", "id": 15303}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.160435", "id": 38614}
{"buggy_code": "module test_119(input in, output result); assign result = in + 1; endmodule", "correct_code": "module test_119(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.249989", "id": 54934}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.347914", "id": 72760}
{"buggy_code": "module basic_743(input y, b, output result); assign result = y & b | in; endmodule", "correct_code": "module basic_743(input y, b, output result); assign result = (y & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.107609", "id": 28931}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112261", "id": 29786}
{"buggy_code": "module demo_171(input b, x, output result); assign result = b & x | clk; endmodule", "correct_code": "module demo_171(input b, x, output result); assign result = (b & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.182633", "id": 42664}
{"buggy_code": "module logic_576(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module logic_576(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.015300", "id": 12175}
{"buggy_code": "module logic_611(input en, x, output valid); assign valid = en & x | clk; endmodule", "correct_code": "module logic_611(input en, x, output valid); assign valid = (en & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.274812", "id": 59455}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.961165", "id": 2392}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.033204", "id": 15402}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.277557", "id": 59936}
{"buggy_code": "module simple_678(input b, en, output result); assign result = b & en | rst; endmodule", "correct_code": "module simple_678(input b, en, output result); assign result = (b & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.045271", "id": 17586}
{"buggy_code": "module test_187(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module test_187(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.254441", "id": 55737}
{"buggy_code": "module simple_558(input d, en, output sum); assign sum = d & en | y; endmodule", "correct_code": "module simple_558(input d, en, output sum); assign sum = (d & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.255895", "id": 56001}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.982582", "id": 6227}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.234098", "id": 52021}
{"buggy_code": "module demo_156(input a, d, output prod); assign prod = a & d | a; endmodule", "correct_code": "module demo_156(input a, d, output prod); assign prod = (a & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.216666", "id": 48843}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.097417", "id": 27065}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.129625", "id": 32953}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.251603", "id": 55229}
{"buggy_code": "module demo_478(input x, output y); assign y = x + 1; endmodule", "correct_code": "module demo_478(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.225917", "id": 50520}
{"buggy_code": "module basic_951(input rst, y, output result); assign result = rst & y | rst; endmodule", "correct_code": "module basic_951(input rst, y, output result); assign result = (rst & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.024634", "id": 13858}
{"buggy_code": "module test_942(input in, output out); assign out = in + 1; endmodule", "correct_code": "module test_942(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.207189", "id": 47119}
{"buggy_code": "module demo_622(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module demo_622(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.284507", "id": 61214}
{"buggy_code": "module basic_30(input rst, x, output prod); assign prod = rst & x | clk; endmodule", "correct_code": "module basic_30(input rst, x, output prod); assign prod = (rst & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.203685", "id": 46477}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.070143", "id": 22119}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.047408", "id": 17972}
{"buggy_code": "module arith_879(input en, d, output prod); assign prod = en & d | c; endmodule", "correct_code": "module arith_879(input en, d, output prod); assign prod = (en & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.104539", "id": 28367}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.966858", "id": 3429}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.333081", "id": 70085}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.357233", "id": 74461}
{"buggy_code": "module logic_706(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module logic_706(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.333625", "id": 70185}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.993642", "id": 8252}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.248201", "id": 54605}
{"buggy_code": "module simple_451(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module simple_451(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.968814", "id": 3785}
{"buggy_code": "module basic_817(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module basic_817(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.006149", "id": 10515}
{"buggy_code": "module example_42(input x, output out); assign out = x + 1; endmodule", "correct_code": "module example_42(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.070373", "id": 22161}
{"buggy_code": "module basic_578(input in, b, output q); assign q = in & b | c; endmodule", "correct_code": "module basic_578(input in, b, output q); assign q = (in & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.024662", "id": 13863}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.105545", "id": 28550}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.960656", "id": 2298}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.950217", "id": 408}
{"buggy_code": "module simple_856(input in, in, output q); assign q = in & in | y; endmodule", "correct_code": "module simple_856(input in, in, output q); assign q = (in & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.096167", "id": 26840}
{"buggy_code": "module basic_905(input data, output result); assign result = data + 1; endmodule", "correct_code": "module basic_905(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.126708", "id": 32426}
{"buggy_code": "module demo_361(input x, output y); assign y = x + 1; endmodule", "correct_code": "module demo_361(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308224", "id": 65567}
{"buggy_code": "module demo_290(input data, output q); assign q = data + 1; endmodule", "correct_code": "module demo_290(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.185898", "id": 43259}
{"buggy_code": "module arith_270(input in, y, output prod); assign prod = in & y | clk; endmodule", "correct_code": "module arith_270(input in, y, output prod); assign prod = (in & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.990730", "id": 7721}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.169020", "id": 40178}
{"buggy_code": "module demo_269(input d, in, output sum); assign sum = d & in | b; endmodule", "correct_code": "module demo_269(input d, in, output sum); assign sum = (d & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.057134", "id": 19732}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043328", "id": 17235}
{"buggy_code": "module demo_912(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module demo_912(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.161354", "id": 38783}
{"buggy_code": "module arith_626(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module arith_626(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.953675", "id": 1033}
{"buggy_code": "module test_842(input d, y, output y); assign y = d & y | data; endmodule", "correct_code": "module test_842(input d, y, output y); assign y = (d & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.183340", "id": 42794}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210116", "id": 47651}
{"buggy_code": "module logic_636(input d, output result); assign result = d + 1; endmodule", "correct_code": "module logic_636(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.113484", "id": 30011}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.994861", "id": 8474}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.315527", "id": 66898}
{"buggy_code": "module logic_252(input x, rst, output valid); assign valid = x & rst | clk; endmodule", "correct_code": "module logic_252(input x, rst, output valid); assign valid = (x & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.315597", "id": 66911}
{"buggy_code": "module simple_983(input x, data, output result); assign result = x & data | rst; endmodule", "correct_code": "module simple_983(input x, data, output result); assign result = (x & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.306256", "id": 65199}
{"buggy_code": "module basic_258(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module basic_258(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.963650", "id": 2842}
{"buggy_code": "module simple_932(input rst, clk, output sum); assign sum = rst & clk | d; endmodule", "correct_code": "module simple_932(input rst, clk, output sum); assign sum = (rst & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.304023", "id": 64784}
{"buggy_code": "module test_750(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module test_750(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.976095", "id": 5103}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.984898", "id": 6647}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192203", "id": 44378}
{"buggy_code": "module demo_531(input d, output q); assign q = d + 1; endmodule", "correct_code": "module demo_531(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.301547", "id": 64329}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.034647", "id": 15664}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.048419", "id": 18156}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.992006", "id": 7954}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.993019", "id": 8139}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.292771", "id": 62726}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.214187", "id": 48391}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.175866", "id": 41428}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.353084", "id": 73695}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.099005", "id": 27355}
{"buggy_code": "module logic_65(input y, output out); assign out = y + 1; endmodule", "correct_code": "module logic_65(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.325091", "id": 68619}
{"buggy_code": "module basic_200(input rst, rst, output result); assign result = rst & rst | y; endmodule", "correct_code": "module basic_200(input rst, rst, output result); assign result = (rst & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.980625", "id": 5873}
{"buggy_code": "module example_182(input x, data, output result); assign result = x & data | b; endmodule", "correct_code": "module example_182(input x, data, output result); assign result = (x & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.128588", "id": 32765}
{"buggy_code": "module test_618(input a, x, output y); assign y = a & x | d; endmodule", "correct_code": "module test_618(input a, x, output y); assign y = (a & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.007095", "id": 10689}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.956374", "id": 1521}
{"buggy_code": "module basic_143(input a, rst, output prod); assign prod = a & rst | b; endmodule", "correct_code": "module basic_143(input a, rst, output prod); assign prod = (a & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.979702", "id": 5713}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.294537", "id": 63046}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.103033", "id": 28093}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.300972", "id": 64223}
{"buggy_code": "module demo_102(input data, y, output sum); assign sum = data & y | d; endmodule", "correct_code": "module demo_102(input data, y, output sum); assign sum = (data & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.318150", "id": 67380}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.077529", "id": 23446}
{"buggy_code": "module simple_413(input data, output q); assign q = data + 1; endmodule", "correct_code": "module simple_413(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.126637", "id": 32412}
{"buggy_code": "module example_930(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module example_930(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.335261", "id": 70481}
{"buggy_code": "module basic_280(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module basic_280(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.010380", "id": 11282}
{"buggy_code": "module logic_499(input rst, clk, output y); assign y = rst & clk | data; endmodule", "correct_code": "module logic_499(input rst, clk, output y); assign y = (rst & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.081974", "id": 24257}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.148096", "id": 36334}
{"buggy_code": "module example_525(input d, c, output result); assign result = d & c | c; endmodule", "correct_code": "module example_525(input d, c, output result); assign result = (d & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.285515", "id": 61396}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.215511", "id": 48632}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.279586", "id": 60310}
{"buggy_code": "module logic_38(input a, rst, output result); assign result = a & rst | d; endmodule", "correct_code": "module logic_38(input a, rst, output result); assign result = (a & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.038335", "id": 16336}
{"buggy_code": "module arith_85(input d, in, output valid); assign valid = d & in | y; endmodule", "correct_code": "module arith_85(input d, in, output valid); assign valid = (d & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.251784", "id": 55259}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.356612", "id": 74347}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.267715", "id": 58162}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.249247", "id": 54797}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.240857", "id": 53260}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.126842", "id": 32448}
{"buggy_code": "module basic_664(input d, d, output y); assign y = d & d | b; endmodule", "correct_code": "module basic_664(input d, d, output y); assign y = (d & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.342424", "id": 71767}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.333289", "id": 70123}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.015983", "id": 12299}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.171737", "id": 40676}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.264432", "id": 57564}
{"buggy_code": "module demo_132(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module demo_132(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.089292", "id": 25586}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.222067", "id": 49817}
{"buggy_code": "module basic_558(input c, in, output y); assign y = c & in | b; endmodule", "correct_code": "module basic_558(input c, in, output y); assign y = (c & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.132726", "id": 33522}
{"buggy_code": "module example_117(input y, y, output sum); assign sum = y & y | b; endmodule", "correct_code": "module example_117(input y, y, output sum); assign sum = (y & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.958475", "id": 1902}
{"buggy_code": "module basic_480(input data, b, output out); assign out = data & b | x; endmodule", "correct_code": "module basic_480(input data, b, output out); assign out = (data & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.009632", "id": 11149}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.160235", "id": 38576}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.305500", "id": 65060}
{"buggy_code": "module example_173(input data, data, output result); assign result = data & data | rst; endmodule", "correct_code": "module example_173(input data, data, output result); assign result = (data & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.220660", "id": 49561}
{"buggy_code": "module simple_723(input x, output result); assign result = x + 1; endmodule", "correct_code": "module simple_723(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.349393", "id": 73031}
{"buggy_code": "module example_629(input in, output q); assign q = in + 1; endmodule", "correct_code": "module example_629(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.151340", "id": 36937}
{"buggy_code": "module logic_143(input data, output result); assign result = data + 1; endmodule", "correct_code": "module logic_143(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.158938", "id": 38336}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.011441", "id": 11478}
{"buggy_code": "module logic_295(input c, rst, output out); assign out = c & rst | rst; endmodule", "correct_code": "module logic_295(input c, rst, output out); assign out = (c & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.214264", "id": 48405}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.132966", "id": 33565}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.232841", "id": 51787}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.249568", "id": 54858}
{"buggy_code": "module example_699(input clk, en, output q); assign q = clk & en | c; endmodule", "correct_code": "module example_699(input clk, en, output q); assign q = (clk & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.218155", "id": 49117}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.071917", "id": 22444}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.105063", "id": 28459}
{"buggy_code": "module simple_430(input y, output y); assign y = y + 1; endmodule", "correct_code": "module simple_430(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.164054", "id": 39271}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.048708", "id": 18210}
{"buggy_code": "module arith_463(input b, output out); assign out = b + 1; endmodule", "correct_code": "module arith_463(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.120318", "id": 31253}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.083053", "id": 24451}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.335156", "id": 70461}
{"buggy_code": "module example_195(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module example_195(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.999384", "id": 9297}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.151985", "id": 37056}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.275866", "id": 59635}
{"buggy_code": "module basic_727(input b, clk, output sum); assign sum = b & clk | clk; endmodule", "correct_code": "module basic_727(input b, clk, output sum); assign sum = (b & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.231191", "id": 51488}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.144262", "id": 35632}
{"buggy_code": "module demo_679(input x, data, output valid); assign valid = x & data | c; endmodule", "correct_code": "module demo_679(input x, data, output valid); assign valid = (x & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.104999", "id": 28447}
{"buggy_code": "module arith_579(input data, data, output y); assign y = data & data | clk; endmodule", "correct_code": "module arith_579(input data, data, output y); assign y = (data & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.174370", "id": 41154}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.982006", "id": 6120}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.975911", "id": 5071}
{"buggy_code": "module arith_637(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module arith_637(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.075894", "id": 23179}
{"buggy_code": "module example_549(input rst, data, output prod); assign prod = rst & data | b; endmodule", "correct_code": "module example_549(input rst, data, output prod); assign prod = (rst & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.291098", "id": 62420}
{"buggy_code": "module demo_109(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module demo_109(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.022009", "id": 13380}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.966171", "id": 3304}
{"buggy_code": "module arith_289(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module arith_289(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.267820", "id": 58181}
{"buggy_code": "module demo_20(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module demo_20(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.134926", "id": 33927}
{"buggy_code": "module test_585(input b, output y); assign y = b + 1; endmodule", "correct_code": "module test_585(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.982882", "id": 6280}
{"buggy_code": "module test_719(input in, output result); assign result = in + 1; endmodule", "correct_code": "module test_719(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.044488", "id": 17446}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.252870", "id": 55455}
{"buggy_code": "module logic_592(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module logic_592(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.010438", "id": 11294}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.275008", "id": 59478}
{"buggy_code": "module logic_361(input c, rst, output out); assign out = c & rst | in; endmodule", "correct_code": "module logic_361(input c, rst, output out); assign out = (c & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.232460", "id": 51715}
{"buggy_code": "module logic_406(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module logic_406(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.269019", "id": 58400}
{"buggy_code": "module example_504(input in, a, output q); assign q = in & a | b; endmodule", "correct_code": "module example_504(input in, a, output q); assign q = (in & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.973478", "id": 4630}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.136860", "id": 34279}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.078181", "id": 23566}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.010080", "id": 11229}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.287720", "id": 61800}
{"buggy_code": "module arith_50(input a, output y); assign y = a + 1; endmodule", "correct_code": "module arith_50(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.121363", "id": 31445}
{"buggy_code": "module demo_787(input rst, y, output result); assign result = rst & y | data; endmodule", "correct_code": "module demo_787(input rst, y, output result); assign result = (rst & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.267798", "id": 58177}
{"buggy_code": "module test_991(input x, en, output result); assign result = x & en | en; endmodule", "correct_code": "module test_991(input x, en, output result); assign result = (x & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.190030", "id": 43975}
{"buggy_code": "module demo_242(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module demo_242(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.976857", "id": 5242}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.125686", "id": 32237}
{"buggy_code": "module demo_443(input d, y, output result); assign result = d & y | a; endmodule", "correct_code": "module demo_443(input d, y, output result); assign result = (d & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.188630", "id": 43757}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.072735", "id": 22596}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.350433", "id": 73218}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.116887", "id": 30634}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.218197", "id": 49124}
{"buggy_code": "module logic_894(input data, output result); assign result = data + 1; endmodule", "correct_code": "module logic_894(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.352454", "id": 73588}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.344966", "id": 72220}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.997366", "id": 8930}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.024236", "id": 13786}
{"buggy_code": "module test_261(input b, rst, output sum); assign sum = b & rst | b; endmodule", "correct_code": "module test_261(input b, rst, output sum); assign sum = (b & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.141103", "id": 35064}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.135723", "id": 34073}
{"buggy_code": "module arith_88(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module arith_88(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.098670", "id": 27296}
{"buggy_code": "module simple_823(input c, c, output y); assign y = c & c | data; endmodule", "correct_code": "module simple_823(input c, c, output y); assign y = (c & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.287518", "id": 61762}
{"buggy_code": "module simple_677(input in, a, output prod); assign prod = in & a | data; endmodule", "correct_code": "module simple_677(input in, a, output prod); assign prod = (in & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.290985", "id": 62398}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.110896", "id": 29534}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.229091", "id": 51097}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.060039", "id": 20265}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.012034", "id": 11583}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.960302", "id": 2232}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.976547", "id": 5186}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.303468", "id": 64681}
{"buggy_code": "module arith_742(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module arith_742(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.035905", "id": 15894}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.174693", "id": 41214}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.013328", "id": 11817}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.953875", "id": 1068}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.275962", "id": 59653}
{"buggy_code": "module example_716(input d, c, output prod); assign prod = d & c | c; endmodule", "correct_code": "module example_716(input d, c, output prod); assign prod = (d & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.336394", "id": 70689}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.299458", "id": 63948}
{"buggy_code": "module simple_291(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module simple_291(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.112646", "id": 29857}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.356178", "id": 74265}
{"buggy_code": "module basic_960(input in, en, output result); assign result = in & en | c; endmodule", "correct_code": "module basic_960(input in, en, output result); assign result = (in & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.334318", "id": 70307}
{"buggy_code": "module basic_272(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module basic_272(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.142382", "id": 35284}
{"buggy_code": "module demo_756(input d, c, output prod); assign prod = d & c | d; endmodule", "correct_code": "module demo_756(input d, c, output prod); assign prod = (d & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.172784", "id": 40867}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.207981", "id": 47262}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.108504", "id": 29096}
{"buggy_code": "module logic_931(input data, output out); assign out = data + 1; endmodule", "correct_code": "module logic_931(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.120712", "id": 31325}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.061432", "id": 20522}
{"buggy_code": "module arith_814(input d, a, output prod); assign prod = d & a | data; endmodule", "correct_code": "module arith_814(input d, a, output prod); assign prod = (d & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.270509", "id": 58674}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.154975", "id": 37607}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.135858", "id": 34097}
{"buggy_code": "module demo_175(input a, en, output sum); assign sum = a & en | c; endmodule", "correct_code": "module demo_175(input a, en, output sum); assign sum = (a & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.350975", "id": 73314}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.000109", "id": 9428}
{"buggy_code": "module logic_553(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module logic_553(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.216068", "id": 48734}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.948576", "id": 116}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.084547", "id": 24720}
{"buggy_code": "module simple_9(input clk, a, output result); assign result = clk & a | en; endmodule", "correct_code": "module simple_9(input clk, a, output result); assign result = (clk & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.261958", "id": 57112}
{"buggy_code": "module demo_825(input en, a, output prod); assign prod = en & a | a; endmodule", "correct_code": "module demo_825(input en, a, output prod); assign prod = (en & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.073134", "id": 22670}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.088066", "id": 25359}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.014005", "id": 11942}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192480", "id": 44430}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.111193", "id": 29589}
{"buggy_code": "module arith_359(input in, output result); assign result = in + 1; endmodule", "correct_code": "module arith_359(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.128275", "id": 32707}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.124397", "id": 31999}
{"buggy_code": "module logic_895(input b, en, output sum); assign sum = b & en | y; endmodule", "correct_code": "module logic_895(input b, en, output sum); assign sum = (b & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.026671", "id": 14227}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.331546", "id": 69802}
{"buggy_code": "module simple_661(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module simple_661(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.065885", "id": 21339}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.260398", "id": 56829}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.247776", "id": 54529}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.158390", "id": 38235}
{"buggy_code": "module example_354(input a, b, output sum); assign sum = a & b | clk; endmodule", "correct_code": "module example_354(input a, b, output sum); assign sum = (a & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.979642", "id": 5703}
{"buggy_code": "module simple_44(input x, data, output prod); assign prod = x & data | in; endmodule", "correct_code": "module simple_44(input x, data, output prod); assign prod = (x & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.103891", "id": 28247}
{"buggy_code": "module arith_282(input x, output result); assign result = x + 1; endmodule", "correct_code": "module arith_282(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.354864", "id": 74022}
{"buggy_code": "module demo_245(input d, output result); assign result = d + 1; endmodule", "correct_code": "module demo_245(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.080466", "id": 23985}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.158463", "id": 38248}
{"buggy_code": "module demo_116(input in, output result); assign result = in + 1; endmodule", "correct_code": "module demo_116(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.212195", "id": 48029}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.065421", "id": 21255}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.150844", "id": 36845}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.121685", "id": 31505}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.082359", "id": 24328}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113898", "id": 30088}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.341060", "id": 71520}
{"buggy_code": "module example_270(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module example_270(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.315986", "id": 66980}
{"buggy_code": "module basic_44(input x, b, output q); assign q = x & b | a; endmodule", "correct_code": "module basic_44(input x, b, output q); assign q = (x & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.096458", "id": 26891}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.336547", "id": 70718}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.182479", "id": 42637}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.198062", "id": 45448}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.291580", "id": 62508}
{"buggy_code": "module basic_242(input b, a, output prod); assign prod = b & a | data; endmodule", "correct_code": "module basic_242(input b, a, output prod); assign prod = (b & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.223668", "id": 50113}
{"buggy_code": "module example_666(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module example_666(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.211734", "id": 47948}
{"buggy_code": "module example_424(input b, en, output q); assign q = b & en | b; endmodule", "correct_code": "module example_424(input b, en, output q); assign q = (b & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.046581", "id": 17823}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.350557", "id": 73240}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.306948", "id": 65327}
{"buggy_code": "module arith_848(input x, y, output prod); assign prod = x & y | y; endmodule", "correct_code": "module arith_848(input x, y, output prod); assign prod = (x & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.970636", "id": 4113}
{"buggy_code": "module example_236(input data, x, output result); assign result = data & x | rst; endmodule", "correct_code": "module example_236(input data, x, output result); assign result = (data & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.953335", "id": 972}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.976903", "id": 5250}
{"buggy_code": "module example_544(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module example_544(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.021728", "id": 13332}
{"buggy_code": "module example_496(input y, x, output valid); assign valid = y & x | en; endmodule", "correct_code": "module example_496(input y, x, output valid); assign valid = (y & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.128556", "id": 32759}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.101854", "id": 27879}
{"buggy_code": "module arith_768(input d, clk, output sum); assign sum = d & clk | a; endmodule", "correct_code": "module arith_768(input d, clk, output sum); assign sum = (d & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.973938", "id": 4711}
{"buggy_code": "module example_871(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module example_871(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.309104", "id": 65726}
{"buggy_code": "module demo_998(input y, output y); assign y = y + 1; endmodule", "correct_code": "module demo_998(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.190784", "id": 44113}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.069489", "id": 21997}
{"buggy_code": "module arith_573(input rst, x, output y); assign y = rst & x | d; endmodule", "correct_code": "module arith_573(input rst, x, output y); assign y = (rst & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.960170", "id": 2207}
{"buggy_code": "module simple_997(input c, output y); assign y = c + 1; endmodule", "correct_code": "module simple_997(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.123367", "id": 31812}
{"buggy_code": "module demo_943(input b, b, output sum); assign sum = b & b | x; endmodule", "correct_code": "module demo_943(input b, b, output sum); assign sum = (b & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.017534", "id": 12582}
{"buggy_code": "module demo_15(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module demo_15(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.990470", "id": 7672}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.949886", "id": 348}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.052263", "id": 18831}
{"buggy_code": "module example_733(input y, output out); assign out = y + 1; endmodule", "correct_code": "module example_733(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.090755", "id": 25857}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.335774", "id": 70576}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.265663", "id": 57791}
{"buggy_code": "module basic_319(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module basic_319(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308947", "id": 65698}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.144325", "id": 35644}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.103292", "id": 28139}
{"buggy_code": "module example_588(input d, c, output q); assign q = d & c | in; endmodule", "correct_code": "module example_588(input d, c, output q); assign q = (d & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.338941", "id": 71141}
{"buggy_code": "module example_274(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module example_274(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.045848", "id": 17688}
{"buggy_code": "module example_261(input in, a, output sum); assign sum = in & a | b; endmodule", "correct_code": "module example_261(input in, a, output sum); assign sum = (in & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.041377", "id": 16882}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.138087", "id": 34510}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.294364", "id": 63014}
{"buggy_code": "module simple_241(input d, c, output valid); assign valid = d & c | b; endmodule", "correct_code": "module simple_241(input d, c, output valid); assign valid = (d & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.356722", "id": 74367}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.205850", "id": 46873}
{"buggy_code": "module arith_343(input rst, y, output valid); assign valid = rst & y | rst; endmodule", "correct_code": "module arith_343(input rst, y, output valid); assign valid = (rst & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.332579", "id": 69990}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.345809", "id": 72374}
{"buggy_code": "module demo_106(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module demo_106(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.315468", "id": 66886}
{"buggy_code": "module arith_328(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module arith_328(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.116645", "id": 30592}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.052761", "id": 18920}
{"buggy_code": "module test_133(input d, d, output valid); assign valid = d & d | y; endmodule", "correct_code": "module test_133(input d, d, output valid); assign valid = (d & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.207208", "id": 47122}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.197010", "id": 45258}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.224725", "id": 50303}
{"buggy_code": "module arith_256(input y, a, output sum); assign sum = y & a | b; endmodule", "correct_code": "module arith_256(input y, a, output sum); assign sum = (y & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.999788", "id": 9370}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.260667", "id": 56877}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.230327", "id": 51326}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.020294", "id": 13071}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.137060", "id": 34317}
{"buggy_code": "module demo_184(input data, output y); assign y = data + 1; endmodule", "correct_code": "module demo_184(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.349495", "id": 73049}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.303812", "id": 64746}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.213620", "id": 48289}
{"buggy_code": "module example_975(input clk, en, output valid); assign valid = clk & en | in; endmodule", "correct_code": "module example_975(input clk, en, output valid); assign valid = (clk & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.225409", "id": 50427}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.284436", "id": 61201}
{"buggy_code": "module basic_670(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module basic_670(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.250412", "id": 55011}
{"buggy_code": "module simple_716(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module simple_716(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.191431", "id": 44233}
{"buggy_code": "module example_97(input y, rst, output out); assign out = y & rst | x; endmodule", "correct_code": "module example_97(input y, rst, output out); assign out = (y & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.061617", "id": 20556}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.212971", "id": 48170}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.268974", "id": 58391}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.337733", "id": 70936}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.015548", "id": 12221}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.268988", "id": 58394}
{"buggy_code": "module example_734(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module example_734(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.338032", "id": 70989}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.141684", "id": 35155}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.063772", "id": 20953}
{"buggy_code": "module test_995(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module test_995(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.349089", "id": 72974}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.335018", "id": 70435}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.203786", "id": 46496}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.156014", "id": 37797}
{"buggy_code": "module arith_842(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module arith_842(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.214816", "id": 48507}
{"buggy_code": "module basic_955(input data, output out); assign out = data + 1; endmodule", "correct_code": "module basic_955(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.079159", "id": 23744}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.268901", "id": 58378}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.298465", "id": 63766}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.303981", "id": 64776}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.976804", "id": 5234}
{"buggy_code": "module test_381(input b, output result); assign result = b + 1; endmodule", "correct_code": "module test_381(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.049903", "id": 18400}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.331744", "id": 69838}
{"buggy_code": "module demo_3(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module demo_3(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.277993", "id": 60016}
{"buggy_code": "module arith_895(input c, b, output result); assign result = c & b | a; endmodule", "correct_code": "module arith_895(input c, b, output result); assign result = (c & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.123517", "id": 31840}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.028016", "id": 14468}
{"buggy_code": "module demo_385(input y, b, output sum); assign sum = y & b | y; endmodule", "correct_code": "module demo_385(input y, b, output sum); assign sum = (y & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.172200", "id": 40762}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272264", "id": 58998}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.241717", "id": 53422}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.332803", "id": 70032}
{"buggy_code": "module basic_29(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module basic_29(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.081297", "id": 24136}
{"buggy_code": "module arith_408(input a, in, output result); assign result = a & in | data; endmodule", "correct_code": "module arith_408(input a, in, output result); assign result = (a & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.219276", "id": 49323}
{"buggy_code": "module logic_596(input en, d, output out); assign out = en & d | x; endmodule", "correct_code": "module logic_596(input en, d, output out); assign out = (en & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.226297", "id": 50591}
{"buggy_code": "module basic_129(input data, d, output out); assign out = data & d | en; endmodule", "correct_code": "module basic_129(input data, d, output out); assign out = (data & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.185234", "id": 43140}
{"buggy_code": "module arith_91(input clk, clk, output y); assign y = clk & clk | clk; endmodule", "correct_code": "module arith_91(input clk, clk, output y); assign y = (clk & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.989370", "id": 7468}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.202940", "id": 46340}
{"buggy_code": "module example_205(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module example_205(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.986237", "id": 6894}
{"buggy_code": "module example_962(input in, output q); assign q = in + 1; endmodule", "correct_code": "module example_962(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.288407", "id": 61924}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.005093", "id": 10322}
{"buggy_code": "module arith_994(input in, output y); assign y = in + 1; endmodule", "correct_code": "module arith_994(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.303300", "id": 64649}
{"buggy_code": "module test_567(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module test_567(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.098172", "id": 27202}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.049123", "id": 18284}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.115056", "id": 30302}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.236210", "id": 52405}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.336050", "id": 70626}
{"buggy_code": "module basic_195(input d, output y); assign y = d + 1; endmodule", "correct_code": "module basic_195(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.331189", "id": 69738}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.260054", "id": 56765}
{"buggy_code": "module example_699(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module example_699(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.180970", "id": 42370}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.965383", "id": 3162}
{"buggy_code": "module example_842(input a, output q); assign q = a + 1; endmodule", "correct_code": "module example_842(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.223876", "id": 50148}
{"buggy_code": "module simple_827(input c, clk, output prod); assign prod = c & clk | en; endmodule", "correct_code": "module simple_827(input c, clk, output prod); assign prod = (c & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.968595", "id": 3750}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.123322", "id": 31803}
{"buggy_code": "module example_366(input en, in, output sum); assign sum = en & in | data; endmodule", "correct_code": "module example_366(input en, in, output sum); assign sum = (en & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.158103", "id": 38181}
{"buggy_code": "module test_731(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module test_731(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.985192", "id": 6702}
{"buggy_code": "module logic_179(input d, en, output valid); assign valid = d & en | in; endmodule", "correct_code": "module logic_179(input d, en, output valid); assign valid = (d & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.127162", "id": 32506}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.959461", "id": 2083}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.017566", "id": 12589}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.067386", "id": 21612}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.142185", "id": 35245}
{"buggy_code": "module basic_36(input in, en, output prod); assign prod = in & en | b; endmodule", "correct_code": "module basic_36(input in, en, output prod); assign prod = (in & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.346905", "id": 72576}
{"buggy_code": "module arith_12(input x, data, output y); assign y = x & data | en; endmodule", "correct_code": "module arith_12(input x, data, output y); assign y = (x & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.279477", "id": 60290}
{"buggy_code": "module test_228(input en, output out); assign out = en + 1; endmodule", "correct_code": "module test_228(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.050677", "id": 18542}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.189170", "id": 43856}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.018234", "id": 12710}
{"buggy_code": "module demo_607(input data, output out); assign out = data + 1; endmodule", "correct_code": "module demo_607(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.211856", "id": 47968}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.351234", "id": 73363}
{"buggy_code": "module arith_569(input d, output out); assign out = d + 1; endmodule", "correct_code": "module arith_569(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.008931", "id": 11020}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.055739", "id": 19476}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.957281", "id": 1685}
{"buggy_code": "module test_520(input in, data, output sum); assign sum = in & data | d; endmodule", "correct_code": "module test_520(input in, data, output sum); assign sum = (in & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.964579", "id": 3014}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.998860", "id": 9200}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113842", "id": 30078}
{"buggy_code": "module arith_548(input rst, b, output result); assign result = rst & b | d; endmodule", "correct_code": "module arith_548(input rst, b, output result); assign result = (rst & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.004538", "id": 10221}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.275380", "id": 59548}
{"buggy_code": "module demo_214(input c, output y); assign y = c + 1; endmodule", "correct_code": "module demo_214(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.085707", "id": 24934}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.276771", "id": 59793}
{"buggy_code": "module example_863(input data, output q); assign q = data + 1; endmodule", "correct_code": "module example_863(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.009958", "id": 11208}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.078607", "id": 23644}
{"buggy_code": "module basic_520(input en, x, output q); assign q = en & x | en; endmodule", "correct_code": "module basic_520(input en, x, output q); assign q = (en & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.108054", "id": 29012}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.217368", "id": 48972}
{"buggy_code": "module simple_482(input in, output out); assign out = in + 1; endmodule", "correct_code": "module simple_482(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.242359", "id": 53536}
{"buggy_code": "module test_746(input data, output q); assign q = data + 1; endmodule", "correct_code": "module test_746(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.161577", "id": 38823}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.348238", "id": 72820}
{"buggy_code": "module simple_310(input x, a, output sum); assign sum = x & a | d; endmodule", "correct_code": "module simple_310(input x, a, output sum); assign sum = (x & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.233997", "id": 52003}
{"buggy_code": "module logic_421(input clk, b, output sum); assign sum = clk & b | clk; endmodule", "correct_code": "module logic_421(input clk, b, output sum); assign sum = (clk & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.011002", "id": 11396}
{"buggy_code": "module basic_892(input c, output result); assign result = c + 1; endmodule", "correct_code": "module basic_892(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.327011", "id": 68969}
{"buggy_code": "module arith_448(input c, en, output y); assign y = c & en | y; endmodule", "correct_code": "module arith_448(input c, en, output y); assign y = (c & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.083630", "id": 24556}
{"buggy_code": "module test_820(input data, c, output prod); assign prod = data & c | y; endmodule", "correct_code": "module test_820(input data, c, output prod); assign prod = (data & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.052211", "id": 18821}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.064782", "id": 21140}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.078381", "id": 23602}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.956264", "id": 1501}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.009536", "id": 11132}
{"buggy_code": "module logic_185(input x, data, output prod); assign prod = x & data | clk; endmodule", "correct_code": "module logic_185(input x, data, output prod); assign prod = (x & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.067955", "id": 21714}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.054586", "id": 19259}
{"buggy_code": "module example_101(input y, y, output prod); assign prod = y & y | x; endmodule", "correct_code": "module example_101(input y, y, output prod); assign prod = (y & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.310455", "id": 65972}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.266810", "id": 57999}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.274817", "id": 59456}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.321008", "id": 67871}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.171371", "id": 40608}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.299749", "id": 64000}
{"buggy_code": "module example_477(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module example_477(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.270737", "id": 58717}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.019837", "id": 12987}
{"buggy_code": "module simple_807(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module simple_807(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.978344", "id": 5465}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.032023", "id": 15191}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.273614", "id": 59246}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.140899", "id": 35027}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.990914", "id": 7755}
{"buggy_code": "module arith_524(input a, clk, output result); assign result = a & clk | c; endmodule", "correct_code": "module arith_524(input a, clk, output result); assign result = (a & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.336605", "id": 70729}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.956411", "id": 1527}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.993338", "id": 8197}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.312746", "id": 66392}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.123168", "id": 31776}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.135895", "id": 34104}
{"buggy_code": "module logic_634(input x, output out); assign out = x + 1; endmodule", "correct_code": "module logic_634(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.198354", "id": 45503}
{"buggy_code": "module example_100(input b, clk, output q); assign q = b & clk | data; endmodule", "correct_code": "module example_100(input b, clk, output q); assign q = (b & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.086277", "id": 25036}
{"buggy_code": "module demo_324(input in, output y); assign y = in + 1; endmodule", "correct_code": "module demo_324(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.304622", "id": 64900}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.967868", "id": 3617}
{"buggy_code": "module demo_873(input a, output result); assign result = a + 1; endmodule", "correct_code": "module demo_873(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.141643", "id": 35147}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.081932", "id": 24250}
{"buggy_code": "module logic_843(input b, y, output y); assign y = b & y | a; endmodule", "correct_code": "module logic_843(input b, y, output y); assign y = (b & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.080146", "id": 23926}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.347066", "id": 72606}
{"buggy_code": "module logic_904(input x, rst, output prod); assign prod = x & rst | in; endmodule", "correct_code": "module logic_904(input x, rst, output prod); assign prod = (x & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.340055", "id": 71339}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.971454", "id": 4264}
{"buggy_code": "module test_700(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module test_700(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118136", "id": 30865}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.125509", "id": 32204}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.149222", "id": 36545}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.077668", "id": 23472}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.027902", "id": 14447}
{"buggy_code": "module basic_43(input b, y, output q); assign q = b & y | y; endmodule", "correct_code": "module basic_43(input b, y, output q); assign q = (b & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.113511", "id": 30016}
{"buggy_code": "module simple_123(input clk, clk, output out); assign out = clk & clk | b; endmodule", "correct_code": "module simple_123(input clk, clk, output out); assign out = (clk & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.244777", "id": 53981}
{"buggy_code": "module simple_648(input a, a, output y); assign y = a & a | x; endmodule", "correct_code": "module simple_648(input a, a, output y); assign y = (a & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.016645", "id": 12420}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.052688", "id": 18908}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.302883", "id": 64573}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.033422", "id": 15441}
{"buggy_code": "module example_768(input data, output q); assign q = data + 1; endmodule", "correct_code": "module example_768(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.202011", "id": 46171}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.298516", "id": 63776}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.071087", "id": 22294}
{"buggy_code": "module arith_798(input c, output result); assign result = c + 1; endmodule", "correct_code": "module arith_798(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.331621", "id": 69815}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.070560", "id": 22195}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.175813", "id": 41420}
{"buggy_code": "module arith_301(input en, in, output out); assign out = en & in | rst; endmodule", "correct_code": "module arith_301(input en, in, output out); assign out = (en & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.109180", "id": 29218}
{"buggy_code": "module logic_528(input y, b, output sum); assign sum = y & b | in; endmodule", "correct_code": "module logic_528(input y, b, output sum); assign sum = (y & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.161861", "id": 38874}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.007100", "id": 10690}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.124691", "id": 32053}
{"buggy_code": "module test_422(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module test_422(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.063277", "id": 20859}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.263035", "id": 57308}
{"buggy_code": "module simple_883(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module simple_883(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.303741", "id": 64733}
{"buggy_code": "module example_221(input x, b, output y); assign y = x & b | c; endmodule", "correct_code": "module example_221(input x, b, output y); assign y = (x & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.978306", "id": 5458}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.001641", "id": 9708}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.336615", "id": 70731}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.189594", "id": 43896}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.029810", "id": 14792}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.031671", "id": 15130}
{"buggy_code": "module test_677(input rst, b, output y); assign y = rst & b | data; endmodule", "correct_code": "module test_677(input rst, b, output y); assign y = (rst & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.097049", "id": 26997}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.132539", "id": 33488}
{"buggy_code": "module test_849(input c, x, output y); assign y = c & x | data; endmodule", "correct_code": "module test_849(input c, x, output y); assign y = (c & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.977934", "id": 5390}
{"buggy_code": "module simple_832(input a, a, output valid); assign valid = a & a | rst; endmodule", "correct_code": "module simple_832(input a, a, output valid); assign valid = (a & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.136322", "id": 34182}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.041711", "id": 16941}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.185373", "id": 43163}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.082911", "id": 24425}
{"buggy_code": "module simple_149(input d, rst, output result); assign result = d & rst | x; endmodule", "correct_code": "module simple_149(input d, rst, output result); assign result = (d & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.035876", "id": 15889}
{"buggy_code": "module logic_425(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module logic_425(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.153628", "id": 37361}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.053966", "id": 19143}
{"buggy_code": "module arith_771(input y, output result); assign result = y + 1; endmodule", "correct_code": "module arith_771(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.138193", "id": 34529}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.253043", "id": 55488}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.350256", "id": 73186}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.156316", "id": 37854}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113495", "id": 30013}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.058192", "id": 19925}
{"buggy_code": "module example_810(input in, a, output y); assign y = in & a | in; endmodule", "correct_code": "module example_810(input in, a, output y); assign y = (in & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.007116", "id": 10693}
{"buggy_code": "module basic_32(input a, data, output prod); assign prod = a & data | rst; endmodule", "correct_code": "module basic_32(input a, data, output prod); assign prod = (a & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.188229", "id": 43685}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.067291", "id": 21594}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.222799", "id": 49951}
{"buggy_code": "module example_680(input x, x, output result); assign result = x & x | in; endmodule", "correct_code": "module example_680(input x, x, output result); assign result = (x & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.086800", "id": 25133}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.310201", "id": 65926}
{"buggy_code": "module basic_748(input in, clk, output prod); assign prod = in & clk | x; endmodule", "correct_code": "module basic_748(input in, clk, output prod); assign prod = (in & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.156449", "id": 37878}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.042143", "id": 17019}
{"buggy_code": "module simple_280(input x, output result); assign result = x + 1; endmodule", "correct_code": "module simple_280(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.285152", "id": 61330}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.122907", "id": 31728}
{"buggy_code": "module simple_796(input clk, clk, output q); assign q = clk & clk | y; endmodule", "correct_code": "module simple_796(input clk, clk, output q); assign q = (clk & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.156289", "id": 37849}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.309498", "id": 65800}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.139938", "id": 34849}
{"buggy_code": "module demo_406(input a, b, output prod); assign prod = a & b | en; endmodule", "correct_code": "module demo_406(input a, b, output prod); assign prod = (a & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.991549", "id": 7872}
{"buggy_code": "module test_971(input x, output y); assign y = x + 1; endmodule", "correct_code": "module test_971(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.265960", "id": 57844}
{"buggy_code": "module test_576(input b, b, output q); assign q = b & b | y; endmodule", "correct_code": "module test_576(input b, b, output q); assign q = (b & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.104756", "id": 28406}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.145329", "id": 35834}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.290891", "id": 62380}
{"buggy_code": "module arith_300(input c, output result); assign result = c + 1; endmodule", "correct_code": "module arith_300(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.289642", "id": 62152}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.985590", "id": 6777}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.193659", "id": 44646}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.130899", "id": 33188}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.993283", "id": 8187}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.310664", "id": 66012}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.269299", "id": 58452}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.986451", "id": 6935}
{"buggy_code": "module simple_983(input data, output y); assign y = data + 1; endmodule", "correct_code": "module simple_983(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.270963", "id": 58757}
{"buggy_code": "module simple_274(input x, y, output result); assign result = x & y | rst; endmodule", "correct_code": "module simple_274(input x, y, output result); assign result = (x & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.352313", "id": 73561}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.026398", "id": 14177}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.211915", "id": 47979}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.111677", "id": 29679}
{"buggy_code": "module demo_982(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module demo_982(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.171535", "id": 40639}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.146418", "id": 36031}
{"buggy_code": "module arith_408(input x, data, output q); assign q = x & data | in; endmodule", "correct_code": "module arith_408(input x, data, output q); assign q = (x & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.180114", "id": 42213}
{"buggy_code": "module example_680(input in, output y); assign y = in + 1; endmodule", "correct_code": "module example_680(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.344445", "id": 72134}
{"buggy_code": "module basic_335(input x, in, output sum); assign sum = x & in | y; endmodule", "correct_code": "module basic_335(input x, in, output sum); assign sum = (x & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.199294", "id": 45672}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.342642", "id": 71806}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.101044", "id": 27729}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.974727", "id": 4857}
{"buggy_code": "module arith_964(input clk, a, output out); assign out = clk & a | x; endmodule", "correct_code": "module arith_964(input clk, a, output out); assign out = (clk & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.094886", "id": 26604}
{"buggy_code": "module example_226(input d, in, output q); assign q = d & in | a; endmodule", "correct_code": "module example_226(input d, in, output q); assign q = (d & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.989331", "id": 7461}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.205846", "id": 46872}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.357275", "id": 74469}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.970216", "id": 4035}
{"buggy_code": "module demo_778(input x, output result); assign result = x + 1; endmodule", "correct_code": "module demo_778(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.976629", "id": 5202}
{"buggy_code": "module example_424(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module example_424(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.055129", "id": 19364}
{"buggy_code": "module simple_562(input y, rst, output valid); assign valid = y & rst | b; endmodule", "correct_code": "module simple_562(input y, rst, output valid); assign valid = (y & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.995013", "id": 8501}
{"buggy_code": "module demo_653(input b, x, output out); assign out = b & x | in; endmodule", "correct_code": "module demo_653(input b, x, output out); assign out = (b & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.024789", "id": 13886}
{"buggy_code": "module test_882(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module test_882(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.071033", "id": 22284}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.151990", "id": 37057}
{"buggy_code": "module simple_922(input x, output result); assign result = x + 1; endmodule", "correct_code": "module simple_922(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.140134", "id": 34885}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.974081", "id": 4737}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.952620", "id": 844}
{"buggy_code": "module logic_376(input en, output result); assign result = en + 1; endmodule", "correct_code": "module logic_376(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.972268", "id": 4412}
{"buggy_code": "module logic_752(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module logic_752(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.110125", "id": 29393}
{"buggy_code": "module logic_259(input en, output result); assign result = en + 1; endmodule", "correct_code": "module logic_259(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.351585", "id": 73428}
{"buggy_code": "module test_61(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module test_61(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.278983", "id": 60198}
{"buggy_code": "module test_913(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module test_913(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.169096", "id": 40192}
{"buggy_code": "module simple_696(input in, x, output q); assign q = in & x | x; endmodule", "correct_code": "module simple_696(input in, x, output q); assign q = (in & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.970772", "id": 4138}
{"buggy_code": "module basic_182(input d, in, output q); assign q = d & in | d; endmodule", "correct_code": "module basic_182(input d, in, output q); assign q = (d & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.298699", "id": 63807}
{"buggy_code": "module demo_440(input a, output out); assign out = a + 1; endmodule", "correct_code": "module demo_440(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.282932", "id": 60926}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.142765", "id": 35356}
{"buggy_code": "module logic_211(input data, d, output result); assign result = data & d | rst; endmodule", "correct_code": "module logic_211(input data, d, output result); assign result = (data & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.233711", "id": 51951}
{"buggy_code": "module basic_752(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module basic_752(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.050287", "id": 18471}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.174397", "id": 41159}
{"buggy_code": "module basic_710(input d, en, output valid); assign valid = d & en | y; endmodule", "correct_code": "module basic_710(input d, en, output valid); assign valid = (d & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.030886", "id": 14984}
{"buggy_code": "module example_57(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module example_57(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.028205", "id": 14502}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.108265", "id": 29052}
{"buggy_code": "module demo_728(input x, data, output prod); assign prod = x & data | y; endmodule", "correct_code": "module demo_728(input x, data, output prod); assign prod = (x & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.084274", "id": 24670}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.085035", "id": 24808}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.985783", "id": 6812}
{"buggy_code": "module test_144(input y, output out); assign out = y + 1; endmodule", "correct_code": "module test_144(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.117712", "id": 30790}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.166563", "id": 39728}
{"buggy_code": "module logic_938(input en, clk, output prod); assign prod = en & clk | a; endmodule", "correct_code": "module logic_938(input en, clk, output prod); assign prod = (en & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.274390", "id": 59388}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.952258", "id": 777}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.219007", "id": 49273}
{"buggy_code": "module test_842(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module test_842(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.241384", "id": 53359}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.359427", "id": 74863}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.010404", "id": 11287}
{"buggy_code": "module logic_21(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module logic_21(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.246946", "id": 54378}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.068946", "id": 21894}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.170261", "id": 40405}
{"buggy_code": "module simple_175(input y, b, output out); assign out = y & b | c; endmodule", "correct_code": "module simple_175(input y, b, output out); assign out = (y & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.331232", "id": 69746}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.100317", "id": 27597}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.278229", "id": 60060}
{"buggy_code": "module test_149(input en, output q); assign q = en + 1; endmodule", "correct_code": "module test_149(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.951688", "id": 675}
{"buggy_code": "module arith_907(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module arith_907(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.186914", "id": 43444}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.157921", "id": 38147}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.187814", "id": 43610}
{"buggy_code": "module test_657(input clk, en, output out); assign out = clk & en | y; endmodule", "correct_code": "module test_657(input clk, en, output out); assign out = (clk & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.293762", "id": 62906}
{"buggy_code": "module test_561(input en, a, output result); assign result = en & a | in; endmodule", "correct_code": "module test_561(input en, a, output result); assign result = (en & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.956919", "id": 1616}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.197108", "id": 45276}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.256004", "id": 56021}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.038251", "id": 16321}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.322887", "id": 68215}
{"buggy_code": "module example_218(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module example_218(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.291544", "id": 62501}
{"buggy_code": "module arith_975(input b, output out); assign out = b + 1; endmodule", "correct_code": "module arith_975(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.273476", "id": 59220}
{"buggy_code": "module test_458(input rst, data, output valid); assign valid = rst & data | c; endmodule", "correct_code": "module test_458(input rst, data, output valid); assign valid = (rst & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.030506", "id": 14918}
{"buggy_code": "module arith_513(input x, in, output y); assign y = x & in | a; endmodule", "correct_code": "module arith_513(input x, in, output y); assign y = (x & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.265679", "id": 57794}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.221858", "id": 49778}
{"buggy_code": "module example_581(input c, y, output valid); assign valid = c & y | in; endmodule", "correct_code": "module example_581(input c, y, output valid); assign valid = (c & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.991671", "id": 7894}
{"buggy_code": "module test_509(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module test_509(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.964501", "id": 3000}
{"buggy_code": "module logic_170(input en, y, output prod); assign prod = en & y | en; endmodule", "correct_code": "module logic_170(input en, y, output prod); assign prod = (en & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.354101", "id": 73882}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.234920", "id": 52170}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.178520", "id": 41919}
{"buggy_code": "module basic_841(input b, clk, output valid); assign valid = b & clk | rst; endmodule", "correct_code": "module basic_841(input b, clk, output valid); assign valid = (b & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.082020", "id": 24265}
{"buggy_code": "module arith_401(input y, b, output q); assign q = y & b | c; endmodule", "correct_code": "module arith_401(input y, b, output q); assign q = (y & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.302429", "id": 64491}
{"buggy_code": "module test_938(input b, output y); assign y = b + 1; endmodule", "correct_code": "module test_938(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.101371", "id": 27790}
{"buggy_code": "module test_18(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module test_18(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.215075", "id": 48552}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.948548", "id": 111}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.354441", "id": 73944}
{"buggy_code": "module test_380(input rst, data, output q); assign q = rst & data | y; endmodule", "correct_code": "module test_380(input rst, data, output q); assign q = (rst & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.173509", "id": 41000}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.233292", "id": 51871}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.251499", "id": 55210}
{"buggy_code": "module example_424(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module example_424(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.089605", "id": 25643}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.273933", "id": 59302}
{"buggy_code": "module basic_526(input b, y, output y); assign y = b & y | rst; endmodule", "correct_code": "module basic_526(input b, y, output y); assign y = (b & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.030620", "id": 14938}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.986779", "id": 6996}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.266841", "id": 58002}
{"buggy_code": "module demo_308(input in, in, output y); assign y = in & in | y; endmodule", "correct_code": "module demo_308(input in, in, output y); assign y = (in & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.089943", "id": 25704}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.108185", "id": 29037}
{"buggy_code": "module arith_55(input a, output q); assign q = a + 1; endmodule", "correct_code": "module arith_55(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.181107", "id": 42393}
{"buggy_code": "module test_732(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module test_732(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.069592", "id": 22016}
{"buggy_code": "module logic_657(input en, output y); assign y = en + 1; endmodule", "correct_code": "module logic_657(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.264278", "id": 57535}
{"buggy_code": "module logic_103(input en, b, output out); assign out = en & b | en; endmodule", "correct_code": "module logic_103(input en, b, output out); assign out = (en & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.359406", "id": 74859}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.026775", "id": 14246}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.054986", "id": 19335}
{"buggy_code": "module simple_644(input y, en, output result); assign result = y & en | c; endmodule", "correct_code": "module simple_644(input y, en, output result); assign result = (y & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.125121", "id": 32133}
{"buggy_code": "module arith_152(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module arith_152(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.190657", "id": 44091}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.085340", "id": 24865}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.986925", "id": 7021}
{"buggy_code": "module example_76(input en, d, output sum); assign sum = en & d | b; endmodule", "correct_code": "module example_76(input en, d, output sum); assign sum = (en & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.004049", "id": 10131}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.138136", "id": 34519}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.262631", "id": 57237}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.995300", "id": 8553}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.091610", "id": 26014}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.229643", "id": 51199}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.106769", "id": 28777}
{"buggy_code": "module test_23(input en, y, output result); assign result = en & y | data; endmodule", "correct_code": "module test_23(input en, y, output result); assign result = (en & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.329307", "id": 69394}
{"buggy_code": "module example_60(input y, rst, output y); assign y = y & rst | en; endmodule", "correct_code": "module example_60(input y, rst, output y); assign y = (y & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.014647", "id": 12059}
{"buggy_code": "module test_743(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module test_743(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.087551", "id": 25267}
{"buggy_code": "module example_509(input x, output y); assign y = x + 1; endmodule", "correct_code": "module example_509(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.985636", "id": 6785}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.359053", "id": 74793}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.081240", "id": 24124}
{"buggy_code": "module basic_504(input in, d, output prod); assign prod = in & d | clk; endmodule", "correct_code": "module basic_504(input in, d, output prod); assign prod = (in & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.187926", "id": 43628}
{"buggy_code": "module basic_575(input x, c, output valid); assign valid = x & c | clk; endmodule", "correct_code": "module basic_575(input x, c, output valid); assign valid = (x & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.319990", "id": 67701}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.992649", "id": 8073}
{"buggy_code": "module arith_287(input en, x, output y); assign y = en & x | rst; endmodule", "correct_code": "module arith_287(input en, x, output y); assign y = (en & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.010060", "id": 11225}
{"buggy_code": "module arith_512(input data, rst, output y); assign y = data & rst | in; endmodule", "correct_code": "module arith_512(input data, rst, output y); assign y = (data & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.077646", "id": 23468}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.224834", "id": 50323}
{"buggy_code": "module simple_53(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module simple_53(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.960896", "id": 2341}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.975481", "id": 4993}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.292907", "id": 62749}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112917", "id": 29907}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.334277", "id": 70303}
{"buggy_code": "module demo_115(input data, output y); assign y = data + 1; endmodule", "correct_code": "module demo_115(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.307755", "id": 65480}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.037340", "id": 16155}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.116092", "id": 30490}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.325402", "id": 68676}
{"buggy_code": "module example_118(input c, output q); assign q = c + 1; endmodule", "correct_code": "module example_118(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.198993", "id": 45619}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.134747", "id": 33896}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.198763", "id": 45579}
{"buggy_code": "module test_185(input en, a, output result); assign result = en & a | data; endmodule", "correct_code": "module test_185(input en, a, output result); assign result = (en & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.004181", "id": 10156}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.086500", "id": 25078}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.081186", "id": 24115}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.962957", "id": 2716}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.958402", "id": 1889}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.031815", "id": 15156}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.137861", "id": 34468}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.329505", "id": 69431}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.066221", "id": 21400}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.055590", "id": 19448}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.001592", "id": 9698}
{"buggy_code": "module example_387(input c, b, output y); assign y = c & b | c; endmodule", "correct_code": "module example_387(input c, b, output y); assign y = (c & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.085639", "id": 24922}
{"buggy_code": "module simple_958(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module simple_958(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.298918", "id": 63846}
{"buggy_code": "module demo_296(input y, en, output q); assign q = y & en | c; endmodule", "correct_code": "module demo_296(input y, en, output q); assign q = (y & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.144466", "id": 35671}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.055169", "id": 19371}
{"buggy_code": "module simple_80(input b, in, output valid); assign valid = b & in | clk; endmodule", "correct_code": "module simple_80(input b, in, output valid); assign valid = (b & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.050719", "id": 18549}
{"buggy_code": "module arith_505(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module arith_505(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.255264", "id": 55887}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.295988", "id": 63312}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.066286", "id": 21411}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.119211", "id": 31060}
{"buggy_code": "module simple_376(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module simple_376(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.997127", "id": 8887}
{"buggy_code": "module basic_200(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module basic_200(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.266744", "id": 57987}
{"buggy_code": "module example_586(input rst, data, output q); assign q = rst & data | data; endmodule", "correct_code": "module example_586(input rst, data, output q); assign q = (rst & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.004359", "id": 10188}
{"buggy_code": "module logic_175(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module logic_175(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.212767", "id": 48132}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.056397", "id": 19596}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.155941", "id": 37784}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.184641", "id": 43032}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.005944", "id": 10479}
{"buggy_code": "module example_716(input y, d, output result); assign result = y & d | a; endmodule", "correct_code": "module example_716(input y, d, output result); assign result = (y & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.135487", "id": 34030}
{"buggy_code": "module basic_285(input a, output result); assign result = a + 1; endmodule", "correct_code": "module basic_285(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091802", "id": 26049}
{"buggy_code": "module simple_415(input rst, c, output y); assign y = rst & c | d; endmodule", "correct_code": "module simple_415(input rst, c, output y); assign y = (rst & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.060752", "id": 20396}
{"buggy_code": "module simple_217(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module simple_217(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.173572", "id": 41012}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.960025", "id": 2182}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.134140", "id": 33783}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.291950", "id": 62574}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.160486", "id": 38623}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.987201", "id": 7073}
{"buggy_code": "module example_137(input c, output q); assign q = c + 1; endmodule", "correct_code": "module example_137(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.331640", "id": 69818}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.342961", "id": 71862}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.141370", "id": 35095}
{"buggy_code": "module example_873(input b, x, output prod); assign prod = b & x | en; endmodule", "correct_code": "module example_873(input b, x, output prod); assign prod = (b & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.245435", "id": 54104}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.975045", "id": 4914}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.995663", "id": 8620}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.268291", "id": 58266}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.184770", "id": 43057}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.009195", "id": 11069}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.187730", "id": 43594}
{"buggy_code": "module example_145(input a, output result); assign result = a + 1; endmodule", "correct_code": "module example_145(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.982241", "id": 6163}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.115749", "id": 30429}
{"buggy_code": "module test_214(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module test_214(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.124531", "id": 32023}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.005192", "id": 10341}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.063481", "id": 20898}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.325650", "id": 68720}
{"buggy_code": "module basic_51(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module basic_51(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.087435", "id": 25246}
{"buggy_code": "module basic_759(input b, b, output result); assign result = b & b | b; endmodule", "correct_code": "module basic_759(input b, b, output result); assign result = (b & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.197942", "id": 45427}
{"buggy_code": "module example_705(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module example_705(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.188118", "id": 43664}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.025554", "id": 14026}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.018707", "id": 12796}
{"buggy_code": "module example_362(input a, output y); assign y = a + 1; endmodule", "correct_code": "module example_362(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.979427", "id": 5662}
{"buggy_code": "module example_382(input rst, data, output valid); assign valid = rst & data | x; endmodule", "correct_code": "module example_382(input rst, data, output valid); assign valid = (rst & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.271576", "id": 58871}
{"buggy_code": "module example_544(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module example_544(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.018046", "id": 12674}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.953610", "id": 1021}
{"buggy_code": "module logic_421(input data, a, output sum); assign sum = data & a | a; endmodule", "correct_code": "module logic_421(input data, a, output sum); assign sum = (data & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.333306", "id": 70126}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.273851", "id": 59286}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.955701", "id": 1399}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.149285", "id": 36557}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.952105", "id": 748}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.325046", "id": 68611}
{"buggy_code": "module logic_429(input a, en, output q); assign q = a & en | rst; endmodule", "correct_code": "module logic_429(input a, en, output q); assign q = (a & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.044407", "id": 17431}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.111067", "id": 29566}
{"buggy_code": "module arith_436(input d, output out); assign out = d + 1; endmodule", "correct_code": "module arith_436(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.149534", "id": 36603}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.321969", "id": 68047}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232616", "id": 51746}
{"buggy_code": "module demo_650(input c, in, output sum); assign sum = c & in | rst; endmodule", "correct_code": "module demo_650(input c, in, output sum); assign sum = (c & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.131235", "id": 33251}
{"buggy_code": "module arith_721(input in, in, output result); assign result = in & in | x; endmodule", "correct_code": "module arith_721(input in, in, output result); assign result = (in & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.162623", "id": 39013}
{"buggy_code": "module test_165(input rst, d, output y); assign y = rst & d | en; endmodule", "correct_code": "module test_165(input rst, d, output y); assign y = (rst & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.102372", "id": 27975}
{"buggy_code": "module simple_512(input c, d, output valid); assign valid = c & d | a; endmodule", "correct_code": "module simple_512(input c, d, output valid); assign valid = (c & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.012077", "id": 11591}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.303390", "id": 64666}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.257742", "id": 56343}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329249", "id": 69383}
{"buggy_code": "module test_351(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module test_351(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.256294", "id": 56074}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.177173", "id": 41670}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.073239", "id": 22689}
{"buggy_code": "module test_637(input rst, a, output valid); assign valid = rst & a | in; endmodule", "correct_code": "module test_637(input rst, a, output valid); assign valid = (rst & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.355768", "id": 74192}
{"buggy_code": "module test_431(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module test_431(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.269938", "id": 58570}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.178294", "id": 41877}
{"buggy_code": "module arith_367(input in, output out); assign out = in + 1; endmodule", "correct_code": "module arith_367(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.186209", "id": 43316}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.058968", "id": 20066}
{"buggy_code": "module example_147(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module example_147(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.214409", "id": 48433}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.098107", "id": 27190}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.986283", "id": 6903}
{"buggy_code": "module demo_226(input y, output y); assign y = y + 1; endmodule", "correct_code": "module demo_226(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.150940", "id": 36862}
{"buggy_code": "module arith_660(input rst, clk, output result); assign result = rst & clk | data; endmodule", "correct_code": "module arith_660(input rst, clk, output result); assign result = (rst & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.186699", "id": 43407}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.143847", "id": 35555}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.101859", "id": 27880}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.227633", "id": 50834}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.953870", "id": 1067}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.185631", "id": 43212}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.069116", "id": 21927}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.967937", "id": 3630}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.224313", "id": 50227}
{"buggy_code": "module basic_271(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module basic_271(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.055689", "id": 19467}
{"buggy_code": "module arith_179(input en, output out); assign out = en + 1; endmodule", "correct_code": "module arith_179(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.227209", "id": 50755}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.960780", "id": 2322}
{"buggy_code": "module example_544(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module example_544(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.990373", "id": 7654}
{"buggy_code": "module logic_513(input en, a, output y); assign y = en & a | in; endmodule", "correct_code": "module logic_513(input en, a, output y); assign y = (en & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.283499", "id": 61030}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.013704", "id": 11887}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.123377", "id": 31814}
{"buggy_code": "module logic_164(input x, d, output prod); assign prod = x & d | b; endmodule", "correct_code": "module logic_164(input x, d, output prod); assign prod = (x & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.015014", "id": 12123}
{"buggy_code": "module arith_959(input data, c, output prod); assign prod = data & c | a; endmodule", "correct_code": "module arith_959(input data, c, output prod); assign prod = (data & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.176270", "id": 41503}
{"buggy_code": "module logic_378(input en, d, output out); assign out = en & d | clk; endmodule", "correct_code": "module logic_378(input en, d, output out); assign out = (en & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.090362", "id": 25782}
{"buggy_code": "module logic_612(input in, c, output valid); assign valid = in & c | d; endmodule", "correct_code": "module logic_612(input in, c, output valid); assign valid = (in & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.071656", "id": 22397}
{"buggy_code": "module arith_432(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module arith_432(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.168995", "id": 40173}
{"buggy_code": "module logic_645(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module logic_645(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.024182", "id": 13776}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.214519", "id": 48452}
{"buggy_code": "module arith_301(input x, output y); assign y = x + 1; endmodule", "correct_code": "module arith_301(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.006448", "id": 10572}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.271816", "id": 58915}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.184374", "id": 42981}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.993240", "id": 8179}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.194381", "id": 44779}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.011867", "id": 11554}
{"buggy_code": "module simple_163(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module simple_163(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.236120", "id": 52390}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.061726", "id": 20576}
{"buggy_code": "module test_800(input a, y, output sum); assign sum = a & y | c; endmodule", "correct_code": "module test_800(input a, y, output sum); assign sum = (a & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.086732", "id": 25120}
{"buggy_code": "module logic_407(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module logic_407(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.287017", "id": 61670}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.056257", "id": 19569}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.233662", "id": 51942}
{"buggy_code": "module test_31(input x, output y); assign y = x + 1; endmodule", "correct_code": "module test_31(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.350291", "id": 73192}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.226061", "id": 50547}
{"buggy_code": "module demo_147(input rst, rst, output out); assign out = rst & rst | y; endmodule", "correct_code": "module demo_147(input rst, rst, output out); assign out = (rst & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.160079", "id": 38549}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.106181", "id": 28667}
{"buggy_code": "module demo_475(input en, output q); assign q = en + 1; endmodule", "correct_code": "module demo_475(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.977280", "id": 5321}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.190578", "id": 44077}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.016681", "id": 12427}
{"buggy_code": "module example_199(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module example_199(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.011962", "id": 11570}
{"buggy_code": "module example_130(input c, output out); assign out = c + 1; endmodule", "correct_code": "module example_130(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.016748", "id": 12439}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.980163", "id": 5798}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.079852", "id": 23871}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.062353", "id": 20691}
{"buggy_code": "module basic_482(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module basic_482(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.231335", "id": 51513}
{"buggy_code": "module logic_760(input a, output result); assign result = a + 1; endmodule", "correct_code": "module logic_760(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.023072", "id": 13575}
{"buggy_code": "module basic_198(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module basic_198(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.097746", "id": 27125}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.973851", "id": 4696}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.221961", "id": 49798}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.298030", "id": 63684}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.039737", "id": 16594}
{"buggy_code": "module basic_247(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module basic_247(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.303753", "id": 64735}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.310933", "id": 66061}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.134884", "id": 33919}
{"buggy_code": "module test_930(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module test_930(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.177946", "id": 41813}
{"buggy_code": "module basic_31(input c, data, output prod); assign prod = c & data | en; endmodule", "correct_code": "module basic_31(input c, data, output prod); assign prod = (c & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.257768", "id": 56348}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.106685", "id": 28761}
{"buggy_code": "module simple_446(input c, in, output y); assign y = c & in | c; endmodule", "correct_code": "module simple_446(input c, in, output y); assign y = (c & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.065193", "id": 21213}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329992", "id": 69518}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.204914", "id": 46701}
{"buggy_code": "module example_123(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module example_123(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.278682", "id": 60144}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.048545", "id": 18179}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.219184", "id": 49307}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.357260", "id": 74466}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.333447", "id": 70152}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.054654", "id": 19272}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.007640", "id": 10785}
{"buggy_code": "module demo_307(input c, c, output out); assign out = c & c | a; endmodule", "correct_code": "module demo_307(input c, c, output out); assign out = (c & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.029579", "id": 14751}
{"buggy_code": "module logic_788(input x, c, output q); assign q = x & c | x; endmodule", "correct_code": "module logic_788(input x, c, output q); assign q = (x & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.045544", "id": 17635}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.166484", "id": 39714}
{"buggy_code": "module logic_302(input b, c, output y); assign y = b & c | rst; endmodule", "correct_code": "module logic_302(input b, c, output y); assign y = (b & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.046490", "id": 17806}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.299482", "id": 63953}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.048114", "id": 18100}
{"buggy_code": "module logic_898(input d, x, output y); assign y = d & x | clk; endmodule", "correct_code": "module logic_898(input d, x, output y); assign y = (d & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.083368", "id": 24509}
{"buggy_code": "module example_98(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module example_98(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.321228", "id": 67910}
{"buggy_code": "module arith_985(input in, in, output prod); assign prod = in & in | in; endmodule", "correct_code": "module arith_985(input in, in, output prod); assign prod = (in & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.216052", "id": 48731}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.307880", "id": 65503}
{"buggy_code": "module basic_855(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module basic_855(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.309510", "id": 65802}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.211506", "id": 47907}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.268978", "id": 58392}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.248047", "id": 54577}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.297293", "id": 63549}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.120471", "id": 31281}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.098088", "id": 27186}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.130023", "id": 33026}
{"buggy_code": "module basic_294(input data, output out); assign out = data + 1; endmodule", "correct_code": "module basic_294(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.249832", "id": 54905}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.089576", "id": 25638}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.052931", "id": 18950}
{"buggy_code": "module demo_367(input d, clk, output prod); assign prod = d & clk | c; endmodule", "correct_code": "module demo_367(input d, clk, output prod); assign prod = (d & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.233739", "id": 51956}
{"buggy_code": "module basic_771(input b, x, output q); assign q = b & x | c; endmodule", "correct_code": "module basic_771(input b, x, output q); assign q = (b & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.193238", "id": 44567}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.063380", "id": 20879}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.101118", "id": 27743}
{"buggy_code": "module basic_508(input a, output out); assign out = a + 1; endmodule", "correct_code": "module basic_508(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.074172", "id": 22863}
{"buggy_code": "module test_876(input in, y, output q); assign q = in & y | clk; endmodule", "correct_code": "module test_876(input in, y, output q); assign q = (in & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.211542", "id": 47913}
{"buggy_code": "module logic_707(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module logic_707(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.325409", "id": 68677}
{"buggy_code": "module logic_646(input b, in, output prod); assign prod = b & in | x; endmodule", "correct_code": "module logic_646(input b, in, output prod); assign prod = (b & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.178754", "id": 41963}
{"buggy_code": "module basic_46(input b, d, output sum); assign sum = b & d | x; endmodule", "correct_code": "module basic_46(input b, d, output sum); assign sum = (b & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.980174", "id": 5800}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.959355", "id": 2063}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.192158", "id": 44369}
{"buggy_code": "module basic_472(input d, a, output y); assign y = d & a | en; endmodule", "correct_code": "module basic_472(input d, a, output y); assign y = (d & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.076749", "id": 23320}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.271666", "id": 58888}
{"buggy_code": "module test_101(input d, rst, output result); assign result = d & rst | data; endmodule", "correct_code": "module test_101(input d, rst, output result); assign result = (d & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.181038", "id": 42381}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.272757", "id": 59090}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.101912", "id": 27890}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.304177", "id": 64815}
{"buggy_code": "module arith_907(input en, b, output out); assign out = en & b | clk; endmodule", "correct_code": "module arith_907(input en, b, output out); assign out = (en & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.328221", "id": 69191}
{"buggy_code": "module test_31(input x, b, output y); assign y = x & b | clk; endmodule", "correct_code": "module test_31(input x, b, output y); assign y = (x & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.358531", "id": 74700}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.050567", "id": 18523}
{"buggy_code": "module demo_647(input x, output out); assign out = x + 1; endmodule", "correct_code": "module demo_647(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.050578", "id": 18525}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.099436", "id": 27434}
{"buggy_code": "module basic_89(input b, output q); assign q = b + 1; endmodule", "correct_code": "module basic_89(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.110046", "id": 29378}
{"buggy_code": "module demo_974(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module demo_974(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.084581", "id": 24725}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.077169", "id": 23379}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.131366", "id": 33276}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.013427", "id": 11835}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.986440", "id": 6933}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.151783", "id": 37018}
{"buggy_code": "module logic_104(input b, output out); assign out = b + 1; endmodule", "correct_code": "module logic_104(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.136556", "id": 34224}
{"buggy_code": "module simple_691(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module simple_691(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.247755", "id": 54525}
{"buggy_code": "module arith_925(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module arith_925(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.090660", "id": 25839}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.196277", "id": 45125}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.090224", "id": 25756}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.201975", "id": 46164}
{"buggy_code": "module test_457(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module test_457(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.014907", "id": 12103}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.241890", "id": 53452}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.963534", "id": 2821}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.246021", "id": 54211}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.315166", "id": 66831}
{"buggy_code": "module example_544(input a, y, output prod); assign prod = a & y | clk; endmodule", "correct_code": "module example_544(input a, y, output prod); assign prod = (a & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.032370", "id": 15254}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.955609", "id": 1382}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.213894", "id": 48336}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.186985", "id": 43457}
{"buggy_code": "module arith_625(input b, output out); assign out = b + 1; endmodule", "correct_code": "module arith_625(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.103660", "id": 28206}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.956431", "id": 1531}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.091702", "id": 26031}
{"buggy_code": "module basic_217(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module basic_217(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.307369", "id": 65407}
{"buggy_code": "module arith_967(input a, c, output y); assign y = a & c | a; endmodule", "correct_code": "module arith_967(input a, c, output y); assign y = (a & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.117491", "id": 30748}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.072548", "id": 22562}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.070646", "id": 22212}
{"buggy_code": "module arith_396(input a, in, output out); assign out = a & in | c; endmodule", "correct_code": "module arith_396(input a, in, output out); assign out = (a & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.347379", "id": 72663}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.342841", "id": 71841}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.179033", "id": 42014}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.035371", "id": 15798}
{"buggy_code": "module basic_580(input b, data, output y); assign y = b & data | rst; endmodule", "correct_code": "module basic_580(input b, data, output y); assign y = (b & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.185864", "id": 43253}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.326278", "id": 68835}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.950809", "id": 513}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.173044", "id": 40913}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.166058", "id": 39634}
{"buggy_code": "module basic_374(input in, clk, output q); assign q = in & clk | en; endmodule", "correct_code": "module basic_374(input in, clk, output q); assign q = (in & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.341807", "id": 71654}
{"buggy_code": "module demo_135(input in, x, output q); assign q = in & x | d; endmodule", "correct_code": "module demo_135(input in, x, output q); assign q = (in & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.212317", "id": 48051}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.059128", "id": 20097}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.248423", "id": 54648}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.346571", "id": 72516}
{"buggy_code": "module logic_644(input d, rst, output out); assign out = d & rst | in; endmodule", "correct_code": "module logic_644(input d, rst, output out); assign out = (d & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.180781", "id": 42335}
{"buggy_code": "module test_163(input b, in, output prod); assign prod = b & in | clk; endmodule", "correct_code": "module test_163(input b, in, output prod); assign prod = (b & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.261419", "id": 57017}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.160244", "id": 38578}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.252094", "id": 55315}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.279714", "id": 60333}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.129820", "id": 32989}
{"buggy_code": "module test_455(input in, data, output y); assign y = in & data | c; endmodule", "correct_code": "module test_455(input in, data, output y); assign y = (in & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.284912", "id": 61287}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.169241", "id": 40218}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.980671", "id": 5881}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.245709", "id": 54156}
{"buggy_code": "module simple_863(input y, a, output sum); assign sum = y & a | y; endmodule", "correct_code": "module simple_863(input y, a, output sum); assign sum = (y & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.981133", "id": 5963}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.212323", "id": 48052}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.966647", "id": 3392}
{"buggy_code": "module test_574(input clk, x, output y); assign y = clk & x | clk; endmodule", "correct_code": "module test_574(input clk, x, output y); assign y = (clk & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.021027", "id": 13201}
{"buggy_code": "module demo_704(input c, clk, output q); assign q = c & clk | a; endmodule", "correct_code": "module demo_704(input c, clk, output q); assign q = (c & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.960191", "id": 2211}
{"buggy_code": "module test_539(input clk, c, output result); assign result = clk & c | c; endmodule", "correct_code": "module test_539(input clk, c, output result); assign result = (clk & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.973236", "id": 4586}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.161759", "id": 38857}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.019223", "id": 12878}
{"buggy_code": "module demo_466(input c, x, output result); assign result = c & x | b; endmodule", "correct_code": "module demo_466(input c, x, output result); assign result = (c & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.996155", "id": 8709}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.355773", "id": 74193}
{"buggy_code": "module logic_359(input x, a, output prod); assign prod = x & a | b; endmodule", "correct_code": "module logic_359(input x, a, output prod); assign prod = (x & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.093912", "id": 26425}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.996078", "id": 8695}
{"buggy_code": "module arith_840(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module arith_840(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.127754", "id": 32614}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.264728", "id": 57619}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.195430", "id": 44971}
{"buggy_code": "module example_593(input c, c, output valid); assign valid = c & c | y; endmodule", "correct_code": "module example_593(input c, c, output valid); assign valid = (c & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.270580", "id": 58688}
{"buggy_code": "module arith_990(input b, d, output out); assign out = b & d | in; endmodule", "correct_code": "module arith_990(input b, d, output out); assign out = (b & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.035027", "id": 15734}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.083571", "id": 24546}
{"buggy_code": "module simple_879(input x, y, output q); assign q = x & y | in; endmodule", "correct_code": "module simple_879(input x, y, output q); assign q = (x & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.315312", "id": 66857}
{"buggy_code": "module logic_207(input c, in, output result); assign result = c & in | data; endmodule", "correct_code": "module logic_207(input c, in, output result); assign result = (c & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.284829", "id": 61272}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.968397", "id": 3715}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.130059", "id": 33033}
{"buggy_code": "module demo_480(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module demo_480(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.351068", "id": 73332}
{"buggy_code": "module logic_566(input data, output q); assign q = data + 1; endmodule", "correct_code": "module logic_566(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.347229", "id": 72636}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.324427", "id": 68499}
{"buggy_code": "module logic_532(input data, output result); assign result = data + 1; endmodule", "correct_code": "module logic_532(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.975347", "id": 4968}
{"buggy_code": "module simple_580(input en, x, output sum); assign sum = en & x | in; endmodule", "correct_code": "module simple_580(input en, x, output sum); assign sum = (en & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.082494", "id": 24350}
{"buggy_code": "module arith_759(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module arith_759(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.196381", "id": 45144}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.205151", "id": 46745}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.123722", "id": 31878}
{"buggy_code": "module arith_292(input b, a, output y); assign y = b & a | rst; endmodule", "correct_code": "module arith_292(input b, a, output y); assign y = (b & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.178078", "id": 41836}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.232527", "id": 51729}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.993094", "id": 8152}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.175692", "id": 41398}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.042394", "id": 17065}
{"buggy_code": "module demo_162(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module demo_162(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.222775", "id": 49946}
{"buggy_code": "module basic_103(input d, en, output valid); assign valid = d & en | d; endmodule", "correct_code": "module basic_103(input d, en, output valid); assign valid = (d & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.192387", "id": 44413}
{"buggy_code": "module arith_91(input in, a, output y); assign y = in & a | c; endmodule", "correct_code": "module arith_91(input in, a, output y); assign y = (in & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.095641", "id": 26744}
{"buggy_code": "module example_773(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module example_773(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.164374", "id": 39328}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138454", "id": 34578}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.025097", "id": 13942}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.331777", "id": 69845}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.170941", "id": 40529}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.030477", "id": 14913}
{"buggy_code": "module demo_84(input data, output out); assign out = data + 1; endmodule", "correct_code": "module demo_84(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.084405", "id": 24693}
{"buggy_code": "module example_642(input data, rst, output out); assign out = data & rst | in; endmodule", "correct_code": "module example_642(input data, rst, output out); assign out = (data & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.294985", "id": 63126}
{"buggy_code": "module demo_694(input clk, b, output y); assign y = clk & b | a; endmodule", "correct_code": "module demo_694(input clk, b, output y); assign y = (clk & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.957451", "id": 1716}
{"buggy_code": "module simple_29(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module simple_29(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.187312", "id": 43516}
{"buggy_code": "module logic_920(input data, in, output prod); assign prod = data & in | c; endmodule", "correct_code": "module logic_920(input data, in, output prod); assign prod = (data & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.149658", "id": 36627}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.168870", "id": 40150}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.176285", "id": 41506}
{"buggy_code": "module test_538(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module test_538(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.975790", "id": 5050}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.193344", "id": 44587}
{"buggy_code": "module basic_259(input b, output out); assign out = b + 1; endmodule", "correct_code": "module basic_259(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.293380", "id": 62836}
{"buggy_code": "module example_523(input en, output q); assign q = en + 1; endmodule", "correct_code": "module example_523(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.077076", "id": 23366}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205160", "id": 46747}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.282280", "id": 60807}
{"buggy_code": "module arith_994(input a, output out); assign out = a + 1; endmodule", "correct_code": "module arith_994(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.094317", "id": 26500}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.242363", "id": 53537}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.977099", "id": 5287}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.221493", "id": 49712}
{"buggy_code": "module arith_292(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module arith_292(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.003875", "id": 10097}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.165241", "id": 39486}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.080576", "id": 24006}
{"buggy_code": "module simple_711(input rst, a, output out); assign out = rst & a | clk; endmodule", "correct_code": "module simple_711(input rst, a, output out); assign out = (rst & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.272481", "id": 59038}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.968289", "id": 3694}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.018809", "id": 12814}
{"buggy_code": "module demo_520(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module demo_520(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091299", "id": 25957}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.009905", "id": 11199}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.137865", "id": 34469}
{"buggy_code": "module example_536(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module example_536(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.326198", "id": 68820}
{"buggy_code": "module logic_175(input rst, rst, output prod); assign prod = rst & rst | x; endmodule", "correct_code": "module logic_175(input rst, rst, output prod); assign prod = (rst & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.265245", "id": 57712}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.088071", "id": 25360}
{"buggy_code": "module example_213(input data, rst, output result); assign result = data & rst | en; endmodule", "correct_code": "module example_213(input data, rst, output result); assign result = (data & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.036193", "id": 15946}
{"buggy_code": "module demo_729(input a, data, output sum); assign sum = a & data | rst; endmodule", "correct_code": "module demo_729(input a, data, output sum); assign sum = (a & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.325263", "id": 68650}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.953981", "id": 1087}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.054659", "id": 19273}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.179266", "id": 42059}
{"buggy_code": "module demo_20(input data, output y); assign y = data + 1; endmodule", "correct_code": "module demo_20(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.956018", "id": 1455}
{"buggy_code": "module simple_889(input rst, en, output y); assign y = rst & en | x; endmodule", "correct_code": "module simple_889(input rst, en, output y); assign y = (rst & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.083933", "id": 24606}
{"buggy_code": "module logic_384(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module logic_384(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.064951", "id": 21169}
{"buggy_code": "module example_949(input d, output q); assign q = d + 1; endmodule", "correct_code": "module example_949(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.020835", "id": 13166}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272117", "id": 58970}
{"buggy_code": "module simple_865(input d, d, output valid); assign valid = d & d | d; endmodule", "correct_code": "module simple_865(input d, d, output valid); assign valid = (d & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.349774", "id": 73099}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.975801", "id": 5052}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.161447", "id": 38800}
{"buggy_code": "module logic_691(input x, output y); assign y = x + 1; endmodule", "correct_code": "module logic_691(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.190018", "id": 43973}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.325575", "id": 68706}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.120597", "id": 31304}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.306680", "id": 65278}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.306981", "id": 65332}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.359117", "id": 74805}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.044467", "id": 17442}
{"buggy_code": "module logic_538(input y, output y); assign y = y + 1; endmodule", "correct_code": "module logic_538(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.305349", "id": 65031}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.353493", "id": 73773}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.027490", "id": 14372}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.024342", "id": 13807}
{"buggy_code": "module simple_242(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module simple_242(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.120155", "id": 31223}
{"buggy_code": "module basic_696(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module basic_696(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.088003", "id": 25348}
{"buggy_code": "module arith_373(input en, clk, output result); assign result = en & clk | a; endmodule", "correct_code": "module arith_373(input en, clk, output result); assign result = (en & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.270240", "id": 58627}
{"buggy_code": "module arith_897(input x, c, output result); assign result = x & c | data; endmodule", "correct_code": "module arith_897(input x, c, output result); assign result = (x & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.042606", "id": 17103}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.290886", "id": 62379}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.081850", "id": 24235}
{"buggy_code": "module example_619(input x, en, output q); assign q = x & en | clk; endmodule", "correct_code": "module example_619(input x, en, output q); assign q = (x & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.076154", "id": 23227}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.153939", "id": 37418}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.083288", "id": 24493}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.094237", "id": 26484}
{"buggy_code": "module arith_153(input c, output out); assign out = c + 1; endmodule", "correct_code": "module arith_153(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.969465", "id": 3902}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.981317", "id": 5997}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.238441", "id": 52820}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.039004", "id": 16459}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.004568", "id": 10226}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.178340", "id": 41885}
{"buggy_code": "module arith_987(input b, in, output valid); assign valid = b & in | x; endmodule", "correct_code": "module arith_987(input b, in, output valid); assign valid = (b & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.299648", "id": 63983}
{"buggy_code": "module test_641(input d, en, output q); assign q = d & en | d; endmodule", "correct_code": "module test_641(input d, en, output q); assign q = (d & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.992145", "id": 7980}
{"buggy_code": "module arith_474(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module arith_474(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174783", "id": 41231}
{"buggy_code": "module demo_682(input in, output y); assign y = in + 1; endmodule", "correct_code": "module demo_682(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.094871", "id": 26601}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.262529", "id": 57218}
{"buggy_code": "module demo_796(input c, d, output y); assign y = c & d | a; endmodule", "correct_code": "module demo_796(input c, d, output y); assign y = (c & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.137407", "id": 34382}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.310783", "id": 66035}
{"buggy_code": "module example_907(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module example_907(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.120765", "id": 31335}
{"buggy_code": "module arith_478(input clk, clk, output y); assign y = clk & clk | en; endmodule", "correct_code": "module arith_478(input clk, clk, output y); assign y = (clk & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116893", "id": 30635}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.291172", "id": 62435}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.191084", "id": 44167}
{"buggy_code": "module basic_457(input b, d, output y); assign y = b & d | in; endmodule", "correct_code": "module basic_457(input b, d, output y); assign y = (b & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.239534", "id": 53021}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.992169", "id": 7985}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.205677", "id": 46843}
{"buggy_code": "module simple_922(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module simple_922(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.278694", "id": 60146}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.170967", "id": 40534}
{"buggy_code": "module logic_758(input data, output y); assign y = data + 1; endmodule", "correct_code": "module logic_758(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.237347", "id": 52616}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.254876", "id": 55814}
{"buggy_code": "module test_356(input data, a, output q); assign q = data & a | clk; endmodule", "correct_code": "module test_356(input data, a, output q); assign q = (data & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.972938", "id": 4532}
{"buggy_code": "module simple_570(input data, rst, output y); assign y = data & rst | c; endmodule", "correct_code": "module simple_570(input data, rst, output y); assign y = (data & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.157325", "id": 38040}
{"buggy_code": "module example_460(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module example_460(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.976695", "id": 5214}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.155790", "id": 37758}
{"buggy_code": "module arith_977(input y, en, output result); assign result = y & en | rst; endmodule", "correct_code": "module arith_977(input y, en, output result); assign result = (y & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.177437", "id": 41721}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.951604", "id": 658}
{"buggy_code": "module simple_591(input in, in, output valid); assign valid = in & in | data; endmodule", "correct_code": "module simple_591(input in, in, output valid); assign valid = (in & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.305251", "id": 65014}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.159137", "id": 38372}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.282188", "id": 60790}
{"buggy_code": "module example_596(input in, output q); assign q = in + 1; endmodule", "correct_code": "module example_596(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.320186", "id": 67736}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.087177", "id": 25199}
{"buggy_code": "module simple_35(input d, b, output q); assign q = d & b | c; endmodule", "correct_code": "module simple_35(input d, b, output q); assign q = (d & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.956145", "id": 1479}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.240928", "id": 53273}
{"buggy_code": "module arith_365(input a, a, output sum); assign sum = a & a | b; endmodule", "correct_code": "module arith_365(input a, a, output sum); assign sum = (a & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.351791", "id": 73465}
{"buggy_code": "module test_434(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module test_434(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.247787", "id": 54531}
{"buggy_code": "module simple_360(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module simple_360(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.293269", "id": 62816}
{"buggy_code": "module arith_533(input y, output y); assign y = y + 1; endmodule", "correct_code": "module arith_533(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.232216", "id": 51671}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.245660", "id": 54147}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.982246", "id": 6164}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.201450", "id": 46070}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.330666", "id": 69644}
{"buggy_code": "module test_832(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module test_832(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.014082", "id": 11956}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.144978", "id": 35767}
{"buggy_code": "module demo_698(input a, output out); assign out = a + 1; endmodule", "correct_code": "module demo_698(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.160520", "id": 38629}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.323995", "id": 68419}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.992406", "id": 8028}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.992540", "id": 8052}
{"buggy_code": "module logic_276(input b, en, output out); assign out = b & en | en; endmodule", "correct_code": "module logic_276(input b, en, output out); assign out = (b & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.100563", "id": 27642}
{"buggy_code": "module demo_824(input c, output y); assign y = c + 1; endmodule", "correct_code": "module demo_824(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.259659", "id": 56693}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.328089", "id": 69166}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.163503", "id": 39171}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.226752", "id": 50674}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.137195", "id": 34343}
{"buggy_code": "module basic_25(input b, c, output prod); assign prod = b & c | rst; endmodule", "correct_code": "module basic_25(input b, c, output prod); assign prod = (b & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.134432", "id": 33837}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.310955", "id": 66065}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.082875", "id": 24418}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.263864", "id": 57459}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.054581", "id": 19258}
{"buggy_code": "module simple_380(input b, clk, output prod); assign prod = b & clk | y; endmodule", "correct_code": "module simple_380(input b, clk, output prod); assign prod = (b & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.104125", "id": 28292}
{"buggy_code": "module test_756(input y, output y); assign y = y + 1; endmodule", "correct_code": "module test_756(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.283938", "id": 61109}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.303605", "id": 64707}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.167213", "id": 39849}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.038213", "id": 16314}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.041277", "id": 16864}
{"buggy_code": "module logic_863(input x, data, output valid); assign valid = x & data | y; endmodule", "correct_code": "module logic_863(input x, data, output valid); assign valid = (x & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.208245", "id": 47310}
{"buggy_code": "module test_358(input en, c, output valid); assign valid = en & c | b; endmodule", "correct_code": "module test_358(input en, c, output valid); assign valid = (en & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.215097", "id": 48556}
{"buggy_code": "module basic_156(input a, output result); assign result = a + 1; endmodule", "correct_code": "module basic_156(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.294216", "id": 62986}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.097278", "id": 27039}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.171513", "id": 40635}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.139599", "id": 34789}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.292504", "id": 62678}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.169036", "id": 40181}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.167976", "id": 39990}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.301808", "id": 64377}
{"buggy_code": "module logic_736(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module logic_736(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.056557", "id": 19626}
{"buggy_code": "module example_47(input y, d, output prod); assign prod = y & d | in; endmodule", "correct_code": "module example_47(input y, d, output prod); assign prod = (y & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.099935", "id": 27525}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.106090", "id": 28650}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.305594", "id": 65077}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.115129", "id": 30316}
{"buggy_code": "module test_699(input a, in, output prod); assign prod = a & in | c; endmodule", "correct_code": "module test_699(input a, in, output prod); assign prod = (a & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.261267", "id": 56988}
{"buggy_code": "module test_687(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module test_687(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.059674", "id": 20198}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.114997", "id": 30291}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.130680", "id": 33149}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.018033", "id": 12672}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.967779", "id": 3602}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.136490", "id": 34213}
{"buggy_code": "module simple_114(input in, output y); assign y = in + 1; endmodule", "correct_code": "module simple_114(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.354129", "id": 73887}
{"buggy_code": "module test_820(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module test_820(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.185362", "id": 43161}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.200257", "id": 45851}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.171508", "id": 40634}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.267782", "id": 58174}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.185209", "id": 43136}
{"buggy_code": "module basic_431(input a, output y); assign y = a + 1; endmodule", "correct_code": "module basic_431(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.028652", "id": 14583}
{"buggy_code": "module arith_624(input b, output y); assign y = b + 1; endmodule", "correct_code": "module arith_624(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.342236", "id": 71734}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.170885", "id": 40519}
{"buggy_code": "module simple_643(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module simple_643(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.343586", "id": 71977}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.241413", "id": 53365}
{"buggy_code": "module demo_494(input d, output result); assign result = d + 1; endmodule", "correct_code": "module demo_494(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.049914", "id": 18402}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.217731", "id": 49042}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.011319", "id": 11455}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.064009", "id": 20995}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.290946", "id": 62391}
{"buggy_code": "module logic_949(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module logic_949(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.100430", "id": 27619}
{"buggy_code": "module simple_364(input clk, data, output out); assign out = clk & data | c; endmodule", "correct_code": "module simple_364(input clk, data, output out); assign out = (clk & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.173962", "id": 41081}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.094358", "id": 26508}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.094628", "id": 26558}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.040687", "id": 16758}
{"buggy_code": "module example_255(input b, x, output result); assign result = b & x | a; endmodule", "correct_code": "module example_255(input b, x, output result); assign result = (b & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.205529", "id": 46815}
{"buggy_code": "module arith_594(input en, b, output sum); assign sum = en & b | en; endmodule", "correct_code": "module arith_594(input en, b, output sum); assign sum = (en & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.013176", "id": 11788}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.261671", "id": 57064}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.305748", "id": 65108}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.036478", "id": 15999}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.306322", "id": 65211}
{"buggy_code": "module basic_418(input b, x, output valid); assign valid = b & x | d; endmodule", "correct_code": "module basic_418(input b, x, output valid); assign valid = (b & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.229706", "id": 51210}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.229700", "id": 51209}
{"buggy_code": "module arith_437(input d, y, output out); assign out = d & y | b; endmodule", "correct_code": "module arith_437(input d, y, output out); assign out = (d & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.235602", "id": 52297}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.334785", "id": 70394}
{"buggy_code": "module arith_46(input en, output q); assign q = en + 1; endmodule", "correct_code": "module arith_46(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.124076", "id": 31941}
{"buggy_code": "module test_100(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module test_100(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.022108", "id": 13399}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.081908", "id": 24245}
{"buggy_code": "module basic_591(input c, in, output y); assign y = c & in | en; endmodule", "correct_code": "module basic_591(input c, in, output y); assign y = (c & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.298547", "id": 63782}
{"buggy_code": "module demo_763(input in, output y); assign y = in + 1; endmodule", "correct_code": "module demo_763(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.082651", "id": 24380}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.991309", "id": 7827}
{"buggy_code": "module demo_142(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module demo_142(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.005156", "id": 10334}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.250247", "id": 54980}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.112386", "id": 29809}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.214727", "id": 48491}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.962101", "id": 2560}
{"buggy_code": "module test_611(input rst, en, output q); assign q = rst & en | en; endmodule", "correct_code": "module test_611(input rst, en, output q); assign q = (rst & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.135733", "id": 34075}
{"buggy_code": "module basic_413(input a, rst, output out); assign out = a & rst | in; endmodule", "correct_code": "module basic_413(input a, rst, output out); assign out = (a & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.011049", "id": 11405}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.072786", "id": 22606}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.213171", "id": 48206}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.095200", "id": 26663}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.333168", "id": 70101}
{"buggy_code": "module arith_894(input en, output result); assign result = en + 1; endmodule", "correct_code": "module arith_894(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.359311", "id": 74841}
{"buggy_code": "module example_597(input d, a, output result); assign result = d & a | b; endmodule", "correct_code": "module example_597(input d, a, output result); assign result = (d & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.065917", "id": 21344}
{"buggy_code": "module logic_257(input in, y, output prod); assign prod = in & y | y; endmodule", "correct_code": "module logic_257(input in, y, output prod); assign prod = (in & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.235265", "id": 52235}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.984078", "id": 6500}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232478", "id": 51719}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.321306", "id": 67925}
{"buggy_code": "module arith_377(input en, output q); assign q = en + 1; endmodule", "correct_code": "module arith_377(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.351219", "id": 73360}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.030832", "id": 14974}
{"buggy_code": "module simple_426(input b, output q); assign q = b + 1; endmodule", "correct_code": "module simple_426(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.269654", "id": 58519}
{"buggy_code": "module simple_938(input in, output out); assign out = in + 1; endmodule", "correct_code": "module simple_938(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.111154", "id": 29581}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.155279", "id": 37664}
{"buggy_code": "module test_339(input en, rst, output result); assign result = en & rst | a; endmodule", "correct_code": "module test_339(input en, rst, output result); assign result = (en & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.333295", "id": 70124}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.242530", "id": 53567}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.047162", "id": 17927}
{"buggy_code": "module test_863(input rst, clk, output sum); assign sum = rst & clk | y; endmodule", "correct_code": "module test_863(input rst, clk, output sum); assign sum = (rst & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.979937", "id": 5756}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.278036", "id": 60024}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.264620", "id": 57600}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.191424", "id": 44232}
{"buggy_code": "module logic_620(input a, output out); assign out = a + 1; endmodule", "correct_code": "module logic_620(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.059771", "id": 20216}
{"buggy_code": "module logic_153(input in, output out); assign out = in + 1; endmodule", "correct_code": "module logic_153(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.977303", "id": 5325}
{"buggy_code": "module example_253(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module example_253(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.339846", "id": 71302}
{"buggy_code": "module example_398(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module example_398(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.179605", "id": 42121}
{"buggy_code": "module logic_652(input x, en, output sum); assign sum = x & en | a; endmodule", "correct_code": "module logic_652(input x, en, output sum); assign sum = (x & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.972224", "id": 4404}
{"buggy_code": "module logic_981(input data, data, output q); assign q = data & data | clk; endmodule", "correct_code": "module logic_981(input data, data, output q); assign q = (data & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.338934", "id": 71140}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.092617", "id": 26192}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.249028", "id": 54757}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.999527", "id": 9324}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.000545", "id": 9506}
{"buggy_code": "module logic_293(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module logic_293(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.995054", "id": 8509}
{"buggy_code": "module arith_594(input b, b, output valid); assign valid = b & b | clk; endmodule", "correct_code": "module arith_594(input b, b, output valid); assign valid = (b & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.229673", "id": 51204}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.198497", "id": 45530}
{"buggy_code": "module simple_525(input b, clk, output prod); assign prod = b & clk | c; endmodule", "correct_code": "module simple_525(input b, clk, output prod); assign prod = (b & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.304649", "id": 64905}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.060883", "id": 20419}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.338047", "id": 70992}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.977463", "id": 5353}
{"buggy_code": "module logic_506(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module logic_506(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.209901", "id": 47610}
{"buggy_code": "module basic_203(input in, output result); assign result = in + 1; endmodule", "correct_code": "module basic_203(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.034051", "id": 15555}
{"buggy_code": "module logic_5(input a, output y); assign y = a + 1; endmodule", "correct_code": "module logic_5(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.066465", "id": 21444}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.219147", "id": 49300}
{"buggy_code": "module basic_195(input x, in, output q); assign q = x & in | clk; endmodule", "correct_code": "module basic_195(input x, in, output q); assign q = (x & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.317634", "id": 67284}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.999060", "id": 9237}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182892", "id": 42709}
{"buggy_code": "module basic_995(input c, c, output sum); assign sum = c & c | en; endmodule", "correct_code": "module basic_995(input c, c, output sum); assign sum = (c & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.961928", "id": 2529}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.071448", "id": 22360}
{"buggy_code": "module test_619(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module test_619(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.341740", "id": 71642}
{"buggy_code": "module logic_2(input y, d, output prod); assign prod = y & d | d; endmodule", "correct_code": "module logic_2(input y, d, output prod); assign prod = (y & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.339516", "id": 71243}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.223453", "id": 50073}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.348706", "id": 72911}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.959295", "id": 2051}
{"buggy_code": "module basic_581(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module basic_581(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.134666", "id": 33881}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.005597", "id": 10417}
{"buggy_code": "module test_196(input d, output result); assign result = d + 1; endmodule", "correct_code": "module test_196(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.209361", "id": 47512}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.190745", "id": 44107}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.304611", "id": 64898}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.347997", "id": 72775}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.176668", "id": 41575}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.124300", "id": 31982}
{"buggy_code": "module simple_983(input x, rst, output sum); assign sum = x & rst | c; endmodule", "correct_code": "module simple_983(input x, rst, output sum); assign sum = (x & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.244457", "id": 53921}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.182315", "id": 42607}
{"buggy_code": "module demo_676(input x, output y); assign y = x + 1; endmodule", "correct_code": "module demo_676(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.223172", "id": 50019}
{"buggy_code": "module logic_355(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module logic_355(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.283255", "id": 60984}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.297685", "id": 63622}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.231938", "id": 51621}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.074664", "id": 22955}
{"buggy_code": "module example_876(input data, output result); assign result = data + 1; endmodule", "correct_code": "module example_876(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.192248", "id": 44387}
{"buggy_code": "module logic_380(input a, a, output result); assign result = a & a | a; endmodule", "correct_code": "module logic_380(input a, a, output result); assign result = (a & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.222499", "id": 49895}
{"buggy_code": "module arith_916(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module arith_916(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.142597", "id": 35323}
{"buggy_code": "module arith_151(input rst, en, output y); assign y = rst & en | x; endmodule", "correct_code": "module arith_151(input rst, en, output y); assign y = (rst & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.068661", "id": 21842}
{"buggy_code": "module basic_965(input b, data, output sum); assign sum = b & data | rst; endmodule", "correct_code": "module basic_965(input b, data, output sum); assign sum = (b & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.040320", "id": 16701}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.083353", "id": 24506}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.283813", "id": 61088}
{"buggy_code": "module arith_532(input d, output q); assign q = d + 1; endmodule", "correct_code": "module arith_532(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.355685", "id": 74177}
{"buggy_code": "module demo_982(input data, data, output out); assign out = data & data | in; endmodule", "correct_code": "module demo_982(input data, data, output out); assign out = (data & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.087605", "id": 25276}
{"buggy_code": "module logic_938(input y, output result); assign result = y + 1; endmodule", "correct_code": "module logic_938(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.001159", "id": 9618}
{"buggy_code": "module test_149(input y, en, output out); assign out = y & en | clk; endmodule", "correct_code": "module test_149(input y, en, output out); assign out = (y & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.256472", "id": 56108}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.261511", "id": 57034}
{"buggy_code": "module basic_647(input en, d, output out); assign out = en & d | y; endmodule", "correct_code": "module basic_647(input en, d, output out); assign out = (en & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.295266", "id": 63178}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.356754", "id": 74373}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.351030", "id": 73325}
{"buggy_code": "module logic_794(input clk, clk, output valid); assign valid = clk & clk | rst; endmodule", "correct_code": "module logic_794(input clk, clk, output valid); assign valid = (clk & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.104556", "id": 28370}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286081", "id": 61502}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.101033", "id": 27727}
{"buggy_code": "module example_535(input y, output q); assign q = y + 1; endmodule", "correct_code": "module example_535(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.329012", "id": 69338}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.280516", "id": 60482}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.305701", "id": 65098}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.186808", "id": 43426}
{"buggy_code": "module test_752(input in, en, output valid); assign valid = in & en | c; endmodule", "correct_code": "module test_752(input in, en, output valid); assign valid = (in & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.251463", "id": 55204}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.307526", "id": 65437}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.173476", "id": 40994}
{"buggy_code": "module test_962(input y, rst, output out); assign out = y & rst | a; endmodule", "correct_code": "module test_962(input y, rst, output out); assign out = (y & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.080848", "id": 24053}
{"buggy_code": "module demo_364(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module demo_364(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.335046", "id": 70440}
{"buggy_code": "module arith_753(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module arith_753(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.954702", "id": 1222}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.264283", "id": 57536}
{"buggy_code": "module test_870(input data, rst, output sum); assign sum = data & rst | clk; endmodule", "correct_code": "module test_870(input data, rst, output sum); assign sum = (data & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.152404", "id": 37134}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.067027", "id": 21545}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.246940", "id": 54377}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.060266", "id": 20307}
{"buggy_code": "module test_634(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module test_634(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.069495", "id": 21998}
{"buggy_code": "module demo_187(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module demo_187(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.023114", "id": 13583}
{"buggy_code": "module logic_35(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module logic_35(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.208905", "id": 47428}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.283103", "id": 60956}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.958416", "id": 1891}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.289899", "id": 62198}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.067470", "id": 21627}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.282098", "id": 60773}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.316744", "id": 67120}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.203938", "id": 46523}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.250400", "id": 55009}
{"buggy_code": "module simple_18(input b, rst, output sum); assign sum = b & rst | y; endmodule", "correct_code": "module simple_18(input b, rst, output sum); assign sum = (b & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.093758", "id": 26399}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.296552", "id": 63416}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.081307", "id": 24138}
{"buggy_code": "module demo_707(input en, y, output valid); assign valid = en & y | d; endmodule", "correct_code": "module demo_707(input en, y, output valid); assign valid = (en & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.948448", "id": 92}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.240318", "id": 53160}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.052788", "id": 18925}
{"buggy_code": "module logic_256(input en, output q); assign q = en + 1; endmodule", "correct_code": "module logic_256(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.206137", "id": 46927}
{"buggy_code": "module simple_439(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module simple_439(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.047961", "id": 18073}
{"buggy_code": "module arith_914(input rst, clk, output out); assign out = rst & clk | b; endmodule", "correct_code": "module arith_914(input rst, clk, output out); assign out = (rst & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.978942", "id": 5573}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.144949", "id": 35761}
{"buggy_code": "module demo_142(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module demo_142(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.034891", "id": 15708}
{"buggy_code": "module basic_953(input x, output y); assign y = x + 1; endmodule", "correct_code": "module basic_953(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.152796", "id": 37208}
{"buggy_code": "module basic_103(input in, en, output result); assign result = in & en | in; endmodule", "correct_code": "module basic_103(input in, en, output result); assign result = (in & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.007023", "id": 10676}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.258303", "id": 56446}
{"buggy_code": "module demo_191(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module demo_191(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.125651", "id": 32230}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.995853", "id": 8654}
{"buggy_code": "module logic_490(input in, rst, output prod); assign prod = in & rst | x; endmodule", "correct_code": "module logic_490(input in, rst, output prod); assign prod = (in & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.117403", "id": 30731}
{"buggy_code": "module basic_579(input a, output y); assign y = a + 1; endmodule", "correct_code": "module basic_579(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.239977", "id": 53100}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.210785", "id": 47777}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.213456", "id": 48259}
{"buggy_code": "module logic_165(input clk, clk, output sum); assign sum = clk & clk | y; endmodule", "correct_code": "module logic_165(input clk, clk, output sum); assign sum = (clk & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.963623", "id": 2837}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.117216", "id": 30696}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.245248", "id": 54067}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.957276", "id": 1684}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.954686", "id": 1219}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.297083", "id": 63511}
{"buggy_code": "module example_270(input a, in, output q); assign q = a & in | d; endmodule", "correct_code": "module example_270(input a, in, output q); assign q = (a & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.355881", "id": 74211}
{"buggy_code": "module example_353(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module example_353(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.160333", "id": 38594}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.297772", "id": 63638}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.112164", "id": 29768}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.949813", "id": 337}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.122104", "id": 31579}
{"buggy_code": "module test_726(input c, en, output y); assign y = c & en | a; endmodule", "correct_code": "module test_726(input c, en, output y); assign y = (c & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.060726", "id": 20392}
{"buggy_code": "module demo_689(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module demo_689(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.980543", "id": 5859}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.999086", "id": 9242}
{"buggy_code": "module basic_903(input data, output y); assign y = data + 1; endmodule", "correct_code": "module basic_903(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.358639", "id": 74718}
{"buggy_code": "module test_336(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module test_336(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.259686", "id": 56698}
{"buggy_code": "module simple_24(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module simple_24(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.045059", "id": 17548}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.167729", "id": 39947}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.188003", "id": 43642}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.218523", "id": 49184}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.312077", "id": 66270}
{"buggy_code": "module simple_576(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module simple_576(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.072875", "id": 22621}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.096291", "id": 26862}
{"buggy_code": "module logic_751(input a, data, output valid); assign valid = a & data | in; endmodule", "correct_code": "module logic_751(input a, data, output valid); assign valid = (a & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.997393", "id": 8935}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.968879", "id": 3797}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.215549", "id": 48639}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.350199", "id": 73176}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.980295", "id": 5822}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.123706", "id": 31875}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.079725", "id": 23849}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.012963", "id": 11748}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.219633", "id": 49376}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.998534", "id": 9143}
{"buggy_code": "module arith_532(input x, output out); assign out = x + 1; endmodule", "correct_code": "module arith_532(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.328044", "id": 69158}
{"buggy_code": "module demo_267(input c, output q); assign q = c + 1; endmodule", "correct_code": "module demo_267(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.153859", "id": 37403}
{"buggy_code": "module simple_503(input d, output out); assign out = d + 1; endmodule", "correct_code": "module simple_503(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.297747", "id": 63633}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.290928", "id": 62387}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.129488", "id": 32929}
{"buggy_code": "module test_285(input en, rst, output prod); assign prod = en & rst | x; endmodule", "correct_code": "module test_285(input en, rst, output prod); assign prod = (en & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.187616", "id": 43574}
{"buggy_code": "module logic_192(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module logic_192(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.196433", "id": 45153}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.262549", "id": 57222}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.014410", "id": 12015}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.096584", "id": 26913}
{"buggy_code": "module example_2(input data, output out); assign out = data + 1; endmodule", "correct_code": "module example_2(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.071164", "id": 22307}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.286732", "id": 61620}
{"buggy_code": "module example_734(input x, b, output out); assign out = x & b | c; endmodule", "correct_code": "module example_734(input x, b, output out); assign out = (x & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.312369", "id": 66323}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.201408", "id": 46062}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.292005", "id": 62585}
{"buggy_code": "module example_417(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module example_417(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.343541", "id": 71969}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.981017", "id": 5942}
{"buggy_code": "module test_502(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module test_502(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.287848", "id": 61820}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.976212", "id": 5125}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.286605", "id": 61596}
{"buggy_code": "module example_320(input data, data, output y); assign y = data & data | data; endmodule", "correct_code": "module example_320(input data, data, output y); assign y = (data & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.016175", "id": 12334}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.300405", "id": 64121}
{"buggy_code": "module logic_271(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module logic_271(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.232875", "id": 51793}
{"buggy_code": "module arith_337(input x, c, output q); assign q = x & c | y; endmodule", "correct_code": "module arith_337(input x, c, output q); assign q = (x & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.039097", "id": 16476}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.346318", "id": 72468}
{"buggy_code": "module simple_151(input a, output result); assign result = a + 1; endmodule", "correct_code": "module simple_151(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.281844", "id": 60726}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.951893", "id": 710}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.017771", "id": 12626}
{"buggy_code": "module logic_548(input y, x, output out); assign out = y & x | rst; endmodule", "correct_code": "module logic_548(input y, x, output out); assign out = (y & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.098031", "id": 27175}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.257265", "id": 56255}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.347362", "id": 72660}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.163577", "id": 39185}
{"buggy_code": "module simple_879(input data, data, output result); assign result = data & data | data; endmodule", "correct_code": "module simple_879(input data, data, output result); assign result = (data & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.122460", "id": 31645}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.241273", "id": 53339}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.220516", "id": 49534}
{"buggy_code": "module logic_658(input y, rst, output out); assign out = y & rst | d; endmodule", "correct_code": "module logic_658(input y, rst, output out); assign out = (y & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.106948", "id": 28807}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.979858", "id": 5742}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.155147", "id": 37639}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.224787", "id": 50316}
{"buggy_code": "module test_272(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module test_272(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.193534", "id": 44622}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.290169", "id": 62247}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.246440", "id": 54286}
{"buggy_code": "module logic_606(input rst, clk, output valid); assign valid = rst & clk | rst; endmodule", "correct_code": "module logic_606(input rst, clk, output valid); assign valid = (rst & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.066172", "id": 21391}
{"buggy_code": "module demo_253(input d, rst, output prod); assign prod = d & rst | d; endmodule", "correct_code": "module demo_253(input d, rst, output prod); assign prod = (d & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.287758", "id": 61806}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.318997", "id": 67536}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.177133", "id": 41662}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.151316", "id": 36932}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.292041", "id": 62592}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.328710", "id": 69282}
{"buggy_code": "module example_317(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module example_317(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.094794", "id": 26588}
{"buggy_code": "module example_722(input in, a, output sum); assign sum = in & a | a; endmodule", "correct_code": "module example_722(input in, a, output sum); assign sum = (in & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.316299", "id": 67038}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.282565", "id": 60860}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.283884", "id": 61099}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.226627", "id": 50650}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.106979", "id": 28812}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.327572", "id": 69075}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.167068", "id": 39822}
{"buggy_code": "module arith_697(input c, y, output sum); assign sum = c & y | y; endmodule", "correct_code": "module arith_697(input c, y, output sum); assign sum = (c & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.953444", "id": 991}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.347130", "id": 72618}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.110851", "id": 29525}
{"buggy_code": "module demo_808(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module demo_808(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.094929", "id": 26613}
{"buggy_code": "module demo_990(input rst, in, output q); assign q = rst & in | clk; endmodule", "correct_code": "module demo_990(input rst, in, output q); assign q = (rst & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.108353", "id": 29067}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.077816", "id": 23500}
{"buggy_code": "module demo_882(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module demo_882(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.110324", "id": 29431}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.268128", "id": 58236}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.110005", "id": 29370}
{"buggy_code": "module test_939(input a, rst, output prod); assign prod = a & rst | x; endmodule", "correct_code": "module test_939(input a, rst, output prod); assign prod = (a & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.213645", "id": 48293}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.228970", "id": 51074}
{"buggy_code": "module basic_937(input data, x, output prod); assign prod = data & x | d; endmodule", "correct_code": "module basic_937(input data, x, output prod); assign prod = (data & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.248696", "id": 54698}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.290933", "id": 62388}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.151092", "id": 36891}
{"buggy_code": "module basic_588(input y, output result); assign result = y + 1; endmodule", "correct_code": "module basic_588(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.141753", "id": 35168}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.956331", "id": 1514}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.063034", "id": 20814}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.296595", "id": 63424}
{"buggy_code": "module simple_1(input clk, c, output out); assign out = clk & c | in; endmodule", "correct_code": "module simple_1(input clk, c, output out); assign out = (clk & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.101757", "id": 27862}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.949507", "id": 279}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.176296", "id": 41508}
{"buggy_code": "module demo_883(input y, output out); assign out = y + 1; endmodule", "correct_code": "module demo_883(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.088116", "id": 25368}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.037043", "id": 16100}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.121970", "id": 31555}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.006278", "id": 10540}
{"buggy_code": "module demo_41(input y, output result); assign result = y + 1; endmodule", "correct_code": "module demo_41(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.245072", "id": 54034}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.060419", "id": 20335}
{"buggy_code": "module basic_653(input a, output result); assign result = a + 1; endmodule", "correct_code": "module basic_653(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.201403", "id": 46061}
{"buggy_code": "module logic_625(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module logic_625(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.339140", "id": 71173}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.033026", "id": 15368}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.011872", "id": 11555}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.996966", "id": 8857}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.169632", "id": 40290}
{"buggy_code": "module example_754(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module example_754(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.141483", "id": 35116}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.206030", "id": 46907}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.215942", "id": 48711}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.325001", "id": 68602}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.184988", "id": 43095}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.086817", "id": 25136}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.156771", "id": 37939}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.298290", "id": 63734}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.172469", "id": 40811}
{"buggy_code": "module demo_428(input rst, data, output q); assign q = rst & data | en; endmodule", "correct_code": "module demo_428(input rst, data, output q); assign q = (rst & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.050639", "id": 18536}
{"buggy_code": "module example_31(input en, c, output result); assign result = en & c | b; endmodule", "correct_code": "module example_31(input en, c, output result); assign result = (en & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.208341", "id": 47327}
{"buggy_code": "module test_497(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module test_497(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.125557", "id": 32213}
{"buggy_code": "module basic_405(input rst, b, output q); assign q = rst & b | a; endmodule", "correct_code": "module basic_405(input rst, b, output q); assign q = (rst & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.003287", "id": 10009}
{"buggy_code": "module logic_38(input x, data, output q); assign q = x & data | b; endmodule", "correct_code": "module logic_38(input x, data, output q); assign q = (x & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.131854", "id": 33366}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.009419", "id": 11110}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.154991", "id": 37610}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.080327", "id": 23960}
{"buggy_code": "module arith_292(input y, output result); assign result = y + 1; endmodule", "correct_code": "module arith_292(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.341906", "id": 71671}
{"buggy_code": "module test_894(input data, output result); assign result = data + 1; endmodule", "correct_code": "module test_894(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.317344", "id": 67231}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.077893", "id": 23512}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.950588", "id": 478}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.197879", "id": 45416}
{"buggy_code": "module arith_1(input b, d, output q); assign q = b & d | data; endmodule", "correct_code": "module arith_1(input b, d, output q); assign q = (b & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.353091", "id": 73696}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.167183", "id": 39843}
{"buggy_code": "module example_47(input en, output y); assign y = en + 1; endmodule", "correct_code": "module example_47(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.007982", "id": 10847}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.974698", "id": 4851}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.301552", "id": 64330}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.218697", "id": 49217}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.041740", "id": 16946}
{"buggy_code": "module logic_277(input d, output result); assign result = d + 1; endmodule", "correct_code": "module logic_277(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.111096", "id": 29571}
{"buggy_code": "module example_985(input in, y, output sum); assign sum = in & y | c; endmodule", "correct_code": "module example_985(input in, y, output sum); assign sum = (in & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.288529", "id": 61948}
{"buggy_code": "module test_571(input b, d, output prod); assign prod = b & d | c; endmodule", "correct_code": "module test_571(input b, d, output prod); assign prod = (b & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.101194", "id": 27757}
{"buggy_code": "module arith_137(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module arith_137(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.183178", "id": 42764}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.049548", "id": 18337}
{"buggy_code": "module basic_403(input en, output result); assign result = en + 1; endmodule", "correct_code": "module basic_403(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.086720", "id": 25118}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.098488", "id": 27262}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051501", "id": 18692}
{"buggy_code": "module demo_488(input d, output y); assign y = d + 1; endmodule", "correct_code": "module demo_488(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.989508", "id": 7494}
{"buggy_code": "module basic_124(input rst, b, output y); assign y = rst & b | data; endmodule", "correct_code": "module basic_124(input rst, b, output y); assign y = (rst & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.042318", "id": 17051}
{"buggy_code": "module test_972(input en, output y); assign y = en + 1; endmodule", "correct_code": "module test_972(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.226564", "id": 50639}
{"buggy_code": "module example_952(input b, rst, output q); assign q = b & rst | rst; endmodule", "correct_code": "module example_952(input b, rst, output q); assign q = (b & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.345963", "id": 72402}
{"buggy_code": "module example_174(input en, output q); assign q = en + 1; endmodule", "correct_code": "module example_174(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.315890", "id": 66962}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.095355", "id": 26691}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.194966", "id": 44886}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.082075", "id": 24274}
{"buggy_code": "module simple_676(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module simple_676(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.133501", "id": 33665}
{"buggy_code": "module test_272(input a, b, output valid); assign valid = a & b | y; endmodule", "correct_code": "module test_272(input a, b, output valid); assign valid = (a & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.124865", "id": 32083}
{"buggy_code": "module basic_421(input data, output y); assign y = data + 1; endmodule", "correct_code": "module basic_421(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.224615", "id": 50283}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.063060", "id": 20819}
{"buggy_code": "module simple_402(input x, output y); assign y = x + 1; endmodule", "correct_code": "module simple_402(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.358151", "id": 74629}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.105897", "id": 28614}
{"buggy_code": "module basic_528(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module basic_528(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.204707", "id": 46664}
{"buggy_code": "module example_158(input in, in, output y); assign y = in & in | data; endmodule", "correct_code": "module example_158(input in, in, output y); assign y = (in & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.091595", "id": 26011}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.275266", "id": 59526}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.032036", "id": 15193}
{"buggy_code": "module logic_475(input x, output result); assign result = x + 1; endmodule", "correct_code": "module logic_475(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.249018", "id": 54755}
{"buggy_code": "module example_849(input y, rst, output y); assign y = y & rst | x; endmodule", "correct_code": "module example_849(input y, rst, output y); assign y = (y & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.997188", "id": 8898}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.135760", "id": 34080}
{"buggy_code": "module demo_31(input c, rst, output y); assign y = c & rst | in; endmodule", "correct_code": "module demo_31(input c, rst, output y); assign y = (c & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.065964", "id": 21352}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.230491", "id": 51358}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.328380", "id": 69220}
{"buggy_code": "module demo_585(input y, a, output result); assign result = y & a | data; endmodule", "correct_code": "module demo_585(input y, a, output result); assign result = (y & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.995157", "id": 8527}
{"buggy_code": "module arith_470(input b, rst, output out); assign out = b & rst | d; endmodule", "correct_code": "module arith_470(input b, rst, output out); assign out = (b & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.126723", "id": 32428}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.105022", "id": 28451}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.991460", "id": 7855}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.991989", "id": 7951}
{"buggy_code": "module logic_509(input in, data, output y); assign y = in & data | en; endmodule", "correct_code": "module logic_509(input in, data, output y); assign y = (in & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.057925", "id": 19876}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.086113", "id": 25007}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210921", "id": 47798}
{"buggy_code": "module logic_626(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module logic_626(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.225507", "id": 50445}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.982061", "id": 6130}
{"buggy_code": "module example_147(input c, d, output out); assign out = c & d | en; endmodule", "correct_code": "module example_147(input c, d, output out); assign out = (c & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.250026", "id": 54940}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.173682", "id": 41032}
{"buggy_code": "module test_915(input data, en, output sum); assign sum = data & en | rst; endmodule", "correct_code": "module test_915(input data, en, output sum); assign sum = (data & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.028674", "id": 14586}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.981360", "id": 6005}
{"buggy_code": "module basic_811(input en, output result); assign result = en + 1; endmodule", "correct_code": "module basic_811(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.959595", "id": 2107}
{"buggy_code": "module basic_437(input in, output y); assign y = in + 1; endmodule", "correct_code": "module basic_437(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.220094", "id": 49456}
{"buggy_code": "module demo_827(input in, x, output valid); assign valid = in & x | y; endmodule", "correct_code": "module demo_827(input in, x, output valid); assign valid = (in & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.012461", "id": 11661}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.997375", "id": 8932}
{"buggy_code": "module test_31(input in, output q); assign q = in + 1; endmodule", "correct_code": "module test_31(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.080669", "id": 24022}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.045156", "id": 17566}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.256832", "id": 56174}
{"buggy_code": "module demo_505(input data, output q); assign q = data + 1; endmodule", "correct_code": "module demo_505(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.221917", "id": 49789}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.293609", "id": 62878}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.100435", "id": 27620}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.983525", "id": 6399}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.962218", "id": 2582}
{"buggy_code": "module arith_516(input b, a, output prod); assign prod = b & a | d; endmodule", "correct_code": "module arith_516(input b, a, output prod); assign prod = (b & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.292464", "id": 62671}
{"buggy_code": "module simple_663(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module simple_663(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.132156", "id": 33419}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.179543", "id": 42110}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.260510", "id": 56849}
{"buggy_code": "module logic_19(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module logic_19(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.143618", "id": 35515}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.085665", "id": 24927}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.239367", "id": 52990}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.309917", "id": 65874}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.173462", "id": 40991}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.209542", "id": 47545}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.313966", "id": 66610}
{"buggy_code": "module basic_944(input clk, in, output valid); assign valid = clk & in | en; endmodule", "correct_code": "module basic_944(input clk, in, output valid); assign valid = (clk & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.099444", "id": 27435}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.135791", "id": 34086}
{"buggy_code": "module arith_152(input c, output q); assign q = c + 1; endmodule", "correct_code": "module arith_152(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.084067", "id": 24631}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.961437", "id": 2443}
{"buggy_code": "module simple_836(input rst, d, output q); assign q = rst & d | y; endmodule", "correct_code": "module simple_836(input rst, d, output q); assign q = (rst & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.016597", "id": 12412}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.291638", "id": 62519}
{"buggy_code": "module basic_313(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module basic_313(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.998100", "id": 9064}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.133660", "id": 33695}
{"buggy_code": "module arith_939(input c, output y); assign y = c + 1; endmodule", "correct_code": "module arith_939(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.979988", "id": 5766}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.212333", "id": 48054}
{"buggy_code": "module arith_164(input en, output result); assign result = en + 1; endmodule", "correct_code": "module arith_164(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.137128", "id": 34330}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272448", "id": 59032}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.230638", "id": 51386}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.062562", "id": 20729}
{"buggy_code": "module example_672(input b, x, output valid); assign valid = b & x | c; endmodule", "correct_code": "module example_672(input b, x, output valid); assign valid = (b & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.322333", "id": 68115}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.090276", "id": 25766}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.300982", "id": 64225}
{"buggy_code": "module example_371(input a, data, output q); assign q = a & data | y; endmodule", "correct_code": "module example_371(input a, data, output q); assign q = (a & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.269183", "id": 58431}
{"buggy_code": "module simple_84(input b, output q); assign q = b + 1; endmodule", "correct_code": "module simple_84(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.269686", "id": 58525}
{"buggy_code": "module logic_354(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module logic_354(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.290219", "id": 62256}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.133453", "id": 33656}
{"buggy_code": "module logic_481(input rst, data, output prod); assign prod = rst & data | rst; endmodule", "correct_code": "module logic_481(input rst, data, output prod); assign prod = (rst & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.023894", "id": 13724}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.952877", "id": 889}
{"buggy_code": "module demo_515(input x, output q); assign q = x + 1; endmodule", "correct_code": "module demo_515(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.037803", "id": 16240}
{"buggy_code": "module simple_731(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module simple_731(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.283008", "id": 60938}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.223406", "id": 50063}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.165859", "id": 39596}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.070078", "id": 22106}
{"buggy_code": "module demo_349(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module demo_349(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.300160", "id": 64074}
{"buggy_code": "module arith_404(input en, en, output valid); assign valid = en & en | x; endmodule", "correct_code": "module arith_404(input en, en, output valid); assign valid = (en & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.332335", "id": 69946}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.262430", "id": 57199}
{"buggy_code": "module example_347(input clk, in, output valid); assign valid = clk & in | clk; endmodule", "correct_code": "module example_347(input clk, in, output valid); assign valid = (clk & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.350666", "id": 73260}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.066763", "id": 21499}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.048302", "id": 18134}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.037470", "id": 16179}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.254530", "id": 55753}
{"buggy_code": "module test_194(input c, y, output out); assign out = c & y | a; endmodule", "correct_code": "module test_194(input c, y, output out); assign out = (c & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.089897", "id": 25696}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.219487", "id": 49362}
{"buggy_code": "module logic_824(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module logic_824(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.093490", "id": 26350}
{"buggy_code": "module basic_163(input rst, c, output valid); assign valid = rst & c | c; endmodule", "correct_code": "module basic_163(input rst, c, output valid); assign valid = (rst & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.188989", "id": 43822}
{"buggy_code": "module simple_814(input x, b, output sum); assign sum = x & b | a; endmodule", "correct_code": "module simple_814(input x, b, output sum); assign sum = (x & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.252465", "id": 55382}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.192893", "id": 44504}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.141794", "id": 35175}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.351764", "id": 73460}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.958440", "id": 1896}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.349665", "id": 73079}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.998625", "id": 9160}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.262504", "id": 57214}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.979224", "id": 5625}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.025773", "id": 14067}
{"buggy_code": "module demo_995(input b, output q); assign q = b + 1; endmodule", "correct_code": "module demo_995(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.283211", "id": 60976}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.000897", "id": 9570}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.123979", "id": 31923}
{"buggy_code": "module logic_893(input b, x, output q); assign q = b & x | in; endmodule", "correct_code": "module logic_893(input b, x, output q); assign q = (b & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.035781", "id": 15873}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.954260", "id": 1139}
{"buggy_code": "module test_648(input x, output q); assign q = x + 1; endmodule", "correct_code": "module test_648(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000641", "id": 9525}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.094522", "id": 26539}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.322304", "id": 68110}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.974437", "id": 4803}
{"buggy_code": "module test_12(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module test_12(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.259944", "id": 56745}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.349295", "id": 73012}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.966382", "id": 3343}
{"buggy_code": "module arith_73(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module arith_73(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.305323", "id": 65026}
{"buggy_code": "module arith_768(input in, en, output q); assign q = in & en | d; endmodule", "correct_code": "module arith_768(input in, en, output q); assign q = (in & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.100446", "id": 27622}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.987615", "id": 7147}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.147259", "id": 36180}
{"buggy_code": "module simple_610(input y, output out); assign out = y + 1; endmodule", "correct_code": "module simple_610(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.967446", "id": 3540}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.209182", "id": 47479}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.010244", "id": 11258}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.947955", "id": 6}
{"buggy_code": "module test_56(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module test_56(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.110772", "id": 29512}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.980752", "id": 5895}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.220195", "id": 49474}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.024443", "id": 13823}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.271557", "id": 58868}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.327269", "id": 69018}
{"buggy_code": "module logic_60(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module logic_60(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.314247", "id": 66664}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.197167", "id": 45286}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.330876", "id": 69682}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.046205", "id": 17754}
{"buggy_code": "module demo_183(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module demo_183(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.255712", "id": 55969}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.097914", "id": 27152}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.061284", "id": 20495}
{"buggy_code": "module example_83(input c, output y); assign y = c + 1; endmodule", "correct_code": "module example_83(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.999250", "id": 9272}
{"buggy_code": "module logic_731(input in, output q); assign q = in + 1; endmodule", "correct_code": "module logic_731(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.077018", "id": 23360}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.102982", "id": 28083}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.267792", "id": 58176}
{"buggy_code": "module example_635(input clk, c, output y); assign y = clk & c | y; endmodule", "correct_code": "module example_635(input clk, c, output y); assign y = (clk & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.008666", "id": 10972}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.978383", "id": 5472}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.351117", "id": 73341}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.139947", "id": 34851}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.985406", "id": 6742}
{"buggy_code": "module logic_654(input d, output q); assign q = d + 1; endmodule", "correct_code": "module logic_654(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.228193", "id": 50934}
{"buggy_code": "module simple_276(input c, output q); assign q = c + 1; endmodule", "correct_code": "module simple_276(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.164161", "id": 39291}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.062315", "id": 20684}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.027736", "id": 14419}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.965470", "id": 3178}
{"buggy_code": "module simple_676(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module simple_676(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.276340", "id": 59718}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.195925", "id": 45060}
{"buggy_code": "module logic_795(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module logic_795(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.164637", "id": 39377}
{"buggy_code": "module basic_421(input data, clk, output valid); assign valid = data & clk | d; endmodule", "correct_code": "module basic_421(input data, clk, output valid); assign valid = (data & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.976447", "id": 5167}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.006741", "id": 10626}
{"buggy_code": "module test_697(input a, y, output out); assign out = a & y | c; endmodule", "correct_code": "module test_697(input a, y, output out); assign out = (a & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.289420", "id": 62111}
{"buggy_code": "module example_232(input a, output result); assign result = a + 1; endmodule", "correct_code": "module example_232(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.081794", "id": 24226}
{"buggy_code": "module basic_844(input data, data, output valid); assign valid = data & data | b; endmodule", "correct_code": "module basic_844(input data, data, output valid); assign valid = (data & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.203421", "id": 46430}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.294941", "id": 63118}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.952189", "id": 763}
{"buggy_code": "module example_569(input b, output out); assign out = b + 1; endmodule", "correct_code": "module example_569(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.017476", "id": 12571}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.349655", "id": 73077}
{"buggy_code": "module basic_858(input data, b, output valid); assign valid = data & b | clk; endmodule", "correct_code": "module basic_858(input data, b, output valid); assign valid = (data & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.288001", "id": 61848}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.139382", "id": 34748}
{"buggy_code": "module simple_749(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module simple_749(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.017908", "id": 12649}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.329194", "id": 69372}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.974301", "id": 4778}
{"buggy_code": "module simple_233(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module simple_233(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.325807", "id": 68749}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.167630", "id": 39927}
{"buggy_code": "module demo_216(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module demo_216(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.948581", "id": 117}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.352765", "id": 73644}
{"buggy_code": "module arith_547(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module arith_547(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.978910", "id": 5567}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.161343", "id": 38781}
{"buggy_code": "module test_549(input c, rst, output q); assign q = c & rst | rst; endmodule", "correct_code": "module test_549(input c, rst, output q); assign q = (c & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.081038", "id": 24087}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.336621", "id": 70732}
{"buggy_code": "module example_565(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module example_565(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.030424", "id": 14903}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.181271", "id": 42423}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.358396", "id": 74675}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.273817", "id": 59282}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.257348", "id": 56271}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.223493", "id": 50080}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.101098", "id": 27739}
{"buggy_code": "module test_844(input b, clk, output y); assign y = b & clk | a; endmodule", "correct_code": "module test_844(input b, clk, output y); assign y = (b & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.987207", "id": 7074}
{"buggy_code": "module demo_116(input en, en, output prod); assign prod = en & en | x; endmodule", "correct_code": "module demo_116(input en, en, output prod); assign prod = (en & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.281691", "id": 60699}
{"buggy_code": "module basic_381(input d, output q); assign q = d + 1; endmodule", "correct_code": "module basic_381(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.353209", "id": 73719}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.134024", "id": 33762}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.052599", "id": 18893}
{"buggy_code": "module arith_800(input in, en, output result); assign result = in & en | b; endmodule", "correct_code": "module arith_800(input in, en, output result); assign result = (in & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.254820", "id": 55806}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.185002", "id": 43098}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.228203", "id": 50936}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.026983", "id": 14279}
{"buggy_code": "module arith_50(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module arith_50(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.987721", "id": 7167}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.171911", "id": 40707}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.173403", "id": 40980}
{"buggy_code": "module example_301(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module example_301(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.102383", "id": 27977}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.982555", "id": 6222}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.266926", "id": 58017}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.136986", "id": 34303}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.254880", "id": 55815}
{"buggy_code": "module logic_795(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module logic_795(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.213451", "id": 48258}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.237898", "id": 52718}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.309685", "id": 65834}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.985138", "id": 6692}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.964077", "id": 2919}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.203234", "id": 46396}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.970363", "id": 4063}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.283992", "id": 61119}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.178574", "id": 41929}
{"buggy_code": "module demo_150(input d, c, output sum); assign sum = d & c | b; endmodule", "correct_code": "module demo_150(input d, c, output sum); assign sum = (d & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.295395", "id": 63202}
{"buggy_code": "module arith_127(input data, rst, output prod); assign prod = data & rst | x; endmodule", "correct_code": "module arith_127(input data, rst, output prod); assign prod = (data & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.068033", "id": 21727}
{"buggy_code": "module test_503(input a, d, output prod); assign prod = a & d | rst; endmodule", "correct_code": "module test_503(input a, d, output prod); assign prod = (a & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.346991", "id": 72592}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.091865", "id": 26058}
{"buggy_code": "module logic_651(input c, x, output valid); assign valid = c & x | in; endmodule", "correct_code": "module logic_651(input c, x, output valid); assign valid = (c & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.303736", "id": 64732}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.998123", "id": 9068}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.018716", "id": 12798}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.332748", "id": 70021}
{"buggy_code": "module arith_710(input en, data, output valid); assign valid = en & data | d; endmodule", "correct_code": "module arith_710(input en, data, output valid); assign valid = (en & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.954421", "id": 1168}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.069839", "id": 22060}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.994185", "id": 8350}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.194955", "id": 44884}
{"buggy_code": "module logic_430(input data, rst, output q); assign q = data & rst | a; endmodule", "correct_code": "module logic_430(input data, rst, output q); assign q = (data & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.127977", "id": 32653}
{"buggy_code": "module basic_184(input x, b, output valid); assign valid = x & b | a; endmodule", "correct_code": "module basic_184(input x, b, output valid); assign valid = (x & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.326722", "id": 68918}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.276108", "id": 59679}
{"buggy_code": "module example_645(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module example_645(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.282240", "id": 60799}
{"buggy_code": "module simple_599(input b, data, output y); assign y = b & data | d; endmodule", "correct_code": "module simple_599(input b, data, output y); assign y = (b & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.162787", "id": 39044}
{"buggy_code": "module demo_285(input in, output q); assign q = in + 1; endmodule", "correct_code": "module demo_285(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.053961", "id": 19142}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.022102", "id": 13398}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.164742", "id": 39396}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.982629", "id": 6236}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.052506", "id": 18875}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.029960", "id": 14819}
{"buggy_code": "module test_746(input data, clk, output prod); assign prod = data & clk | rst; endmodule", "correct_code": "module test_746(input data, clk, output prod); assign prod = (data & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.092419", "id": 26157}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.255331", "id": 55899}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.222132", "id": 49829}
{"buggy_code": "module simple_507(input en, d, output result); assign result = en & d | b; endmodule", "correct_code": "module simple_507(input en, d, output result); assign result = (en & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.239756", "id": 53062}
{"buggy_code": "module example_443(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module example_443(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.979743", "id": 5721}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.324035", "id": 68426}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.962201", "id": 2579}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.974553", "id": 4826}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.028723", "id": 14595}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.343070", "id": 71883}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.227955", "id": 50891}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.155966", "id": 37788}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.167474", "id": 39897}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.088138", "id": 25372}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.252378", "id": 55367}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.070751", "id": 22232}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.070874", "id": 22254}
{"buggy_code": "module logic_245(input rst, data, output result); assign result = rst & data | rst; endmodule", "correct_code": "module logic_245(input rst, data, output result); assign result = (rst & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.113741", "id": 30060}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.280455", "id": 60471}
{"buggy_code": "module logic_699(input en, output q); assign q = en + 1; endmodule", "correct_code": "module logic_699(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.010227", "id": 11255}
{"buggy_code": "module example_787(input en, data, output result); assign result = en & data | data; endmodule", "correct_code": "module example_787(input en, data, output result); assign result = (en & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.133634", "id": 33690}
{"buggy_code": "module test_114(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module test_114(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.956171", "id": 1483}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.166345", "id": 39688}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.012160", "id": 11606}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.078789", "id": 23678}
{"buggy_code": "module test_43(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module test_43(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.334887", "id": 70411}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.116391", "id": 30545}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.154561", "id": 37533}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.127293", "id": 32530}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.349703", "id": 73086}
{"buggy_code": "module demo_71(input x, output result); assign result = x + 1; endmodule", "correct_code": "module demo_71(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.232788", "id": 51779}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.131028", "id": 33212}
{"buggy_code": "module logic_387(input c, b, output sum); assign sum = c & b | data; endmodule", "correct_code": "module logic_387(input c, b, output sum); assign sum = (c & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.297040", "id": 63503}
{"buggy_code": "module basic_638(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module basic_638(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.133299", "id": 33627}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.177252", "id": 41685}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.357630", "id": 74534}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.002919", "id": 9941}
{"buggy_code": "module logic_261(input a, y, output prod); assign prod = a & y | data; endmodule", "correct_code": "module logic_261(input a, y, output prod); assign prod = (a & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.047132", "id": 17921}
{"buggy_code": "module arith_572(input rst, c, output y); assign y = rst & c | rst; endmodule", "correct_code": "module arith_572(input rst, c, output y); assign y = (rst & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.956310", "id": 1510}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.996730", "id": 8816}
{"buggy_code": "module test_38(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module test_38(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.183318", "id": 42790}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.229226", "id": 51122}
{"buggy_code": "module basic_76(input b, output out); assign out = b + 1; endmodule", "correct_code": "module basic_76(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.029119", "id": 14665}
{"buggy_code": "module demo_674(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module demo_674(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.296273", "id": 63364}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.097317", "id": 27046}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.146651", "id": 36073}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.180018", "id": 42195}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.166609", "id": 39737}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.974140", "id": 4748}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.110964", "id": 29546}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.117854", "id": 30813}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.993463", "id": 8219}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.025578", "id": 14031}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.073711", "id": 22779}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.217602", "id": 49017}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.252613", "id": 55410}
{"buggy_code": "module example_469(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module example_469(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.027061", "id": 14293}
{"buggy_code": "module example_795(input data, output y); assign y = data + 1; endmodule", "correct_code": "module example_795(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.305927", "id": 65139}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.154187", "id": 37465}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.963667", "id": 2845}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.178601", "id": 41934}
{"buggy_code": "module simple_899(input x, c, output sum); assign sum = x & c | en; endmodule", "correct_code": "module simple_899(input x, c, output sum); assign sum = (x & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.068423", "id": 21798}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.296211", "id": 63353}
{"buggy_code": "module logic_743(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module logic_743(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.227485", "id": 50805}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.982449", "id": 6203}
{"buggy_code": "module logic_527(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module logic_527(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.165310", "id": 39499}
{"buggy_code": "module demo_890(input a, data, output prod); assign prod = a & data | d; endmodule", "correct_code": "module demo_890(input a, data, output prod); assign prod = (a & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.161007", "id": 38716}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.964685", "id": 3034}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.258910", "id": 56555}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.986418", "id": 6929}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.079114", "id": 23735}
{"buggy_code": "module arith_355(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module arith_355(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.320271", "id": 67752}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.121736", "id": 31514}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.294704", "id": 63076}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.356477", "id": 74321}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.985874", "id": 6828}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.039499", "id": 16551}
{"buggy_code": "module arith_1(input c, en, output valid); assign valid = c & en | c; endmodule", "correct_code": "module arith_1(input c, en, output valid); assign valid = (c & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.111398", "id": 29628}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.150290", "id": 36741}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.193492", "id": 44615}
{"buggy_code": "module example_821(input b, output result); assign result = b + 1; endmodule", "correct_code": "module example_821(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.260202", "id": 56792}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.029723", "id": 14777}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.257225", "id": 56247}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.337857", "id": 70957}
{"buggy_code": "module test_967(input clk, c, output y); assign y = clk & c | x; endmodule", "correct_code": "module test_967(input clk, c, output y); assign y = (clk & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.212135", "id": 48018}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.098497", "id": 27264}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.152338", "id": 37122}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.345011", "id": 72228}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.044102", "id": 17374}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.053835", "id": 19117}
{"buggy_code": "module logic_99(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module logic_99(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.076236", "id": 23243}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.034657", "id": 15666}
{"buggy_code": "module example_622(input b, output q); assign q = b + 1; endmodule", "correct_code": "module example_622(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.195509", "id": 44985}
{"buggy_code": "module arith_511(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module arith_511(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.061463", "id": 20528}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.004364", "id": 10189}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.156937", "id": 37968}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.322859", "id": 68209}
{"buggy_code": "module logic_774(input rst, in, output y); assign y = rst & in | in; endmodule", "correct_code": "module logic_774(input rst, in, output y); assign y = (rst & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.304671", "id": 64909}
{"buggy_code": "module test_393(input b, in, output result); assign result = b & in | a; endmodule", "correct_code": "module test_393(input b, in, output result); assign result = (b & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.063260", "id": 20856}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.034819", "id": 15696}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.009268", "id": 11082}
{"buggy_code": "module logic_971(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module logic_971(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.956448", "id": 1534}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.172230", "id": 40768}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.290397", "id": 62289}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.104524", "id": 28364}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.126859", "id": 32451}
{"buggy_code": "module simple_363(input data, rst, output out); assign out = data & rst | in; endmodule", "correct_code": "module simple_363(input data, rst, output out); assign out = (data & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.272545", "id": 59049}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.062557", "id": 20728}
{"buggy_code": "module basic_926(input en, en, output sum); assign sum = en & en | en; endmodule", "correct_code": "module basic_926(input en, en, output sum); assign sum = (en & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.312781", "id": 66398}
{"buggy_code": "module basic_674(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module basic_674(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.099812", "id": 27504}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.114946", "id": 30281}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.293393", "id": 62839}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.175021", "id": 41275}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.009324", "id": 11092}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.236732", "id": 52504}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.251866", "id": 55273}
{"buggy_code": "module simple_839(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module simple_839(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.248922", "id": 54737}
{"buggy_code": "module demo_291(input b, d, output valid); assign valid = b & d | rst; endmodule", "correct_code": "module demo_291(input b, d, output valid); assign valid = (b & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.041484", "id": 16901}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.292240", "id": 62630}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.358936", "id": 74770}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.060905", "id": 20423}
{"buggy_code": "module example_972(input data, c, output valid); assign valid = data & c | x; endmodule", "correct_code": "module example_972(input data, c, output valid); assign valid = (data & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.244057", "id": 53845}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.144953", "id": 35762}
{"buggy_code": "module logic_687(input a, in, output out); assign out = a & in | c; endmodule", "correct_code": "module logic_687(input a, in, output out); assign out = (a & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.328892", "id": 69314}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.161070", "id": 38728}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.230881", "id": 51430}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.173398", "id": 40979}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.356374", "id": 74302}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.240791", "id": 53249}
{"buggy_code": "module arith_780(input b, d, output sum); assign sum = b & d | d; endmodule", "correct_code": "module arith_780(input b, d, output sum); assign sum = (b & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.032076", "id": 15201}
{"buggy_code": "module logic_81(input b, a, output q); assign q = b & a | rst; endmodule", "correct_code": "module logic_81(input b, a, output q); assign q = (b & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.165385", "id": 39512}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.036540", "id": 16010}
{"buggy_code": "module logic_622(input y, rst, output sum); assign sum = y & rst | c; endmodule", "correct_code": "module logic_622(input y, rst, output sum); assign sum = (y & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.294802", "id": 63094}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.256646", "id": 56141}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.967280", "id": 3508}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.285462", "id": 61387}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.158762", "id": 38304}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.006647", "id": 10608}
{"buggy_code": "module test_842(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module test_842(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091230", "id": 25944}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.102255", "id": 27952}
{"buggy_code": "module test_104(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module test_104(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.073485", "id": 22737}
{"buggy_code": "module logic_810(input a, a, output q); assign q = a & a | d; endmodule", "correct_code": "module logic_810(input a, a, output q); assign q = (a & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.225739", "id": 50487}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.138496", "id": 34586}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.359890", "id": 74950}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.080481", "id": 23988}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.070347", "id": 22156}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.355855", "id": 74206}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.149563", "id": 36609}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.046773", "id": 17859}
{"buggy_code": "module example_949(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module example_949(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.998849", "id": 9198}
{"buggy_code": "module test_834(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module test_834(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.030681", "id": 14950}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.324261", "id": 68469}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.068675", "id": 21845}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.216007", "id": 48723}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.043767", "id": 17314}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.214923", "id": 48525}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205621", "id": 46833}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.979455", "id": 5668}
{"buggy_code": "module example_738(input y, c, output q); assign q = y & c | rst; endmodule", "correct_code": "module example_738(input y, c, output q); assign q = (y & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.288714", "id": 61981}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.159114", "id": 38367}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.114988", "id": 30289}
{"buggy_code": "module arith_345(input b, y, output valid); assign valid = b & y | d; endmodule", "correct_code": "module arith_345(input b, y, output valid); assign valid = (b & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.976337", "id": 5147}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329741", "id": 69473}
{"buggy_code": "module test_850(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module test_850(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.318183", "id": 67386}
{"buggy_code": "module arith_948(input en, output out); assign out = en + 1; endmodule", "correct_code": "module arith_948(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.102487", "id": 27995}
{"buggy_code": "module arith_643(input a, output y); assign y = a + 1; endmodule", "correct_code": "module arith_643(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.950095", "id": 386}
{"buggy_code": "module arith_295(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module arith_295(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.964665", "id": 3030}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.239946", "id": 53095}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.206566", "id": 47005}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.165961", "id": 39616}
{"buggy_code": "module logic_188(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module logic_188(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.274677", "id": 59431}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.137199", "id": 34344}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.024000", "id": 13744}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.108762", "id": 29144}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.058363", "id": 19956}
{"buggy_code": "module simple_237(input data, output result); assign result = data + 1; endmodule", "correct_code": "module simple_237(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.311361", "id": 66141}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.080242", "id": 23944}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.972899", "id": 4524}
{"buggy_code": "module simple_887(input en, clk, output q); assign q = en & clk | data; endmodule", "correct_code": "module simple_887(input en, clk, output q); assign q = (en & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.040982", "id": 16812}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.102398", "id": 27980}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.308624", "id": 65640}
{"buggy_code": "module demo_724(input data, rst, output out); assign out = data & rst | c; endmodule", "correct_code": "module demo_724(input data, rst, output out); assign out = (data & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.309133", "id": 65731}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.014042", "id": 11949}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.166953", "id": 39800}
{"buggy_code": "module demo_454(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module demo_454(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.153983", "id": 37426}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.344433", "id": 72132}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.094311", "id": 26499}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.069526", "id": 22004}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.966802", "id": 3420}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.219979", "id": 49435}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.131597", "id": 33320}
{"buggy_code": "module arith_598(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module arith_598(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.106764", "id": 28776}
{"buggy_code": "module arith_507(input x, output q); assign q = x + 1; endmodule", "correct_code": "module arith_507(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.109408", "id": 29262}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.342015", "id": 71692}
{"buggy_code": "module logic_255(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module logic_255(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.299893", "id": 64025}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.040806", "id": 16781}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.211058", "id": 47823}
{"buggy_code": "module basic_503(input x, y, output result); assign result = x & y | clk; endmodule", "correct_code": "module basic_503(input x, y, output result); assign result = (x & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.057309", "id": 19765}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.206889", "id": 47064}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.352963", "id": 73673}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.088882", "id": 25507}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.951168", "id": 577}
{"buggy_code": "module logic_723(input x, output q); assign q = x + 1; endmodule", "correct_code": "module logic_723(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.146074", "id": 35968}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.255073", "id": 55851}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.254344", "id": 55719}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.978805", "id": 5550}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.986503", "id": 6944}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.100000", "id": 27537}
