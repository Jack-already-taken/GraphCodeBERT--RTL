{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192341", "id": 44404}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.981127", "id": 5962}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.356592", "id": 74343}
{"buggy_code": "module simple_767(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module simple_767(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.099662", "id": 27476}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.134757", "id": 33898}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.147273", "id": 36183}
{"buggy_code": "module test_927(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module test_927(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.195876", "id": 45051}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.122230", "id": 31603}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.257033", "id": 56211}
{"buggy_code": "module demo_537(input en, b, output prod); assign prod = en & b | en; endmodule", "correct_code": "module demo_537(input en, b, output prod); assign prod = (en & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.167199", "id": 39846}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.163974", "id": 39257}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.975352", "id": 4969}
{"buggy_code": "module example_880(input b, x, output q); assign q = b & x | c; endmodule", "correct_code": "module example_880(input b, x, output q); assign q = (b & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.034057", "id": 15556}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.258382", "id": 56460}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.105604", "id": 28561}
{"buggy_code": "module example_915(input a, y, output q); assign q = a & y | d; endmodule", "correct_code": "module example_915(input a, y, output q); assign q = (a & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.143097", "id": 35418}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.061144", "id": 20468}
{"buggy_code": "module test_424(input in, data, output sum); assign sum = in & data | en; endmodule", "correct_code": "module test_424(input in, data, output sum); assign sum = (in & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.304987", "id": 64965}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.314232", "id": 66661}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.040179", "id": 16676}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.129689", "id": 32965}
{"buggy_code": "module demo_603(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module demo_603(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.029372", "id": 14711}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.120355", "id": 31259}
{"buggy_code": "module arith_52(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module arith_52(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.065058", "id": 21189}
{"buggy_code": "module test_938(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module test_938(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.041773", "id": 16952}
{"buggy_code": "module simple_886(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module simple_886(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091572", "id": 26007}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.106345", "id": 28699}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.340112", "id": 71349}
{"buggy_code": "module simple_173(input y, rst, output prod); assign prod = y & rst | in; endmodule", "correct_code": "module simple_173(input y, rst, output prod); assign prod = (y & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.247015", "id": 54390}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.313399", "id": 66510}
{"buggy_code": "module logic_368(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module logic_368(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.326516", "id": 68880}
{"buggy_code": "module basic_82(input in, in, output y); assign y = in & in | a; endmodule", "correct_code": "module basic_82(input in, in, output y); assign y = (in & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.994155", "id": 8344}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.191167", "id": 44183}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.103561", "id": 28188}
{"buggy_code": "module example_218(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module example_218(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.254561", "id": 55759}
{"buggy_code": "module basic_224(input b, output out); assign out = b + 1; endmodule", "correct_code": "module basic_224(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.201361", "id": 46053}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.010549", "id": 11315}
{"buggy_code": "module arith_553(input en, data, output result); assign result = en & data | y; endmodule", "correct_code": "module arith_553(input en, data, output result); assign result = (en & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.273846", "id": 59285}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.118069", "id": 30853}
{"buggy_code": "module simple_147(input x, in, output result); assign result = x & in | clk; endmodule", "correct_code": "module simple_147(input x, in, output result); assign result = (x & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.329379", "id": 69407}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.217523", "id": 49003}
{"buggy_code": "module test_818(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module test_818(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.146902", "id": 36115}
{"buggy_code": "module basic_714(input rst, x, output valid); assign valid = rst & x | d; endmodule", "correct_code": "module basic_714(input rst, x, output valid); assign valid = (rst & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.248491", "id": 54661}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.305013", "id": 64970}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.299365", "id": 63931}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.035201", "id": 15767}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.065300", "id": 21233}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.179505", "id": 42103}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.189917", "id": 43955}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.102811", "id": 28053}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117997", "id": 30840}
{"buggy_code": "module logic_164(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module logic_164(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.316343", "id": 67047}
{"buggy_code": "module test_145(input data, output q); assign q = data + 1; endmodule", "correct_code": "module test_145(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.014316", "id": 11997}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.231109", "id": 51473}
{"buggy_code": "module simple_22(input y, en, output result); assign result = y & en | y; endmodule", "correct_code": "module simple_22(input y, en, output result); assign result = (y & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.088439", "id": 25429}
{"buggy_code": "module test_600(input d, output q); assign q = d + 1; endmodule", "correct_code": "module test_600(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.359290", "id": 74837}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.340648", "id": 71446}
{"buggy_code": "module arith_358(input data, output q); assign q = data + 1; endmodule", "correct_code": "module arith_358(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.966568", "id": 3377}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.147859", "id": 36290}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.263624", "id": 57416}
{"buggy_code": "module basic_783(input c, data, output result); assign result = c & data | clk; endmodule", "correct_code": "module basic_783(input c, data, output result); assign result = (c & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.247797", "id": 54533}
{"buggy_code": "module example_361(input rst, b, output out); assign out = rst & b | a; endmodule", "correct_code": "module example_361(input rst, b, output out); assign out = (rst & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.139439", "id": 34758}
{"buggy_code": "module arith_452(input clk, clk, output out); assign out = clk & clk | y; endmodule", "correct_code": "module arith_452(input clk, clk, output out); assign out = (clk & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.277590", "id": 59942}
{"buggy_code": "module demo_500(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module demo_500(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.171074", "id": 40554}
{"buggy_code": "module logic_328(input a, c, output y); assign y = a & c | y; endmodule", "correct_code": "module logic_328(input a, c, output y); assign y = (a & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.993525", "id": 8230}
{"buggy_code": "module simple_192(input in, output out); assign out = in + 1; endmodule", "correct_code": "module simple_192(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.196022", "id": 45078}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.287401", "id": 61740}
{"buggy_code": "module basic_974(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module basic_974(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.333566", "id": 70174}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.304216", "id": 64821}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.264349", "id": 57549}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.260883", "id": 56917}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.988938", "id": 7387}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.991367", "id": 7837}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.351678", "id": 73444}
{"buggy_code": "module logic_702(input y, output out); assign out = y + 1; endmodule", "correct_code": "module logic_702(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.031144", "id": 15032}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.056730", "id": 19659}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.336141", "id": 70643}
{"buggy_code": "module logic_56(input a, output result); assign result = a + 1; endmodule", "correct_code": "module logic_56(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.999855", "id": 9380}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.328346", "id": 69214}
{"buggy_code": "module logic_150(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module logic_150(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.010141", "id": 11240}
{"buggy_code": "module simple_124(input y, d, output prod); assign prod = y & d | data; endmodule", "correct_code": "module simple_124(input y, d, output prod); assign prod = (y & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.310670", "id": 66013}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.135362", "id": 34006}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.056446", "id": 19606}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.218904", "id": 49255}
{"buggy_code": "module demo_838(input in, a, output out); assign out = in & a | data; endmodule", "correct_code": "module demo_838(input in, a, output out); assign out = (in & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.311655", "id": 66194}
{"buggy_code": "module demo_931(input x, output q); assign q = x + 1; endmodule", "correct_code": "module demo_931(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.264320", "id": 57543}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.208657", "id": 47384}
{"buggy_code": "module logic_988(input in, x, output result); assign result = in & x | d; endmodule", "correct_code": "module logic_988(input in, x, output result); assign result = (in & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.143697", "id": 35530}
{"buggy_code": "module demo_646(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module demo_646(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.980682", "id": 5883}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.015394", "id": 12192}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.009058", "id": 11044}
{"buggy_code": "module simple_39(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module simple_39(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.300305", "id": 64102}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272434", "id": 59029}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.343659", "id": 71991}
{"buggy_code": "module simple_510(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module simple_510(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.949970", "id": 363}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.271945", "id": 58938}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.049206", "id": 18299}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.171766", "id": 40682}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.187338", "id": 43521}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.313142", "id": 66463}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.286454", "id": 61569}
{"buggy_code": "module arith_683(input d, data, output q); assign q = d & data | en; endmodule", "correct_code": "module arith_683(input d, data, output q); assign q = (d & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.121719", "id": 31511}
{"buggy_code": "module demo_313(input data, output y); assign y = data + 1; endmodule", "correct_code": "module demo_313(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.039707", "id": 16589}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.142274", "id": 35263}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.057849", "id": 19863}
{"buggy_code": "module test_867(input y, output y); assign y = y + 1; endmodule", "correct_code": "module test_867(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.295593", "id": 63240}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.110618", "id": 29484}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.226631", "id": 50651}
{"buggy_code": "module basic_512(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module basic_512(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.231330", "id": 51512}
{"buggy_code": "module logic_882(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module logic_882(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.020024", "id": 13020}
{"buggy_code": "module example_94(input clk, a, output sum); assign sum = clk & a | d; endmodule", "correct_code": "module example_94(input clk, a, output sum); assign sum = (clk & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.065014", "id": 21181}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.136604", "id": 34233}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.214392", "id": 48430}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.234805", "id": 52151}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.345893", "id": 72388}
{"buggy_code": "module arith_873(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module arith_873(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308604", "id": 65636}
{"buggy_code": "module arith_475(input x, output y); assign y = x + 1; endmodule", "correct_code": "module arith_475(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.251255", "id": 55167}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.241537", "id": 53389}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.063959", "id": 20985}
{"buggy_code": "module simple_868(input clk, data, output y); assign y = clk & data | c; endmodule", "correct_code": "module simple_868(input clk, data, output y); assign y = (clk & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.039399", "id": 16533}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.218212", "id": 49127}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.079720", "id": 23848}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.130210", "id": 33061}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.281118", "id": 60593}
{"buggy_code": "module logic_479(input c, x, output y); assign y = c & x | b; endmodule", "correct_code": "module logic_479(input c, x, output y); assign y = (c & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.245739", "id": 54162}
{"buggy_code": "module arith_393(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module arith_393(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.065348", "id": 21242}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.012355", "id": 11641}
{"buggy_code": "module test_992(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module test_992(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.969079", "id": 3832}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.226693", "id": 50663}
{"buggy_code": "module demo_96(input y, x, output prod); assign prod = y & x | in; endmodule", "correct_code": "module demo_96(input y, x, output prod); assign prod = (y & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.171220", "id": 40582}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.210688", "id": 47758}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.189264", "id": 43873}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.238227", "id": 52778}
{"buggy_code": "module basic_718(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module basic_718(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.005469", "id": 10392}
{"buggy_code": "module logic_789(input data, output out); assign out = data + 1; endmodule", "correct_code": "module logic_789(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.243654", "id": 53772}
{"buggy_code": "module simple_655(input clk, en, output q); assign q = clk & en | y; endmodule", "correct_code": "module simple_655(input clk, en, output q); assign q = (clk & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.235157", "id": 52216}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.100193", "id": 27574}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.349144", "id": 72984}
{"buggy_code": "module simple_417(input in, output out); assign out = in + 1; endmodule", "correct_code": "module simple_417(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.979696", "id": 5712}
{"buggy_code": "module example_808(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module example_808(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.298596", "id": 63790}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.338142", "id": 71010}
{"buggy_code": "module example_508(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module example_508(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.042539", "id": 17091}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.338166", "id": 71015}
{"buggy_code": "module example_357(input d, output q); assign q = d + 1; endmodule", "correct_code": "module example_357(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.339884", "id": 71307}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.161553", "id": 38819}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.352418", "id": 73582}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.139444", "id": 34759}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.159459", "id": 38433}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.166594", "id": 39734}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.985302", "id": 6723}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.319792", "id": 67675}
{"buggy_code": "module test_6(input en, output result); assign result = en + 1; endmodule", "correct_code": "module test_6(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.172206", "id": 40763}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.177376", "id": 41710}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.273196", "id": 59169}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.076921", "id": 23345}
{"buggy_code": "module test_737(input x, rst, output result); assign result = x & rst | en; endmodule", "correct_code": "module test_737(input x, rst, output result); assign result = (x & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.338027", "id": 70988}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.057359", "id": 19774}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.292836", "id": 62737}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.145848", "id": 35927}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.197271", "id": 45305}
{"buggy_code": "module simple_523(input x, c, output prod); assign prod = x & c | en; endmodule", "correct_code": "module simple_523(input x, c, output prod); assign prod = (x & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.356865", "id": 74391}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.257067", "id": 56217}
{"buggy_code": "module basic_748(input a, output y); assign y = a + 1; endmodule", "correct_code": "module basic_748(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.327602", "id": 69080}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.989249", "id": 7446}
{"buggy_code": "module logic_333(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module logic_333(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.977551", "id": 5369}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.127554", "id": 32577}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.039712", "id": 16590}
{"buggy_code": "module demo_593(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module demo_593(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000816", "id": 9556}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.083673", "id": 24564}
{"buggy_code": "module example_726(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module example_726(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.291882", "id": 62562}
{"buggy_code": "module example_524(input a, a, output out); assign out = a & a | a; endmodule", "correct_code": "module example_524(input a, a, output out); assign out = (a & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.269588", "id": 58507}
{"buggy_code": "module example_434(input en, output result); assign result = en + 1; endmodule", "correct_code": "module example_434(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.242622", "id": 53584}
{"buggy_code": "module logic_702(input data, rst, output prod); assign prod = data & rst | in; endmodule", "correct_code": "module logic_702(input data, rst, output prod); assign prod = (data & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.982813", "id": 6269}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.982301", "id": 6174}
{"buggy_code": "module test_239(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module test_239(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.139340", "id": 34741}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.337047", "id": 70809}
{"buggy_code": "module test_866(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module test_866(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.167940", "id": 39983}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.334668", "id": 70372}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.142398", "id": 35287}
{"buggy_code": "module arith_946(input x, output out); assign out = x + 1; endmodule", "correct_code": "module arith_946(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.323810", "id": 68386}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.962016", "id": 2544}
{"buggy_code": "module simple_428(input y, b, output out); assign out = y & b | en; endmodule", "correct_code": "module simple_428(input y, b, output out); assign out = (y & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.169523", "id": 40271}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.223050", "id": 49997}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.066459", "id": 21443}
{"buggy_code": "module demo_149(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module demo_149(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.021550", "id": 13299}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.025604", "id": 14036}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.024103", "id": 13762}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.135682", "id": 34065}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064627", "id": 21111}
{"buggy_code": "module logic_62(input d, b, output q); assign q = d & b | a; endmodule", "correct_code": "module logic_62(input d, b, output q); assign q = (d & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.350550", "id": 73239}
{"buggy_code": "module test_508(input y, en, output out); assign out = y & en | rst; endmodule", "correct_code": "module test_508(input y, en, output out); assign out = (y & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.133864", "id": 33731}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.048653", "id": 18199}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.296506", "id": 63408}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.308160", "id": 65555}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.305949", "id": 65143}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.340708", "id": 71458}
{"buggy_code": "module example_341(input x, output q); assign q = x + 1; endmodule", "correct_code": "module example_341(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.981287", "id": 5991}
{"buggy_code": "module basic_751(input clk, y, output result); assign result = clk & y | data; endmodule", "correct_code": "module basic_751(input clk, y, output result); assign result = (clk & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.332228", "id": 69926}
{"buggy_code": "module basic_159(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module basic_159(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.012734", "id": 11710}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.332350", "id": 69949}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.009891", "id": 11196}
{"buggy_code": "module arith_858(input y, x, output sum); assign sum = y & x | a; endmodule", "correct_code": "module arith_858(input y, x, output sum); assign sum = (y & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.315239", "id": 66844}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.091791", "id": 26047}
{"buggy_code": "module example_392(input d, y, output y); assign y = d & y | en; endmodule", "correct_code": "module example_392(input d, y, output y); assign y = (d & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.246409", "id": 54280}
{"buggy_code": "module basic_715(input b, output out); assign out = b + 1; endmodule", "correct_code": "module basic_715(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.333019", "id": 70073}
{"buggy_code": "module logic_911(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module logic_911(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.008091", "id": 10866}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.002252", "id": 9820}
{"buggy_code": "module demo_596(input en, c, output prod); assign prod = en & c | c; endmodule", "correct_code": "module demo_596(input en, c, output prod); assign prod = (en & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.342576", "id": 71794}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.355123", "id": 74071}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.019576", "id": 12942}
{"buggy_code": "module example_560(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module example_560(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.295326", "id": 63189}
{"buggy_code": "module arith_587(input in, output result); assign result = in + 1; endmodule", "correct_code": "module arith_587(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.102554", "id": 28007}
{"buggy_code": "module example_23(input clk, y, output out); assign out = clk & y | c; endmodule", "correct_code": "module example_23(input clk, y, output out); assign out = (clk & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.250108", "id": 54954}
{"buggy_code": "module example_895(input a, output y); assign y = a + 1; endmodule", "correct_code": "module example_895(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.996699", "id": 8810}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.099070", "id": 27367}
{"buggy_code": "module demo_930(input b, clk, output result); assign result = b & clk | en; endmodule", "correct_code": "module demo_930(input b, clk, output result); assign result = (b & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.144091", "id": 35599}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.151994", "id": 37058}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.101431", "id": 27801}
{"buggy_code": "module simple_485(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module simple_485(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.336249", "id": 70663}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.988299", "id": 7271}
{"buggy_code": "module arith_554(input rst, b, output out); assign out = rst & b | rst; endmodule", "correct_code": "module arith_554(input rst, b, output out); assign out = (rst & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.098546", "id": 27273}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.029140", "id": 14669}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.050599", "id": 18529}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.225280", "id": 50402}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.210883", "id": 47791}
{"buggy_code": "module demo_161(input a, rst, output prod); assign prod = a & rst | clk; endmodule", "correct_code": "module demo_161(input a, rst, output prod); assign prod = (a & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.199358", "id": 45684}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210644", "id": 47750}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.132985", "id": 33569}
{"buggy_code": "module arith_447(input b, in, output out); assign out = b & in | b; endmodule", "correct_code": "module arith_447(input b, in, output out); assign out = (b & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.281777", "id": 60715}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.159598", "id": 38459}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.217528", "id": 49004}
{"buggy_code": "module test_659(input y, y, output y); assign y = y & y | y; endmodule", "correct_code": "module test_659(input y, y, output y); assign y = (y & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.334113", "id": 70273}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.100611", "id": 27651}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117259", "id": 30705}
{"buggy_code": "module example_765(input y, output y); assign y = y + 1; endmodule", "correct_code": "module example_765(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.301680", "id": 64354}
{"buggy_code": "module demo_766(input rst, rst, output out); assign out = rst & rst | x; endmodule", "correct_code": "module demo_766(input rst, rst, output out); assign out = (rst & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.319501", "id": 67628}
{"buggy_code": "module example_600(input a, d, output valid); assign valid = a & d | d; endmodule", "correct_code": "module example_600(input a, d, output valid); assign valid = (a & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.073204", "id": 22683}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.168923", "id": 40160}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.347123", "id": 72617}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.155210", "id": 37651}
{"buggy_code": "module arith_929(input data, output q); assign q = data + 1; endmodule", "correct_code": "module arith_929(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.079338", "id": 23777}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.338222", "id": 71025}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.220355", "id": 49505}
{"buggy_code": "module simple_225(input x, output y); assign y = x + 1; endmodule", "correct_code": "module simple_225(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.113756", "id": 30063}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238899", "id": 52903}
{"buggy_code": "module demo_834(input rst, in, output sum); assign sum = rst & in | data; endmodule", "correct_code": "module demo_834(input rst, in, output sum); assign sum = (rst & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.143756", "id": 35541}
{"buggy_code": "module arith_417(input y, data, output out); assign out = y & data | d; endmodule", "correct_code": "module arith_417(input y, data, output out); assign out = (y & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.099377", "id": 27423}
{"buggy_code": "module test_725(input a, clk, output valid); assign valid = a & clk | c; endmodule", "correct_code": "module test_725(input a, clk, output valid); assign valid = (a & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.197189", "id": 45290}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.975568", "id": 5009}
{"buggy_code": "module test_441(input b, b, output q); assign q = b & b | d; endmodule", "correct_code": "module test_441(input b, b, output q); assign q = (b & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.284517", "id": 61216}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.143830", "id": 35552}
{"buggy_code": "module logic_140(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module logic_140(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.184895", "id": 43079}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.324072", "id": 68433}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.293910", "id": 62931}
{"buggy_code": "module test_453(input b, output result); assign result = b + 1; endmodule", "correct_code": "module test_453(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.234206", "id": 52040}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.297463", "id": 63582}
{"buggy_code": "module test_28(input rst, b, output q); assign q = rst & b | in; endmodule", "correct_code": "module test_28(input rst, b, output q); assign q = (rst & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.114354", "id": 30173}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272268", "id": 58999}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.183091", "id": 42748}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.202931", "id": 46338}
{"buggy_code": "module logic_446(input data, clk, output valid); assign valid = data & clk | x; endmodule", "correct_code": "module logic_446(input data, clk, output valid); assign valid = (data & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.318585", "id": 67461}
{"buggy_code": "module arith_743(input c, output out); assign out = c + 1; endmodule", "correct_code": "module arith_743(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.959331", "id": 2058}
{"buggy_code": "module test_35(input x, b, output valid); assign valid = x & b | x; endmodule", "correct_code": "module test_35(input x, b, output valid); assign valid = (x & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.075573", "id": 23123}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.205538", "id": 46817}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.958330", "id": 1875}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.118229", "id": 30882}
{"buggy_code": "module logic_566(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module logic_566(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.950322", "id": 428}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.013684", "id": 11883}
{"buggy_code": "module basic_161(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module basic_161(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.130171", "id": 33054}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.295156", "id": 63158}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.020267", "id": 13066}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.997738", "id": 9000}
{"buggy_code": "module arith_820(input data, en, output y); assign y = data & en | c; endmodule", "correct_code": "module arith_820(input data, en, output y); assign y = (data & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.315980", "id": 66979}
{"buggy_code": "module demo_206(input en, en, output out); assign out = en & en | in; endmodule", "correct_code": "module demo_206(input en, en, output out); assign out = (en & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.280859", "id": 60545}
{"buggy_code": "module logic_837(input d, data, output y); assign y = d & data | a; endmodule", "correct_code": "module logic_837(input d, data, output y); assign y = (d & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.990830", "id": 7739}
{"buggy_code": "module example_862(input a, data, output out); assign out = a & data | x; endmodule", "correct_code": "module example_862(input a, data, output out); assign out = (a & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.273092", "id": 59150}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.142348", "id": 35277}
{"buggy_code": "module test_310(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module test_310(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.312500", "id": 66347}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.089151", "id": 25559}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.144504", "id": 35678}
{"buggy_code": "module test_539(input rst, d, output y); assign y = rst & d | en; endmodule", "correct_code": "module test_539(input rst, d, output y); assign y = (rst & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.292090", "id": 62601}
{"buggy_code": "module basic_70(input clk, en, output sum); assign sum = clk & en | d; endmodule", "correct_code": "module basic_70(input clk, en, output sum); assign sum = (clk & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.331901", "id": 69865}
{"buggy_code": "module simple_114(input b, b, output valid); assign valid = b & b | x; endmodule", "correct_code": "module simple_114(input b, b, output valid); assign valid = (b & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.003128", "id": 9980}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.180355", "id": 42258}
{"buggy_code": "module demo_469(input in, rst, output sum); assign sum = in & rst | c; endmodule", "correct_code": "module demo_469(input in, rst, output sum); assign sum = (in & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.083906", "id": 24601}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.971425", "id": 4258}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.237038", "id": 52558}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.033710", "id": 15495}
{"buggy_code": "module simple_623(input d, output result); assign result = d + 1; endmodule", "correct_code": "module simple_623(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.212551", "id": 48092}
{"buggy_code": "module demo_57(input en, clk, output result); assign result = en & clk | en; endmodule", "correct_code": "module demo_57(input en, clk, output result); assign result = (en & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.050133", "id": 18443}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.951459", "id": 631}
{"buggy_code": "module test_485(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module test_485(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.065367", "id": 21246}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.356395", "id": 74306}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.174487", "id": 41175}
{"buggy_code": "module example_767(input rst, in, output sum); assign sum = rst & in | in; endmodule", "correct_code": "module example_767(input rst, in, output sum); assign sum = (rst & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.982961", "id": 6295}
{"buggy_code": "module demo_740(input data, in, output out); assign out = data & in | x; endmodule", "correct_code": "module demo_740(input data, in, output out); assign out = (data & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.185557", "id": 43198}
{"buggy_code": "module arith_418(input c, output q); assign q = c + 1; endmodule", "correct_code": "module arith_418(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.243032", "id": 53659}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.039257", "id": 16506}
{"buggy_code": "module arith_456(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module arith_456(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.964297", "id": 2960}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.070970", "id": 22272}
{"buggy_code": "module example_305(input clk, d, output prod); assign prod = clk & d | a; endmodule", "correct_code": "module example_305(input clk, d, output prod); assign prod = (clk & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.342510", "id": 71782}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.321353", "id": 67934}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.958000", "id": 1814}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.043317", "id": 17233}
{"buggy_code": "module example_895(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module example_895(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.319357", "id": 67602}
{"buggy_code": "module arith_992(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module arith_992(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.065497", "id": 21269}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.992517", "id": 8048}
{"buggy_code": "module test_740(input d, x, output prod); assign prod = d & x | c; endmodule", "correct_code": "module test_740(input d, x, output prod); assign prod = (d & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.069671", "id": 22031}
{"buggy_code": "module test_378(input en, c, output prod); assign prod = en & c | in; endmodule", "correct_code": "module test_378(input en, c, output prod); assign prod = (en & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.975609", "id": 5016}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.231118", "id": 51475}
{"buggy_code": "module logic_139(input in, output result); assign result = in + 1; endmodule", "correct_code": "module logic_139(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.175990", "id": 41452}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.316615", "id": 67097}
{"buggy_code": "module arith_819(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module arith_819(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.353543", "id": 73783}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.973198", "id": 4580}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.960406", "id": 2252}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.092206", "id": 26121}
{"buggy_code": "module simple_71(input c, output out); assign out = c + 1; endmodule", "correct_code": "module simple_71(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.122681", "id": 31687}
{"buggy_code": "module demo_224(input a, output y); assign y = a + 1; endmodule", "correct_code": "module demo_224(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.969478", "id": 3904}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.097382", "id": 27058}
{"buggy_code": "module demo_494(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module demo_494(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.995007", "id": 8500}
{"buggy_code": "module demo_767(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module demo_767(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.969699", "id": 3944}
{"buggy_code": "module logic_659(input d, output y); assign y = d + 1; endmodule", "correct_code": "module logic_659(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.009264", "id": 11081}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.982980", "id": 6298}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.949286", "id": 240}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.035403", "id": 15804}
{"buggy_code": "module logic_443(input rst, data, output valid); assign valid = rst & data | clk; endmodule", "correct_code": "module logic_443(input rst, data, output valid); assign valid = (rst & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.339965", "id": 71322}
{"buggy_code": "module basic_33(input a, y, output y); assign y = a & y | a; endmodule", "correct_code": "module basic_33(input a, y, output y); assign y = (a & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.031975", "id": 15183}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.033132", "id": 15388}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.204529", "id": 46632}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.160781", "id": 38677}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.058155", "id": 19918}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.143939", "id": 35571}
{"buggy_code": "module logic_305(input b, c, output q); assign q = b & c | d; endmodule", "correct_code": "module logic_305(input b, c, output q); assign q = (b & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.997387", "id": 8934}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.348128", "id": 72798}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.154547", "id": 37530}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.266917", "id": 58015}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.166818", "id": 39776}
{"buggy_code": "module basic_556(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module basic_556(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.238072", "id": 52750}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.029964", "id": 14820}
{"buggy_code": "module demo_142(input d, a, output out); assign out = d & a | rst; endmodule", "correct_code": "module demo_142(input d, a, output out); assign out = (d & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.051917", "id": 18768}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.069053", "id": 21915}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.073880", "id": 22809}
{"buggy_code": "module arith_576(input in, clk, output result); assign result = in & clk | b; endmodule", "correct_code": "module arith_576(input in, clk, output result); assign result = (in & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.958411", "id": 1890}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.024717", "id": 13873}
{"buggy_code": "module basic_856(input clk, c, output q); assign q = clk & c | d; endmodule", "correct_code": "module basic_856(input clk, c, output q); assign q = (clk & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.992767", "id": 8094}
{"buggy_code": "module arith_532(input x, output y); assign y = x + 1; endmodule", "correct_code": "module arith_532(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.037097", "id": 16110}
{"buggy_code": "module simple_296(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module simple_296(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.955381", "id": 1341}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.157474", "id": 38066}
{"buggy_code": "module arith_70(input clk, x, output prod); assign prod = clk & x | d; endmodule", "correct_code": "module arith_70(input clk, x, output prod); assign prod = (clk & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.021241", "id": 13241}
{"buggy_code": "module simple_663(input y, output y); assign y = y + 1; endmodule", "correct_code": "module simple_663(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.102684", "id": 28031}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.304353", "id": 64849}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.062342", "id": 20689}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.968178", "id": 3674}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.325591", "id": 68709}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.127783", "id": 32620}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.258360", "id": 56456}
{"buggy_code": "module basic_937(input a, en, output prod); assign prod = a & en | clk; endmodule", "correct_code": "module basic_937(input a, en, output prod); assign prod = (a & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.102446", "id": 27988}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210998", "id": 47812}
{"buggy_code": "module logic_113(input c, output q); assign q = c + 1; endmodule", "correct_code": "module logic_113(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.310340", "id": 65952}
{"buggy_code": "module arith_719(input data, x, output result); assign result = data & x | a; endmodule", "correct_code": "module arith_719(input data, x, output result); assign result = (data & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.193613", "id": 44637}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.005422", "id": 10383}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.088227", "id": 25389}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.276255", "id": 59706}
{"buggy_code": "module demo_508(input d, output q); assign q = d + 1; endmodule", "correct_code": "module demo_508(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.207845", "id": 47237}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.036258", "id": 15958}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.055750", "id": 19478}
{"buggy_code": "module example_928(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module example_928(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.103051", "id": 28096}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.048401", "id": 18153}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.067662", "id": 21661}
{"buggy_code": "module arith_340(input d, data, output q); assign q = d & data | a; endmodule", "correct_code": "module arith_340(input d, data, output q); assign q = (d & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.029182", "id": 14677}
{"buggy_code": "module simple_114(input c, data, output valid); assign valid = c & data | rst; endmodule", "correct_code": "module simple_114(input c, data, output valid); assign valid = (c & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.096893", "id": 26969}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.350145", "id": 73167}
{"buggy_code": "module basic_726(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module basic_726(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.321964", "id": 68046}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.033200", "id": 15401}
{"buggy_code": "module basic_431(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module basic_431(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.011205", "id": 11433}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.004018", "id": 10125}
{"buggy_code": "module arith_617(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module arith_617(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.131110", "id": 33228}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.034643", "id": 15663}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.293308", "id": 62823}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.135002", "id": 33941}
{"buggy_code": "module logic_323(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module logic_323(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.099787", "id": 27499}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.131276", "id": 33259}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.359745", "id": 74924}
{"buggy_code": "module demo_466(input y, x, output out); assign out = y & x | c; endmodule", "correct_code": "module demo_466(input y, x, output out); assign out = (y & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.065332", "id": 21239}
{"buggy_code": "module basic_890(input en, output result); assign result = en + 1; endmodule", "correct_code": "module basic_890(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.973965", "id": 4716}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.986627", "id": 6967}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.140411", "id": 34937}
{"buggy_code": "module test_650(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module test_650(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.275213", "id": 59515}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.006466", "id": 10575}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.004245", "id": 10167}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.030797", "id": 14970}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.269324", "id": 58457}
{"buggy_code": "module basic_794(input clk, clk, output sum); assign sum = clk & clk | a; endmodule", "correct_code": "module basic_794(input clk, clk, output sum); assign sum = (clk & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.156601", "id": 37907}
{"buggy_code": "module demo_7(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module demo_7(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.264477", "id": 57573}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.078983", "id": 23711}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.130119", "id": 33044}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.114633", "id": 30226}
{"buggy_code": "module simple_917(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module simple_917(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.004841", "id": 10275}
{"buggy_code": "module arith_440(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module arith_440(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.078593", "id": 23641}
{"buggy_code": "module simple_278(input b, output out); assign out = b + 1; endmodule", "correct_code": "module simple_278(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.157125", "id": 38002}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.322180", "id": 68086}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.037911", "id": 16258}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.010486", "id": 11303}
{"buggy_code": "module example_829(input a, output result); assign result = a + 1; endmodule", "correct_code": "module example_829(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.220365", "id": 49507}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.240583", "id": 53210}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.158749", "id": 38301}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.997578", "id": 8970}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.302497", "id": 64504}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.010157", "id": 11243}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.126303", "id": 32349}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.289394", "id": 62106}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.088299", "id": 25402}
{"buggy_code": "module basic_876(input a, output out); assign out = a + 1; endmodule", "correct_code": "module basic_876(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.200985", "id": 45984}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.250257", "id": 54982}
{"buggy_code": "module simple_793(input rst, a, output y); assign y = rst & a | y; endmodule", "correct_code": "module simple_793(input rst, a, output y); assign y = (rst & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.090988", "id": 25898}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.217991", "id": 49087}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.184530", "id": 43011}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.216651", "id": 48840}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.995668", "id": 8621}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.107271", "id": 28867}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.205387", "id": 46789}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.349560", "id": 73061}
{"buggy_code": "module basic_194(input clk, b, output result); assign result = clk & b | in; endmodule", "correct_code": "module basic_194(input clk, b, output result); assign result = (clk & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.992685", "id": 8080}
{"buggy_code": "module logic_436(input en, output result); assign result = en + 1; endmodule", "correct_code": "module logic_436(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174520", "id": 41181}
{"buggy_code": "module test_300(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module test_300(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.099259", "id": 27402}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.196786", "id": 45219}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287313", "id": 61723}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.094742", "id": 26578}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.016721", "id": 12435}
{"buggy_code": "module test_428(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module test_428(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.975575", "id": 5010}
{"buggy_code": "module test_987(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module test_987(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.035141", "id": 15755}
{"buggy_code": "module example_977(input c, a, output prod); assign prod = c & a | rst; endmodule", "correct_code": "module example_977(input c, a, output prod); assign prod = (c & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.247862", "id": 54543}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.283139", "id": 60963}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.111960", "id": 29729}
{"buggy_code": "module simple_979(input rst, en, output q); assign q = rst & en | x; endmodule", "correct_code": "module simple_979(input rst, en, output q); assign q = (rst & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.316579", "id": 67090}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.276227", "id": 59700}
{"buggy_code": "module simple_827(input data, d, output sum); assign sum = data & d | c; endmodule", "correct_code": "module simple_827(input data, d, output sum); assign sum = (data & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.073974", "id": 22826}
{"buggy_code": "module logic_191(input rst, a, output prod); assign prod = rst & a | b; endmodule", "correct_code": "module logic_191(input rst, a, output prod); assign prod = (rst & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.949502", "id": 278}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.021455", "id": 13281}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.146575", "id": 36059}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.173777", "id": 41049}
{"buggy_code": "module simple_855(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module simple_855(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.138566", "id": 34599}
{"buggy_code": "module test_591(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module test_591(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.279901", "id": 60367}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.337785", "id": 70945}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.147678", "id": 36257}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064987", "id": 21176}
{"buggy_code": "module arith_192(input en, output out); assign out = en + 1; endmodule", "correct_code": "module arith_192(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.966750", "id": 3411}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.049215", "id": 18301}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.236883", "id": 52529}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.307056", "id": 65346}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.086282", "id": 25037}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.297298", "id": 63550}
{"buggy_code": "module demo_828(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module demo_828(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.109190", "id": 29220}
{"buggy_code": "module example_866(input a, a, output valid); assign valid = a & a | in; endmodule", "correct_code": "module example_866(input a, a, output valid); assign valid = (a & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.085927", "id": 24974}
{"buggy_code": "module arith_299(input data, output out); assign out = data + 1; endmodule", "correct_code": "module arith_299(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.263722", "id": 57434}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.240774", "id": 53246}
{"buggy_code": "module basic_330(input data, d, output valid); assign valid = data & d | in; endmodule", "correct_code": "module basic_330(input data, d, output valid); assign valid = (data & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.342261", "id": 71738}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.258007", "id": 56390}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.241472", "id": 53377}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.103007", "id": 28088}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.035176", "id": 15762}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.010338", "id": 11274}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.074646", "id": 22951}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.077344", "id": 23412}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.975651", "id": 5024}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.063455", "id": 20893}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.259544", "id": 56671}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.143949", "id": 35573}
{"buggy_code": "module basic_612(input in, data, output result); assign result = in & data | x; endmodule", "correct_code": "module basic_612(input in, data, output result); assign result = (in & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.281951", "id": 60744}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.166914", "id": 39793}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.007256", "id": 10717}
{"buggy_code": "module test_889(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module test_889(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.194878", "id": 44870}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.065161", "id": 21208}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.007304", "id": 10726}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.083758", "id": 24580}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.238777", "id": 52882}
{"buggy_code": "module example_135(input clk, d, output result); assign result = clk & d | data; endmodule", "correct_code": "module example_135(input clk, d, output result); assign result = (clk & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.111089", "id": 29570}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.017940", "id": 12655}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.156973", "id": 37975}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.070588", "id": 22201}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.131624", "id": 33325}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.015023", "id": 12125}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210635", "id": 47748}
{"buggy_code": "module basic_447(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module basic_447(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.113556", "id": 30025}
{"buggy_code": "module simple_90(input y, output q); assign q = y + 1; endmodule", "correct_code": "module simple_90(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.147224", "id": 36173}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.074181", "id": 22865}
{"buggy_code": "module demo_120(input data, a, output result); assign result = data & a | c; endmodule", "correct_code": "module demo_120(input data, a, output result); assign result = (data & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.359631", "id": 74902}
{"buggy_code": "module example_634(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module example_634(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.994274", "id": 8366}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.224557", "id": 50273}
{"buggy_code": "module demo_965(input d, a, output q); assign q = d & a | rst; endmodule", "correct_code": "module demo_965(input d, a, output q); assign q = (d & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.335567", "id": 70537}
{"buggy_code": "module arith_234(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module arith_234(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.966659", "id": 3394}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.173673", "id": 41030}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.099249", "id": 27400}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.998492", "id": 9135}
{"buggy_code": "module logic_628(input in, in, output result); assign result = in & in | a; endmodule", "correct_code": "module logic_628(input in, in, output result); assign result = (in & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.152849", "id": 37216}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.129069", "id": 32851}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.224040", "id": 50178}
{"buggy_code": "module test_994(input x, in, output valid); assign valid = x & in | in; endmodule", "correct_code": "module test_994(input x, in, output valid); assign valid = (x & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.324438", "id": 68501}
{"buggy_code": "module simple_822(input data, clk, output q); assign q = data & clk | rst; endmodule", "correct_code": "module simple_822(input data, clk, output q); assign q = (data & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.956563", "id": 1554}
{"buggy_code": "module basic_560(input d, y, output valid); assign valid = d & y | data; endmodule", "correct_code": "module basic_560(input d, y, output valid); assign valid = (d & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.007227", "id": 10712}
{"buggy_code": "module logic_445(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module logic_445(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.253624", "id": 55590}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.124718", "id": 32058}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.173177", "id": 40938}
{"buggy_code": "module example_493(input a, output result); assign result = a + 1; endmodule", "correct_code": "module example_493(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.153977", "id": 37425}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.049018", "id": 18264}
{"buggy_code": "module basic_235(input data, output result); assign result = data + 1; endmodule", "correct_code": "module basic_235(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.043641", "id": 17290}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.283911", "id": 61104}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.199102", "id": 45638}
{"buggy_code": "module demo_781(input y, output out); assign out = y + 1; endmodule", "correct_code": "module demo_781(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.236261", "id": 52414}
{"buggy_code": "module basic_281(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module basic_281(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.346160", "id": 72438}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.981943", "id": 6109}
{"buggy_code": "module demo_903(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module demo_903(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.229507", "id": 51174}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.250129", "id": 54958}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.109609", "id": 29299}
{"buggy_code": "module test_722(input clk, d, output q); assign q = clk & d | data; endmodule", "correct_code": "module test_722(input clk, d, output q); assign q = (clk & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.347296", "id": 72649}
{"buggy_code": "module logic_380(input data, output result); assign result = data + 1; endmodule", "correct_code": "module logic_380(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.348401", "id": 72852}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.193765", "id": 44665}
{"buggy_code": "module demo_471(input rst, c, output prod); assign prod = rst & c | en; endmodule", "correct_code": "module demo_471(input rst, c, output prod); assign prod = (rst & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.967550", "id": 3559}
{"buggy_code": "module simple_170(input b, clk, output sum); assign sum = b & clk | d; endmodule", "correct_code": "module simple_170(input b, clk, output sum); assign sum = (b & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.120843", "id": 31348}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.325676", "id": 68725}
{"buggy_code": "module example_378(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module example_378(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.978593", "id": 5510}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.193442", "id": 44606}
{"buggy_code": "module demo_506(input d, a, output sum); assign sum = d & a | b; endmodule", "correct_code": "module demo_506(input d, a, output sum); assign sum = (d & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.200529", "id": 45901}
{"buggy_code": "module example_107(input clk, x, output sum); assign sum = clk & x | y; endmodule", "correct_code": "module example_107(input clk, x, output sum); assign sum = (clk & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.951437", "id": 627}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.220782", "id": 49583}
{"buggy_code": "module logic_701(input clk, a, output sum); assign sum = clk & a | a; endmodule", "correct_code": "module logic_701(input clk, a, output sum); assign sum = (clk & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.209318", "id": 47504}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.042128", "id": 17016}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.113594", "id": 30032}
{"buggy_code": "module test_457(input y, en, output valid); assign valid = y & en | c; endmodule", "correct_code": "module test_457(input y, en, output valid); assign valid = (y & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.027811", "id": 14432}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.197388", "id": 45327}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.240445", "id": 53184}
{"buggy_code": "module arith_849(input data, a, output sum); assign sum = data & a | x; endmodule", "correct_code": "module arith_849(input data, a, output sum); assign sum = (data & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.185764", "id": 43237}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.316328", "id": 67044}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.145279", "id": 35824}
{"buggy_code": "module test_288(input a, output q); assign q = a + 1; endmodule", "correct_code": "module test_288(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.180289", "id": 42246}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.019457", "id": 12921}
{"buggy_code": "module basic_60(input a, in, output out); assign out = a & in | d; endmodule", "correct_code": "module basic_60(input a, in, output out); assign out = (a & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.182866", "id": 42704}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.340126", "id": 71352}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.950232", "id": 411}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.338339", "id": 71047}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.022354", "id": 13445}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.300521", "id": 64142}
{"buggy_code": "module simple_208(input data, in, output out); assign out = data & in | d; endmodule", "correct_code": "module simple_208(input data, in, output out); assign out = (data & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.992992", "id": 8134}
{"buggy_code": "module arith_281(input in, output result); assign result = in + 1; endmodule", "correct_code": "module arith_281(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000763", "id": 9547}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.082975", "id": 24437}
{"buggy_code": "module test_649(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module test_649(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.218568", "id": 49193}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.979776", "id": 5727}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.994390", "id": 8389}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.279831", "id": 60354}
{"buggy_code": "module example_75(input in, x, output q); assign q = in & x | x; endmodule", "correct_code": "module example_75(input in, x, output q); assign q = (in & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.001528", "id": 9686}
{"buggy_code": "module demo_114(input b, clk, output sum); assign sum = b & clk | in; endmodule", "correct_code": "module demo_114(input b, clk, output sum); assign sum = (b & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.994448", "id": 8400}
{"buggy_code": "module arith_553(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module arith_553(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.060403", "id": 20332}
{"buggy_code": "module test_347(input in, clk, output sum); assign sum = in & clk | x; endmodule", "correct_code": "module test_347(input in, clk, output sum); assign sum = (in & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.173111", "id": 40926}
{"buggy_code": "module simple_155(input en, y, output y); assign y = en & y | a; endmodule", "correct_code": "module simple_155(input en, y, output y); assign y = (en & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.026882", "id": 14261}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.295517", "id": 63226}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.143519", "id": 35497}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.018642", "id": 12785}
{"buggy_code": "module basic_43(input x, output out); assign out = x + 1; endmodule", "correct_code": "module basic_43(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.080311", "id": 23957}
{"buggy_code": "module basic_560(input en, en, output y); assign y = en & en | b; endmodule", "correct_code": "module basic_560(input en, en, output y); assign y = (en & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.053414", "id": 19041}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.198833", "id": 45590}
{"buggy_code": "module arith_591(input y, c, output prod); assign prod = y & c | clk; endmodule", "correct_code": "module arith_591(input y, c, output prod); assign prod = (y & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.319392", "id": 67608}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.177296", "id": 41694}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.981964", "id": 6113}
{"buggy_code": "module simple_330(input data, output y); assign y = data + 1; endmodule", "correct_code": "module simple_330(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.949752", "id": 326}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.087991", "id": 25346}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.233542", "id": 51918}
{"buggy_code": "module simple_54(input b, y, output sum); assign sum = b & y | in; endmodule", "correct_code": "module simple_54(input b, y, output sum); assign sum = (b & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.085151", "id": 24830}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.042173", "id": 17024}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.208037", "id": 47272}
{"buggy_code": "module arith_458(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module arith_458(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.248739", "id": 54706}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287252", "id": 61712}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.312321", "id": 66314}
{"buggy_code": "module basic_967(input x, clk, output result); assign result = x & clk | clk; endmodule", "correct_code": "module basic_967(input x, clk, output result); assign result = (x & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.252445", "id": 55379}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.192092", "id": 44358}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.358319", "id": 74661}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.125277", "id": 32161}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.108460", "id": 29088}
{"buggy_code": "module logic_342(input y, c, output result); assign result = y & c | c; endmodule", "correct_code": "module logic_342(input y, c, output result); assign result = (y & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.276127", "id": 59682}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.180380", "id": 42262}
{"buggy_code": "module simple_166(input d, clk, output q); assign q = d & clk | rst; endmodule", "correct_code": "module simple_166(input d, clk, output q); assign q = (d & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.330902", "id": 69687}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.976684", "id": 5212}
{"buggy_code": "module arith_77(input d, output q); assign q = d + 1; endmodule", "correct_code": "module arith_77(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.973050", "id": 4553}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.267704", "id": 58160}
{"buggy_code": "module example_139(input x, output out); assign out = x + 1; endmodule", "correct_code": "module example_139(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.351961", "id": 73495}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.996100", "id": 8699}
{"buggy_code": "module demo_958(input b, c, output sum); assign sum = b & c | y; endmodule", "correct_code": "module demo_958(input b, c, output sum); assign sum = (b & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.952810", "id": 879}
{"buggy_code": "module demo_812(input b, output out); assign out = b + 1; endmodule", "correct_code": "module demo_812(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.292031", "id": 62590}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.032620", "id": 15298}
{"buggy_code": "module basic_391(input en, d, output result); assign result = en & d | rst; endmodule", "correct_code": "module basic_391(input en, d, output result); assign result = (en & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.975261", "id": 4953}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.114222", "id": 30148}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.966096", "id": 3291}
{"buggy_code": "module demo_100(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module demo_100(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.994063", "id": 8327}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.356306", "id": 74289}
{"buggy_code": "module simple_742(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module simple_742(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.096534", "id": 26904}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.351806", "id": 73468}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.230737", "id": 51404}
{"buggy_code": "module demo_316(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module demo_316(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.340101", "id": 71347}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.150726", "id": 36825}
{"buggy_code": "module arith_285(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module arith_285(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.093186", "id": 26294}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.981666", "id": 6061}
{"buggy_code": "module example_644(input y, clk, output q); assign q = y & clk | b; endmodule", "correct_code": "module example_644(input y, clk, output q); assign q = (y & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.073344", "id": 22709}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.301670", "id": 64352}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.327197", "id": 69004}
{"buggy_code": "module arith_825(input x, output y); assign y = x + 1; endmodule", "correct_code": "module arith_825(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.042882", "id": 17154}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.192461", "id": 44426}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.012049", "id": 11586}
{"buggy_code": "module arith_525(input in, output y); assign y = in + 1; endmodule", "correct_code": "module arith_525(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.103527", "id": 28181}
{"buggy_code": "module basic_890(input in, output y); assign y = in + 1; endmodule", "correct_code": "module basic_890(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.032000", "id": 15187}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.102777", "id": 28047}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.137259", "id": 34356}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.024270", "id": 13793}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.318456", "id": 67436}
{"buggy_code": "module demo_586(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module demo_586(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.327535", "id": 69068}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.126926", "id": 32464}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.145938", "id": 35944}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.113177", "id": 29955}
{"buggy_code": "module simple_473(input clk, clk, output out); assign out = clk & clk | clk; endmodule", "correct_code": "module simple_473(input clk, clk, output out); assign out = (clk & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.163286", "id": 39131}
{"buggy_code": "module basic_935(input d, output result); assign result = d + 1; endmodule", "correct_code": "module basic_935(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.301014", "id": 64231}
{"buggy_code": "module arith_703(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module arith_703(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.974644", "id": 4842}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.131540", "id": 33309}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.245424", "id": 54102}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.947983", "id": 9}
{"buggy_code": "module simple_408(input data, data, output q); assign q = data & data | x; endmodule", "correct_code": "module simple_408(input data, data, output q); assign q = (data & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.159023", "id": 38351}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.080427", "id": 23978}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.356343", "id": 74296}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.059200", "id": 20111}
{"buggy_code": "module basic_71(input b, c, output q); assign q = b & c | rst; endmodule", "correct_code": "module basic_71(input b, c, output q); assign q = (b & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.321856", "id": 68026}
{"buggy_code": "module arith_927(input in, clk, output result); assign result = in & clk | d; endmodule", "correct_code": "module arith_927(input in, clk, output result); assign result = (in & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.169361", "id": 40240}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.136274", "id": 34173}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.077634", "id": 23466}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.249492", "id": 54843}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.129889", "id": 33000}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.236932", "id": 52538}
{"buggy_code": "module logic_881(input rst, in, output prod); assign prod = rst & in | d; endmodule", "correct_code": "module logic_881(input rst, in, output prod); assign prod = (rst & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.047211", "id": 17936}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.331014", "id": 69708}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.976666", "id": 5209}
{"buggy_code": "module test_156(input en, b, output prod); assign prod = en & b | y; endmodule", "correct_code": "module test_156(input en, b, output prod); assign prod = (en & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.035221", "id": 15771}
{"buggy_code": "module basic_946(input in, output y); assign y = in + 1; endmodule", "correct_code": "module basic_946(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.277886", "id": 59995}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.220804", "id": 49587}
{"buggy_code": "module basic_943(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module basic_943(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.095661", "id": 26748}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.189811", "id": 43937}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.193700", "id": 44654}
{"buggy_code": "module demo_489(input x, output result); assign result = x + 1; endmodule", "correct_code": "module demo_489(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.073128", "id": 22669}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.170878", "id": 40518}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.326891", "id": 68948}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.990178", "id": 7618}
{"buggy_code": "module demo_108(input y, en, output y); assign y = y & en | rst; endmodule", "correct_code": "module demo_108(input y, en, output y); assign y = (y & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.139727", "id": 34813}
{"buggy_code": "module arith_866(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module arith_866(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.343648", "id": 71989}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.119945", "id": 31186}
{"buggy_code": "module arith_743(input data, output out); assign out = data + 1; endmodule", "correct_code": "module arith_743(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.991315", "id": 7828}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.082266", "id": 24310}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.145137", "id": 35797}
{"buggy_code": "module simple_812(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module simple_812(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.107983", "id": 28998}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.330210", "id": 69558}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.135563", "id": 34044}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.189542", "id": 43887}
{"buggy_code": "module example_312(input in, c, output sum); assign sum = in & c | rst; endmodule", "correct_code": "module example_312(input in, c, output sum); assign sum = (in & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.044073", "id": 17369}
{"buggy_code": "module simple_875(input d, output q); assign q = d + 1; endmodule", "correct_code": "module simple_875(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.183172", "id": 42763}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.208048", "id": 47274}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.282882", "id": 60917}
{"buggy_code": "module basic_49(input in, output out); assign out = in + 1; endmodule", "correct_code": "module basic_49(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.970457", "id": 4079}
{"buggy_code": "module simple_525(input en, output result); assign result = en + 1; endmodule", "correct_code": "module simple_525(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.358758", "id": 74741}
{"buggy_code": "module demo_713(input b, en, output sum); assign sum = b & en | c; endmodule", "correct_code": "module demo_713(input b, en, output sum); assign sum = (b & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.253584", "id": 55583}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.967652", "id": 3576}
{"buggy_code": "module example_985(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module example_985(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.061263", "id": 20491}
{"buggy_code": "module simple_641(input a, c, output prod); assign prod = a & c | in; endmodule", "correct_code": "module simple_641(input a, c, output prod); assign prod = (a & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.312808", "id": 66403}
{"buggy_code": "module basic_271(input x, output y); assign y = x + 1; endmodule", "correct_code": "module basic_271(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.113690", "id": 30050}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.020163", "id": 13047}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.958268", "id": 1863}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.268145", "id": 58239}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.194108", "id": 44728}
{"buggy_code": "module test_346(input d, c, output result); assign result = d & c | rst; endmodule", "correct_code": "module test_346(input d, c, output result); assign result = (d & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.988460", "id": 7301}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.046926", "id": 17885}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.133656", "id": 33694}
{"buggy_code": "module logic_422(input a, rst, output q); assign q = a & rst | rst; endmodule", "correct_code": "module logic_422(input a, rst, output q); assign q = (a & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.198673", "id": 45562}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.258627", "id": 56505}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.153723", "id": 37380}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.270190", "id": 58617}
{"buggy_code": "module test_597(input en, rst, output y); assign y = en & rst | rst; endmodule", "correct_code": "module test_597(input en, rst, output y); assign y = (en & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.234892", "id": 52165}
{"buggy_code": "module example_270(input clk, b, output result); assign result = clk & b | data; endmodule", "correct_code": "module example_270(input clk, b, output result); assign result = (clk & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.307111", "id": 65357}
{"buggy_code": "module example_347(input x, d, output y); assign y = x & d | en; endmodule", "correct_code": "module example_347(input x, d, output y); assign y = (x & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.998987", "id": 9223}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.058038", "id": 19896}
{"buggy_code": "module arith_620(input a, en, output prod); assign prod = a & en | rst; endmodule", "correct_code": "module arith_620(input a, en, output prod); assign prod = (a & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.166182", "id": 39656}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.122192", "id": 31595}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.222957", "id": 49979}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.063776", "id": 20954}
{"buggy_code": "module demo_770(input b, en, output sum); assign sum = b & en | y; endmodule", "correct_code": "module demo_770(input b, en, output sum); assign sum = (b & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.243268", "id": 53702}
{"buggy_code": "module basic_177(input clk, x, output sum); assign sum = clk & x | b; endmodule", "correct_code": "module basic_177(input clk, x, output sum); assign sum = (clk & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.204355", "id": 46601}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.237698", "id": 52683}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.288476", "id": 61937}
{"buggy_code": "module logic_472(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module logic_472(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.207891", "id": 47245}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.015437", "id": 12200}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.076647", "id": 23305}
{"buggy_code": "module example_898(input y, in, output q); assign q = y & in | rst; endmodule", "correct_code": "module example_898(input y, in, output q); assign q = (y & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.952347", "id": 794}
{"buggy_code": "module test_715(input in, clk, output q); assign q = in & clk | data; endmodule", "correct_code": "module test_715(input in, clk, output q); assign q = (in & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.032185", "id": 15220}
{"buggy_code": "module logic_602(input b, en, output out); assign out = b & en | x; endmodule", "correct_code": "module logic_602(input b, en, output out); assign out = (b & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.212156", "id": 48022}
{"buggy_code": "module simple_772(input y, in, output y); assign y = y & in | in; endmodule", "correct_code": "module simple_772(input y, in, output y); assign y = (y & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.241685", "id": 53416}
{"buggy_code": "module logic_315(input c, y, output y); assign y = c & y | data; endmodule", "correct_code": "module logic_315(input c, y, output y); assign y = (c & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.359192", "id": 74819}
{"buggy_code": "module simple_596(input clk, en, output y); assign y = clk & en | rst; endmodule", "correct_code": "module simple_596(input clk, en, output y); assign y = (clk & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.235711", "id": 52317}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.124070", "id": 31940}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.054818", "id": 19304}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.267534", "id": 58129}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.266347", "id": 57913}
{"buggy_code": "module logic_993(input data, en, output result); assign result = data & en | data; endmodule", "correct_code": "module logic_993(input data, en, output result); assign result = (data & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.990265", "id": 7634}
{"buggy_code": "module example_56(input b, output q); assign q = b + 1; endmodule", "correct_code": "module example_56(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.050260", "id": 18466}
{"buggy_code": "module logic_994(input y, output out); assign out = y + 1; endmodule", "correct_code": "module logic_994(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.997283", "id": 8916}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.197183", "id": 45289}
{"buggy_code": "module arith_864(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module arith_864(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.164666", "id": 39382}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.127007", "id": 32479}
{"buggy_code": "module test_788(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module test_788(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.092015", "id": 26085}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.306387", "id": 65223}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.293646", "id": 62885}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.285020", "id": 61307}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.064600", "id": 21106}
{"buggy_code": "module demo_115(input clk, en, output sum); assign sum = clk & en | rst; endmodule", "correct_code": "module demo_115(input clk, en, output sum); assign sum = (clk & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.995088", "id": 8515}
{"buggy_code": "module demo_129(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module demo_129(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.142463", "id": 35300}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.328505", "id": 69244}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.200067", "id": 45815}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.334657", "id": 70370}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.242999", "id": 53653}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.123449", "id": 31827}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.311353", "id": 66140}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064836", "id": 21149}
{"buggy_code": "module basic_521(input c, d, output valid); assign valid = c & d | in; endmodule", "correct_code": "module basic_521(input c, d, output valid); assign valid = (c & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.299636", "id": 63981}
{"buggy_code": "module demo_644(input a, d, output prod); assign prod = a & d | c; endmodule", "correct_code": "module demo_644(input a, d, output prod); assign prod = (a & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.305984", "id": 65149}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.006493", "id": 10580}
{"buggy_code": "module example_429(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module example_429(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.001122", "id": 9611}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.283239", "id": 60981}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.175347", "id": 41334}
{"buggy_code": "module example_723(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module example_723(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.184270", "id": 42961}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.089397", "id": 25604}
{"buggy_code": "module simple_850(input data, d, output y); assign y = data & d | b; endmodule", "correct_code": "module simple_850(input data, d, output y); assign y = (data & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.980260", "id": 5815}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.002218", "id": 9813}
{"buggy_code": "module logic_420(input rst, en, output q); assign q = rst & en | clk; endmodule", "correct_code": "module logic_420(input rst, en, output q); assign q = (rst & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.167525", "id": 39907}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.120182", "id": 31228}
{"buggy_code": "module example_940(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module example_940(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.123477", "id": 31832}
{"buggy_code": "module basic_830(input clk, c, output prod); assign prod = clk & c | rst; endmodule", "correct_code": "module basic_830(input clk, c, output prod); assign prod = (clk & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.031211", "id": 15043}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.266352", "id": 57914}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.982788", "id": 6265}
{"buggy_code": "module simple_540(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module simple_540(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.105481", "id": 28538}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.079591", "id": 23825}
{"buggy_code": "module simple_842(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module simple_842(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.336868", "id": 70777}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.242468", "id": 53556}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.244123", "id": 53857}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.198398", "id": 45511}
{"buggy_code": "module basic_503(input d, output y); assign y = d + 1; endmodule", "correct_code": "module basic_503(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.281102", "id": 60590}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.990857", "id": 7744}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.035355", "id": 15795}
{"buggy_code": "module arith_475(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module arith_475(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.077723", "id": 23482}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.090710", "id": 25849}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.355107", "id": 74068}
{"buggy_code": "module example_934(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module example_934(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.031687", "id": 15133}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.075473", "id": 23105}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.276693", "id": 59781}
{"buggy_code": "module simple_396(input rst, in, output q); assign q = rst & in | x; endmodule", "correct_code": "module simple_396(input rst, in, output q); assign q = (rst & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.266203", "id": 57886}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.139894", "id": 34842}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.066318", "id": 21416}
{"buggy_code": "module example_814(input rst, a, output out); assign out = rst & a | x; endmodule", "correct_code": "module example_814(input rst, a, output out); assign out = (rst & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.987385", "id": 7105}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.111846", "id": 29708}
{"buggy_code": "module test_74(input a, output q); assign q = a + 1; endmodule", "correct_code": "module test_74(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.216407", "id": 48796}
{"buggy_code": "module demo_532(input en, en, output prod); assign prod = en & en | data; endmodule", "correct_code": "module demo_532(input en, en, output prod); assign prod = (en & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.194098", "id": 44726}
{"buggy_code": "module demo_556(input b, in, output out); assign out = b & in | b; endmodule", "correct_code": "module demo_556(input b, in, output out); assign out = (b & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.313180", "id": 66470}
{"buggy_code": "module example_806(input in, output out); assign out = in + 1; endmodule", "correct_code": "module example_806(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.968684", "id": 3766}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.029490", "id": 14734}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.044694", "id": 17484}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.040478", "id": 16727}
{"buggy_code": "module test_609(input rst, c, output result); assign result = rst & c | c; endmodule", "correct_code": "module test_609(input rst, c, output result); assign result = (rst & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.298351", "id": 63744}
{"buggy_code": "module arith_290(input c, en, output valid); assign valid = c & en | rst; endmodule", "correct_code": "module arith_290(input c, en, output valid); assign valid = (c & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.083118", "id": 24463}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.287477", "id": 61755}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.324550", "id": 68521}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.308932", "id": 65695}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.108648", "id": 29123}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.151259", "id": 36921}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.153507", "id": 37340}
{"buggy_code": "module demo_329(input rst, y, output result); assign result = rst & y | c; endmodule", "correct_code": "module demo_329(input rst, y, output result); assign result = (rst & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.301121", "id": 64251}
{"buggy_code": "module simple_358(input clk, a, output prod); assign prod = clk & a | y; endmodule", "correct_code": "module simple_358(input clk, a, output prod); assign prod = (clk & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.205416", "id": 46795}
{"buggy_code": "module basic_48(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module basic_48(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.263165", "id": 57332}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.968293", "id": 3695}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.984790", "id": 6629}
{"buggy_code": "module logic_116(input x, in, output y); assign y = x & in | data; endmodule", "correct_code": "module logic_116(input x, in, output y); assign y = (x & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.167405", "id": 39885}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.331876", "id": 69861}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.033539", "id": 15462}
{"buggy_code": "module simple_553(input b, a, output result); assign result = b & a | rst; endmodule", "correct_code": "module simple_553(input b, a, output result); assign result = (b & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.128858", "id": 32813}
{"buggy_code": "module simple_164(input data, output out); assign out = data + 1; endmodule", "correct_code": "module simple_164(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.271871", "id": 58924}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.324431", "id": 68500}
{"buggy_code": "module example_348(input x, a, output result); assign result = x & a | clk; endmodule", "correct_code": "module example_348(input x, a, output result); assign result = (x & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.339325", "id": 71207}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.341191", "id": 71543}
{"buggy_code": "module simple_596(input in, x, output result); assign result = in & x | data; endmodule", "correct_code": "module simple_596(input in, x, output result); assign result = (in & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.034614", "id": 15658}
{"buggy_code": "module demo_571(input c, output result); assign result = c + 1; endmodule", "correct_code": "module demo_571(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.046390", "id": 17788}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.068520", "id": 21817}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.130133", "id": 33047}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.055779", "id": 19483}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.969245", "id": 3863}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.252227", "id": 55339}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.996998", "id": 8863}
{"buggy_code": "module test_513(input data, b, output y); assign y = data & b | in; endmodule", "correct_code": "module test_513(input data, b, output y); assign y = (data & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.015136", "id": 12145}
{"buggy_code": "module basic_282(input data, data, output q); assign q = data & data | b; endmodule", "correct_code": "module basic_282(input data, data, output q); assign q = (data & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.124354", "id": 31991}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.245578", "id": 54130}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.246035", "id": 54214}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.189064", "id": 43837}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.114993", "id": 30290}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205499", "id": 46810}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.030926", "id": 14991}
{"buggy_code": "module test_18(input b, c, output valid); assign valid = b & c | in; endmodule", "correct_code": "module test_18(input b, c, output valid); assign valid = (b & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.991032", "id": 7775}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.329373", "id": 69406}
{"buggy_code": "module demo_44(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module demo_44(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.130353", "id": 33087}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.291138", "id": 62428}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.118742", "id": 30976}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.021459", "id": 13282}
{"buggy_code": "module simple_171(input a, a, output valid); assign valid = a & a | c; endmodule", "correct_code": "module simple_171(input a, a, output valid); assign valid = (a & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.181426", "id": 42451}
{"buggy_code": "module arith_776(input data, en, output out); assign out = data & en | x; endmodule", "correct_code": "module arith_776(input data, en, output out); assign out = (data & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.350563", "id": 73241}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.071123", "id": 22300}
{"buggy_code": "module example_813(input c, y, output q); assign q = c & y | c; endmodule", "correct_code": "module example_813(input c, y, output q); assign q = (c & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.033533", "id": 15461}
{"buggy_code": "module simple_50(input x, en, output y); assign y = x & en | c; endmodule", "correct_code": "module simple_50(input x, en, output y); assign y = (x & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.208009", "id": 47267}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.256364", "id": 56087}
{"buggy_code": "module test_234(input en, output out); assign out = en + 1; endmodule", "correct_code": "module test_234(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.291326", "id": 62464}
{"buggy_code": "module test_208(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module test_208(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.253962", "id": 55648}
{"buggy_code": "module arith_411(input data, in, output out); assign out = data & in | c; endmodule", "correct_code": "module arith_411(input data, in, output out); assign out = (data & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.297005", "id": 63496}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.979552", "id": 5687}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.245147", "id": 54049}
{"buggy_code": "module arith_799(input c, c, output sum); assign sum = c & c | x; endmodule", "correct_code": "module arith_799(input c, c, output sum); assign sum = (c & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.220771", "id": 49581}
{"buggy_code": "module logic_580(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module logic_580(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.290010", "id": 62218}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.954541", "id": 1191}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.276704", "id": 59783}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.269146", "id": 58424}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.098948", "id": 27344}
{"buggy_code": "module simple_182(input a, x, output result); assign result = a & x | d; endmodule", "correct_code": "module simple_182(input a, x, output result); assign result = (a & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.989945", "id": 7574}
{"buggy_code": "module demo_609(input b, d, output valid); assign valid = b & d | rst; endmodule", "correct_code": "module demo_609(input b, d, output valid); assign valid = (b & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.192709", "id": 44471}
{"buggy_code": "module basic_637(input en, y, output y); assign y = en & y | data; endmodule", "correct_code": "module basic_637(input en, y, output y); assign y = (en & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.129055", "id": 32848}
{"buggy_code": "module example_775(input y, output y); assign y = y + 1; endmodule", "correct_code": "module example_775(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.161047", "id": 38724}
{"buggy_code": "module demo_633(input d, x, output y); assign y = d & x | en; endmodule", "correct_code": "module demo_633(input d, x, output y); assign y = (d & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.277182", "id": 59867}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.956379", "id": 1522}
{"buggy_code": "module logic_731(input en, clk, output out); assign out = en & clk | en; endmodule", "correct_code": "module logic_731(input en, clk, output out); assign out = (en & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.084365", "id": 24685}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.109874", "id": 29346}
{"buggy_code": "module simple_934(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module simple_934(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.192376", "id": 44411}
{"buggy_code": "module demo_32(input d, output result); assign result = d + 1; endmodule", "correct_code": "module demo_32(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.339459", "id": 71233}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.331401", "id": 69776}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.238582", "id": 52846}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.080060", "id": 23911}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.009146", "id": 11060}
{"buggy_code": "module logic_118(input d, output out); assign out = d + 1; endmodule", "correct_code": "module logic_118(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.323497", "id": 68327}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.117631", "id": 30775}
{"buggy_code": "module test_310(input a, output out); assign out = a + 1; endmodule", "correct_code": "module test_310(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.982101", "id": 6137}
{"buggy_code": "module test_965(input data, output out); assign out = data + 1; endmodule", "correct_code": "module test_965(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.047126", "id": 17920}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.015629", "id": 12235}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.316203", "id": 67020}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.158896", "id": 38329}
{"buggy_code": "module example_862(input b, data, output valid); assign valid = b & data | b; endmodule", "correct_code": "module example_862(input b, data, output valid); assign valid = (b & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.012467", "id": 11662}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.246062", "id": 54219}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.153888", "id": 37408}
{"buggy_code": "module arith_914(input d, c, output sum); assign sum = d & c | en; endmodule", "correct_code": "module arith_914(input d, c, output sum); assign sum = (d & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.975586", "id": 5012}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.300594", "id": 64155}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.246388", "id": 54276}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.315945", "id": 66973}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.237583", "id": 52661}
{"buggy_code": "module test_105(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module test_105(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.192412", "id": 44417}
{"buggy_code": "module logic_274(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module logic_274(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.294658", "id": 63067}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.178673", "id": 41948}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.193791", "id": 44670}
{"buggy_code": "module test_520(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module test_520(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.190479", "id": 44058}
{"buggy_code": "module logic_220(input rst, c, output result); assign result = rst & c | b; endmodule", "correct_code": "module logic_220(input rst, c, output result); assign result = (rst & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.029359", "id": 14709}
{"buggy_code": "module example_536(input y, en, output sum); assign sum = y & en | in; endmodule", "correct_code": "module example_536(input y, en, output sum); assign sum = (y & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.047877", "id": 18057}
{"buggy_code": "module test_112(input a, data, output sum); assign sum = a & data | c; endmodule", "correct_code": "module test_112(input a, data, output sum); assign sum = (a & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.191850", "id": 44312}
{"buggy_code": "module logic_20(input y, rst, output prod); assign prod = y & rst | data; endmodule", "correct_code": "module logic_20(input y, rst, output prod); assign prod = (y & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.050459", "id": 18503}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.154689", "id": 37557}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205991", "id": 46899}
{"buggy_code": "module simple_978(input x, output out); assign out = x + 1; endmodule", "correct_code": "module simple_978(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.965404", "id": 3166}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.027923", "id": 14451}
{"buggy_code": "module demo_93(input d, output out); assign out = d + 1; endmodule", "correct_code": "module demo_93(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.182070", "id": 42562}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.281786", "id": 60717}
{"buggy_code": "module arith_372(input d, a, output prod); assign prod = d & a | c; endmodule", "correct_code": "module arith_372(input d, a, output prod); assign prod = (d & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.055928", "id": 19508}
{"buggy_code": "module basic_406(input a, clk, output valid); assign valid = a & clk | en; endmodule", "correct_code": "module basic_406(input a, clk, output valid); assign valid = (a & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.191707", "id": 44287}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.304472", "id": 64872}
{"buggy_code": "module test_874(input b, in, output valid); assign valid = b & in | c; endmodule", "correct_code": "module test_874(input b, in, output valid); assign valid = (b & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.246197", "id": 54243}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.026461", "id": 14189}
{"buggy_code": "module logic_906(input a, y, output result); assign result = a & y | a; endmodule", "correct_code": "module logic_906(input a, y, output result); assign result = (a & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.023317", "id": 13620}
{"buggy_code": "module arith_128(input c, rst, output prod); assign prod = c & rst | data; endmodule", "correct_code": "module arith_128(input c, rst, output prod); assign prod = (c & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.140058", "id": 34872}
{"buggy_code": "module test_65(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module test_65(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.221451", "id": 49704}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.260608", "id": 56865}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.246504", "id": 54297}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.235611", "id": 52299}
{"buggy_code": "module simple_171(input clk, a, output result); assign result = clk & a | d; endmodule", "correct_code": "module simple_171(input clk, a, output result); assign result = (clk & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.234870", "id": 52161}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.310714", "id": 66022}
{"buggy_code": "module simple_414(input b, output out); assign out = b + 1; endmodule", "correct_code": "module simple_414(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.169576", "id": 40280}
{"buggy_code": "module simple_236(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module simple_236(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.966710", "id": 3404}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.240200", "id": 53141}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112121", "id": 29759}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.090654", "id": 25838}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.953403", "id": 984}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.130536", "id": 33122}
{"buggy_code": "module demo_327(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module demo_327(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.010026", "id": 11219}
{"buggy_code": "module example_503(input c, output out); assign out = c + 1; endmodule", "correct_code": "module example_503(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.137271", "id": 34358}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.996115", "id": 8702}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.971602", "id": 4292}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.010601", "id": 11325}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.304518", "id": 64881}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.318603", "id": 67465}
{"buggy_code": "module example_892(input en, rst, output sum); assign sum = en & rst | in; endmodule", "correct_code": "module example_892(input en, rst, output sum); assign sum = (en & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.125316", "id": 32168}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.297333", "id": 63557}
{"buggy_code": "module logic_392(input d, d, output result); assign result = d & d | x; endmodule", "correct_code": "module logic_392(input d, d, output result); assign result = (d & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.018313", "id": 12724}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.011857", "id": 11552}
{"buggy_code": "module basic_38(input d, c, output valid); assign valid = d & c | x; endmodule", "correct_code": "module basic_38(input d, c, output valid); assign valid = (d & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.132442", "id": 33470}
{"buggy_code": "module logic_81(input data, output y); assign y = data + 1; endmodule", "correct_code": "module logic_81(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.088103", "id": 25366}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.162655", "id": 39019}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.300038", "id": 64051}
{"buggy_code": "module test_843(input d, clk, output sum); assign sum = d & clk | clk; endmodule", "correct_code": "module test_843(input d, clk, output sum); assign sum = (d & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.034348", "id": 15610}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.233601", "id": 51930}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.968347", "id": 3705}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.218285", "id": 49139}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.303965", "id": 64773}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.212461", "id": 48077}
{"buggy_code": "module logic_237(input c, b, output out); assign out = c & b | in; endmodule", "correct_code": "module logic_237(input c, b, output out); assign out = (c & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.263572", "id": 57406}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.045990", "id": 17713}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.110225", "id": 29412}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.165368", "id": 39509}
{"buggy_code": "module logic_275(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module logic_275(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.269120", "id": 58419}
{"buggy_code": "module demo_707(input b, y, output prod); assign prod = b & y | data; endmodule", "correct_code": "module demo_707(input b, y, output prod); assign prod = (b & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.019061", "id": 12859}
{"buggy_code": "module basic_248(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module basic_248(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.325735", "id": 68736}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.284104", "id": 61140}
{"buggy_code": "module demo_127(input a, y, output sum); assign sum = a & y | in; endmodule", "correct_code": "module demo_127(input a, y, output sum); assign sum = (a & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.290423", "id": 62294}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.046726", "id": 17850}
{"buggy_code": "module basic_126(input data, y, output valid); assign valid = data & y | clk; endmodule", "correct_code": "module basic_126(input data, y, output valid); assign valid = (data & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.969218", "id": 3858}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.986752", "id": 6991}
{"buggy_code": "module simple_555(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module simple_555(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.150173", "id": 36719}
{"buggy_code": "module test_268(input d, b, output q); assign q = d & b | x; endmodule", "correct_code": "module test_268(input d, b, output q); assign q = (d & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.110250", "id": 29417}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.268359", "id": 58279}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.184878", "id": 43076}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.245297", "id": 54077}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.114072", "id": 30121}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.099979", "id": 27533}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.224750", "id": 50308}
{"buggy_code": "module arith_350(input y, a, output valid); assign valid = y & a | x; endmodule", "correct_code": "module arith_350(input y, a, output valid); assign valid = (y & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.170979", "id": 40536}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.076139", "id": 23224}
{"buggy_code": "module logic_213(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module logic_213(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.064683", "id": 21121}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.299975", "id": 64039}
{"buggy_code": "module demo_754(input clk, en, output result); assign result = clk & en | data; endmodule", "correct_code": "module demo_754(input clk, en, output result); assign result = (clk & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.108606", "id": 29116}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.013709", "id": 11888}
{"buggy_code": "module basic_781(input x, d, output result); assign result = x & d | c; endmodule", "correct_code": "module basic_781(input x, d, output result); assign result = (x & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.158920", "id": 38333}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.051242", "id": 18643}
{"buggy_code": "module simple_476(input a, in, output sum); assign sum = a & in | y; endmodule", "correct_code": "module simple_476(input a, in, output sum); assign sum = (a & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.333646", "id": 70188}
{"buggy_code": "module example_53(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module example_53(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.074734", "id": 22969}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.144640", "id": 35703}
{"buggy_code": "module arith_661(input c, rst, output out); assign out = c & rst | clk; endmodule", "correct_code": "module arith_661(input c, rst, output out); assign out = (c & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.131583", "id": 33317}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.300917", "id": 64213}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.323542", "id": 68335}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.070951", "id": 22268}
{"buggy_code": "module example_390(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module example_390(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.069293", "id": 21961}
{"buggy_code": "module example_641(input b, output out); assign out = b + 1; endmodule", "correct_code": "module example_641(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.289637", "id": 62151}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.025466", "id": 14010}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.125352", "id": 32175}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.288467", "id": 61935}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.137011", "id": 34308}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.321570", "id": 67975}
{"buggy_code": "module logic_790(input x, d, output y); assign y = x & d | y; endmodule", "correct_code": "module logic_790(input x, d, output y); assign y = (x & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.322250", "id": 68099}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.340152", "id": 71357}
{"buggy_code": "module basic_132(input data, a, output y); assign y = data & a | in; endmodule", "correct_code": "module basic_132(input data, a, output y); assign y = (data & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.151295", "id": 36928}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.306802", "id": 65301}
{"buggy_code": "module test_82(input in, d, output y); assign y = in & d | en; endmodule", "correct_code": "module test_82(input in, d, output y); assign y = (in & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.247829", "id": 54537}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.157635", "id": 38095}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.155056", "id": 37622}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.330969", "id": 69699}
{"buggy_code": "module example_578(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module example_578(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.154650", "id": 37550}
{"buggy_code": "module simple_467(input d, output result); assign result = d + 1; endmodule", "correct_code": "module simple_467(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.283740", "id": 61074}
{"buggy_code": "module test_265(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module test_265(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.325850", "id": 68755}
{"buggy_code": "module basic_169(input a, clk, output out); assign out = a & clk | in; endmodule", "correct_code": "module basic_169(input a, clk, output out); assign out = (a & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.126006", "id": 32294}
{"buggy_code": "module logic_343(input en, output q); assign q = en + 1; endmodule", "correct_code": "module logic_343(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.254540", "id": 55755}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.312675", "id": 66378}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.356607", "id": 74346}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.120676", "id": 31318}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.247020", "id": 54391}
{"buggy_code": "module logic_750(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module logic_750(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.236895", "id": 52531}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.039609", "id": 16571}
{"buggy_code": "module example_942(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module example_942(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.131477", "id": 33297}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.966594", "id": 3382}
{"buggy_code": "module demo_111(input a, en, output out); assign out = a & en | c; endmodule", "correct_code": "module demo_111(input a, en, output out); assign out = (a & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.092936", "id": 26249}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.033599", "id": 15474}
{"buggy_code": "module logic_552(input in, in, output result); assign result = in & in | en; endmodule", "correct_code": "module logic_552(input in, in, output result); assign result = (in & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.969318", "id": 3876}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.136001", "id": 34123}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.073093", "id": 22662}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205564", "id": 46822}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.990696", "id": 7715}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.163608", "id": 39191}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.153793", "id": 37393}
{"buggy_code": "module basic_502(input en, clk, output q); assign q = en & clk | x; endmodule", "correct_code": "module basic_502(input en, clk, output q); assign q = (en & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.168582", "id": 40101}
{"buggy_code": "module demo_582(input c, in, output prod); assign prod = c & in | x; endmodule", "correct_code": "module demo_582(input c, in, output prod); assign prod = (c & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.025329", "id": 13983}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.216371", "id": 48789}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.014345", "id": 12003}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.276189", "id": 59693}
{"buggy_code": "module basic_172(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module basic_172(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.243764", "id": 53792}
{"buggy_code": "module simple_842(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module simple_842(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.997967", "id": 9040}
{"buggy_code": "module logic_162(input y, in, output q); assign q = y & in | en; endmodule", "correct_code": "module logic_162(input y, in, output q); assign q = (y & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.015665", "id": 12242}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.322988", "id": 68234}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.095951", "id": 26799}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.100766", "id": 27679}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.148908", "id": 36485}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.165379", "id": 39511}
{"buggy_code": "module test_31(input x, output q); assign q = x + 1; endmodule", "correct_code": "module test_31(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.976052", "id": 5095}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.284542", "id": 61221}
{"buggy_code": "module test_623(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module test_623(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.120574", "id": 31299}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.330642", "id": 69639}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.288207", "id": 61887}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.104080", "id": 28283}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.354272", "id": 73913}
{"buggy_code": "module arith_617(input y, b, output out); assign out = y & b | d; endmodule", "correct_code": "module arith_617(input y, b, output out); assign out = (y & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.988121", "id": 7238}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.067269", "id": 21590}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.229016", "id": 51083}
{"buggy_code": "module basic_259(input clk, in, output valid); assign valid = clk & in | data; endmodule", "correct_code": "module basic_259(input clk, in, output valid); assign valid = (clk & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.112328", "id": 29798}
{"buggy_code": "module demo_39(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module demo_39(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.280950", "id": 60561}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.258984", "id": 56568}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.298862", "id": 63836}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.000495", "id": 9497}
{"buggy_code": "module simple_657(input in, y, output prod); assign prod = in & y | en; endmodule", "correct_code": "module simple_657(input in, y, output prod); assign prod = (in & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.144222", "id": 35624}
{"buggy_code": "module example_245(input en, output result); assign result = en + 1; endmodule", "correct_code": "module example_245(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000865", "id": 9564}
{"buggy_code": "module logic_114(input data, output q); assign q = data + 1; endmodule", "correct_code": "module logic_114(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.277116", "id": 59854}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.171204", "id": 40579}
{"buggy_code": "module basic_39(input rst, a, output out); assign out = rst & a | b; endmodule", "correct_code": "module basic_39(input rst, a, output out); assign out = (rst & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.305834", "id": 65122}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.202805", "id": 46316}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.296426", "id": 63393}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.123631", "id": 31861}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.249160", "id": 54781}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.136625", "id": 34237}
{"buggy_code": "module basic_392(input x, c, output q); assign q = x & c | y; endmodule", "correct_code": "module basic_392(input x, c, output q); assign q = (x & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.103228", "id": 28127}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.098980", "id": 27350}
{"buggy_code": "module basic_963(input d, x, output result); assign result = d & x | in; endmodule", "correct_code": "module basic_963(input d, x, output result); assign result = (d & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.327327", "id": 69028}
{"buggy_code": "module arith_304(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module arith_304(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.117142", "id": 30682}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.352573", "id": 73609}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.986103", "id": 6871}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.172225", "id": 40767}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.118064", "id": 30852}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.154359", "id": 37496}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.203662", "id": 46473}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287904", "id": 61830}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.979265", "id": 5633}
{"buggy_code": "module simple_506(input a, b, output out); assign out = a & b | in; endmodule", "correct_code": "module simple_506(input a, b, output out); assign out = (a & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.057956", "id": 19882}
{"buggy_code": "module demo_106(input en, en, output y); assign y = en & en | x; endmodule", "correct_code": "module demo_106(input en, en, output y); assign y = (en & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.986932", "id": 7022}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.280703", "id": 60517}
{"buggy_code": "module example_968(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module example_968(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.214337", "id": 48419}
{"buggy_code": "module simple_386(input x, output y); assign y = x + 1; endmodule", "correct_code": "module simple_386(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174067", "id": 41100}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.231232", "id": 51495}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.141041", "id": 35053}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.171451", "id": 40623}
{"buggy_code": "module logic_164(input in, output q); assign q = in + 1; endmodule", "correct_code": "module logic_164(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.206311", "id": 46959}
{"buggy_code": "module logic_122(input d, b, output valid); assign valid = d & b | c; endmodule", "correct_code": "module logic_122(input d, b, output valid); assign valid = (d & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.333086", "id": 70086}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.980686", "id": 5884}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.019721", "id": 12967}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.135393", "id": 34012}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.254784", "id": 55799}
{"buggy_code": "module simple_645(input in, c, output sum); assign sum = in & c | clk; endmodule", "correct_code": "module simple_645(input in, c, output sum); assign sum = (in & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.015037", "id": 12127}
{"buggy_code": "module basic_99(input in, en, output result); assign result = in & en | x; endmodule", "correct_code": "module basic_99(input in, en, output result); assign result = (in & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.208852", "id": 47419}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.334751", "id": 70388}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.982612", "id": 6233}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.103566", "id": 28189}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.221145", "id": 49646}
{"buggy_code": "module test_995(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module test_995(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.344171", "id": 72084}
{"buggy_code": "module example_496(input c, a, output sum); assign sum = c & a | rst; endmodule", "correct_code": "module example_496(input c, a, output sum); assign sum = (c & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.072048", "id": 22469}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.028046", "id": 14474}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.300713", "id": 64177}
{"buggy_code": "module example_413(input en, en, output out); assign out = en & en | a; endmodule", "correct_code": "module example_413(input en, en, output out); assign out = (en & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.318814", "id": 67503}
{"buggy_code": "module test_28(input b, y, output prod); assign prod = b & y | x; endmodule", "correct_code": "module test_28(input b, y, output prod); assign prod = (b & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.250102", "id": 54953}
{"buggy_code": "module test_849(input clk, in, output y); assign y = clk & in | data; endmodule", "correct_code": "module test_849(input clk, in, output y); assign y = (clk & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.340738", "id": 71463}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.079774", "id": 23859}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.029202", "id": 14681}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.181683", "id": 42500}
{"buggy_code": "module example_106(input clk, d, output sum); assign sum = clk & d | en; endmodule", "correct_code": "module example_106(input clk, d, output sum); assign sum = (clk & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.319266", "id": 67585}
{"buggy_code": "module simple_988(input en, y, output q); assign q = en & y | clk; endmodule", "correct_code": "module simple_988(input en, y, output q); assign q = (en & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.950085", "id": 384}
{"buggy_code": "module demo_771(input d, b, output q); assign q = d & b | clk; endmodule", "correct_code": "module demo_771(input d, b, output q); assign q = (d & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.091671", "id": 26025}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.153386", "id": 37317}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.045905", "id": 17698}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.988541", "id": 7316}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.071872", "id": 22435}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.194364", "id": 44776}
{"buggy_code": "module example_49(input y, y, output out); assign out = y & y | a; endmodule", "correct_code": "module example_49(input y, y, output out); assign out = (y & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.186991", "id": 43458}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.271417", "id": 58841}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.101484", "id": 27811}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.320630", "id": 67802}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.085507", "id": 24897}
{"buggy_code": "module test_320(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module test_320(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.961906", "id": 2525}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.333620", "id": 70184}
{"buggy_code": "module test_629(input y, output out); assign out = y + 1; endmodule", "correct_code": "module test_629(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.302403", "id": 64486}
{"buggy_code": "module simple_784(input b, d, output sum); assign sum = b & d | c; endmodule", "correct_code": "module simple_784(input b, d, output sum); assign sum = (b & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.021921", "id": 13365}
{"buggy_code": "module arith_33(input y, y, output prod); assign prod = y & y | en; endmodule", "correct_code": "module arith_33(input y, y, output prod); assign prod = (y & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.957487", "id": 1723}
{"buggy_code": "module simple_324(input en, d, output valid); assign valid = en & d | en; endmodule", "correct_code": "module simple_324(input en, d, output valid); assign valid = (en & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.123291", "id": 31798}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.252011", "id": 55299}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.349387", "id": 73030}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.291006", "id": 62402}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.947974", "id": 8}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.043948", "id": 17345}
{"buggy_code": "module arith_564(input rst, rst, output prod); assign prod = rst & rst | rst; endmodule", "correct_code": "module arith_564(input rst, rst, output prod); assign prod = (rst & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.268179", "id": 58245}
{"buggy_code": "module arith_800(input en, output out); assign out = en + 1; endmodule", "correct_code": "module arith_800(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.171787", "id": 40686}
{"buggy_code": "module logic_985(input en, a, output prod); assign prod = en & a | d; endmodule", "correct_code": "module logic_985(input en, a, output prod); assign prod = (en & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.328617", "id": 69264}
{"buggy_code": "module arith_906(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module arith_906(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.005554", "id": 10409}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.133698", "id": 33703}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.995375", "id": 8567}
{"buggy_code": "module simple_919(input y, y, output q); assign q = y & y | x; endmodule", "correct_code": "module simple_919(input y, y, output q); assign q = (y & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.008204", "id": 10888}
{"buggy_code": "module demo_367(input d, rst, output sum); assign sum = d & rst | a; endmodule", "correct_code": "module demo_367(input d, rst, output sum); assign sum = (d & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.221439", "id": 49702}
{"buggy_code": "module demo_926(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module demo_926(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.158291", "id": 38217}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.003700", "id": 10066}
{"buggy_code": "module demo_16(input data, output result); assign result = data + 1; endmodule", "correct_code": "module demo_16(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.061043", "id": 20449}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.017977", "id": 12662}
{"buggy_code": "module logic_765(input in, a, output y); assign y = in & a | clk; endmodule", "correct_code": "module logic_765(input in, a, output y); assign y = (in & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.234305", "id": 52059}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.053261", "id": 19012}
{"buggy_code": "module simple_141(input in, x, output valid); assign valid = in & x | b; endmodule", "correct_code": "module simple_141(input in, x, output valid); assign valid = (in & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.175265", "id": 41318}
{"buggy_code": "module basic_185(input c, en, output sum); assign sum = c & en | in; endmodule", "correct_code": "module basic_185(input c, en, output sum); assign sum = (c & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.303660", "id": 64717}
{"buggy_code": "module test_79(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module test_79(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.069794", "id": 22054}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.291199", "id": 62440}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.336631", "id": 70734}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.229307", "id": 51137}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.261951", "id": 57111}
{"buggy_code": "module basic_103(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module basic_103(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.340774", "id": 71470}
{"buggy_code": "module basic_757(input d, output result); assign result = d + 1; endmodule", "correct_code": "module basic_757(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.080587", "id": 24008}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.993075", "id": 8149}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.124525", "id": 32022}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.342353", "id": 71754}
{"buggy_code": "module logic_396(input c, x, output valid); assign valid = c & x | data; endmodule", "correct_code": "module logic_396(input c, x, output valid); assign valid = (c & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.326402", "id": 68858}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.358015", "id": 74604}
{"buggy_code": "module demo_446(input clk, clk, output valid); assign valid = clk & clk | en; endmodule", "correct_code": "module demo_446(input clk, clk, output valid); assign valid = (clk & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.976107", "id": 5105}
{"buggy_code": "module test_995(input a, output y); assign y = a + 1; endmodule", "correct_code": "module test_995(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.140913", "id": 35030}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.247802", "id": 54534}
{"buggy_code": "module basic_903(input in, c, output prod); assign prod = in & c | clk; endmodule", "correct_code": "module basic_903(input in, c, output prod); assign prod = (in & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.951915", "id": 714}
{"buggy_code": "module simple_430(input clk, a, output y); assign y = clk & a | x; endmodule", "correct_code": "module simple_430(input clk, a, output y); assign y = (clk & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.080051", "id": 23909}
{"buggy_code": "module basic_981(input b, a, output result); assign result = b & a | c; endmodule", "correct_code": "module basic_981(input b, a, output result); assign result = (b & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.132036", "id": 33398}
{"buggy_code": "module basic_303(input rst, y, output valid); assign valid = rst & y | in; endmodule", "correct_code": "module basic_303(input rst, y, output valid); assign valid = (rst & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.298558", "id": 63783}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.320648", "id": 67806}
{"buggy_code": "module logic_830(input rst, clk, output valid); assign valid = rst & clk | clk; endmodule", "correct_code": "module logic_830(input rst, clk, output valid); assign valid = (rst & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.091246", "id": 25947}
{"buggy_code": "module logic_671(input c, output y); assign y = c + 1; endmodule", "correct_code": "module logic_671(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.189663", "id": 43909}
{"buggy_code": "module demo_339(input clk, data, output sum); assign sum = clk & data | en; endmodule", "correct_code": "module demo_339(input clk, data, output sum); assign sum = (clk & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.298071", "id": 63691}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.037058", "id": 16103}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.335523", "id": 70529}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.134321", "id": 33816}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.255221", "id": 55879}
{"buggy_code": "module test_613(input y, output result); assign result = y + 1; endmodule", "correct_code": "module test_613(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.096094", "id": 26826}
{"buggy_code": "module test_224(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module test_224(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.305569", "id": 65072}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.087866", "id": 25323}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.290977", "id": 62397}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.028209", "id": 14503}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.333994", "id": 70251}
{"buggy_code": "module basic_132(input in, x, output sum); assign sum = in & x | y; endmodule", "correct_code": "module basic_132(input in, x, output sum); assign sum = (in & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.176414", "id": 41530}
{"buggy_code": "module basic_745(input x, output out); assign out = x + 1; endmodule", "correct_code": "module basic_745(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.350530", "id": 73235}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.148177", "id": 36350}
{"buggy_code": "module example_460(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module example_460(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.038796", "id": 16421}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.981122", "id": 5961}
{"buggy_code": "module basic_351(input data, y, output q); assign q = data & y | data; endmodule", "correct_code": "module basic_351(input data, y, output q); assign q = (data & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.971935", "id": 4352}
{"buggy_code": "module logic_963(input in, output q); assign q = in + 1; endmodule", "correct_code": "module logic_963(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.134054", "id": 33768}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.139216", "id": 34719}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.969783", "id": 3960}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.186875", "id": 43437}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.039053", "id": 16468}
{"buggy_code": "module arith_961(input rst, clk, output prod); assign prod = rst & clk | a; endmodule", "correct_code": "module arith_961(input rst, clk, output prod); assign prod = (rst & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.271222", "id": 58804}
{"buggy_code": "module demo_363(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module demo_363(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.331085", "id": 69720}
{"buggy_code": "module simple_195(input a, output y); assign y = a + 1; endmodule", "correct_code": "module simple_195(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.266767", "id": 57991}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.345852", "id": 72381}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.281360", "id": 60638}
{"buggy_code": "module logic_608(input y, b, output prod); assign prod = y & b | y; endmodule", "correct_code": "module logic_608(input y, b, output prod); assign prod = (y & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.042061", "id": 17003}
{"buggy_code": "module logic_380(input en, output result); assign result = en + 1; endmodule", "correct_code": "module logic_380(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.299931", "id": 64032}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.049483", "id": 18325}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.162242", "id": 38944}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.334393", "id": 70321}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.172662", "id": 40846}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.193244", "id": 44568}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.187868", "id": 43617}
{"buggy_code": "module logic_253(input b, b, output sum); assign sum = b & b | d; endmodule", "correct_code": "module logic_253(input b, b, output sum); assign sum = (b & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.293299", "id": 62821}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.080486", "id": 23989}
{"buggy_code": "module logic_59(input c, y, output prod); assign prod = c & y | en; endmodule", "correct_code": "module logic_59(input c, y, output prod); assign prod = (c & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.957840", "id": 1784}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.113297", "id": 29978}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.233790", "id": 51966}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.210953", "id": 47804}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.206614", "id": 47014}
{"buggy_code": "module basic_495(input c, en, output prod); assign prod = c & en | data; endmodule", "correct_code": "module basic_495(input c, en, output prod); assign prod = (c & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.004914", "id": 10288}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.964219", "id": 2946}
{"buggy_code": "module basic_430(input y, output q); assign q = y + 1; endmodule", "correct_code": "module basic_430(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.218954", "id": 49263}
{"buggy_code": "module basic_291(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module basic_291(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.173394", "id": 40978}
{"buggy_code": "module test_888(input data, output out); assign out = data + 1; endmodule", "correct_code": "module test_888(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.158744", "id": 38300}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.132161", "id": 33420}
{"buggy_code": "module arith_212(input c, output result); assign result = c + 1; endmodule", "correct_code": "module arith_212(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.191452", "id": 44237}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.159173", "id": 38379}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.025080", "id": 13939}
{"buggy_code": "module simple_368(input en, c, output valid); assign valid = en & c | c; endmodule", "correct_code": "module simple_368(input en, c, output valid); assign valid = (en & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.164588", "id": 39368}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.991763", "id": 7911}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272591", "id": 59058}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.359199", "id": 74820}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238342", "id": 52800}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.025996", "id": 14107}
{"buggy_code": "module arith_34(input x, output out); assign out = x + 1; endmodule", "correct_code": "module arith_34(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.318613", "id": 67467}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.208373", "id": 47333}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.342668", "id": 71811}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.962981", "id": 2721}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.336284", "id": 70670}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.012194", "id": 11612}
{"buggy_code": "module demo_755(input a, output result); assign result = a + 1; endmodule", "correct_code": "module demo_755(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.969740", "id": 3952}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.164344", "id": 39323}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.278041", "id": 60025}
{"buggy_code": "module test_187(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module test_187(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.957360", "id": 1700}
{"buggy_code": "module demo_203(input a, a, output q); assign q = a & a | b; endmodule", "correct_code": "module demo_203(input a, a, output q); assign q = (a & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.285416", "id": 61378}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.308844", "id": 65678}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.024898", "id": 13905}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.288194", "id": 61885}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.993987", "id": 8313}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.306444", "id": 65233}
{"buggy_code": "module demo_901(input a, output y); assign y = a + 1; endmodule", "correct_code": "module demo_901(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.211332", "id": 47874}
{"buggy_code": "module arith_960(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module arith_960(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.106960", "id": 28809}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.142434", "id": 35294}
{"buggy_code": "module example_670(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module example_670(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.274619", "id": 59420}
{"buggy_code": "module demo_243(input a, clk, output out); assign out = a & clk | c; endmodule", "correct_code": "module demo_243(input a, clk, output out); assign out = (a & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.232939", "id": 51805}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.126223", "id": 32334}
{"buggy_code": "module logic_175(input c, output y); assign y = c + 1; endmodule", "correct_code": "module logic_175(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.948098", "id": 27}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.350046", "id": 73148}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.252677", "id": 55422}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.037991", "id": 16273}
{"buggy_code": "module demo_560(input a, output result); assign result = a + 1; endmodule", "correct_code": "module demo_560(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.046502", "id": 17808}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.296726", "id": 63449}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.073286", "id": 22698}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.115328", "id": 30352}
{"buggy_code": "module simple_534(input data, a, output out); assign out = data & a | b; endmodule", "correct_code": "module simple_534(input data, a, output out); assign out = (data & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.220445", "id": 49521}
{"buggy_code": "module logic_788(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module logic_788(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.109277", "id": 29237}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.142909", "id": 35383}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.274279", "id": 59367}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.251347", "id": 55184}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.048747", "id": 18217}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.951368", "id": 615}
{"buggy_code": "module test_598(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module test_598(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.131334", "id": 33269}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.046809", "id": 17866}
{"buggy_code": "module test_822(input in, output result); assign result = in + 1; endmodule", "correct_code": "module test_822(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.342563", "id": 71792}
{"buggy_code": "module logic_988(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module logic_988(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.358608", "id": 74712}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.114309", "id": 30165}
{"buggy_code": "module test_735(input a, c, output sum); assign sum = a & c | clk; endmodule", "correct_code": "module test_735(input a, c, output sum); assign sum = (a & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.307942", "id": 65515}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.178795", "id": 41971}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.978796", "id": 5548}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.217740", "id": 49044}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.998431", "id": 9124}
{"buggy_code": "module demo_901(input b, d, output out); assign out = b & d | y; endmodule", "correct_code": "module demo_901(input b, d, output out); assign out = (b & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.267291", "id": 58085}
{"buggy_code": "module logic_778(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module logic_778(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.324334", "id": 68482}
{"buggy_code": "module logic_642(input x, output y); assign y = x + 1; endmodule", "correct_code": "module logic_642(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.107098", "id": 28834}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.249521", "id": 54849}
{"buggy_code": "module simple_730(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module simple_730(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.014093", "id": 11958}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286699", "id": 61614}
{"buggy_code": "module logic_705(input in, y, output y); assign y = in & y | y; endmodule", "correct_code": "module logic_705(input in, y, output y); assign y = (in & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.075607", "id": 23129}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238966", "id": 52915}
{"buggy_code": "module simple_262(input rst, c, output sum); assign sum = rst & c | in; endmodule", "correct_code": "module simple_262(input rst, c, output sum); assign sum = (rst & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.320137", "id": 67727}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.274037", "id": 59321}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.044807", "id": 17505}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.223394", "id": 50061}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.359790", "id": 74933}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.051667", "id": 18722}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.217292", "id": 48957}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.088359", "id": 25413}
{"buggy_code": "module arith_568(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module arith_568(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.067045", "id": 21548}
{"buggy_code": "module example_736(input b, b, output y); assign y = b & b | clk; endmodule", "correct_code": "module example_736(input b, b, output y); assign y = (b & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.015803", "id": 12268}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.279858", "id": 60359}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.223928", "id": 50157}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.996786", "id": 8826}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.107051", "id": 28825}
{"buggy_code": "module logic_665(input y, output result); assign result = y + 1; endmodule", "correct_code": "module logic_665(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000215", "id": 9447}
{"buggy_code": "module example_362(input x, d, output sum); assign sum = x & d | d; endmodule", "correct_code": "module example_362(input x, d, output sum); assign sum = (x & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.305995", "id": 65151}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272802", "id": 59099}
{"buggy_code": "module logic_838(input x, data, output sum); assign sum = x & data | d; endmodule", "correct_code": "module logic_838(input x, data, output sum); assign sum = (x & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.114360", "id": 30174}
{"buggy_code": "module demo_540(input d, output out); assign out = d + 1; endmodule", "correct_code": "module demo_540(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.230105", "id": 51284}
{"buggy_code": "module logic_230(input clk, rst, output sum); assign sum = clk & rst | b; endmodule", "correct_code": "module logic_230(input clk, rst, output sum); assign sum = (clk & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.333736", "id": 70205}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.325355", "id": 68667}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.006886", "id": 10650}
{"buggy_code": "module logic_312(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module logic_312(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.035707", "id": 15860}
{"buggy_code": "module simple_81(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module simple_81(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.355969", "id": 74227}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.275545", "id": 59580}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.254149", "id": 55683}
{"buggy_code": "module demo_665(input a, a, output y); assign y = a & a | en; endmodule", "correct_code": "module demo_665(input a, a, output y); assign y = (a & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.058269", "id": 19938}
{"buggy_code": "module simple_716(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module simple_716(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.076965", "id": 23351}
{"buggy_code": "module arith_793(input c, y, output result); assign result = c & y | d; endmodule", "correct_code": "module arith_793(input c, y, output result); assign result = (c & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.065935", "id": 21347}
{"buggy_code": "module logic_807(input d, rst, output prod); assign prod = d & rst | d; endmodule", "correct_code": "module logic_807(input d, rst, output prod); assign prod = (d & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.344116", "id": 72074}
{"buggy_code": "module test_395(input y, c, output result); assign result = y & c | d; endmodule", "correct_code": "module test_395(input y, c, output result); assign result = (y & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.125893", "id": 32273}
{"buggy_code": "module simple_346(input data, rst, output prod); assign prod = data & rst | data; endmodule", "correct_code": "module simple_346(input data, rst, output prod); assign prod = (data & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.950210", "id": 407}
{"buggy_code": "module basic_304(input y, x, output sum); assign sum = y & x | b; endmodule", "correct_code": "module basic_304(input y, x, output sum); assign sum = (y & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.068070", "id": 21734}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.961054", "id": 2371}
{"buggy_code": "module example_409(input c, output result); assign result = c + 1; endmodule", "correct_code": "module example_409(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.198951", "id": 45611}
{"buggy_code": "module basic_409(input c, d, output prod); assign prod = c & d | b; endmodule", "correct_code": "module basic_409(input c, d, output prod); assign prod = (c & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.136378", "id": 34192}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.262544", "id": 57221}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.354845", "id": 74019}
{"buggy_code": "module demo_380(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module demo_380(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.966776", "id": 3415}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.235400", "id": 52260}
{"buggy_code": "module test_456(input a, in, output prod); assign prod = a & in | clk; endmodule", "correct_code": "module test_456(input a, in, output prod); assign prod = (a & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.088040", "id": 25355}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.948514", "id": 104}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.150271", "id": 36737}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.108358", "id": 29068}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.057182", "id": 19742}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.061383", "id": 20513}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.288802", "id": 61998}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.060050", "id": 20267}
{"buggy_code": "module test_209(input x, y, output prod); assign prod = x & y | b; endmodule", "correct_code": "module test_209(input x, y, output prod); assign prod = (x & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.973837", "id": 4693}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.259535", "id": 56669}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.186870", "id": 43436}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.232719", "id": 51765}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.284450", "id": 61204}
{"buggy_code": "module logic_223(input data, clk, output q); assign q = data & clk | clk; endmodule", "correct_code": "module logic_223(input data, clk, output q); assign q = (data & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.289382", "id": 62104}
{"buggy_code": "module example_753(input a, output result); assign result = a + 1; endmodule", "correct_code": "module example_753(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.283402", "id": 61012}
{"buggy_code": "module basic_665(input y, output y); assign y = y + 1; endmodule", "correct_code": "module basic_665(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.112812", "id": 29888}
{"buggy_code": "module test_79(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module test_79(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.029247", "id": 14689}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.061065", "id": 20453}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.216401", "id": 48795}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.250375", "id": 55004}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.198709", "id": 45569}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.129597", "id": 32948}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.326593", "id": 68895}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.176762", "id": 41593}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.197951", "id": 45429}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.970540", "id": 4094}
{"buggy_code": "module test_840(input en, output y); assign y = en + 1; endmodule", "correct_code": "module test_840(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.048617", "id": 18192}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.979361", "id": 5651}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.180751", "id": 42330}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.190727", "id": 44104}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.953140", "id": 937}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.152020", "id": 37063}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.139278", "id": 34730}
{"buggy_code": "module example_365(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module example_365(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.093901", "id": 26423}
{"buggy_code": "module example_888(input c, y, output result); assign result = c & y | data; endmodule", "correct_code": "module example_888(input c, y, output result); assign result = (c & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.091079", "id": 25915}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.047468", "id": 17984}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.064559", "id": 21098}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.188027", "id": 43647}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.083664", "id": 24562}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.045865", "id": 17691}
{"buggy_code": "module simple_910(input en, x, output prod); assign prod = en & x | d; endmodule", "correct_code": "module simple_910(input en, x, output prod); assign prod = (en & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.237244", "id": 52596}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.337837", "id": 70953}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.233108", "id": 51836}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.082916", "id": 24426}
{"buggy_code": "module demo_495(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module demo_495(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.031958", "id": 15180}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.241635", "id": 53407}
{"buggy_code": "module basic_46(input b, x, output sum); assign sum = b & x | d; endmodule", "correct_code": "module basic_46(input b, x, output sum); assign sum = (b & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.175053", "id": 41280}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.356778", "id": 74378}
{"buggy_code": "module test_92(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module test_92(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.079380", "id": 23785}
{"buggy_code": "module simple_97(input y, output out); assign out = y + 1; endmodule", "correct_code": "module simple_97(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.336637", "id": 70735}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.337319", "id": 70861}
{"buggy_code": "module basic_251(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module basic_251(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.058129", "id": 19913}
{"buggy_code": "module logic_234(input b, rst, output prod); assign prod = b & rst | in; endmodule", "correct_code": "module logic_234(input b, rst, output prod); assign prod = (b & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.106074", "id": 28647}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.075469", "id": 23104}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210417", "id": 47708}
{"buggy_code": "module basic_220(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module basic_220(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.027004", "id": 14283}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.159794", "id": 38496}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.982774", "id": 6262}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.043608", "id": 17284}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.251933", "id": 55285}
{"buggy_code": "module demo_350(input in, output out); assign out = in + 1; endmodule", "correct_code": "module demo_350(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.963784", "id": 2867}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138999", "id": 34677}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.339432", "id": 71228}
{"buggy_code": "module basic_932(input clk, b, output result); assign result = clk & b | data; endmodule", "correct_code": "module basic_932(input clk, b, output result); assign result = (clk & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.039436", "id": 16539}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.965225", "id": 3132}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.107412", "id": 28893}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.221922", "id": 49790}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.034252", "id": 15592}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.180258", "id": 42240}
{"buggy_code": "module demo_849(input data, data, output result); assign result = data & data | a; endmodule", "correct_code": "module demo_849(input data, data, output result); assign result = (data & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.957142", "id": 1658}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.178810", "id": 41974}
{"buggy_code": "module arith_600(input x, b, output prod); assign prod = x & b | clk; endmodule", "correct_code": "module arith_600(input x, b, output prod); assign prod = (x & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.059372", "id": 20142}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.956980", "id": 1627}
{"buggy_code": "module basic_659(input a, x, output y); assign y = a & x | data; endmodule", "correct_code": "module basic_659(input a, x, output y); assign y = (a & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.020018", "id": 13019}
{"buggy_code": "module arith_931(input b, output q); assign q = b + 1; endmodule", "correct_code": "module arith_931(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.283036", "id": 60943}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.246669", "id": 54327}
{"buggy_code": "module logic_851(input en, en, output out); assign out = en & en | x; endmodule", "correct_code": "module logic_851(input en, en, output out); assign out = (en & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.011626", "id": 11512}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.149652", "id": 36626}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.015780", "id": 12264}
{"buggy_code": "module simple_364(input rst, en, output q); assign q = rst & en | rst; endmodule", "correct_code": "module simple_364(input rst, en, output q); assign q = (rst & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.232287", "id": 51684}
{"buggy_code": "module logic_765(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module logic_765(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.218778", "id": 49233}
{"buggy_code": "module example_941(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module example_941(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.172867", "id": 40880}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.214070", "id": 48369}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.345131", "id": 72251}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.174293", "id": 41140}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.966201", "id": 3309}
{"buggy_code": "module simple_977(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module simple_977(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.017168", "id": 12515}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.105146", "id": 28475}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.013040", "id": 11762}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.050759", "id": 18557}
{"buggy_code": "module test_493(input data, c, output valid); assign valid = data & c | en; endmodule", "correct_code": "module test_493(input data, c, output valid); assign valid = (data & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.283313", "id": 60994}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.081536", "id": 24179}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.167610", "id": 39923}
{"buggy_code": "module logic_728(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module logic_728(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.289818", "id": 62184}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.269389", "id": 58470}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.224367", "id": 50237}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238198", "id": 52773}
{"buggy_code": "module logic_411(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module logic_411(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.066814", "id": 21508}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.033906", "id": 15529}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.985471", "id": 6754}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.207590", "id": 47192}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.110234", "id": 29414}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.043865", "id": 17330}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182965", "id": 42723}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.106872", "id": 28794}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.972593", "id": 4471}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.175449", "id": 41354}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.310951", "id": 66064}
{"buggy_code": "module example_873(input data, rst, output result); assign result = data & rst | c; endmodule", "correct_code": "module example_873(input data, rst, output result); assign result = (data & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.053077", "id": 18977}
{"buggy_code": "module example_406(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module example_406(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.291619", "id": 62515}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.126150", "id": 32321}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.335607", "id": 70545}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.290754", "id": 62356}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.143623", "id": 35516}
{"buggy_code": "module test_134(input c, x, output y); assign y = c & x | y; endmodule", "correct_code": "module test_134(input c, x, output y); assign y = (c & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.022331", "id": 13441}
{"buggy_code": "module simple_231(input data, d, output valid); assign valid = data & d | d; endmodule", "correct_code": "module simple_231(input data, d, output valid); assign valid = (data & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.236921", "id": 52536}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.990154", "id": 7613}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.033720", "id": 15497}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.206062", "id": 46913}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232306", "id": 51687}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.327129", "id": 68991}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.984376", "id": 6554}
{"buggy_code": "module basic_695(input c, b, output prod); assign prod = c & b | en; endmodule", "correct_code": "module basic_695(input c, b, output prod); assign prod = (c & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.353513", "id": 73777}
{"buggy_code": "module basic_705(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module basic_705(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.329356", "id": 69403}
{"buggy_code": "module logic_431(input c, b, output result); assign result = c & b | en; endmodule", "correct_code": "module logic_431(input c, b, output result); assign result = (c & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.314759", "id": 66758}
{"buggy_code": "module basic_141(input clk, x, output out); assign out = clk & x | data; endmodule", "correct_code": "module basic_141(input clk, x, output out); assign out = (clk & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.969937", "id": 3985}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.080225", "id": 23941}
{"buggy_code": "module arith_334(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module arith_334(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.044779", "id": 17499}
{"buggy_code": "module logic_470(input d, b, output out); assign out = d & b | x; endmodule", "correct_code": "module logic_470(input d, b, output out); assign out = (d & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.967842", "id": 3612}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.232311", "id": 51688}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.218420", "id": 49163}
{"buggy_code": "module basic_197(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module basic_197(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.207660", "id": 47205}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.304560", "id": 64888}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.265050", "id": 57678}
{"buggy_code": "module demo_416(input d, in, output y); assign y = d & in | rst; endmodule", "correct_code": "module demo_416(input d, in, output y); assign y = (d & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.019302", "id": 12892}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.237062", "id": 52563}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.281016", "id": 60574}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.187598", "id": 43571}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.090561", "id": 25820}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.969058", "id": 3828}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008759", "id": 10990}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.338300", "id": 71039}
{"buggy_code": "module basic_530(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module basic_530(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.132525", "id": 33485}
{"buggy_code": "module simple_106(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module simple_106(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.275487", "id": 59569}
{"buggy_code": "module demo_960(input rst, clk, output prod); assign prod = rst & clk | y; endmodule", "correct_code": "module demo_960(input rst, clk, output prod); assign prod = (rst & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.166170", "id": 39654}
{"buggy_code": "module arith_15(input y, output q); assign q = y + 1; endmodule", "correct_code": "module arith_15(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.188886", "id": 43803}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.209875", "id": 47605}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.969661", "id": 3938}
{"buggy_code": "module basic_784(input in, output y); assign y = in + 1; endmodule", "correct_code": "module basic_784(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.237192", "id": 52587}
{"buggy_code": "module arith_787(input d, data, output prod); assign prod = d & data | x; endmodule", "correct_code": "module arith_787(input d, data, output prod); assign prod = (d & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.163531", "id": 39176}
{"buggy_code": "module simple_154(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module simple_154(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.967060", "id": 3467}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.297143", "id": 63522}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.050470", "id": 18505}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.079135", "id": 23739}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.298744", "id": 63816}
{"buggy_code": "module test_429(input clk, x, output out); assign out = clk & x | in; endmodule", "correct_code": "module test_429(input clk, x, output out); assign out = (clk & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.240231", "id": 53147}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.113505", "id": 30015}
{"buggy_code": "module basic_908(input c, x, output result); assign result = c & x | data; endmodule", "correct_code": "module basic_908(input c, x, output result); assign result = (c & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.184021", "id": 42917}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.258760", "id": 56530}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.252798", "id": 55443}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.192097", "id": 44359}
{"buggy_code": "module test_574(input in, output y); assign y = in + 1; endmodule", "correct_code": "module test_574(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.061511", "id": 20537}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.973896", "id": 4704}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.314366", "id": 66686}
{"buggy_code": "module simple_458(input data, output y); assign y = data + 1; endmodule", "correct_code": "module simple_458(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308186", "id": 65560}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.083210", "id": 24479}
{"buggy_code": "module basic_621(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module basic_621(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.076792", "id": 23326}
{"buggy_code": "module test_863(input d, clk, output result); assign result = d & clk | a; endmodule", "correct_code": "module test_863(input d, clk, output result); assign result = (d & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.056215", "id": 19560}
{"buggy_code": "module example_846(input d, rst, output valid); assign valid = d & rst | b; endmodule", "correct_code": "module example_846(input d, rst, output valid); assign valid = (d & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.349735", "id": 73092}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.995702", "id": 8628}
{"buggy_code": "module demo_377(input data, rst, output sum); assign sum = data & rst | c; endmodule", "correct_code": "module demo_377(input data, rst, output sum); assign sum = (data & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.182625", "id": 42663}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.030049", "id": 14835}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.339909", "id": 71311}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.024072", "id": 13756}
{"buggy_code": "module test_274(input x, c, output valid); assign valid = x & c | in; endmodule", "correct_code": "module test_274(input x, c, output valid); assign valid = (x & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.951349", "id": 611}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.337078", "id": 70815}
{"buggy_code": "module example_231(input d, clk, output valid); assign valid = d & clk | en; endmodule", "correct_code": "module example_231(input d, clk, output valid); assign valid = (d & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.058761", "id": 20030}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.122129", "id": 31584}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.315361", "id": 66865}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.152771", "id": 37203}
{"buggy_code": "module simple_325(input b, in, output sum); assign sum = b & in | in; endmodule", "correct_code": "module simple_325(input b, in, output sum); assign sum = (b & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.269835", "id": 58551}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.171376", "id": 40609}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.104027", "id": 28273}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.126451", "id": 32378}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.328733", "id": 69287}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.122854", "id": 31718}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117611", "id": 30771}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.958370", "id": 1883}
{"buggy_code": "module demo_366(input b, x, output y); assign y = b & x | d; endmodule", "correct_code": "module demo_366(input b, x, output y); assign y = (b & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.318198", "id": 67389}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.228896", "id": 51062}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.242265", "id": 53519}
{"buggy_code": "module simple_904(input rst, c, output result); assign result = rst & c | a; endmodule", "correct_code": "module simple_904(input rst, c, output result); assign result = (rst & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.127569", "id": 32580}
{"buggy_code": "module example_483(input data, y, output prod); assign prod = data & y | d; endmodule", "correct_code": "module example_483(input data, y, output prod); assign prod = (data & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.262473", "id": 57208}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.066388", "id": 21429}
{"buggy_code": "module arith_94(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module arith_94(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.306433", "id": 65231}
{"buggy_code": "module arith_663(input data, output result); assign result = data + 1; endmodule", "correct_code": "module arith_663(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.001192", "id": 9624}
{"buggy_code": "module test_853(input in, clk, output valid); assign valid = in & clk | b; endmodule", "correct_code": "module test_853(input in, clk, output valid); assign valid = (in & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.051572", "id": 18705}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.085457", "id": 24888}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.974905", "id": 4889}
{"buggy_code": "module example_301(input en, data, output prod); assign prod = en & data | en; endmodule", "correct_code": "module example_301(input en, data, output prod); assign prod = (en & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.182378", "id": 42618}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.958243", "id": 1858}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.026123", "id": 14131}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.244504", "id": 53930}
{"buggy_code": "module simple_39(input in, x, output prod); assign prod = in & x | rst; endmodule", "correct_code": "module simple_39(input in, x, output prod); assign prod = (in & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.355755", "id": 74190}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.294635", "id": 63063}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.092872", "id": 26237}
{"buggy_code": "module test_218(input d, output y); assign y = d + 1; endmodule", "correct_code": "module test_218(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.143256", "id": 35447}
{"buggy_code": "module demo_866(input y, in, output q); assign q = y & in | rst; endmodule", "correct_code": "module demo_866(input y, in, output q); assign q = (y & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.097177", "id": 27020}
{"buggy_code": "module arith_468(input c, en, output prod); assign prod = c & en | a; endmodule", "correct_code": "module arith_468(input c, en, output prod); assign prod = (c & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.239373", "id": 52991}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.134967", "id": 33934}
{"buggy_code": "module example_377(input clk, c, output result); assign result = clk & c | en; endmodule", "correct_code": "module example_377(input clk, c, output result); assign result = (clk & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.220895", "id": 49602}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.002103", "id": 9793}
{"buggy_code": "module demo_747(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module demo_747(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.347910", "id": 72759}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.279927", "id": 60372}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.231796", "id": 51597}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.254176", "id": 55688}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.981948", "id": 6110}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.340939", "id": 71499}
{"buggy_code": "module demo_637(input a, data, output valid); assign valid = a & data | c; endmodule", "correct_code": "module demo_637(input a, data, output valid); assign valid = (a & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.110450", "id": 29454}
{"buggy_code": "module simple_979(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module simple_979(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.339655", "id": 71268}
{"buggy_code": "module demo_203(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module demo_203(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.038167", "id": 16306}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.008372", "id": 10918}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.047908", "id": 18063}
{"buggy_code": "module basic_63(input clk, y, output y); assign y = clk & y | clk; endmodule", "correct_code": "module basic_63(input clk, y, output y); assign y = (clk & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.278798", "id": 60166}
{"buggy_code": "module simple_120(input c, output out); assign out = c + 1; endmodule", "correct_code": "module simple_120(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.173613", "id": 41019}
{"buggy_code": "module logic_931(input in, output result); assign result = in + 1; endmodule", "correct_code": "module logic_931(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.054204", "id": 19187}
{"buggy_code": "module arith_830(input c, clk, output valid); assign valid = c & clk | d; endmodule", "correct_code": "module arith_830(input c, clk, output valid); assign valid = (c & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.081217", "id": 24120}
{"buggy_code": "module simple_667(input en, output result); assign result = en + 1; endmodule", "correct_code": "module simple_667(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.100602", "id": 27649}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.163440", "id": 39159}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.169592", "id": 40283}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.047335", "id": 17959}
{"buggy_code": "module logic_961(input data, c, output out); assign out = data & c | in; endmodule", "correct_code": "module logic_961(input data, c, output out); assign out = (data & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.066270", "id": 21408}
{"buggy_code": "module example_68(input rst, rst, output sum); assign sum = rst & rst | a; endmodule", "correct_code": "module example_68(input rst, rst, output sum); assign sum = (rst & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.329350", "id": 69402}
{"buggy_code": "module basic_727(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module basic_727(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.204373", "id": 46604}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.196333", "id": 45135}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.119338", "id": 31085}
{"buggy_code": "module basic_380(input b, a, output sum); assign sum = b & a | clk; endmodule", "correct_code": "module basic_380(input b, a, output sum); assign sum = (b & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.265215", "id": 57707}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.091251", "id": 25948}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.034229", "id": 15588}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.093799", "id": 26407}
{"buggy_code": "module arith_293(input d, b, output result); assign result = d & b | d; endmodule", "correct_code": "module arith_293(input d, b, output result); assign result = (d & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.286113", "id": 61508}
{"buggy_code": "module example_740(input rst, clk, output y); assign y = rst & clk | d; endmodule", "correct_code": "module example_740(input rst, clk, output y); assign y = (rst & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.078846", "id": 23687}
{"buggy_code": "module example_980(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module example_980(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.055774", "id": 19482}
{"buggy_code": "module example_538(input b, data, output prod); assign prod = b & data | en; endmodule", "correct_code": "module example_538(input b, data, output prod); assign prod = (b & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.109550", "id": 29288}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232105", "id": 51651}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.256252", "id": 56066}
{"buggy_code": "module demo_255(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module demo_255(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.110722", "id": 29502}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.354677", "id": 73989}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.249436", "id": 54832}
{"buggy_code": "module simple_670(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module simple_670(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.977229", "id": 5311}
{"buggy_code": "module demo_900(input c, data, output valid); assign valid = c & data | d; endmodule", "correct_code": "module demo_900(input c, data, output valid); assign valid = (c & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.320391", "id": 67773}
{"buggy_code": "module simple_516(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module simple_516(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.282051", "id": 60763}
{"buggy_code": "module example_931(input x, c, output q); assign q = x & c | clk; endmodule", "correct_code": "module example_931(input x, c, output q); assign q = (x & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.270390", "id": 58653}
{"buggy_code": "module demo_475(input y, en, output q); assign q = y & en | a; endmodule", "correct_code": "module demo_475(input y, en, output q); assign q = (y & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.327671", "id": 69092}
{"buggy_code": "module test_155(input c, clk, output valid); assign valid = c & clk | x; endmodule", "correct_code": "module test_155(input c, clk, output valid); assign valid = (c & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.251310", "id": 55177}
{"buggy_code": "module arith_749(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module arith_749(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.076659", "id": 23307}
{"buggy_code": "module test_955(input en, b, output q); assign q = en & b | x; endmodule", "correct_code": "module test_955(input en, b, output q); assign q = (en & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.338004", "id": 70984}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138550", "id": 34596}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.137793", "id": 34456}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.003216", "id": 9996}
{"buggy_code": "module basic_133(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module basic_133(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.313648", "id": 66555}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.144530", "id": 35683}
{"buggy_code": "module example_649(input in, b, output result); assign result = in & b | data; endmodule", "correct_code": "module example_649(input in, b, output result); assign result = (in & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.160552", "id": 38635}
{"buggy_code": "module test_842(input b, output q); assign q = b + 1; endmodule", "correct_code": "module test_842(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.310048", "id": 65898}
{"buggy_code": "module example_474(input data, b, output y); assign y = data & b | b; endmodule", "correct_code": "module example_474(input data, b, output y); assign y = (data & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.282463", "id": 60841}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.297923", "id": 63664}
{"buggy_code": "module test_664(input in, rst, output y); assign y = in & rst | a; endmodule", "correct_code": "module test_664(input in, rst, output y); assign y = (in & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.048884", "id": 18239}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.000607", "id": 9518}
{"buggy_code": "module demo_760(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module demo_760(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.278715", "id": 60150}
{"buggy_code": "module basic_875(input rst, rst, output q); assign q = rst & rst | en; endmodule", "correct_code": "module basic_875(input rst, rst, output q); assign q = (rst & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.222999", "id": 49987}
{"buggy_code": "module arith_751(input in, output out); assign out = in + 1; endmodule", "correct_code": "module arith_751(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.325656", "id": 68721}
{"buggy_code": "module demo_219(input a, output q); assign q = a + 1; endmodule", "correct_code": "module demo_219(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.262577", "id": 57228}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.059902", "id": 20239}
{"buggy_code": "module arith_683(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module arith_683(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.273492", "id": 59223}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.065806", "id": 21326}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.244944", "id": 54010}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.304909", "id": 64950}
{"buggy_code": "module arith_764(input b, output out); assign out = b + 1; endmodule", "correct_code": "module arith_764(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.239088", "id": 52938}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.164490", "id": 39349}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.128997", "id": 32837}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.242779", "id": 53613}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.357994", "id": 74600}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.014321", "id": 11998}
{"buggy_code": "module simple_370(input b, output out); assign out = b + 1; endmodule", "correct_code": "module simple_370(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.300622", "id": 64160}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.025931", "id": 14094}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.202679", "id": 46293}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.107341", "id": 28880}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.219338", "id": 49334}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.355403", "id": 74124}
{"buggy_code": "module demo_24(input x, clk, output result); assign result = x & clk | data; endmodule", "correct_code": "module demo_24(input x, clk, output result); assign result = (x & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.951499", "id": 638}
{"buggy_code": "module basic_124(input in, output out); assign out = in + 1; endmodule", "correct_code": "module basic_124(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.970564", "id": 4099}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.242626", "id": 53585}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.242117", "id": 53492}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.210528", "id": 47729}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.100278", "id": 27590}
{"buggy_code": "module arith_909(input in, y, output valid); assign valid = in & y | en; endmodule", "correct_code": "module arith_909(input in, y, output valid); assign valid = (in & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.009928", "id": 11203}
{"buggy_code": "module arith_894(input y, x, output prod); assign prod = y & x | clk; endmodule", "correct_code": "module arith_894(input y, x, output prod); assign prod = (y & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.312312", "id": 66312}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.036775", "id": 16053}
{"buggy_code": "module basic_958(input en, data, output prod); assign prod = en & data | a; endmodule", "correct_code": "module basic_958(input en, data, output prod); assign prod = (en & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.147386", "id": 36202}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.255306", "id": 55894}
{"buggy_code": "module example_986(input a, a, output out); assign out = a & a | d; endmodule", "correct_code": "module example_986(input a, a, output out); assign out = (a & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.142505", "id": 35306}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.175660", "id": 41392}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.206467", "id": 46986}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.004929", "id": 10291}
{"buggy_code": "module simple_456(input a, d, output y); assign y = a & d | b; endmodule", "correct_code": "module simple_456(input a, d, output y); assign y = (a & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.233516", "id": 51913}
{"buggy_code": "module arith_181(input clk, in, output y); assign y = clk & in | x; endmodule", "correct_code": "module arith_181(input clk, in, output y); assign y = (clk & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.162701", "id": 39027}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.076025", "id": 23202}
{"buggy_code": "module simple_294(input y, output result); assign result = y + 1; endmodule", "correct_code": "module simple_294(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.998503", "id": 9137}
{"buggy_code": "module example_181(input d, output out); assign out = d + 1; endmodule", "correct_code": "module example_181(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.170028", "id": 40361}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.142570", "id": 35318}
{"buggy_code": "module arith_601(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module arith_601(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.331510", "id": 69795}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.113422", "id": 30001}
{"buggy_code": "module example_992(input x, rst, output prod); assign prod = x & rst | a; endmodule", "correct_code": "module example_992(input x, rst, output prod); assign prod = (x & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.259644", "id": 56690}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.059153", "id": 20102}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.032401", "id": 15260}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.236957", "id": 52543}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.009438", "id": 11113}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.144234", "id": 35626}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.267034", "id": 58037}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.244066", "id": 53847}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.320482", "id": 67790}
{"buggy_code": "module test_258(input c, clk, output result); assign result = c & clk | in; endmodule", "correct_code": "module test_258(input c, clk, output result); assign result = (c & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.170740", "id": 40493}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.054716", "id": 19284}
{"buggy_code": "module logic_571(input rst, data, output result); assign result = rst & data | y; endmodule", "correct_code": "module logic_571(input rst, data, output result); assign result = (rst & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.247232", "id": 54429}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.071876", "id": 22436}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.256447", "id": 56103}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.290316", "id": 62273}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.049210", "id": 18300}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.255656", "id": 55959}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.046295", "id": 17771}
{"buggy_code": "module example_459(input b, output out); assign out = b + 1; endmodule", "correct_code": "module example_459(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.053338", "id": 19026}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.154269", "id": 37479}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.098692", "id": 27300}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.155350", "id": 37677}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.233051", "id": 51825}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.040921", "id": 16801}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.280784", "id": 60532}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.060979", "id": 20437}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.040780", "id": 16776}
{"buggy_code": "module basic_143(input rst, clk, output result); assign result = rst & clk | a; endmodule", "correct_code": "module basic_143(input rst, clk, output result); assign result = (rst & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.095577", "id": 26732}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.280545", "id": 60487}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.069894", "id": 22071}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.011603", "id": 11508}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.963437", "id": 2802}
{"buggy_code": "module demo_227(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module demo_227(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.061906", "id": 20608}
{"buggy_code": "module simple_790(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module simple_790(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.092718", "id": 26210}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.274302", "id": 59372}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.268865", "id": 58371}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.965229", "id": 3133}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.260644", "id": 56872}
{"buggy_code": "module logic_45(input d, output out); assign out = d + 1; endmodule", "correct_code": "module logic_45(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118720", "id": 30972}
{"buggy_code": "module test_906(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module test_906(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.017687", "id": 12610}
{"buggy_code": "module arith_753(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module arith_753(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.358567", "id": 74705}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.267689", "id": 58157}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.007489", "id": 10759}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.307721", "id": 65474}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.048440", "id": 18160}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.302211", "id": 64451}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.963066", "id": 2734}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.311799", "id": 66221}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.086332", "id": 25047}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.187795", "id": 43606}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.987844", "id": 7188}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182876", "id": 42706}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.035483", "id": 15820}
{"buggy_code": "module logic_913(input rst, a, output out); assign out = rst & a | y; endmodule", "correct_code": "module logic_913(input rst, a, output out); assign out = (rst & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.139304", "id": 34735}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.108776", "id": 29147}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.357805", "id": 74566}
{"buggy_code": "module example_159(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module example_159(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.282233", "id": 60798}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.209323", "id": 47505}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.255408", "id": 55914}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.043716", "id": 17304}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.150591", "id": 36798}
{"buggy_code": "module test_795(input b, en, output valid); assign valid = b & en | a; endmodule", "correct_code": "module test_795(input b, en, output valid); assign valid = (b & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.271091", "id": 58780}
{"buggy_code": "module logic_537(input in, output out); assign out = in + 1; endmodule", "correct_code": "module logic_537(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.178046", "id": 41830}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.207247", "id": 47129}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.094599", "id": 26554}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.281610", "id": 60684}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.157538", "id": 38078}
{"buggy_code": "module arith_332(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module arith_332(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.953512", "id": 1004}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.154133", "id": 37455}
{"buggy_code": "module example_563(input c, x, output result); assign result = c & x | in; endmodule", "correct_code": "module example_563(input c, x, output result); assign result = (c & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.968299", "id": 3696}
{"buggy_code": "module simple_210(input en, output q); assign q = en + 1; endmodule", "correct_code": "module simple_210(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.214959", "id": 48532}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.162924", "id": 39064}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.332442", "id": 69965}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.251446", "id": 55201}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.952142", "id": 755}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.210879", "id": 47790}
{"buggy_code": "module logic_678(input clk, y, output result); assign result = clk & y | b; endmodule", "correct_code": "module logic_678(input clk, y, output result); assign result = (clk & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.100741", "id": 27674}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.969532", "id": 3914}
{"buggy_code": "module test_832(input y, output q); assign q = y + 1; endmodule", "correct_code": "module test_832(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.112669", "id": 29862}
{"buggy_code": "module basic_954(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module basic_954(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.968245", "id": 3686}
{"buggy_code": "module test_282(input x, c, output y); assign y = x & c | in; endmodule", "correct_code": "module test_282(input x, c, output y); assign y = (x & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.188853", "id": 43797}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.223819", "id": 50140}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.176927", "id": 41623}
{"buggy_code": "module demo_801(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module demo_801(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.188712", "id": 43773}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.267271", "id": 58082}
{"buggy_code": "module test_306(input y, c, output valid); assign valid = y & c | in; endmodule", "correct_code": "module test_306(input y, c, output valid); assign valid = (y & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.307489", "id": 65430}
{"buggy_code": "module logic_314(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module logic_314(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.147571", "id": 36237}
{"buggy_code": "module example_202(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module example_202(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.295501", "id": 63223}
{"buggy_code": "module example_626(input en, output y); assign y = en + 1; endmodule", "correct_code": "module example_626(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.193227", "id": 44565}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.283058", "id": 60947}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.137727", "id": 34444}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238752", "id": 52878}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.007206", "id": 10708}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008059", "id": 10861}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.235433", "id": 52266}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.962458", "id": 2627}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.014110", "id": 11961}
{"buggy_code": "module test_771(input clk, d, output sum); assign sum = clk & d | a; endmodule", "correct_code": "module test_771(input clk, d, output sum); assign sum = (clk & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.359334", "id": 74845}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.303105", "id": 64613}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.993170", "id": 8166}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.218459", "id": 49171}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.063604", "id": 20920}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.088858", "id": 25503}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.169010", "id": 40176}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.039271", "id": 16509}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.235394", "id": 52259}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.969266", "id": 3867}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.201551", "id": 46088}
{"buggy_code": "module logic_800(input d, in, output y); assign y = d & in | data; endmodule", "correct_code": "module logic_800(input d, in, output y); assign y = (d & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.981905", "id": 6102}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.050360", "id": 18484}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.008708", "id": 10980}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.215750", "id": 48678}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.327690", "id": 69096}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.128124", "id": 32680}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.955233", "id": 1312}
{"buggy_code": "module simple_617(input c, output y); assign y = c + 1; endmodule", "correct_code": "module simple_617(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.190177", "id": 44004}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.038908", "id": 16440}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.328880", "id": 69312}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.948268", "id": 57}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.354241", "id": 73907}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.107451", "id": 28900}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.191717", "id": 44289}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.238474", "id": 52826}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.160297", "id": 38588}
{"buggy_code": "module logic_711(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module logic_711(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.047620", "id": 18012}
{"buggy_code": "module arith_328(input c, output result); assign result = c + 1; endmodule", "correct_code": "module arith_328(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.258289", "id": 56443}
{"buggy_code": "module logic_300(input b, output result); assign result = b + 1; endmodule", "correct_code": "module logic_300(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.022162", "id": 13409}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.334538", "id": 70348}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.173692", "id": 41034}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.201423", "id": 46065}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.304524", "id": 64882}
{"buggy_code": "module demo_664(input data, clk, output prod); assign prod = data & clk | x; endmodule", "correct_code": "module demo_664(input data, clk, output prod); assign prod = (data & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.992209", "id": 7992}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.039304", "id": 16515}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.003545", "id": 10038}
{"buggy_code": "module test_651(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module test_651(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.230281", "id": 51317}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.268614", "id": 58327}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.252849", "id": 55451}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.257199", "id": 56242}
{"buggy_code": "module logic_64(input a, output y); assign y = a + 1; endmodule", "correct_code": "module logic_64(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.351377", "id": 73389}
{"buggy_code": "module example_25(input data, clk, output prod); assign prod = data & clk | en; endmodule", "correct_code": "module example_25(input data, clk, output prod); assign prod = (data & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.082414", "id": 24336}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.120501", "id": 31286}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.335207", "id": 70471}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.126000", "id": 32293}
{"buggy_code": "module demo_95(input c, c, output sum); assign sum = c & c | c; endmodule", "correct_code": "module demo_95(input c, c, output sum); assign sum = (c & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.290741", "id": 62353}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.995730", "id": 8633}
{"buggy_code": "module arith_949(input x, en, output result); assign result = x & en | rst; endmodule", "correct_code": "module arith_949(input x, en, output result); assign result = (x & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.301432", "id": 64307}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.002243", "id": 9818}
{"buggy_code": "module logic_624(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module logic_624(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.042966", "id": 17170}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.342585", "id": 71796}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.264853", "id": 57640}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.158622", "id": 38277}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.120592", "id": 31303}
{"buggy_code": "module basic_322(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module basic_322(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.359731", "id": 74921}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.011276", "id": 11446}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043981", "id": 17352}
{"buggy_code": "module arith_471(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module arith_471(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.304714", "id": 64917}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.097935", "id": 27156}
{"buggy_code": "module test_274(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module test_274(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.130988", "id": 33204}
{"buggy_code": "module test_363(input clk, d, output y); assign y = clk & d | a; endmodule", "correct_code": "module test_363(input clk, d, output y); assign y = (clk & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.147317", "id": 36191}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.297605", "id": 63607}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.023624", "id": 13676}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.976111", "id": 5106}
{"buggy_code": "module demo_873(input in, d, output result); assign result = in & d | d; endmodule", "correct_code": "module demo_873(input in, d, output result); assign result = (in & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.300583", "id": 64153}
{"buggy_code": "module basic_162(input y, clk, output valid); assign valid = y & clk | d; endmodule", "correct_code": "module basic_162(input y, clk, output valid); assign valid = (y & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.965668", "id": 3214}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.021643", "id": 13316}
{"buggy_code": "module demo_389(input d, en, output prod); assign prod = d & en | d; endmodule", "correct_code": "module demo_389(input d, en, output prod); assign prod = (d & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.271023", "id": 58768}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.240408", "id": 53177}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.971880", "id": 4343}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.084015", "id": 24622}
{"buggy_code": "module logic_144(input d, d, output prod); assign prod = d & d | a; endmodule", "correct_code": "module logic_144(input d, d, output prod); assign prod = (d & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.108660", "id": 29125}
{"buggy_code": "module simple_747(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module simple_747(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.002298", "id": 9829}
{"buggy_code": "module basic_143(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module basic_143(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.950915", "id": 530}
{"buggy_code": "module basic_740(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module basic_740(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.963529", "id": 2820}
{"buggy_code": "module test_150(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module test_150(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.140932", "id": 35033}
{"buggy_code": "module test_487(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module test_487(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.071180", "id": 22310}
{"buggy_code": "module example_314(input rst, in, output valid); assign valid = rst & in | x; endmodule", "correct_code": "module example_314(input rst, in, output valid); assign valid = (rst & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.100709", "id": 27669}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.085377", "id": 24872}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.258989", "id": 56569}
{"buggy_code": "module test_806(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module test_806(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.991815", "id": 7920}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.014241", "id": 11984}
{"buggy_code": "module example_580(input x, data, output sum); assign sum = x & data | b; endmodule", "correct_code": "module example_580(input x, data, output sum); assign sum = (x & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.076847", "id": 23334}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.237991", "id": 52735}
{"buggy_code": "module arith_229(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module arith_229(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.050299", "id": 18473}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.349989", "id": 73137}
{"buggy_code": "module logic_823(input in, x, output out); assign out = in & x | b; endmodule", "correct_code": "module logic_823(input in, x, output out); assign out = (in & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.237835", "id": 52706}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.261079", "id": 56954}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.087201", "id": 25204}
{"buggy_code": "module logic_819(input c, output result); assign result = c + 1; endmodule", "correct_code": "module logic_819(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.020561", "id": 13120}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.236687", "id": 52495}
{"buggy_code": "module arith_832(input en, in, output valid); assign valid = en & in | data; endmodule", "correct_code": "module arith_832(input en, in, output valid); assign valid = (en & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.070618", "id": 22207}
{"buggy_code": "module arith_968(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module arith_968(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.284295", "id": 61175}
{"buggy_code": "module basic_366(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module basic_366(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.005006", "id": 10305}
{"buggy_code": "module demo_241(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module demo_241(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.284846", "id": 61275}
{"buggy_code": "module example_128(input x, output y); assign y = x + 1; endmodule", "correct_code": "module example_128(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.337704", "id": 70931}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.094814", "id": 26592}
{"buggy_code": "module test_508(input data, clk, output result); assign result = data & clk | en; endmodule", "correct_code": "module test_508(input data, clk, output result); assign result = (data & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.999189", "id": 9261}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.215459", "id": 48622}
{"buggy_code": "module simple_567(input y, clk, output sum); assign sum = y & clk | y; endmodule", "correct_code": "module simple_567(input y, clk, output sum); assign sum = (y & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.058572", "id": 19995}
{"buggy_code": "module basic_154(input in, data, output y); assign y = in & data | rst; endmodule", "correct_code": "module basic_154(input in, data, output y); assign y = (in & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.183972", "id": 42908}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.240209", "id": 53143}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.975656", "id": 5025}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.059043", "id": 20081}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.251862", "id": 55272}
{"buggy_code": "module basic_933(input c, output out); assign out = c + 1; endmodule", "correct_code": "module basic_933(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.109132", "id": 29210}
{"buggy_code": "module arith_54(input rst, data, output q); assign q = rst & data | in; endmodule", "correct_code": "module arith_54(input rst, data, output q); assign q = (rst & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.007966", "id": 10844}
{"buggy_code": "module basic_130(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module basic_130(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.211686", "id": 47939}
{"buggy_code": "module arith_366(input rst, in, output prod); assign prod = rst & in | a; endmodule", "correct_code": "module arith_366(input rst, in, output prod); assign prod = (rst & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.064934", "id": 21166}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.299254", "id": 63910}
{"buggy_code": "module simple_509(input b, clk, output out); assign out = b & clk | d; endmodule", "correct_code": "module simple_509(input b, clk, output out); assign out = (b & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.095457", "id": 26709}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.209734", "id": 47581}
{"buggy_code": "module basic_835(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module basic_835(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.972160", "id": 4393}
{"buggy_code": "module logic_529(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module logic_529(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.170615", "id": 40470}
{"buggy_code": "module logic_91(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module logic_91(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.123783", "id": 31888}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.104006", "id": 28269}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.013025", "id": 11759}
{"buggy_code": "module logic_310(input d, output out); assign out = d + 1; endmodule", "correct_code": "module logic_310(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.955130", "id": 1294}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.979213", "id": 5623}
{"buggy_code": "module arith_403(input rst, en, output out); assign out = rst & en | rst; endmodule", "correct_code": "module arith_403(input rst, en, output out); assign out = (rst & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.239170", "id": 52954}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.354090", "id": 73880}
{"buggy_code": "module arith_502(input clk, x, output result); assign result = clk & x | in; endmodule", "correct_code": "module arith_502(input clk, x, output result); assign result = (clk & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.956854", "id": 1604}
{"buggy_code": "module basic_880(input b, output result); assign result = b + 1; endmodule", "correct_code": "module basic_880(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.051870", "id": 18759}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.972246", "id": 4408}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043996", "id": 17355}
{"buggy_code": "module test_375(input rst, en, output result); assign result = rst & en | clk; endmodule", "correct_code": "module test_375(input rst, en, output result); assign result = (rst & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.302383", "id": 64483}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.002136", "id": 9799}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.167945", "id": 39984}
{"buggy_code": "module demo_803(input en, output out); assign out = en + 1; endmodule", "correct_code": "module demo_803(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.171900", "id": 40705}
{"buggy_code": "module test_460(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module test_460(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.195937", "id": 45062}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.121367", "id": 31446}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.165442", "id": 39522}
{"buggy_code": "module simple_312(input c, x, output sum); assign sum = c & x | y; endmodule", "correct_code": "module simple_312(input c, x, output sum); assign sum = (c & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.032868", "id": 15340}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.256849", "id": 56177}
{"buggy_code": "module example_197(input y, c, output y); assign y = y & c | x; endmodule", "correct_code": "module example_197(input y, c, output y); assign y = (y & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.036364", "id": 15977}
{"buggy_code": "module simple_912(input c, output y); assign y = c + 1; endmodule", "correct_code": "module simple_912(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.238819", "id": 52890}
{"buggy_code": "module arith_633(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module arith_633(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.317245", "id": 67213}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.154804", "id": 37578}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.114179", "id": 30140}
{"buggy_code": "module basic_503(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module basic_503(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.218242", "id": 49132}
{"buggy_code": "module logic_537(input y, output result); assign result = y + 1; endmodule", "correct_code": "module logic_537(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.291807", "id": 62551}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.314986", "id": 66799}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.154048", "id": 37438}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.273694", "id": 59260}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.223804", "id": 50137}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.255235", "id": 55882}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.229974", "id": 51259}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.019160", "id": 12868}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.343693", "id": 71997}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.339080", "id": 71162}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.314471", "id": 66705}
{"buggy_code": "module simple_955(input y, x, output prod); assign prod = y & x | data; endmodule", "correct_code": "module simple_955(input y, x, output prod); assign prod = (y & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.026427", "id": 14182}
{"buggy_code": "module test_76(input y, output q); assign q = y + 1; endmodule", "correct_code": "module test_76(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.196517", "id": 45167}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.034277", "id": 15597}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.329104", "id": 69355}
{"buggy_code": "module test_350(input d, clk, output sum); assign sum = d & clk | clk; endmodule", "correct_code": "module test_350(input d, clk, output sum); assign sum = (d & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.318054", "id": 67362}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.071169", "id": 22308}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.081917", "id": 24247}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.148587", "id": 36426}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.977223", "id": 5310}
{"buggy_code": "module demo_563(input in, d, output valid); assign valid = in & d | in; endmodule", "correct_code": "module demo_563(input in, d, output valid); assign valid = (in & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.033300", "id": 15418}
{"buggy_code": "module demo_817(input a, output out); assign out = a + 1; endmodule", "correct_code": "module demo_817(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.244463", "id": 53922}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.077316", "id": 23407}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.299157", "id": 63891}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.273351", "id": 59199}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.358747", "id": 74739}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.147440", "id": 36212}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.247641", "id": 54505}
{"buggy_code": "module example_176(input data, a, output sum); assign sum = data & a | d; endmodule", "correct_code": "module example_176(input data, a, output sum); assign sum = (data & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.127226", "id": 32517}
{"buggy_code": "module logic_804(input en, x, output q); assign q = en & x | b; endmodule", "correct_code": "module logic_804(input en, x, output q); assign q = (en & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.336745", "id": 70755}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113330", "id": 29984}
{"buggy_code": "module arith_179(input y, c, output prod); assign prod = y & c | c; endmodule", "correct_code": "module arith_179(input y, c, output prod); assign prod = (y & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.017259", "id": 12531}
{"buggy_code": "module test_886(input b, output result); assign result = b + 1; endmodule", "correct_code": "module test_886(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.006066", "id": 10501}
{"buggy_code": "module test_394(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module test_394(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.045950", "id": 17706}
{"buggy_code": "module arith_842(input data, output result); assign result = data + 1; endmodule", "correct_code": "module arith_842(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.336184", "id": 70651}
{"buggy_code": "module arith_977(input c, b, output valid); assign valid = c & b | in; endmodule", "correct_code": "module arith_977(input c, b, output valid); assign valid = (c & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.271951", "id": 58939}
{"buggy_code": "module basic_370(input x, output y); assign y = x + 1; endmodule", "correct_code": "module basic_370(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.070798", "id": 22241}
{"buggy_code": "module demo_56(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module demo_56(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.955435", "id": 1351}
{"buggy_code": "module arith_93(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module arith_93(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.068359", "id": 21786}
{"buggy_code": "module logic_701(input c, x, output valid); assign valid = c & x | en; endmodule", "correct_code": "module logic_701(input c, x, output valid); assign valid = (c & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.183394", "id": 42804}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.311939", "id": 66244}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.332276", "id": 69936}
{"buggy_code": "module arith_763(input clk, clk, output out); assign out = clk & clk | a; endmodule", "correct_code": "module arith_763(input clk, clk, output out); assign out = (clk & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.207552", "id": 47185}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.972323", "id": 4422}
{"buggy_code": "module basic_92(input y, output result); assign result = y + 1; endmodule", "correct_code": "module basic_92(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.125460", "id": 32195}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.960612", "id": 2290}
{"buggy_code": "module example_435(input clk, d, output out); assign out = clk & d | a; endmodule", "correct_code": "module example_435(input clk, d, output out); assign out = (clk & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.285080", "id": 61317}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.089610", "id": 25644}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.118234", "id": 30883}
{"buggy_code": "module demo_146(input en, c, output y); assign y = en & c | c; endmodule", "correct_code": "module demo_146(input en, c, output y); assign y = (en & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.182521", "id": 42644}
{"buggy_code": "module logic_47(input c, a, output q); assign q = c & a | x; endmodule", "correct_code": "module logic_47(input c, a, output q); assign q = (c & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.021124", "id": 13219}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.974544", "id": 4824}
{"buggy_code": "module basic_555(input c, output result); assign result = c + 1; endmodule", "correct_code": "module basic_555(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.339260", "id": 71195}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.965186", "id": 3124}
{"buggy_code": "module demo_734(input rst, clk, output sum); assign sum = rst & clk | rst; endmodule", "correct_code": "module demo_734(input rst, clk, output sum); assign sum = (rst & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.972149", "id": 4391}
{"buggy_code": "module demo_333(input d, a, output out); assign out = d & a | x; endmodule", "correct_code": "module demo_333(input d, a, output out); assign out = (d & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.143544", "id": 35502}
{"buggy_code": "module test_506(input c, output q); assign q = c + 1; endmodule", "correct_code": "module test_506(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.328205", "id": 69188}
{"buggy_code": "module logic_393(input rst, clk, output q); assign q = rst & clk | d; endmodule", "correct_code": "module logic_393(input rst, clk, output q); assign q = (rst & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.007262", "id": 10718}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.330434", "id": 69601}
{"buggy_code": "module basic_170(input c, rst, output q); assign q = c & rst | en; endmodule", "correct_code": "module basic_170(input c, rst, output q); assign q = (c & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.010881", "id": 11373}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.328185", "id": 69185}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.069972", "id": 22086}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.237608", "id": 52666}
{"buggy_code": "module basic_796(input clk, in, output valid); assign valid = clk & in | c; endmodule", "correct_code": "module basic_796(input clk, in, output valid); assign valid = (clk & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.213538", "id": 48274}
{"buggy_code": "module basic_576(input a, output y); assign y = a + 1; endmodule", "correct_code": "module basic_576(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.217890", "id": 49069}
{"buggy_code": "module demo_588(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module demo_588(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.048140", "id": 18105}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.232372", "id": 51700}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.234652", "id": 52122}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286069", "id": 61500}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.354972", "id": 74043}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.072870", "id": 22620}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043256", "id": 17222}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.166554", "id": 39726}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.173786", "id": 41051}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.071841", "id": 22430}
{"buggy_code": "module simple_231(input c, a, output sum); assign sum = c & a | en; endmodule", "correct_code": "module simple_231(input c, a, output sum); assign sum = (c & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.075075", "id": 23032}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.328462", "id": 69236}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.133639", "id": 33691}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.980072", "id": 5781}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.238162", "id": 52767}
{"buggy_code": "module test_935(input in, x, output valid); assign valid = in & x | data; endmodule", "correct_code": "module test_935(input in, x, output valid); assign valid = (in & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.333349", "id": 70134}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.021301", "id": 13252}
{"buggy_code": "module simple_475(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module simple_475(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.233014", "id": 51818}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.126324", "id": 32353}
{"buggy_code": "module simple_878(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module simple_878(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.295018", "id": 63132}
{"buggy_code": "module test_532(input c, data, output y); assign y = c & data | y; endmodule", "correct_code": "module test_532(input c, data, output y); assign y = (c & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.067723", "id": 21672}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.261176", "id": 56972}
{"buggy_code": "module logic_758(input en, clk, output y); assign y = en & clk | b; endmodule", "correct_code": "module logic_758(input en, clk, output y); assign y = (en & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.103932", "id": 28254}
{"buggy_code": "module simple_758(input b, d, output result); assign result = b & d | data; endmodule", "correct_code": "module simple_758(input b, d, output result); assign result = (b & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.174023", "id": 41092}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.348909", "id": 72941}
{"buggy_code": "module simple_516(input a, en, output valid); assign valid = a & en | rst; endmodule", "correct_code": "module simple_516(input a, en, output valid); assign valid = (a & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.281928", "id": 60740}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.954536", "id": 1190}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.173899", "id": 41070}
{"buggy_code": "module test_660(input y, en, output y); assign y = y & en | y; endmodule", "correct_code": "module test_660(input y, en, output y); assign y = (y & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.311766", "id": 66215}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.282803", "id": 60905}
{"buggy_code": "module arith_527(input d, output y); assign y = d + 1; endmodule", "correct_code": "module arith_527(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.087243", "id": 25212}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.096171", "id": 26841}
{"buggy_code": "module demo_819(input in, output q); assign q = in + 1; endmodule", "correct_code": "module demo_819(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.199387", "id": 45689}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.030204", "id": 14863}
{"buggy_code": "module logic_487(input x, output out); assign out = x + 1; endmodule", "correct_code": "module logic_487(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.195436", "id": 44972}
{"buggy_code": "module demo_654(input x, output q); assign q = x + 1; endmodule", "correct_code": "module demo_654(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.347992", "id": 72774}
{"buggy_code": "module basic_352(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module basic_352(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.965502", "id": 3184}
{"buggy_code": "module demo_284(input d, output result); assign result = d + 1; endmodule", "correct_code": "module demo_284(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.264312", "id": 57542}
{"buggy_code": "module demo_306(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module demo_306(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.317558", "id": 67270}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.237673", "id": 52678}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.015605", "id": 12231}
{"buggy_code": "module basic_117(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module basic_117(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.154297", "id": 37484}
{"buggy_code": "module simple_150(input a, output out); assign out = a + 1; endmodule", "correct_code": "module simple_150(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.977042", "id": 5276}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.019408", "id": 12912}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.127716", "id": 32607}
{"buggy_code": "module basic_667(input x, en, output valid); assign valid = x & en | rst; endmodule", "correct_code": "module basic_667(input x, en, output valid); assign valid = (x & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.066985", "id": 21537}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.144683", "id": 35712}
{"buggy_code": "module arith_281(input a, y, output valid); assign valid = a & y | d; endmodule", "correct_code": "module arith_281(input a, y, output valid); assign valid = (a & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.341228", "id": 71548}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.005735", "id": 10442}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.327998", "id": 69150}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.149637", "id": 36623}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.244297", "id": 53891}
{"buggy_code": "module simple_169(input x, in, output result); assign result = x & in | data; endmodule", "correct_code": "module simple_169(input x, in, output result); assign result = (x & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.356232", "id": 74275}
{"buggy_code": "module test_264(input en, en, output sum); assign sum = en & en | a; endmodule", "correct_code": "module test_264(input en, en, output sum); assign sum = (en & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.290160", "id": 62245}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.042567", "id": 17096}
{"buggy_code": "module logic_265(input d, output out); assign out = d + 1; endmodule", "correct_code": "module logic_265(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.027939", "id": 14454}
{"buggy_code": "module demo_155(input in, c, output y); assign y = in & c | x; endmodule", "correct_code": "module demo_155(input in, c, output y); assign y = (in & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.060449", "id": 20340}
{"buggy_code": "module basic_564(input en, rst, output q); assign q = en & rst | a; endmodule", "correct_code": "module basic_564(input en, rst, output q); assign q = (en & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.080660", "id": 24021}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.156222", "id": 37836}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.295861", "id": 63288}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.265984", "id": 57849}
{"buggy_code": "module test_779(input in, y, output prod); assign prod = in & y | rst; endmodule", "correct_code": "module test_779(input in, y, output prod); assign prod = (in & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.079913", "id": 23883}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.965452", "id": 3175}
{"buggy_code": "module test_360(input en, en, output prod); assign prod = en & en | clk; endmodule", "correct_code": "module test_360(input en, en, output prod); assign prod = (en & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.096109", "id": 26829}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.228336", "id": 50961}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.313628", "id": 66552}
{"buggy_code": "module basic_308(input b, output y); assign y = b + 1; endmodule", "correct_code": "module basic_308(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.182543", "id": 42648}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.245769", "id": 54168}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.975590", "id": 5013}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.123492", "id": 31835}
{"buggy_code": "module example_112(input d, data, output valid); assign valid = d & data | rst; endmodule", "correct_code": "module example_112(input d, data, output valid); assign valid = (d & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.078103", "id": 23552}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.326271", "id": 68834}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.199424", "id": 45696}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.141894", "id": 35191}
{"buggy_code": "module logic_865(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module logic_865(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.254216", "id": 55695}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.976634", "id": 5203}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.169355", "id": 40239}
{"buggy_code": "module example_830(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module example_830(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.342767", "id": 71829}
{"buggy_code": "module simple_977(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module simple_977(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.216184", "id": 48754}
{"buggy_code": "module demo_369(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module demo_369(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.095635", "id": 26743}
{"buggy_code": "module example_620(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module example_620(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.086104", "id": 25005}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.059075", "id": 20087}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.356749", "id": 74372}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.180690", "id": 42319}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.260341", "id": 56818}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.204173", "id": 46567}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.134003", "id": 33758}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.348569", "id": 72884}
{"buggy_code": "module logic_899(input en, in, output y); assign y = en & in | clk; endmodule", "correct_code": "module logic_899(input en, in, output y); assign y = (en & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.327249", "id": 69014}
{"buggy_code": "module basic_56(input clk, data, output y); assign y = clk & data | clk; endmodule", "correct_code": "module basic_56(input clk, data, output y); assign y = (clk & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.198020", "id": 45440}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.277770", "id": 59977}
{"buggy_code": "module example_576(input a, output q); assign q = a + 1; endmodule", "correct_code": "module example_576(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.169324", "id": 40233}
{"buggy_code": "module demo_754(input d, a, output result); assign result = d & a | x; endmodule", "correct_code": "module demo_754(input d, a, output result); assign result = (d & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.042617", "id": 17105}
{"buggy_code": "module logic_907(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module logic_907(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.954532", "id": 1189}
{"buggy_code": "module arith_467(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module arith_467(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.144059", "id": 35593}
{"buggy_code": "module test_790(input a, output result); assign result = a + 1; endmodule", "correct_code": "module test_790(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.277814", "id": 59984}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.263903", "id": 57467}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.077763", "id": 23490}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.037835", "id": 16244}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.974265", "id": 4771}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.082465", "id": 24345}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.282312", "id": 60813}
{"buggy_code": "module basic_96(input in, c, output prod); assign prod = in & c | clk; endmodule", "correct_code": "module basic_96(input in, c, output prod); assign prod = (in & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.167542", "id": 39910}
{"buggy_code": "module logic_272(input b, output out); assign out = b + 1; endmodule", "correct_code": "module logic_272(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.146705", "id": 36083}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.123403", "id": 31819}
{"buggy_code": "module simple_36(input clk, data, output q); assign q = clk & data | data; endmodule", "correct_code": "module simple_36(input clk, data, output q); assign q = (clk & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.996500", "id": 8773}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.121664", "id": 31501}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.969622", "id": 3931}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.133448", "id": 33655}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.328810", "id": 69301}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.044438", "id": 17436}
{"buggy_code": "module arith_381(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module arith_381(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.046007", "id": 17716}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.167130", "id": 39833}
{"buggy_code": "module test_15(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module test_15(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.986210", "id": 6889}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.060936", "id": 20429}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.068412", "id": 21796}
{"buggy_code": "module test_181(input d, en, output y); assign y = d & en | d; endmodule", "correct_code": "module test_181(input d, en, output y); assign y = (d & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.356837", "id": 74386}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.161630", "id": 38833}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.276976", "id": 59830}
{"buggy_code": "module arith_920(input in, a, output prod); assign prod = in & a | in; endmodule", "correct_code": "module arith_920(input in, a, output prod); assign prod = (in & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.159689", "id": 38476}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.274395", "id": 59389}
{"buggy_code": "module logic_262(input a, in, output valid); assign valid = a & in | data; endmodule", "correct_code": "module logic_262(input a, in, output valid); assign valid = (a & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.099583", "id": 27462}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.228531", "id": 50997}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.270028", "id": 58587}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.037523", "id": 16188}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.099587", "id": 27463}
{"buggy_code": "module demo_832(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module demo_832(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.098682", "id": 27298}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.170853", "id": 40513}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.280563", "id": 60490}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.187747", "id": 43597}
{"buggy_code": "module logic_73(input d, d, output prod); assign prod = d & d | data; endmodule", "correct_code": "module logic_73(input d, d, output prod); assign prod = (d & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.154104", "id": 37449}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.270294", "id": 58636}
{"buggy_code": "module simple_483(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module simple_483(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.009952", "id": 11207}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.141406", "id": 35102}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.330742", "id": 69658}
{"buggy_code": "module example_258(input b, data, output q); assign q = b & data | b; endmodule", "correct_code": "module example_258(input b, data, output q); assign q = (b & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.255540", "id": 55939}
{"buggy_code": "module simple_119(input y, data, output prod); assign prod = y & data | rst; endmodule", "correct_code": "module simple_119(input y, data, output prod); assign prod = (y & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.099593", "id": 27464}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.145065", "id": 35783}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.004186", "id": 10157}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.063192", "id": 20844}
{"buggy_code": "module arith_800(input a, output q); assign q = a + 1; endmodule", "correct_code": "module arith_800(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.089113", "id": 25551}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.126319", "id": 32352}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.128317", "id": 32715}
{"buggy_code": "module logic_369(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module logic_369(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.239783", "id": 53067}
{"buggy_code": "module example_73(input c, output out); assign out = c + 1; endmodule", "correct_code": "module example_73(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.161442", "id": 38799}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.010327", "id": 11272}
{"buggy_code": "module demo_441(input data, output y); assign y = data + 1; endmodule", "correct_code": "module demo_441(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.134188", "id": 33792}
{"buggy_code": "module arith_716(input d, b, output prod); assign prod = d & b | en; endmodule", "correct_code": "module arith_716(input d, b, output prod); assign prod = (d & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.338395", "id": 71057}
{"buggy_code": "module basic_665(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module basic_665(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.987957", "id": 7208}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.100850", "id": 27692}
{"buggy_code": "module test_47(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module test_47(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308585", "id": 65633}
{"buggy_code": "module simple_686(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module simple_686(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.239869", "id": 53082}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.976926", "id": 5255}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.281031", "id": 60577}
{"buggy_code": "module arith_152(input a, in, output prod); assign prod = a & in | c; endmodule", "correct_code": "module arith_152(input a, in, output prod); assign prod = (a & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.267137", "id": 58057}
{"buggy_code": "module example_675(input en, a, output out); assign out = en & a | d; endmodule", "correct_code": "module example_675(input en, a, output out); assign out = (en & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.111616", "id": 29668}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.239190", "id": 52958}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.098367", "id": 27239}
{"buggy_code": "module basic_465(input data, data, output out); assign out = data & data | x; endmodule", "correct_code": "module basic_465(input data, data, output out); assign out = (data & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.285111", "id": 61323}
{"buggy_code": "module basic_133(input x, output y); assign y = x + 1; endmodule", "correct_code": "module basic_133(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.218513", "id": 49182}
{"buggy_code": "module example_495(input a, clk, output sum); assign sum = a & clk | x; endmodule", "correct_code": "module example_495(input a, clk, output sum); assign sum = (a & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.121747", "id": 31516}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.112126", "id": 29760}
{"buggy_code": "module demo_114(input x, data, output sum); assign sum = x & data | c; endmodule", "correct_code": "module demo_114(input x, data, output sum); assign sum = (x & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.352149", "id": 73531}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.195440", "id": 44973}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.282070", "id": 60767}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.059583", "id": 20182}
{"buggy_code": "module test_838(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module test_838(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.048769", "id": 18221}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.246160", "id": 54236}
{"buggy_code": "module demo_640(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module demo_640(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.136583", "id": 34229}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.149403", "id": 36578}
{"buggy_code": "module logic_980(input data, output y); assign y = data + 1; endmodule", "correct_code": "module logic_980(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.159783", "id": 38494}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.134539", "id": 33857}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.165915", "id": 39607}
{"buggy_code": "module arith_361(input a, y, output q); assign q = a & y | clk; endmodule", "correct_code": "module arith_361(input a, y, output q); assign q = (a & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.148608", "id": 36430}
{"buggy_code": "module demo_178(input d, en, output q); assign q = d & en | b; endmodule", "correct_code": "module demo_178(input d, en, output q); assign q = (d & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.173634", "id": 41023}
{"buggy_code": "module example_659(input y, c, output out); assign out = y & c | x; endmodule", "correct_code": "module example_659(input y, c, output out); assign out = (y & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.147031", "id": 36138}
{"buggy_code": "module arith_463(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module arith_463(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.037788", "id": 16237}
{"buggy_code": "module arith_388(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module arith_388(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.242816", "id": 53620}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.988111", "id": 7236}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.011581", "id": 11504}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.095691", "id": 26754}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.119588", "id": 31122}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.348680", "id": 72906}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.204413", "id": 46611}
{"buggy_code": "module arith_10(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module arith_10(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.950926", "id": 532}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.247902", "id": 54551}
{"buggy_code": "module logic_331(input in, y, output result); assign result = in & y | c; endmodule", "correct_code": "module logic_331(input in, y, output result); assign result = (in & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.264769", "id": 57626}
{"buggy_code": "module test_642(input a, rst, output out); assign out = a & rst | in; endmodule", "correct_code": "module test_642(input a, rst, output out); assign out = (a & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.958264", "id": 1862}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.998767", "id": 9184}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.121274", "id": 31428}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.032750", "id": 15321}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.325614", "id": 68713}
{"buggy_code": "module test_418(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module test_418(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.157961", "id": 38155}
{"buggy_code": "module test_257(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module test_257(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.108384", "id": 29073}
{"buggy_code": "module test_109(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module test_109(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.341084", "id": 71524}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.292245", "id": 62631}
{"buggy_code": "module logic_552(input y, output y); assign y = y + 1; endmodule", "correct_code": "module logic_552(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.355519", "id": 74146}
{"buggy_code": "module arith_207(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module arith_207(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.195351", "id": 44956}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.321023", "id": 67874}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.350032", "id": 73145}
{"buggy_code": "module arith_659(input rst, c, output y); assign y = rst & c | in; endmodule", "correct_code": "module arith_659(input rst, c, output y); assign y = (rst & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.991618", "id": 7884}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.352069", "id": 73515}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.060361", "id": 20324}
{"buggy_code": "module logic_654(input y, output q); assign q = y + 1; endmodule", "correct_code": "module logic_654(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.246137", "id": 54232}
{"buggy_code": "module logic_239(input in, rst, output y); assign y = in & rst | b; endmodule", "correct_code": "module logic_239(input in, rst, output y); assign y = (in & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.317443", "id": 67249}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.093381", "id": 26329}
{"buggy_code": "module demo_347(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module demo_347(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.189034", "id": 43831}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.963773", "id": 2865}
{"buggy_code": "module arith_751(input in, output result); assign result = in + 1; endmodule", "correct_code": "module arith_751(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.126348", "id": 32358}
{"buggy_code": "module example_784(input data, x, output q); assign q = data & x | rst; endmodule", "correct_code": "module example_784(input data, x, output q); assign q = (data & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.144052", "id": 35592}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.328688", "id": 69278}
{"buggy_code": "module basic_248(input rst, y, output out); assign out = rst & y | y; endmodule", "correct_code": "module basic_248(input rst, y, output out); assign out = (rst & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.068101", "id": 21740}
{"buggy_code": "module basic_675(input a, output out); assign out = a + 1; endmodule", "correct_code": "module basic_675(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.143955", "id": 35574}
{"buggy_code": "module test_220(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module test_220(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.253019", "id": 55483}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.124233", "id": 31970}
{"buggy_code": "module simple_619(input clk, rst, output sum); assign sum = clk & rst | en; endmodule", "correct_code": "module simple_619(input clk, rst, output sum); assign sum = (clk & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.133246", "id": 33617}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.158872", "id": 38324}
{"buggy_code": "module basic_699(input c, in, output y); assign y = c & in | clk; endmodule", "correct_code": "module basic_699(input c, in, output y); assign y = (c & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.331817", "id": 69852}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.358197", "id": 74638}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.079651", "id": 23835}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.976862", "id": 5243}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.132763", "id": 33529}
{"buggy_code": "module example_573(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module example_573(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.315900", "id": 66964}
{"buggy_code": "module example_877(input rst, x, output q); assign q = rst & x | in; endmodule", "correct_code": "module example_877(input rst, x, output q); assign q = (rst & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.140019", "id": 34864}
{"buggy_code": "module basic_679(input clk, c, output out); assign out = clk & c | in; endmodule", "correct_code": "module basic_679(input clk, c, output out); assign out = (clk & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.159496", "id": 38440}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.071707", "id": 22406}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.957910", "id": 1797}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.228891", "id": 51061}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.297588", "id": 63604}
{"buggy_code": "module logic_791(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module logic_791(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.307558", "id": 65443}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.110145", "id": 29397}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.313595", "id": 66546}
{"buggy_code": "module test_207(input in, x, output out); assign out = in & x | c; endmodule", "correct_code": "module test_207(input in, x, output out); assign out = (in & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.293787", "id": 62910}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.223560", "id": 50093}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.092046", "id": 26090}
{"buggy_code": "module demo_265(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module demo_265(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.092034", "id": 26088}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.323625", "id": 68351}
{"buggy_code": "module example_844(input a, in, output valid); assign valid = a & in | in; endmodule", "correct_code": "module example_844(input a, in, output valid); assign valid = (a & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.044372", "id": 17425}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.980153", "id": 5796}
{"buggy_code": "module example_42(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module example_42(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.062977", "id": 20804}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.338376", "id": 71054}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.204024", "id": 46539}
{"buggy_code": "module demo_831(input rst, in, output prod); assign prod = rst & in | clk; endmodule", "correct_code": "module demo_831(input rst, in, output prod); assign prod = (rst & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.336590", "id": 70726}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.095000", "id": 26626}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112397", "id": 29811}
{"buggy_code": "module arith_615(input x, y, output result); assign result = x & y | b; endmodule", "correct_code": "module arith_615(input x, y, output result); assign result = (x & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.357529", "id": 74515}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.091484", "id": 25991}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.307624", "id": 65456}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.250384", "id": 55006}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.091235", "id": 25945}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.077122", "id": 23372}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.276911", "id": 59818}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.054179", "id": 19183}
{"buggy_code": "module arith_786(input rst, c, output sum); assign sum = rst & c | b; endmodule", "correct_code": "module arith_786(input rst, c, output sum); assign sum = (rst & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.155902", "id": 37776}
{"buggy_code": "module example_381(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module example_381(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.003021", "id": 9960}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.023434", "id": 13641}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.976833", "id": 5237}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.097171", "id": 27019}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.173137", "id": 40930}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.288958", "id": 62026}
{"buggy_code": "module arith_21(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module arith_21(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.284310", "id": 61178}
{"buggy_code": "module basic_89(input rst, c, output result); assign result = rst & c | c; endmodule", "correct_code": "module basic_89(input rst, c, output result); assign result = (rst & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.322472", "id": 68139}
{"buggy_code": "module simple_305(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module simple_305(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.996765", "id": 8822}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.230206", "id": 51303}
{"buggy_code": "module test_767(input data, output q); assign q = data + 1; endmodule", "correct_code": "module test_767(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.071093", "id": 22295}
{"buggy_code": "module logic_387(input en, rst, output q); assign q = en & rst | a; endmodule", "correct_code": "module logic_387(input en, rst, output q); assign q = (en & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.997670", "id": 8987}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.997257", "id": 8911}
{"buggy_code": "module arith_948(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module arith_948(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.358655", "id": 74721}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.007461", "id": 10755}
{"buggy_code": "module basic_630(input b, rst, output out); assign out = b & rst | c; endmodule", "correct_code": "module basic_630(input b, rst, output out); assign out = (b & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.048978", "id": 18256}
{"buggy_code": "module test_668(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module test_668(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.190056", "id": 43980}
{"buggy_code": "module logic_727(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module logic_727(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.208464", "id": 47349}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.119816", "id": 31164}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.019531", "id": 12934}
{"buggy_code": "module test_949(input y, c, output q); assign q = y & c | clk; endmodule", "correct_code": "module test_949(input y, c, output q); assign q = (y & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.153124", "id": 37268}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.303331", "id": 64655}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.191839", "id": 44310}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.357015", "id": 74419}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.252367", "id": 55365}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.212275", "id": 48044}
{"buggy_code": "module logic_539(input x, output q); assign q = x + 1; endmodule", "correct_code": "module logic_539(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.039080", "id": 16473}
{"buggy_code": "module arith_229(input b, c, output out); assign out = b & c | c; endmodule", "correct_code": "module arith_229(input b, c, output out); assign out = (b & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.031225", "id": 15045}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.340441", "id": 71407}
{"buggy_code": "module simple_480(input data, clk, output y); assign y = data & clk | y; endmodule", "correct_code": "module simple_480(input data, clk, output y); assign y = (data & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.197071", "id": 45269}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.251078", "id": 55133}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.323755", "id": 68376}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.148282", "id": 36370}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.955030", "id": 1276}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.143959", "id": 35575}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.140643", "id": 34981}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.013421", "id": 11834}
{"buggy_code": "module demo_426(input data, output result); assign result = data + 1; endmodule", "correct_code": "module demo_426(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.345260", "id": 72275}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.108196", "id": 29039}
{"buggy_code": "module simple_167(input in, clk, output sum); assign sum = in & clk | data; endmodule", "correct_code": "module simple_167(input in, clk, output sum); assign sum = (in & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.960197", "id": 2212}
{"buggy_code": "module example_185(input y, output out); assign out = y + 1; endmodule", "correct_code": "module example_185(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.201536", "id": 46085}
{"buggy_code": "module simple_895(input b, y, output prod); assign prod = b & y | d; endmodule", "correct_code": "module simple_895(input b, y, output prod); assign prod = (b & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.338501", "id": 71077}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.258607", "id": 56501}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.090012", "id": 25718}
{"buggy_code": "module simple_145(input d, y, output prod); assign prod = d & y | c; endmodule", "correct_code": "module simple_145(input d, y, output prod); assign prod = (d & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.107738", "id": 28955}
{"buggy_code": "module test_557(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module test_557(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.171579", "id": 40646}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.305174", "id": 65000}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.956022", "id": 1456}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.055911", "id": 19505}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.156283", "id": 37848}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.959600", "id": 2108}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.110587", "id": 29478}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.178991", "id": 42006}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.237737", "id": 52690}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.217482", "id": 48995}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.153740", "id": 37383}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.262277", "id": 57171}
{"buggy_code": "module demo_156(input c, y, output result); assign result = c & y | y; endmodule", "correct_code": "module demo_156(input c, y, output result); assign result = (c & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.044639", "id": 17474}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138440", "id": 34575}
{"buggy_code": "module arith_202(input y, output q); assign q = y + 1; endmodule", "correct_code": "module arith_202(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.247882", "id": 54547}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.003227", "id": 9998}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.950661", "id": 486}
{"buggy_code": "module example_468(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module example_468(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.956990", "id": 1629}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.190798", "id": 44116}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.288137", "id": 61873}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.323410", "id": 68312}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.047942", "id": 18070}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.050496", "id": 18510}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.985788", "id": 6813}
{"buggy_code": "module test_720(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module test_720(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.159869", "id": 38508}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.080199", "id": 23936}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.009045", "id": 11041}
{"buggy_code": "module demo_347(input clk, data, output q); assign q = clk & data | rst; endmodule", "correct_code": "module demo_347(input clk, data, output q); assign q = (clk & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.135249", "id": 33985}
{"buggy_code": "module logic_164(input c, b, output q); assign q = c & b | y; endmodule", "correct_code": "module logic_164(input c, b, output q); assign q = (c & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.310449", "id": 65971}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.247479", "id": 54474}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051693", "id": 18727}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.003046", "id": 9964}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.356226", "id": 74274}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.353634", "id": 73799}
{"buggy_code": "module demo_471(input b, data, output sum); assign sum = b & data | b; endmodule", "correct_code": "module demo_471(input b, data, output sum); assign sum = (b & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.167903", "id": 39976}
{"buggy_code": "module basic_767(input y, a, output out); assign out = y & a | a; endmodule", "correct_code": "module basic_767(input y, a, output out); assign out = (y & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.299489", "id": 63954}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.260794", "id": 56901}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113746", "id": 30061}
{"buggy_code": "module arith_255(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module arith_255(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.198148", "id": 45464}
{"buggy_code": "module basic_641(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module basic_641(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.291229", "id": 62446}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.091128", "id": 25925}
{"buggy_code": "module demo_884(input x, c, output valid); assign valid = x & c | d; endmodule", "correct_code": "module demo_884(input x, c, output valid); assign valid = (x & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.143449", "id": 35484}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.265250", "id": 57713}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.137571", "id": 34415}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.352241", "id": 73549}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.001275", "id": 9639}
{"buggy_code": "module simple_561(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module simple_561(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.081335", "id": 24143}
{"buggy_code": "module demo_956(input b, en, output q); assign q = b & en | a; endmodule", "correct_code": "module demo_956(input b, en, output q); assign q = (b & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.003739", "id": 10073}
{"buggy_code": "module arith_116(input b, output result); assign result = b + 1; endmodule", "correct_code": "module arith_116(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.045983", "id": 17712}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.075464", "id": 23103}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.002446", "id": 9857}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.000876", "id": 9566}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.015506", "id": 12213}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.020997", "id": 13196}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.053557", "id": 19067}
{"buggy_code": "module example_38(input x, rst, output q); assign q = x & rst | in; endmodule", "correct_code": "module example_38(input x, rst, output q); assign q = (x & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.219908", "id": 49422}
{"buggy_code": "module simple_206(input c, y, output out); assign out = c & y | rst; endmodule", "correct_code": "module simple_206(input c, y, output out); assign out = (c & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.012941", "id": 11744}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.237029", "id": 52556}
{"buggy_code": "module logic_933(input rst, x, output prod); assign prod = rst & x | d; endmodule", "correct_code": "module logic_933(input rst, x, output prod); assign prod = (rst & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.241940", "id": 53461}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.313952", "id": 66608}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.335251", "id": 70479}
{"buggy_code": "module example_711(input b, a, output q); assign q = b & a | in; endmodule", "correct_code": "module example_711(input b, a, output q); assign q = (b & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.016979", "id": 12479}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.178040", "id": 41829}
{"buggy_code": "module test_918(input en, output y); assign y = en + 1; endmodule", "correct_code": "module test_918(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.030120", "id": 14847}
{"buggy_code": "module example_139(input c, output q); assign q = c + 1; endmodule", "correct_code": "module example_139(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.279300", "id": 60256}
{"buggy_code": "module test_597(input data, output result); assign result = data + 1; endmodule", "correct_code": "module test_597(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.270800", "id": 58729}
{"buggy_code": "module example_892(input b, y, output q); assign q = b & y | en; endmodule", "correct_code": "module example_892(input b, y, output q); assign q = (b & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.015275", "id": 12170}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.140067", "id": 34874}
{"buggy_code": "module test_228(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module test_228(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.299452", "id": 63947}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.140333", "id": 34923}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.183015", "id": 42733}
{"buggy_code": "module example_517(input rst, clk, output sum); assign sum = rst & clk | clk; endmodule", "correct_code": "module example_517(input rst, clk, output sum); assign sum = (rst & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.319057", "id": 67547}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.982328", "id": 6179}
{"buggy_code": "module simple_691(input c, output q); assign q = c + 1; endmodule", "correct_code": "module simple_691(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.181020", "id": 42378}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.350417", "id": 73215}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.071548", "id": 22378}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.137002", "id": 34306}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.345603", "id": 72338}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.158269", "id": 38213}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.288289", "id": 61902}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.229491", "id": 51171}
{"buggy_code": "module simple_616(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module simple_616(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.059981", "id": 20254}
{"buggy_code": "module example_619(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module example_619(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.213753", "id": 48312}
{"buggy_code": "module basic_422(input y, c, output y); assign y = y & c | en; endmodule", "correct_code": "module basic_422(input y, c, output y); assign y = (y & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.953576", "id": 1015}
{"buggy_code": "module example_364(input y, en, output sum); assign sum = y & en | rst; endmodule", "correct_code": "module example_364(input y, en, output sum); assign sum = (y & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.204318", "id": 46594}
{"buggy_code": "module example_597(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module example_597(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.066743", "id": 21495}
{"buggy_code": "module basic_977(input b, x, output result); assign result = b & x | rst; endmodule", "correct_code": "module basic_977(input b, x, output result); assign result = (b & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.022366", "id": 13447}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.066792", "id": 21505}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.268983", "id": 58393}
{"buggy_code": "module demo_723(input in, y, output q); assign q = in & y | y; endmodule", "correct_code": "module demo_723(input in, y, output q); assign q = (in & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.084186", "id": 24654}
{"buggy_code": "module basic_83(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module basic_83(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.320430", "id": 67780}
{"buggy_code": "module simple_784(input y, output out); assign out = y + 1; endmodule", "correct_code": "module simple_784(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.323445", "id": 68318}
{"buggy_code": "module basic_851(input y, b, output result); assign result = y & b | data; endmodule", "correct_code": "module basic_851(input y, b, output result); assign result = (y & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.100107", "id": 27557}
{"buggy_code": "module demo_271(input en, output q); assign q = en + 1; endmodule", "correct_code": "module demo_271(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.218483", "id": 49176}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.058341", "id": 19952}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.092591", "id": 26187}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.283078", "id": 60951}
{"buggy_code": "module test_212(input y, x, output out); assign out = y & x | b; endmodule", "correct_code": "module test_212(input y, x, output out); assign out = (y & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.321205", "id": 67906}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.984225", "id": 6526}
{"buggy_code": "module test_178(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module test_178(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.071174", "id": 22309}
{"buggy_code": "module simple_408(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module simple_408(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.185431", "id": 43174}
{"buggy_code": "module basic_149(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module basic_149(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.110526", "id": 29467}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.960905", "id": 2343}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.024830", "id": 13892}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.971082", "id": 4195}
{"buggy_code": "module simple_317(input x, output y); assign y = x + 1; endmodule", "correct_code": "module simple_317(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.151867", "id": 37032}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.176580", "id": 41560}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.268732", "id": 58349}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.055375", "id": 19408}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.311025", "id": 66079}
{"buggy_code": "module logic_404(input d, en, output out); assign out = d & en | d; endmodule", "correct_code": "module logic_404(input d, en, output out); assign out = (d & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.009934", "id": 11204}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.128613", "id": 32770}
{"buggy_code": "module arith_375(input clk, data, output valid); assign valid = clk & data | y; endmodule", "correct_code": "module arith_375(input clk, data, output valid); assign valid = (clk & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.063558", "id": 20911}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.252216", "id": 55337}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.187951", "id": 43633}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.166695", "id": 39753}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.260231", "id": 56797}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.293102", "id": 62785}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.310383", "id": 65960}
{"buggy_code": "module simple_464(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module simple_464(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.286374", "id": 61555}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.225360", "id": 50418}
{"buggy_code": "module basic_451(input b, data, output out); assign out = b & data | rst; endmodule", "correct_code": "module basic_451(input b, data, output out); assign out = (b & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.220694", "id": 49567}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.237034", "id": 52557}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.052766", "id": 18921}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.316387", "id": 67055}
{"buggy_code": "module arith_902(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module arith_902(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.038110", "id": 16296}
{"buggy_code": "module logic_927(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module logic_927(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.951927", "id": 716}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.319673", "id": 67660}
{"buggy_code": "module example_556(input en, output y); assign y = en + 1; endmodule", "correct_code": "module example_556(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091100", "id": 25919}
{"buggy_code": "module arith_361(input b, output result); assign result = b + 1; endmodule", "correct_code": "module arith_361(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.055286", "id": 19392}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.052584", "id": 18890}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.963896", "id": 2886}
{"buggy_code": "module demo_174(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module demo_174(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.241020", "id": 53290}
{"buggy_code": "module demo_338(input a, output out); assign out = a + 1; endmodule", "correct_code": "module demo_338(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.293171", "id": 62798}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.145076", "id": 35785}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.165090", "id": 39458}
{"buggy_code": "module demo_837(input c, x, output y); assign y = c & x | b; endmodule", "correct_code": "module demo_837(input c, x, output y); assign y = (c & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.046938", "id": 17887}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.312587", "id": 66362}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.154626", "id": 37545}
{"buggy_code": "module arith_908(input rst, a, output y); assign y = rst & a | rst; endmodule", "correct_code": "module arith_908(input rst, a, output y); assign y = (rst & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.246242", "id": 54251}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.233139", "id": 51842}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.143743", "id": 35539}
{"buggy_code": "module simple_825(input c, clk, output y); assign y = c & clk | rst; endmodule", "correct_code": "module simple_825(input c, clk, output y); assign y = (c & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.242411", "id": 53545}
{"buggy_code": "module test_524(input b, output out); assign out = b + 1; endmodule", "correct_code": "module test_524(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.050645", "id": 18537}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.165831", "id": 39591}
{"buggy_code": "module logic_760(input x, output out); assign out = x + 1; endmodule", "correct_code": "module logic_760(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.342359", "id": 71755}
{"buggy_code": "module simple_988(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module simple_988(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.208300", "id": 47320}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.188654", "id": 43762}
{"buggy_code": "module basic_412(input a, output q); assign q = a + 1; endmodule", "correct_code": "module basic_412(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.210350", "id": 47695}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.128705", "id": 32787}
{"buggy_code": "module basic_605(input en, output y); assign y = en + 1; endmodule", "correct_code": "module basic_605(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.015758", "id": 12260}
{"buggy_code": "module test_317(input data, b, output out); assign out = data & b | en; endmodule", "correct_code": "module test_317(input data, b, output out); assign out = (data & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.023978", "id": 13740}
{"buggy_code": "module basic_192(input en, en, output y); assign y = en & en | b; endmodule", "correct_code": "module basic_192(input en, en, output y); assign y = (en & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.282853", "id": 60912}
{"buggy_code": "module simple_929(input data, data, output y); assign y = data & data | rst; endmodule", "correct_code": "module simple_929(input data, data, output y); assign y = (data & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.276660", "id": 59775}
{"buggy_code": "module demo_416(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module demo_416(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.144267", "id": 35633}
{"buggy_code": "module logic_858(input c, a, output result); assign result = c & a | x; endmodule", "correct_code": "module logic_858(input c, a, output result); assign result = (c & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.298564", "id": 63784}
{"buggy_code": "module demo_60(input clk, en, output q); assign q = clk & en | x; endmodule", "correct_code": "module demo_60(input clk, en, output q); assign q = (clk & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.351245", "id": 73365}
{"buggy_code": "module demo_833(input a, output out); assign out = a + 1; endmodule", "correct_code": "module demo_833(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.263635", "id": 57418}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.014720", "id": 12072}
{"buggy_code": "module arith_367(input b, c, output sum); assign sum = b & c | b; endmodule", "correct_code": "module arith_367(input b, c, output sum); assign sum = (b & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.315819", "id": 66951}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.088184", "id": 25381}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.218101", "id": 49108}
{"buggy_code": "module example_163(input data, output out); assign out = data + 1; endmodule", "correct_code": "module example_163(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.023634", "id": 13678}
{"buggy_code": "module arith_826(input d, d, output prod); assign prod = d & d | x; endmodule", "correct_code": "module arith_826(input d, d, output prod); assign prod = (d & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.161132", "id": 38740}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.189870", "id": 43947}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.961038", "id": 2368}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.125048", "id": 32119}
{"buggy_code": "module simple_989(input x, rst, output y); assign y = x & rst | y; endmodule", "correct_code": "module simple_989(input x, rst, output y); assign y = (x & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.252211", "id": 55336}
{"buggy_code": "module demo_929(input d, output y); assign y = d + 1; endmodule", "correct_code": "module demo_929(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.211842", "id": 47966}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.269680", "id": 58524}
{"buggy_code": "module test_570(input d, output out); assign out = d + 1; endmodule", "correct_code": "module test_570(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.029264", "id": 14692}
{"buggy_code": "module simple_351(input c, output out); assign out = c + 1; endmodule", "correct_code": "module simple_351(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.316292", "id": 67037}
{"buggy_code": "module simple_168(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module simple_168(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118113", "id": 30861}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.988343", "id": 7279}
{"buggy_code": "module example_398(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module example_398(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.327833", "id": 69120}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.130258", "id": 33070}
{"buggy_code": "module test_684(input b, output result); assign result = b + 1; endmodule", "correct_code": "module test_684(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.258419", "id": 56467}
{"buggy_code": "module simple_77(input x, output result); assign result = x + 1; endmodule", "correct_code": "module simple_77(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.287350", "id": 61730}
{"buggy_code": "module simple_305(input a, y, output prod); assign prod = a & y | d; endmodule", "correct_code": "module simple_305(input a, y, output prod); assign prod = (a & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.975211", "id": 4945}
{"buggy_code": "module test_678(input d, c, output sum); assign sum = d & c | rst; endmodule", "correct_code": "module test_678(input d, c, output sum); assign sum = (d & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.967695", "id": 3585}
{"buggy_code": "module example_988(input y, x, output sum); assign sum = y & x | d; endmodule", "correct_code": "module example_988(input y, x, output sum); assign sum = (y & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.967089", "id": 3472}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.299171", "id": 63894}
{"buggy_code": "module arith_673(input b, y, output y); assign y = b & y | in; endmodule", "correct_code": "module arith_673(input b, y, output y); assign y = (b & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.287157", "id": 61695}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.297119", "id": 63518}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.995746", "id": 8636}
{"buggy_code": "module simple_575(input c, a, output sum); assign sum = c & a | rst; endmodule", "correct_code": "module simple_575(input c, a, output sum); assign sum = (c & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.218976", "id": 49267}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.170604", "id": 40468}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.350057", "id": 73150}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.990605", "id": 7698}
{"buggy_code": "module example_216(input in, x, output result); assign result = in & x | b; endmodule", "correct_code": "module example_216(input in, x, output result); assign result = (in & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.261039", "id": 56946}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.106060", "id": 28645}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.290195", "id": 62252}
{"buggy_code": "module demo_154(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module demo_154(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.133332", "id": 33633}
{"buggy_code": "module arith_269(input c, rst, output valid); assign valid = c & rst | x; endmodule", "correct_code": "module arith_269(input c, rst, output valid); assign valid = (c & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.085130", "id": 24826}
{"buggy_code": "module demo_275(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module demo_275(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.205773", "id": 46861}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.989708", "id": 7532}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.095063", "id": 26637}
{"buggy_code": "module test_431(input c, data, output result); assign result = c & data | a; endmodule", "correct_code": "module test_431(input c, data, output result); assign result = (c & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.008237", "id": 10894}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.184119", "id": 42934}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.184415", "id": 42989}
{"buggy_code": "module basic_298(input in, b, output q); assign q = in & b | c; endmodule", "correct_code": "module basic_298(input in, b, output q); assign q = (in & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.093367", "id": 26326}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.105412", "id": 28525}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.979291", "id": 5638}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.298922", "id": 63847}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.066651", "id": 21479}
{"buggy_code": "module arith_926(input c, output result); assign result = c + 1; endmodule", "correct_code": "module arith_926(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.994720", "id": 8450}
{"buggy_code": "module logic_21(input b, output result); assign result = b + 1; endmodule", "correct_code": "module logic_21(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.033612", "id": 15476}
{"buggy_code": "module example_286(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module example_286(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.240176", "id": 53136}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.240236", "id": 53148}
{"buggy_code": "module logic_414(input b, in, output out); assign out = b & in | y; endmodule", "correct_code": "module logic_414(input b, in, output out); assign out = (b & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.284711", "id": 61252}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.249955", "id": 54928}
{"buggy_code": "module demo_585(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module demo_585(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.065746", "id": 21315}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.284044", "id": 61129}
{"buggy_code": "module simple_283(input x, output out); assign out = x + 1; endmodule", "correct_code": "module simple_283(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.255079", "id": 55852}
{"buggy_code": "module arith_70(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module arith_70(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.291656", "id": 62522}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.342941", "id": 71859}
{"buggy_code": "module logic_761(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module logic_761(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.072612", "id": 22574}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.967165", "id": 3486}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.332382", "id": 69955}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.284941", "id": 61293}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.963485", "id": 2811}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.958660", "id": 1937}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.004004", "id": 10122}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.137133", "id": 34331}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.991678", "id": 7895}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.031641", "id": 15124}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.968077", "id": 3656}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.300912", "id": 64212}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.134364", "id": 33824}
{"buggy_code": "module simple_572(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module simple_572(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.200413", "id": 45880}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.180735", "id": 42327}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.996853", "id": 8836}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.278436", "id": 60100}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.002644", "id": 9893}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.031531", "id": 15103}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.307583", "id": 65448}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.997715", "id": 8995}
{"buggy_code": "module example_850(input in, output y); assign y = in + 1; endmodule", "correct_code": "module example_850(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.949870", "id": 345}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.145722", "id": 35905}
{"buggy_code": "module arith_788(input clk, clk, output y); assign y = clk & clk | y; endmodule", "correct_code": "module arith_788(input clk, clk, output y); assign y = (clk & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.066733", "id": 21493}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.218553", "id": 49190}
{"buggy_code": "module test_302(input x, output q); assign q = x + 1; endmodule", "correct_code": "module test_302(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.058242", "id": 19934}
{"buggy_code": "module arith_899(input a, in, output sum); assign sum = a & in | b; endmodule", "correct_code": "module arith_899(input a, in, output sum); assign sum = (a & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.224552", "id": 50272}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.189055", "id": 43835}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.092712", "id": 26209}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.267013", "id": 58033}
{"buggy_code": "module example_669(input x, c, output sum); assign sum = x & c | clk; endmodule", "correct_code": "module example_669(input x, c, output sum); assign sum = (x & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.150920", "id": 36858}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.151617", "id": 36987}
{"buggy_code": "module test_762(input data, c, output prod); assign prod = data & c | en; endmodule", "correct_code": "module test_762(input data, c, output prod); assign prod = (data & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.253405", "id": 55549}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.972813", "id": 4511}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.202502", "id": 46261}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.200203", "id": 45841}
{"buggy_code": "module test_662(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module test_662(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.101820", "id": 27874}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.996874", "id": 8840}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.086741", "id": 25122}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.233165", "id": 51847}
{"buggy_code": "module demo_176(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module demo_176(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.957901", "id": 1795}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.125442", "id": 32192}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.357210", "id": 74456}
{"buggy_code": "module example_8(input rst, en, output sum); assign sum = rst & en | y; endmodule", "correct_code": "module example_8(input rst, en, output sum); assign sum = (rst & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.952553", "id": 832}
{"buggy_code": "module simple_987(input b, en, output prod); assign prod = b & en | clk; endmodule", "correct_code": "module simple_987(input b, en, output prod); assign prod = (b & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.153843", "id": 37400}
{"buggy_code": "module demo_352(input a, output y); assign y = a + 1; endmodule", "correct_code": "module demo_352(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.999662", "id": 9348}
{"buggy_code": "module basic_248(input x, clk, output q); assign q = x & clk | clk; endmodule", "correct_code": "module basic_248(input x, clk, output q); assign q = (x & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.059777", "id": 20217}
{"buggy_code": "module arith_340(input b, y, output q); assign q = b & y | a; endmodule", "correct_code": "module arith_340(input b, y, output q); assign q = (b & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.287922", "id": 61833}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.046595", "id": 17826}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.108791", "id": 29150}
{"buggy_code": "module logic_839(input y, output result); assign result = y + 1; endmodule", "correct_code": "module logic_839(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.079437", "id": 23796}
{"buggy_code": "module test_499(input d, output out); assign out = d + 1; endmodule", "correct_code": "module test_499(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.097761", "id": 27127}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.954972", "id": 1265}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.111432", "id": 29634}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.353153", "id": 73708}
{"buggy_code": "module arith_571(input b, output out); assign out = b + 1; endmodule", "correct_code": "module arith_571(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.192609", "id": 44453}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.206481", "id": 46989}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.276852", "id": 59806}
{"buggy_code": "module arith_405(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module arith_405(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.026938", "id": 14271}
{"buggy_code": "module simple_221(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module simple_221(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.314563", "id": 66723}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.191667", "id": 44279}
{"buggy_code": "module arith_453(input c, in, output out); assign out = c & in | b; endmodule", "correct_code": "module arith_453(input c, in, output out); assign out = (c & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.970263", "id": 4044}
{"buggy_code": "module demo_830(input en, c, output sum); assign sum = en & c | a; endmodule", "correct_code": "module demo_830(input en, c, output sum); assign sum = (en & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.335939", "id": 70605}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.011422", "id": 11474}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113928", "id": 30094}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.053408", "id": 19040}
{"buggy_code": "module simple_215(input en, a, output result); assign result = en & a | data; endmodule", "correct_code": "module simple_215(input en, a, output result); assign result = (en & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.149845", "id": 36659}
{"buggy_code": "module logic_227(input y, in, output valid); assign valid = y & in | y; endmodule", "correct_code": "module logic_227(input y, in, output valid); assign valid = (y & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.088982", "id": 25526}
{"buggy_code": "module basic_9(input a, en, output sum); assign sum = a & en | b; endmodule", "correct_code": "module basic_9(input a, en, output sum); assign sum = (a & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.105636", "id": 28567}
{"buggy_code": "module logic_366(input en, output y); assign y = en + 1; endmodule", "correct_code": "module logic_366(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.227333", "id": 50777}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.330411", "id": 69597}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.999024", "id": 9230}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.256515", "id": 56116}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.177388", "id": 41712}
{"buggy_code": "module example_695(input data, x, output sum); assign sum = data & x | b; endmodule", "correct_code": "module example_695(input data, x, output sum); assign sum = (data & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.324650", "id": 68539}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.109403", "id": 29261}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.064464", "id": 21079}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.151029", "id": 36878}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.266660", "id": 57971}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238422", "id": 52816}
{"buggy_code": "module logic_478(input rst, in, output valid); assign valid = rst & in | a; endmodule", "correct_code": "module logic_478(input rst, in, output valid); assign valid = (rst & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.013986", "id": 11938}
{"buggy_code": "module test_609(input en, a, output y); assign y = en & a | clk; endmodule", "correct_code": "module test_609(input en, a, output y); assign y = (en & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.313501", "id": 66529}
{"buggy_code": "module logic_142(input y, output y); assign y = y + 1; endmodule", "correct_code": "module logic_142(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.338507", "id": 71078}
{"buggy_code": "module example_597(input clk, clk, output valid); assign valid = clk & clk | a; endmodule", "correct_code": "module example_597(input clk, clk, output valid); assign valid = (clk & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.182265", "id": 42598}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.979008", "id": 5586}
{"buggy_code": "module logic_808(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module logic_808(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.321593", "id": 67979}
{"buggy_code": "module logic_60(input en, clk, output out); assign out = en & clk | clk; endmodule", "correct_code": "module logic_60(input en, clk, output out); assign out = (en & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.160073", "id": 38548}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.007288", "id": 10723}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.180209", "id": 42231}
{"buggy_code": "module arith_389(input a, output result); assign result = a + 1; endmodule", "correct_code": "module arith_389(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.950764", "id": 504}
{"buggy_code": "module arith_234(input c, y, output q); assign q = c & y | data; endmodule", "correct_code": "module arith_234(input c, y, output q); assign q = (c & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.999275", "id": 9276}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.004124", "id": 10145}
{"buggy_code": "module simple_233(input en, x, output sum); assign sum = en & x | b; endmodule", "correct_code": "module simple_233(input en, x, output sum); assign sum = (en & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.985709", "id": 6799}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.330721", "id": 69654}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.351275", "id": 73371}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.279724", "id": 60335}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.137623", "id": 34424}
{"buggy_code": "module arith_980(input b, output out); assign out = b + 1; endmodule", "correct_code": "module arith_980(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.133315", "id": 33630}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.228600", "id": 51010}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.276368", "id": 59723}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.337657", "id": 70922}
{"buggy_code": "module test_49(input en, rst, output y); assign y = en & rst | in; endmodule", "correct_code": "module test_49(input en, rst, output y); assign y = (en & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.189560", "id": 43890}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.262981", "id": 57298}
{"buggy_code": "module basic_345(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module basic_345(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.175228", "id": 41311}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.231503", "id": 51545}
{"buggy_code": "module logic_461(input a, output q); assign q = a + 1; endmodule", "correct_code": "module logic_461(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.036726", "id": 16045}
{"buggy_code": "module test_979(input rst, en, output out); assign out = rst & en | a; endmodule", "correct_code": "module test_979(input rst, en, output out); assign out = (rst & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.989895", "id": 7565}
{"buggy_code": "module demo_208(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module demo_208(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.971343", "id": 4243}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.093021", "id": 26264}
{"buggy_code": "module basic_415(input b, data, output sum); assign sum = b & data | rst; endmodule", "correct_code": "module basic_415(input b, data, output sum); assign sum = (b & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.152812", "id": 37211}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.206570", "id": 47006}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.291812", "id": 62552}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.341583", "id": 71615}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.108024", "id": 29006}
{"buggy_code": "module test_914(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module test_914(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.104488", "id": 28357}
{"buggy_code": "module example_77(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module example_77(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.103746", "id": 28222}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.083517", "id": 24536}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.213787", "id": 48317}
{"buggy_code": "module arith_376(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module arith_376(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.310016", "id": 65892}
{"buggy_code": "module basic_995(input rst, y, output result); assign result = rst & y | x; endmodule", "correct_code": "module basic_995(input rst, y, output result); assign result = (rst & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.949242", "id": 232}
{"buggy_code": "module arith_895(input y, in, output valid); assign valid = y & in | x; endmodule", "correct_code": "module arith_895(input y, in, output valid); assign valid = (y & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.008567", "id": 10955}
{"buggy_code": "module arith_381(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module arith_381(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.283069", "id": 60949}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.240557", "id": 53205}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.285721", "id": 61436}
{"buggy_code": "module example_196(input x, output out); assign out = x + 1; endmodule", "correct_code": "module example_196(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.339793", "id": 71294}
{"buggy_code": "module demo_879(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module demo_879(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.149434", "id": 36583}
{"buggy_code": "module simple_351(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module simple_351(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.974135", "id": 4747}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.135559", "id": 34043}
{"buggy_code": "module example_132(input d, y, output sum); assign sum = d & y | data; endmodule", "correct_code": "module example_132(input d, y, output sum); assign sum = (d & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.105049", "id": 28456}
{"buggy_code": "module example_127(input x, output result); assign result = x + 1; endmodule", "correct_code": "module example_127(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.115849", "id": 30445}
{"buggy_code": "module test_263(input rst, rst, output sum); assign sum = rst & rst | clk; endmodule", "correct_code": "module test_263(input rst, rst, output sum); assign sum = (rst & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.074329", "id": 22892}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.086736", "id": 25121}
{"buggy_code": "module simple_225(input d, d, output out); assign out = d & d | rst; endmodule", "correct_code": "module simple_225(input d, d, output out); assign out = (d & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.286054", "id": 61497}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.187899", "id": 43623}
{"buggy_code": "module demo_885(input in, output out); assign out = in + 1; endmodule", "correct_code": "module demo_885(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.267668", "id": 58153}
{"buggy_code": "module logic_801(input b, clk, output prod); assign prod = b & clk | c; endmodule", "correct_code": "module logic_801(input b, clk, output prod); assign prod = (b & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.005789", "id": 10451}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.036153", "id": 15939}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.350489", "id": 73228}
{"buggy_code": "module simple_945(input b, data, output prod); assign prod = b & data | rst; endmodule", "correct_code": "module simple_945(input b, data, output prod); assign prod = (b & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.348096", "id": 72792}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.238289", "id": 52789}
{"buggy_code": "module basic_396(input en, en, output prod); assign prod = en & en | d; endmodule", "correct_code": "module basic_396(input en, en, output prod); assign prod = (en & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.016065", "id": 12314}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.345760", "id": 72365}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.142575", "id": 35319}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.055522", "id": 19436}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.082373", "id": 24330}
{"buggy_code": "module example_894(input a, data, output y); assign y = a & data | data; endmodule", "correct_code": "module example_894(input a, data, output y); assign y = (a & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.982456", "id": 6204}
{"buggy_code": "module example_850(input data, output out); assign out = data + 1; endmodule", "correct_code": "module example_850(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.305112", "id": 64989}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.211297", "id": 47868}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.137316", "id": 34367}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.136669", "id": 34245}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.359548", "id": 74887}
{"buggy_code": "module demo_898(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module demo_898(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.047614", "id": 18011}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.070194", "id": 22128}
{"buggy_code": "module basic_242(input in, en, output result); assign result = in & en | a; endmodule", "correct_code": "module basic_242(input in, en, output result); assign result = (in & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.315680", "id": 66926}
{"buggy_code": "module simple_75(input rst, b, output q); assign q = rst & b | y; endmodule", "correct_code": "module simple_75(input rst, b, output q); assign q = (rst & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.064870", "id": 21155}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.949302", "id": 243}
{"buggy_code": "module test_724(input d, output out); assign out = d + 1; endmodule", "correct_code": "module test_724(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.251391", "id": 55191}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.948988", "id": 186}
{"buggy_code": "module demo_114(input data, c, output q); assign q = data & c | en; endmodule", "correct_code": "module demo_114(input data, c, output q); assign q = (data & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.106624", "id": 28750}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.057854", "id": 19864}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.257820", "id": 56357}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.172068", "id": 40737}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.075016", "id": 23021}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.971761", "id": 4323}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.036197", "id": 15947}
{"buggy_code": "module arith_322(input en, output q); assign q = en + 1; endmodule", "correct_code": "module arith_322(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.040673", "id": 16755}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.276019", "id": 59663}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.244647", "id": 53956}
{"buggy_code": "module demo_413(input b, b, output result); assign result = b & b | in; endmodule", "correct_code": "module demo_413(input b, b, output result); assign result = (b & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.290617", "id": 62330}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.213732", "id": 48308}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.115584", "id": 30398}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.321502", "id": 67961}
{"buggy_code": "module basic_105(input y, c, output valid); assign valid = y & c | clk; endmodule", "correct_code": "module basic_105(input y, c, output valid); assign valid = (y & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.101581", "id": 27829}
{"buggy_code": "module example_473(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module example_473(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.342062", "id": 71701}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.985917", "id": 6837}
{"buggy_code": "module basic_115(input clk, clk, output result); assign result = clk & clk | en; endmodule", "correct_code": "module basic_115(input clk, clk, output result); assign result = (clk & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.006528", "id": 10586}
{"buggy_code": "module demo_98(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module demo_98(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.191162", "id": 44182}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.273358", "id": 59200}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.295410", "id": 63205}
{"buggy_code": "module logic_510(input d, output q); assign q = d + 1; endmodule", "correct_code": "module logic_510(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.338157", "id": 71013}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.236862", "id": 52525}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.951379", "id": 617}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.981370", "id": 6007}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.995453", "id": 8581}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.092113", "id": 26103}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.201192", "id": 46022}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.089998", "id": 25715}
{"buggy_code": "module example_902(input y, data, output sum); assign sum = y & data | x; endmodule", "correct_code": "module example_902(input y, data, output sum); assign sum = (y & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.988842", "id": 7369}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.984035", "id": 6492}
{"buggy_code": "module test_184(input b, output q); assign q = b + 1; endmodule", "correct_code": "module test_184(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.085183", "id": 24836}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.006970", "id": 10666}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.288554", "id": 61952}
{"buggy_code": "module logic_500(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module logic_500(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.019968", "id": 13010}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.005079", "id": 10319}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.304103", "id": 64800}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.155414", "id": 37688}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.173453", "id": 40989}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.195315", "id": 44949}
{"buggy_code": "module example_5(input in, output y); assign y = in + 1; endmodule", "correct_code": "module example_5(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.256149", "id": 56047}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.119681", "id": 31140}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.970442", "id": 4076}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.022906", "id": 13546}
{"buggy_code": "module simple_835(input in, c, output valid); assign valid = in & c | en; endmodule", "correct_code": "module simple_835(input in, c, output valid); assign valid = (in & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.032519", "id": 15280}
{"buggy_code": "module example_6(input b, output q); assign q = b + 1; endmodule", "correct_code": "module example_6(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.194973", "id": 44887}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.042594", "id": 17101}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.148390", "id": 36390}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.977286", "id": 5322}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.059137", "id": 20099}
{"buggy_code": "module arith_277(input en, d, output out); assign out = en & d | b; endmodule", "correct_code": "module arith_277(input en, d, output out); assign out = (en & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.228762", "id": 51039}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.131169", "id": 33239}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.949785", "id": 332}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.954164", "id": 1121}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.042519", "id": 17087}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.022156", "id": 13408}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.318478", "id": 67440}
{"buggy_code": "module basic_657(input a, output out); assign out = a + 1; endmodule", "correct_code": "module basic_657(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.306343", "id": 65215}
{"buggy_code": "module simple_983(input clk, clk, output y); assign y = clk & clk | rst; endmodule", "correct_code": "module simple_983(input clk, clk, output y); assign y = (clk & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.051710", "id": 18730}
{"buggy_code": "module simple_523(input data, en, output q); assign q = data & en | b; endmodule", "correct_code": "module simple_523(input data, en, output q); assign q = (data & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.073676", "id": 22772}
{"buggy_code": "module demo_168(input c, clk, output y); assign y = c & clk | x; endmodule", "correct_code": "module demo_168(input c, clk, output y); assign y = (c & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.301260", "id": 64275}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.027647", "id": 14402}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.204306", "id": 46592}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.233743", "id": 51957}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.205855", "id": 46874}
{"buggy_code": "module demo_431(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module demo_431(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.273576", "id": 59239}
{"buggy_code": "module example_720(input a, output result); assign result = a + 1; endmodule", "correct_code": "module example_720(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.217288", "id": 48956}
{"buggy_code": "module simple_701(input d, c, output q); assign q = d & c | a; endmodule", "correct_code": "module simple_701(input d, c, output q); assign q = (d & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.168057", "id": 40005}
{"buggy_code": "module arith_856(input x, output result); assign result = x + 1; endmodule", "correct_code": "module arith_856(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.217236", "id": 48947}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.952760", "id": 870}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.971955", "id": 4356}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.088950", "id": 25520}
{"buggy_code": "module basic_305(input data, x, output out); assign out = data & x | data; endmodule", "correct_code": "module basic_305(input data, x, output out); assign out = (data & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.027277", "id": 14331}
{"buggy_code": "module arith_590(input a, output q); assign q = a + 1; endmodule", "correct_code": "module arith_590(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.107946", "id": 28991}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.200113", "id": 45823}
{"buggy_code": "module basic_715(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module basic_715(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.143925", "id": 35568}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.950853", "id": 519}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.027851", "id": 14437}
{"buggy_code": "module logic_79(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module logic_79(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.030777", "id": 14966}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.261272", "id": 56989}
{"buggy_code": "module test_592(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module test_592(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.240064", "id": 53116}
{"buggy_code": "module arith_381(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module arith_381(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.277343", "id": 59897}
{"buggy_code": "module arith_117(input a, clk, output prod); assign prod = a & clk | d; endmodule", "correct_code": "module arith_117(input a, clk, output prod); assign prod = (a & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.028092", "id": 14482}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.967593", "id": 3566}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.221536", "id": 49720}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.199126", "id": 45642}
{"buggy_code": "module demo_267(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module demo_267(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.012929", "id": 11742}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.085956", "id": 24979}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.954021", "id": 1094}
{"buggy_code": "module test_396(input in, c, output valid); assign valid = in & c | d; endmodule", "correct_code": "module test_396(input in, c, output valid); assign valid = (in & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.970890", "id": 4159}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.314236", "id": 66662}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.201933", "id": 46156}
{"buggy_code": "module demo_692(input x, b, output y); assign y = x & b | clk; endmodule", "correct_code": "module demo_692(input x, b, output y); assign y = (x & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.965962", "id": 3266}
{"buggy_code": "module test_85(input en, output y); assign y = en + 1; endmodule", "correct_code": "module test_85(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.140760", "id": 35002}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.283987", "id": 61118}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.257574", "id": 56313}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.124285", "id": 31979}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.999537", "id": 9326}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.217124", "id": 48926}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.093331", "id": 26320}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.174309", "id": 41143}
{"buggy_code": "module test_871(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module test_871(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.163952", "id": 39253}
{"buggy_code": "module logic_298(input in, in, output prod); assign prod = in & in | x; endmodule", "correct_code": "module logic_298(input in, in, output prod); assign prod = (in & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.952326", "id": 790}
{"buggy_code": "module basic_988(input in, y, output prod); assign prod = in & y | y; endmodule", "correct_code": "module basic_988(input in, y, output prod); assign prod = (in & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.176357", "id": 41519}
{"buggy_code": "module basic_763(input clk, clk, output q); assign q = clk & clk | c; endmodule", "correct_code": "module basic_763(input clk, clk, output q); assign q = (clk & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.013778", "id": 11901}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.355627", "id": 74166}
{"buggy_code": "module simple_983(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module simple_983(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.147459", "id": 36216}
{"buggy_code": "module test_254(input a, output y); assign y = a + 1; endmodule", "correct_code": "module test_254(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.082175", "id": 24293}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.021567", "id": 13302}
{"buggy_code": "module test_637(input c, output q); assign q = c + 1; endmodule", "correct_code": "module test_637(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.954954", "id": 1262}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.990960", "id": 7763}
{"buggy_code": "module arith_892(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module arith_892(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.356643", "id": 74352}
{"buggy_code": "module simple_379(input en, rst, output prod); assign prod = en & rst | in; endmodule", "correct_code": "module simple_379(input en, rst, output prod); assign prod = (en & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.018913", "id": 12832}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.020550", "id": 13118}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.950277", "id": 420}
{"buggy_code": "module logic_903(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module logic_903(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.101086", "id": 27737}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.127178", "id": 32509}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.175092", "id": 41287}
{"buggy_code": "module test_162(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module test_162(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.334780", "id": 70393}
{"buggy_code": "module simple_327(input en, d, output prod); assign prod = en & d | y; endmodule", "correct_code": "module simple_327(input en, d, output prod); assign prod = (en & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.087986", "id": 25345}
{"buggy_code": "module example_800(input data, a, output sum); assign sum = data & a | x; endmodule", "correct_code": "module example_800(input data, a, output sum); assign sum = (data & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.115334", "id": 30353}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.971684", "id": 4308}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.235292", "id": 52240}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.141702", "id": 35158}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.968220", "id": 3682}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.966377", "id": 3342}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.304734", "id": 64921}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.039820", "id": 16611}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.295364", "id": 63197}
{"buggy_code": "module test_82(input en, output q); assign q = en + 1; endmodule", "correct_code": "module test_82(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.255935", "id": 56008}
{"buggy_code": "module basic_645(input c, b, output out); assign out = c & b | en; endmodule", "correct_code": "module basic_645(input c, b, output out); assign out = (c & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.162248", "id": 38945}
{"buggy_code": "module test_594(input x, output result); assign result = x + 1; endmodule", "correct_code": "module test_594(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.219163", "id": 49303}
{"buggy_code": "module example_490(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module example_490(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.130206", "id": 33060}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.171414", "id": 40616}
{"buggy_code": "module simple_536(input in, a, output sum); assign sum = in & a | d; endmodule", "correct_code": "module simple_536(input in, a, output sum); assign sum = (in & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116845", "id": 30627}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.028410", "id": 14539}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.959158", "id": 2026}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.291252", "id": 62451}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.218534", "id": 49186}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.262884", "id": 57282}
{"buggy_code": "module logic_255(input in, clk, output y); assign y = in & clk | a; endmodule", "correct_code": "module logic_255(input in, clk, output y); assign y = (in & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.066857", "id": 21514}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.160024", "id": 38538}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.278860", "id": 60175}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.157796", "id": 38125}
{"buggy_code": "module test_217(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module test_217(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.064336", "id": 21055}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.009531", "id": 11131}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.116474", "id": 30560}
{"buggy_code": "module logic_603(input in, output y); assign y = in + 1; endmodule", "correct_code": "module logic_603(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.153301", "id": 37301}
{"buggy_code": "module basic_113(input b, clk, output sum); assign sum = b & clk | y; endmodule", "correct_code": "module basic_113(input b, clk, output sum); assign sum = (b & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.197923", "id": 45424}
{"buggy_code": "module example_385(input b, output result); assign result = b + 1; endmodule", "correct_code": "module example_385(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.974900", "id": 4888}
{"buggy_code": "module arith_624(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module arith_624(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.297655", "id": 63616}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.211556", "id": 47916}
{"buggy_code": "module test_193(input d, y, output sum); assign sum = d & y | x; endmodule", "correct_code": "module test_193(input d, y, output sum); assign sum = (d & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.338089", "id": 71000}
{"buggy_code": "module logic_374(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module logic_374(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.067743", "id": 21676}
{"buggy_code": "module demo_216(input y, output result); assign result = y + 1; endmodule", "correct_code": "module demo_216(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.104837", "id": 28418}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.070623", "id": 22208}
{"buggy_code": "module arith_970(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module arith_970(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.082662", "id": 24382}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.239659", "id": 53044}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.273526", "id": 59230}
{"buggy_code": "module test_904(input b, c, output prod); assign prod = b & c | en; endmodule", "correct_code": "module test_904(input b, c, output prod); assign prod = (b & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.959152", "id": 2025}
{"buggy_code": "module example_494(input d, d, output prod); assign prod = d & d | rst; endmodule", "correct_code": "module example_494(input d, d, output prod); assign prod = (d & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.224813", "id": 50321}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.075372", "id": 23086}
{"buggy_code": "module example_654(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module example_654(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.987423", "id": 7112}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.059457", "id": 20159}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.966239", "id": 3316}
{"buggy_code": "module arith_291(input in, x, output result); assign result = in & x | c; endmodule", "correct_code": "module arith_291(input in, x, output result); assign result = (in & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.090126", "id": 25739}
{"buggy_code": "module arith_181(input a, b, output valid); assign valid = a & b | clk; endmodule", "correct_code": "module arith_181(input a, b, output valid); assign valid = (a & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.984446", "id": 6568}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.060432", "id": 20337}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.039425", "id": 16537}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.157837", "id": 38131}
{"buggy_code": "module example_256(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module example_256(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.993510", "id": 8227}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.151305", "id": 36930}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.298318", "id": 63739}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.219403", "id": 49346}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.168807", "id": 40141}
{"buggy_code": "module demo_411(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module demo_411(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.049398", "id": 18309}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.991984", "id": 7950}
{"buggy_code": "module basic_642(input rst, y, output y); assign y = rst & y | d; endmodule", "correct_code": "module basic_642(input rst, y, output y); assign y = (rst & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.201514", "id": 46081}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.147078", "id": 36147}
{"buggy_code": "module test_110(input rst, x, output y); assign y = rst & x | rst; endmodule", "correct_code": "module test_110(input rst, x, output y); assign y = (rst & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.994505", "id": 8409}
{"buggy_code": "module example_818(input d, output q); assign q = d + 1; endmodule", "correct_code": "module example_818(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.242988", "id": 53651}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.051891", "id": 18763}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232233", "id": 51674}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.086875", "id": 25145}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.121905", "id": 31543}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.319844", "id": 67679}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.358100", "id": 74620}
{"buggy_code": "module example_86(input a, output y); assign y = a + 1; endmodule", "correct_code": "module example_86(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.978852", "id": 5556}
{"buggy_code": "module simple_717(input x, rst, output y); assign y = x & rst | d; endmodule", "correct_code": "module simple_717(input x, rst, output y); assign y = (x & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116735", "id": 30609}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.325470", "id": 68687}
{"buggy_code": "module basic_305(input x, x, output prod); assign prod = x & x | x; endmodule", "correct_code": "module basic_305(input x, x, output prod); assign prod = (x & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.111282", "id": 29607}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.165868", "id": 39598}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.339427", "id": 71227}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.132472", "id": 33476}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.980299", "id": 5823}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.328127", "id": 69173}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.055324", "id": 19399}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.186415", "id": 43354}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.244981", "id": 54016}
{"buggy_code": "module test_598(input c, rst, output out); assign out = c & rst | in; endmodule", "correct_code": "module test_598(input c, rst, output out); assign out = (c & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.313322", "id": 66496}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.324377", "id": 68489}
{"buggy_code": "module demo_712(input a, x, output sum); assign sum = a & x | in; endmodule", "correct_code": "module demo_712(input a, x, output sum); assign sum = (a & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.216429", "id": 48800}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.960560", "id": 2281}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.121217", "id": 31417}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.207361", "id": 47150}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.978736", "id": 5536}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.097406", "id": 27063}
{"buggy_code": "module logic_700(input data, a, output valid); assign valid = data & a | c; endmodule", "correct_code": "module logic_700(input data, a, output valid); assign valid = (data & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116620", "id": 30588}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.315284", "id": 66852}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.029888", "id": 14805}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112101", "id": 29755}
{"buggy_code": "module example_1(input a, clk, output prod); assign prod = a & clk | d; endmodule", "correct_code": "module example_1(input a, clk, output prod); assign prod = (a & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.035187", "id": 15764}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.091288", "id": 25955}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.350261", "id": 73187}
{"buggy_code": "module basic_157(input clk, a, output out); assign out = clk & a | data; endmodule", "correct_code": "module basic_157(input clk, a, output out); assign out = (clk & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.330604", "id": 69632}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.264086", "id": 57500}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.144085", "id": 35598}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.167266", "id": 39859}
{"buggy_code": "module demo_349(input x, output y); assign y = x + 1; endmodule", "correct_code": "module demo_349(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.162477", "id": 38987}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.152343", "id": 37123}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.250446", "id": 55018}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117898", "id": 30822}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.217884", "id": 49068}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.275252", "id": 59523}
{"buggy_code": "module test_634(input a, in, output prod); assign prod = a & in | in; endmodule", "correct_code": "module test_634(input a, in, output prod); assign prod = (a & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.065486", "id": 21267}
{"buggy_code": "module example_13(input clk, c, output y); assign y = clk & c | d; endmodule", "correct_code": "module example_13(input clk, c, output y); assign y = (clk & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.247718", "id": 54519}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.138809", "id": 34645}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.963382", "id": 2794}
{"buggy_code": "module demo_165(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module demo_165(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.350170", "id": 73171}
{"buggy_code": "module basic_408(input d, clk, output prod); assign prod = d & clk | b; endmodule", "correct_code": "module basic_408(input d, clk, output prod); assign prod = (d & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.041001", "id": 16815}
{"buggy_code": "module demo_86(input en, clk, output out); assign out = en & clk | y; endmodule", "correct_code": "module demo_86(input en, clk, output out); assign out = (en & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.238618", "id": 52853}
{"buggy_code": "module logic_312(input d, data, output sum); assign sum = d & data | b; endmodule", "correct_code": "module logic_312(input d, data, output sum); assign sum = (d & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.002793", "id": 9920}
{"buggy_code": "module simple_796(input y, in, output valid); assign valid = y & in | x; endmodule", "correct_code": "module simple_796(input y, in, output valid); assign valid = (y & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.266002", "id": 57852}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.968019", "id": 3645}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.218440", "id": 49167}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.207793", "id": 47229}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.284019", "id": 61124}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.278786", "id": 60164}
{"buggy_code": "module example_37(input a, data, output y); assign y = a & data | d; endmodule", "correct_code": "module example_37(input a, data, output y); assign y = (a & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.133228", "id": 33614}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.981997", "id": 6118}
{"buggy_code": "module demo_356(input b, output out); assign out = b + 1; endmodule", "correct_code": "module demo_356(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.100574", "id": 27644}
{"buggy_code": "module basic_774(input data, a, output q); assign q = data & a | c; endmodule", "correct_code": "module basic_774(input data, a, output q); assign q = (data & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.357773", "id": 74560}
{"buggy_code": "module basic_985(input y, output result); assign result = y + 1; endmodule", "correct_code": "module basic_985(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.092303", "id": 26138}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.175947", "id": 41444}
{"buggy_code": "module basic_120(input clk, en, output y); assign y = clk & en | y; endmodule", "correct_code": "module basic_120(input clk, en, output y); assign y = (clk & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.159096", "id": 38364}
{"buggy_code": "module basic_118(input clk, y, output sum); assign sum = clk & y | en; endmodule", "correct_code": "module basic_118(input clk, y, output sum); assign sum = (clk & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.318808", "id": 67502}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.957017", "id": 1635}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.107124", "id": 28839}
{"buggy_code": "module simple_506(input clk, clk, output result); assign result = clk & clk | in; endmodule", "correct_code": "module simple_506(input clk, clk, output result); assign result = (clk & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.015994", "id": 12301}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.207533", "id": 47182}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.067112", "id": 21561}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.273724", "id": 59266}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.271096", "id": 58781}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.179593", "id": 42119}
{"buggy_code": "module simple_339(input rst, a, output sum); assign sum = rst & a | a; endmodule", "correct_code": "module simple_339(input rst, a, output sum); assign sum = (rst & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.260917", "id": 56923}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.172598", "id": 40834}
{"buggy_code": "module simple_810(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module simple_810(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.010514", "id": 11308}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.227461", "id": 50801}
{"buggy_code": "module simple_735(input x, b, output y); assign y = x & b | en; endmodule", "correct_code": "module simple_735(input x, b, output y); assign y = (x & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.073737", "id": 22784}
{"buggy_code": "module simple_918(input y, output q); assign q = y + 1; endmodule", "correct_code": "module simple_918(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.997877", "id": 9023}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.039521", "id": 16555}
{"buggy_code": "module example_110(input x, output y); assign y = x + 1; endmodule", "correct_code": "module example_110(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.165967", "id": 39617}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.066411", "id": 21434}
{"buggy_code": "module basic_340(input data, in, output q); assign q = data & in | d; endmodule", "correct_code": "module basic_340(input data, in, output q); assign q = (data & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.102389", "id": 27978}
{"buggy_code": "module test_384(input c, output y); assign y = c + 1; endmodule", "correct_code": "module test_384(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.172565", "id": 40828}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.999221", "id": 9267}
{"buggy_code": "module simple_475(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module simple_475(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.265560", "id": 57772}
{"buggy_code": "module simple_146(input d, a, output valid); assign valid = d & a | in; endmodule", "correct_code": "module simple_146(input d, a, output valid); assign valid = (d & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.195832", "id": 45043}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.148917", "id": 36487}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.005376", "id": 10374}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.953845", "id": 1062}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.076042", "id": 23205}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.330704", "id": 69651}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112083", "id": 29752}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.138342", "id": 34556}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.291425", "id": 62481}
{"buggy_code": "module test_111(input en, output y); assign y = en + 1; endmodule", "correct_code": "module test_111(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.085135", "id": 24827}
{"buggy_code": "module example_129(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module example_129(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.014964", "id": 12114}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.121120", "id": 31400}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.350964", "id": 73312}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.973212", "id": 4582}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.252877", "id": 55456}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.991998", "id": 7953}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.214356", "id": 48423}
{"buggy_code": "module test_39(input c, output y); assign y = c + 1; endmodule", "correct_code": "module test_39(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.128739", "id": 32793}
{"buggy_code": "module logic_860(input en, d, output out); assign out = en & d | clk; endmodule", "correct_code": "module logic_860(input en, d, output out); assign out = (en & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.977351", "id": 5334}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.045145", "id": 17564}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.324867", "id": 68578}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.274588", "id": 59415}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.255350", "id": 55903}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.268317", "id": 58271}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.091968", "id": 26076}
{"buggy_code": "module demo_708(input y, output q); assign q = y + 1; endmodule", "correct_code": "module demo_708(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.264100", "id": 57503}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.284872", "id": 61280}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.103592", "id": 28194}
{"buggy_code": "module example_624(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module example_624(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.038133", "id": 16300}
{"buggy_code": "module logic_53(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module logic_53(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.018214", "id": 12706}
{"buggy_code": "module simple_304(input b, b, output valid); assign valid = b & b | d; endmodule", "correct_code": "module simple_304(input b, b, output valid); assign valid = (b & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.196149", "id": 45101}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.949439", "id": 267}
{"buggy_code": "module basic_601(input d, b, output sum); assign sum = d & b | data; endmodule", "correct_code": "module basic_601(input d, b, output sum); assign sum = (d & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.062473", "id": 20712}
{"buggy_code": "module demo_767(input rst, x, output out); assign out = rst & x | en; endmodule", "correct_code": "module demo_767(input rst, x, output out); assign out = (rst & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.232145", "id": 51658}
{"buggy_code": "module simple_568(input x, output y); assign y = x + 1; endmodule", "correct_code": "module simple_568(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.024473", "id": 13828}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.132086", "id": 33406}
{"buggy_code": "module example_28(input data, clk, output valid); assign valid = data & clk | c; endmodule", "correct_code": "module example_28(input data, clk, output valid); assign valid = (data & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.960069", "id": 2188}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.317902", "id": 67333}
{"buggy_code": "module example_569(input data, y, output y); assign y = data & y | x; endmodule", "correct_code": "module example_569(input data, y, output y); assign y = (data & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.322448", "id": 68135}
{"buggy_code": "module test_774(input x, en, output y); assign y = x & en | b; endmodule", "correct_code": "module test_774(input x, en, output y); assign y = (x & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.207602", "id": 47194}
{"buggy_code": "module simple_399(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module simple_399(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.353368", "id": 73748}
{"buggy_code": "module logic_172(input y, output result); assign result = y + 1; endmodule", "correct_code": "module logic_172(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.040396", "id": 16714}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.349016", "id": 72961}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.975660", "id": 5026}
{"buggy_code": "module test_279(input en, in, output valid); assign valid = en & in | d; endmodule", "correct_code": "module test_279(input en, in, output valid); assign valid = (en & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.140675", "id": 34987}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.996543", "id": 8781}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.224177", "id": 50203}
{"buggy_code": "module demo_522(input en, in, output q); assign q = en & in | c; endmodule", "correct_code": "module demo_522(input en, in, output q); assign q = (en & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.120427", "id": 31272}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.332258", "id": 69932}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.258315", "id": 56448}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.122040", "id": 31568}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.161676", "id": 38841}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.328653", "id": 69271}
{"buggy_code": "module basic_10(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module basic_10(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.328248", "id": 69196}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.166890", "id": 39789}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.161533", "id": 38815}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113750", "id": 30062}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.271381", "id": 58834}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.273250", "id": 59179}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.232352", "id": 51696}
{"buggy_code": "module simple_392(input b, output result); assign result = b + 1; endmodule", "correct_code": "module simple_392(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.197394", "id": 45328}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.234430", "id": 52082}
{"buggy_code": "module test_758(input rst, x, output y); assign y = rst & x | data; endmodule", "correct_code": "module test_758(input rst, x, output y); assign y = (rst & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.222668", "id": 49925}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.155334", "id": 37674}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.133522", "id": 33669}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.192139", "id": 44365}
{"buggy_code": "module basic_95(input a, clk, output prod); assign prod = a & clk | b; endmodule", "correct_code": "module basic_95(input a, clk, output prod); assign prod = (a & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.314530", "id": 66716}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.323865", "id": 68395}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.329987", "id": 69517}
{"buggy_code": "module basic_789(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module basic_789(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.178290", "id": 41876}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.030658", "id": 14946}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.296535", "id": 63413}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.307936", "id": 65514}
{"buggy_code": "module demo_74(input rst, rst, output result); assign result = rst & rst | rst; endmodule", "correct_code": "module demo_74(input rst, rst, output result); assign result = (rst & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.070555", "id": 22194}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.157419", "id": 38056}
{"buggy_code": "module basic_723(input data, x, output result); assign result = data & x | d; endmodule", "correct_code": "module basic_723(input data, x, output result); assign result = (data & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.002179", "id": 9806}
{"buggy_code": "module simple_268(input c, output result); assign result = c + 1; endmodule", "correct_code": "module simple_268(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.184421", "id": 42990}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.971382", "id": 4251}
{"buggy_code": "module example_342(input rst, b, output valid); assign valid = rst & b | d; endmodule", "correct_code": "module example_342(input rst, b, output valid); assign valid = (rst & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.028748", "id": 14599}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.099483", "id": 27443}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.002053", "id": 9784}
{"buggy_code": "module arith_536(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module arith_536(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118445", "id": 30922}
{"buggy_code": "module demo_393(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module demo_393(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.360103", "id": 74989}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.123596", "id": 31855}
{"buggy_code": "module simple_20(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module simple_20(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.199222", "id": 45659}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.295856", "id": 63287}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.099781", "id": 27498}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.993726", "id": 8268}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.311238", "id": 66118}
{"buggy_code": "module simple_40(input data, a, output out); assign out = data & a | b; endmodule", "correct_code": "module simple_40(input data, a, output out); assign out = (data & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.281218", "id": 60611}
{"buggy_code": "module logic_663(input y, output out); assign out = y + 1; endmodule", "correct_code": "module logic_663(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.270009", "id": 58583}
{"buggy_code": "module simple_236(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module simple_236(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.042920", "id": 17161}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.041700", "id": 16939}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.011436", "id": 11477}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.065690", "id": 21305}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.123331", "id": 31805}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.275056", "id": 59487}
{"buggy_code": "module simple_969(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module simple_969(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.107637", "id": 28936}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.057398", "id": 19781}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.068932", "id": 21891}
{"buggy_code": "module example_147(input y, a, output y); assign y = y & a | y; endmodule", "correct_code": "module example_147(input y, a, output y); assign y = (y & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.087492", "id": 25256}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.124914", "id": 32093}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.197773", "id": 45398}
{"buggy_code": "module basic_714(input en, output result); assign result = en + 1; endmodule", "correct_code": "module basic_714(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.304654", "id": 64906}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.176673", "id": 41576}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.342194", "id": 71726}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.135310", "id": 33996}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.197815", "id": 45406}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.245633", "id": 54141}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.304094", "id": 64798}
{"buggy_code": "module arith_910(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module arith_910(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.065868", "id": 21336}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.063634", "id": 20926}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.133105", "id": 33592}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.176059", "id": 41464}
{"buggy_code": "module simple_865(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module simple_865(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.355841", "id": 74203}
{"buggy_code": "module arith_820(input x, output y); assign y = x + 1; endmodule", "correct_code": "module arith_820(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.055674", "id": 19464}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.060372", "id": 20326}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.348377", "id": 72848}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.327319", "id": 69027}
{"buggy_code": "module arith_77(input in, rst, output result); assign result = in & rst | x; endmodule", "correct_code": "module arith_77(input in, rst, output result); assign result = (in & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.229538", "id": 51180}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.308849", "id": 65679}
{"buggy_code": "module test_429(input in, output out); assign out = in + 1; endmodule", "correct_code": "module test_429(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.238251", "id": 52782}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.229247", "id": 51126}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.173798", "id": 41053}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.011516", "id": 11492}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.028320", "id": 14522}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.305510", "id": 65062}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.071650", "id": 22396}
{"buggy_code": "module logic_570(input en, output q); assign q = en + 1; endmodule", "correct_code": "module logic_570(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.304168", "id": 64813}
{"buggy_code": "module demo_282(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module demo_282(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.050551", "id": 18520}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.286311", "id": 61544}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.240739", "id": 53239}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.967851", "id": 3614}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.959305", "id": 2053}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.948746", "id": 147}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.049367", "id": 18304}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.251947", "id": 55288}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.963080", "id": 2737}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.025368", "id": 13991}
{"buggy_code": "module basic_447(input en, en, output result); assign result = en & en | data; endmodule", "correct_code": "module basic_447(input en, en, output result); assign result = (en & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.189571", "id": 43892}
{"buggy_code": "module demo_929(input x, y, output y); assign y = x & y | in; endmodule", "correct_code": "module demo_929(input x, y, output y); assign y = (x & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.264631", "id": 57601}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.993119", "id": 8156}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.333545", "id": 70170}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.974359", "id": 4789}
{"buggy_code": "module demo_332(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module demo_332(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.162857", "id": 39053}
{"buggy_code": "module arith_997(input a, output y); assign y = a + 1; endmodule", "correct_code": "module arith_997(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.283680", "id": 61063}
{"buggy_code": "module arith_930(input clk, a, output out); assign out = clk & a | rst; endmodule", "correct_code": "module arith_930(input clk, a, output out); assign out = (clk & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.056721", "id": 19657}
{"buggy_code": "module arith_511(input rst, y, output out); assign out = rst & y | en; endmodule", "correct_code": "module arith_511(input rst, y, output out); assign out = (rst & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.288462", "id": 61934}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.202049", "id": 46178}
{"buggy_code": "module basic_419(input y, en, output q); assign q = y & en | d; endmodule", "correct_code": "module basic_419(input y, en, output q); assign q = (y & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.103880", "id": 28245}
{"buggy_code": "module test_485(input en, y, output prod); assign prod = en & y | a; endmodule", "correct_code": "module test_485(input en, y, output prod); assign prod = (en & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.002568", "id": 9879}
{"buggy_code": "module basic_411(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module basic_411(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.997845", "id": 9018}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.048583", "id": 18186}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.950256", "id": 416}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.290245", "id": 62261}
{"buggy_code": "module test_17(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module test_17(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.959281", "id": 2048}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.145021", "id": 35775}
{"buggy_code": "module logic_843(input en, data, output q); assign q = en & data | rst; endmodule", "correct_code": "module logic_843(input en, data, output q); assign q = (en & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.967261", "id": 3505}
{"buggy_code": "module simple_988(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module simple_988(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.333418", "id": 70147}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.015573", "id": 12225}
{"buggy_code": "module logic_53(input clk, b, output out); assign out = clk & b | rst; endmodule", "correct_code": "module logic_53(input clk, b, output out); assign out = (clk & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.263329", "id": 57362}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.270453", "id": 58664}
{"buggy_code": "module demo_904(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module demo_904(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.089481", "id": 25620}
{"buggy_code": "module basic_362(input y, output result); assign result = y + 1; endmodule", "correct_code": "module basic_362(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.343334", "id": 71930}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.022676", "id": 13503}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.040582", "id": 16740}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.061983", "id": 20623}
{"buggy_code": "module simple_579(input y, a, output q); assign q = y & a | in; endmodule", "correct_code": "module simple_579(input y, a, output q); assign q = (y & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.178697", "id": 41953}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.327568", "id": 69074}
{"buggy_code": "module logic_374(input a, data, output y); assign y = a & data | x; endmodule", "correct_code": "module logic_374(input a, data, output y); assign y = (a & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.355353", "id": 74115}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.289261", "id": 62081}
{"buggy_code": "module arith_893(input clk, in, output q); assign q = clk & in | en; endmodule", "correct_code": "module arith_893(input clk, in, output q); assign q = (clk & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.031981", "id": 15184}
{"buggy_code": "module basic_195(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module basic_195(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.045746", "id": 17671}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.349465", "id": 73044}
{"buggy_code": "module basic_102(input data, y, output result); assign result = data & y | data; endmodule", "correct_code": "module basic_102(input data, y, output result); assign result = (data & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.272768", "id": 59092}
{"buggy_code": "module basic_329(input clk, d, output y); assign y = clk & d | y; endmodule", "correct_code": "module basic_329(input clk, d, output y); assign y = (clk & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.137723", "id": 34443}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.015908", "id": 12285}
{"buggy_code": "module test_896(input a, output q); assign q = a + 1; endmodule", "correct_code": "module test_896(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.244470", "id": 53923}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.054468", "id": 19237}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.173457", "id": 40990}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.040228", "id": 16685}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.156262", "id": 37844}
{"buggy_code": "module demo_104(input data, output result); assign result = data + 1; endmodule", "correct_code": "module demo_104(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.247050", "id": 54397}
{"buggy_code": "module logic_319(input b, output q); assign q = b + 1; endmodule", "correct_code": "module logic_319(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.179006", "id": 42009}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.181031", "id": 42380}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.125681", "id": 32236}
{"buggy_code": "module demo_235(input d, clk, output out); assign out = d & clk | b; endmodule", "correct_code": "module demo_235(input d, clk, output out); assign out = (d & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.966087", "id": 3289}
{"buggy_code": "module demo_820(input a, output out); assign out = a + 1; endmodule", "correct_code": "module demo_820(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.096715", "id": 26937}
{"buggy_code": "module basic_853(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module basic_853(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.959961", "id": 2170}
{"buggy_code": "module demo_178(input d, output out); assign out = d + 1; endmodule", "correct_code": "module demo_178(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.175065", "id": 41282}
{"buggy_code": "module logic_451(input a, a, output out); assign out = a & a | c; endmodule", "correct_code": "module logic_451(input a, a, output out); assign out = (a & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.252583", "id": 55404}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.104771", "id": 28409}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.966986", "id": 3452}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.020941", "id": 13185}
{"buggy_code": "module basic_365(input b, y, output result); assign result = b & y | y; endmodule", "correct_code": "module basic_365(input b, y, output result); assign result = (b & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.244515", "id": 53932}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.995225", "id": 8539}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.328871", "id": 69310}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.981307", "id": 5995}
{"buggy_code": "module arith_204(input y, output result); assign result = y + 1; endmodule", "correct_code": "module arith_204(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.957225", "id": 1674}
{"buggy_code": "module logic_289(input rst, a, output sum); assign sum = rst & a | y; endmodule", "correct_code": "module logic_289(input rst, a, output sum); assign sum = (rst & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.963804", "id": 2871}
{"buggy_code": "module logic_724(input clk, data, output sum); assign sum = clk & data | a; endmodule", "correct_code": "module logic_724(input clk, data, output sum); assign sum = (clk & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.242428", "id": 53548}
{"buggy_code": "module basic_505(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module basic_505(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.059999", "id": 20257}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.016230", "id": 12344}
{"buggy_code": "module demo_437(input rst, c, output prod); assign prod = rst & c | d; endmodule", "correct_code": "module demo_437(input rst, c, output prod); assign prod = (rst & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.186136", "id": 43302}
{"buggy_code": "module arith_227(input clk, in, output prod); assign prod = clk & in | x; endmodule", "correct_code": "module arith_227(input clk, in, output prod); assign prod = (clk & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.351642", "id": 73437}
{"buggy_code": "module basic_107(input y, c, output y); assign y = y & c | d; endmodule", "correct_code": "module basic_107(input y, c, output y); assign y = (y & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.124219", "id": 31967}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.125128", "id": 32134}
{"buggy_code": "module example_325(input d, d, output q); assign q = d & d | b; endmodule", "correct_code": "module example_325(input d, d, output q); assign q = (d & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.974130", "id": 4746}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.343477", "id": 71957}
{"buggy_code": "module arith_480(input x, output q); assign q = x + 1; endmodule", "correct_code": "module arith_480(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.088580", "id": 25455}
{"buggy_code": "module arith_968(input clk, a, output out); assign out = clk & a | data; endmodule", "correct_code": "module arith_968(input clk, a, output out); assign out = (clk & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.192797", "id": 44487}
{"buggy_code": "module test_982(input data, d, output valid); assign valid = data & d | d; endmodule", "correct_code": "module test_982(input data, d, output valid); assign valid = (data & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.042207", "id": 17030}
{"buggy_code": "module simple_575(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module simple_575(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.039315", "id": 16517}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.051421", "id": 18677}
{"buggy_code": "module test_937(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module test_937(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.305383", "id": 65037}
{"buggy_code": "module arith_488(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module arith_488(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.053552", "id": 19066}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.119200", "id": 31058}
{"buggy_code": "module arith_278(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module arith_278(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.117131", "id": 30680}
{"buggy_code": "module logic_369(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module logic_369(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.035931", "id": 15899}
{"buggy_code": "module test_777(input a, clk, output result); assign result = a & clk | c; endmodule", "correct_code": "module test_777(input a, clk, output result); assign result = (a & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.267570", "id": 58135}
{"buggy_code": "module logic_109(input a, en, output q); assign q = a & en | rst; endmodule", "correct_code": "module logic_109(input a, en, output q); assign q = (a & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.967083", "id": 3471}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.322546", "id": 68153}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.964721", "id": 3041}
{"buggy_code": "module arith_86(input clk, c, output sum); assign sum = clk & c | x; endmodule", "correct_code": "module arith_86(input clk, c, output sum); assign sum = (clk & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.256017", "id": 56023}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.134115", "id": 33779}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.290750", "id": 62355}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.067354", "id": 21606}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.156519", "id": 37891}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.060172", "id": 20290}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.123949", "id": 31918}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.215318", "id": 48596}
{"buggy_code": "module demo_131(input b, c, output q); assign q = b & c | clk; endmodule", "correct_code": "module demo_131(input b, c, output q); assign q = (b & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.171297", "id": 40595}
{"buggy_code": "module basic_448(input a, data, output y); assign y = a & data | c; endmodule", "correct_code": "module basic_448(input a, data, output y); assign y = (a & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.091208", "id": 25940}
{"buggy_code": "module arith_169(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module arith_169(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.063831", "id": 20961}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.191141", "id": 44178}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.006715", "id": 10621}
{"buggy_code": "module logic_47(input in, c, output prod); assign prod = in & c | c; endmodule", "correct_code": "module logic_47(input in, c, output prod); assign prod = (in & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.210544", "id": 47731}
{"buggy_code": "module demo_196(input d, x, output result); assign result = d & x | b; endmodule", "correct_code": "module demo_196(input d, x, output result); assign result = (d & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.082717", "id": 24392}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.343628", "id": 71985}
{"buggy_code": "module demo_121(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module demo_121(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.978603", "id": 5512}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.073490", "id": 22738}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.965314", "id": 3149}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.164781", "id": 39403}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.185012", "id": 43100}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.987485", "id": 7124}
{"buggy_code": "module logic_105(input in, clk, output y); assign y = in & clk | a; endmodule", "correct_code": "module logic_105(input in, clk, output y); assign y = (in & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.024574", "id": 13847}
{"buggy_code": "module logic_523(input b, rst, output valid); assign valid = b & rst | rst; endmodule", "correct_code": "module logic_523(input b, rst, output valid); assign valid = (b & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.114347", "id": 30172}
{"buggy_code": "module simple_830(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module simple_830(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.986710", "id": 6983}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.006309", "id": 10546}
{"buggy_code": "module logic_132(input a, x, output out); assign out = a & x | a; endmodule", "correct_code": "module logic_132(input a, x, output out); assign out = (a & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.328542", "id": 69251}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.225299", "id": 50406}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.348317", "id": 72836}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.333028", "id": 70075}
{"buggy_code": "module arith_478(input d, output q); assign q = d + 1; endmodule", "correct_code": "module arith_478(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.199990", "id": 45801}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.193010", "id": 44526}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.233385", "id": 51888}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.073145", "id": 22672}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.358672", "id": 74724}
{"buggy_code": "module arith_840(input a, c, output q); assign q = a & c | a; endmodule", "correct_code": "module arith_840(input a, c, output q); assign q = (a & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.330493", "id": 69612}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.195707", "id": 45023}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.068116", "id": 21742}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.022292", "id": 13434}
{"buggy_code": "module logic_738(input y, a, output prod); assign prod = y & a | b; endmodule", "correct_code": "module logic_738(input y, a, output prod); assign prod = (y & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.204603", "id": 46646}
{"buggy_code": "module basic_735(input data, data, output prod); assign prod = data & data | clk; endmodule", "correct_code": "module basic_735(input data, data, output prod); assign prod = (data & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.040452", "id": 16722}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.325728", "id": 68735}
{"buggy_code": "module test_471(input d, x, output y); assign y = d & x | b; endmodule", "correct_code": "module test_471(input d, x, output y); assign y = (d & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.075758", "id": 23156}
{"buggy_code": "module simple_920(input b, output result); assign result = b + 1; endmodule", "correct_code": "module simple_920(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.218579", "id": 49195}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.137606", "id": 34421}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.955885", "id": 1431}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.973149", "id": 4571}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.272942", "id": 59122}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.355671", "id": 74175}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.955678", "id": 1394}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.186803", "id": 43425}
{"buggy_code": "module basic_114(input en, in, output q); assign q = en & in | clk; endmodule", "correct_code": "module basic_114(input en, in, output q); assign q = (en & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.247248", "id": 54432}
{"buggy_code": "module demo_639(input x, a, output q); assign q = x & a | x; endmodule", "correct_code": "module demo_639(input x, a, output q); assign q = (x & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.303853", "id": 64752}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.154481", "id": 37519}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.062716", "id": 20757}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.278152", "id": 60046}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.126676", "id": 32420}
{"buggy_code": "module arith_136(input y, x, output y); assign y = y & x | d; endmodule", "correct_code": "module arith_136(input y, x, output y); assign y = (y & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.306349", "id": 65216}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.062100", "id": 20644}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.137245", "id": 34353}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.066995", "id": 21539}
{"buggy_code": "module simple_991(input a, output out); assign out = a + 1; endmodule", "correct_code": "module simple_991(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.006371", "id": 10557}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.104316", "id": 28326}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.212946", "id": 48165}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.225977", "id": 50532}
{"buggy_code": "module basic_64(input b, output result); assign result = b + 1; endmodule", "correct_code": "module basic_64(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.025446", "id": 14006}
{"buggy_code": "module logic_451(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module logic_451(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.255525", "id": 55936}
{"buggy_code": "module test_901(input c, output out); assign out = c + 1; endmodule", "correct_code": "module test_901(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.956076", "id": 1466}
{"buggy_code": "module example_552(input x, output q); assign q = x + 1; endmodule", "correct_code": "module example_552(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.259817", "id": 56723}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.997733", "id": 8999}
{"buggy_code": "module logic_226(input clk, en, output prod); assign prod = clk & en | clk; endmodule", "correct_code": "module logic_226(input clk, en, output prod); assign prod = (clk & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.156035", "id": 37801}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.973344", "id": 4606}
{"buggy_code": "module arith_19(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module arith_19(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.971122", "id": 4202}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.168366", "id": 40062}
{"buggy_code": "module arith_882(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module arith_882(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.119307", "id": 31079}
{"buggy_code": "module logic_255(input b, b, output y); assign y = b & b | a; endmodule", "correct_code": "module logic_255(input b, b, output y); assign y = (b & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.052779", "id": 18923}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.300093", "id": 64061}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.014272", "id": 11989}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.259082", "id": 56587}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.061751", "id": 20581}
{"buggy_code": "module logic_810(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module logic_810(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.148339", "id": 36381}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.302588", "id": 64519}
{"buggy_code": "module arith_995(input rst, in, output prod); assign prod = rst & in | clk; endmodule", "correct_code": "module arith_995(input rst, in, output prod); assign prod = (rst & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.061799", "id": 20590}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.975630", "id": 5020}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.018938", "id": 12837}
{"buggy_code": "module demo_455(input x, en, output prod); assign prod = x & en | clk; endmodule", "correct_code": "module demo_455(input x, en, output prod); assign prod = (x & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.293939", "id": 62937}
{"buggy_code": "module simple_792(input en, in, output y); assign y = en & in | clk; endmodule", "correct_code": "module simple_792(input en, in, output y); assign y = (en & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.124142", "id": 31954}
{"buggy_code": "module example_576(input en, en, output valid); assign valid = en & en | en; endmodule", "correct_code": "module example_576(input en, en, output valid); assign valid = (en & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.026457", "id": 14188}
{"buggy_code": "module test_691(input y, x, output q); assign q = y & x | in; endmodule", "correct_code": "module test_691(input y, x, output q); assign q = (y & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.119722", "id": 31147}
{"buggy_code": "module test_904(input in, output out); assign out = in + 1; endmodule", "correct_code": "module test_904(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.213638", "id": 48292}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.351983", "id": 73499}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.205142", "id": 46743}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.330193", "id": 69555}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.071411", "id": 22353}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.002028", "id": 9779}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.156277", "id": 37847}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.215102", "id": 48557}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.299970", "id": 64038}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.064671", "id": 21119}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.088244", "id": 25392}
{"buggy_code": "module test_856(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module test_856(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.311623", "id": 66188}
{"buggy_code": "module test_53(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module test_53(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.016271", "id": 12351}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.250031", "id": 54941}
{"buggy_code": "module simple_20(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module simple_20(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.224576", "id": 50276}
{"buggy_code": "module arith_572(input clk, data, output valid); assign valid = clk & data | y; endmodule", "correct_code": "module arith_572(input clk, data, output valid); assign valid = (clk & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.173910", "id": 41072}
{"buggy_code": "module arith_86(input en, a, output result); assign result = en & a | y; endmodule", "correct_code": "module arith_86(input en, a, output result); assign result = (en & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.010181", "id": 11247}
{"buggy_code": "module simple_861(input in, output q); assign q = in + 1; endmodule", "correct_code": "module simple_861(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.957949", "id": 1804}
{"buggy_code": "module logic_578(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module logic_578(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.180811", "id": 42341}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.148768", "id": 36460}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.981193", "id": 5975}
{"buggy_code": "module example_476(input c, clk, output out); assign out = c & clk | d; endmodule", "correct_code": "module example_476(input c, clk, output out); assign out = (c & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.977131", "id": 5293}
{"buggy_code": "module arith_153(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module arith_153(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.141769", "id": 35171}
{"buggy_code": "module basic_960(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module basic_960(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.969667", "id": 3939}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.227558", "id": 50819}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.089711", "id": 25663}
{"buggy_code": "module logic_963(input rst, b, output sum); assign sum = rst & b | en; endmodule", "correct_code": "module logic_963(input rst, b, output sum); assign sum = (rst & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.979297", "id": 5639}
{"buggy_code": "module arith_765(input rst, en, output sum); assign sum = rst & en | c; endmodule", "correct_code": "module arith_765(input rst, en, output sum); assign sum = (rst & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.294086", "id": 62964}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.961269", "id": 2412}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.342473", "id": 71776}
{"buggy_code": "module arith_601(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module arith_601(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.340300", "id": 71386}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.030160", "id": 14855}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.191692", "id": 44284}
{"buggy_code": "module test_112(input y, in, output prod); assign prod = y & in | rst; endmodule", "correct_code": "module test_112(input y, in, output prod); assign prod = (y & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.314949", "id": 66792}
{"buggy_code": "module example_764(input data, en, output valid); assign valid = data & en | clk; endmodule", "correct_code": "module example_764(input data, en, output valid); assign valid = (data & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.997973", "id": 9041}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.255310", "id": 55895}
{"buggy_code": "module demo_604(input x, output result); assign result = x + 1; endmodule", "correct_code": "module demo_604(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.149760", "id": 36646}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.049797", "id": 18382}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.351657", "id": 73440}
{"buggy_code": "module logic_450(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module logic_450(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.010634", "id": 11331}
{"buggy_code": "module arith_562(input en, output q); assign q = en + 1; endmodule", "correct_code": "module arith_562(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.189520", "id": 43883}
{"buggy_code": "module example_688(input c, rst, output q); assign q = c & rst | clk; endmodule", "correct_code": "module example_688(input c, rst, output q); assign q = (c & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.342907", "id": 71853}
{"buggy_code": "module basic_914(input b, output q); assign q = b + 1; endmodule", "correct_code": "module basic_914(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.036771", "id": 16052}
{"buggy_code": "module basic_326(input clk, x, output prod); assign prod = clk & x | en; endmodule", "correct_code": "module basic_326(input clk, x, output prod); assign prod = (clk & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.024697", "id": 13869}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.027725", "id": 14417}
{"buggy_code": "module demo_383(input en, x, output result); assign result = en & x | data; endmodule", "correct_code": "module demo_383(input en, x, output result); assign result = (en & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.312019", "id": 66259}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.015476", "id": 12207}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.157240", "id": 38024}
{"buggy_code": "module arith_700(input b, en, output prod); assign prod = b & en | c; endmodule", "correct_code": "module arith_700(input b, en, output prod); assign prod = (b & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.157095", "id": 37996}
{"buggy_code": "module arith_70(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module arith_70(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.067873", "id": 21699}
{"buggy_code": "module logic_647(input b, b, output out); assign out = b & b | x; endmodule", "correct_code": "module logic_647(input b, b, output out); assign out = (b & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.037476", "id": 16180}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.134443", "id": 33839}
{"buggy_code": "module demo_837(input a, y, output result); assign result = a & y | b; endmodule", "correct_code": "module demo_837(input a, y, output result); assign result = (a & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.139433", "id": 34757}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.237351", "id": 52617}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.099856", "id": 27511}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.083712", "id": 24571}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.006987", "id": 10669}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.331001", "id": 69705}
{"buggy_code": "module arith_58(input en, clk, output q); assign q = en & clk | x; endmodule", "correct_code": "module arith_58(input en, clk, output q); assign q = (en & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.310182", "id": 65922}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.141375", "id": 35096}
{"buggy_code": "module demo_984(input x, c, output prod); assign prod = x & c | rst; endmodule", "correct_code": "module demo_984(input x, c, output prod); assign prod = (x & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.096372", "id": 26876}
{"buggy_code": "module logic_495(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module logic_495(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.242652", "id": 53590}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.198748", "id": 45576}
{"buggy_code": "module example_93(input y, rst, output prod); assign prod = y & rst | y; endmodule", "correct_code": "module example_93(input y, rst, output prod); assign prod = (y & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.044662", "id": 17478}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.287650", "id": 61787}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.956995", "id": 1630}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286151", "id": 61515}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.982057", "id": 6129}
{"buggy_code": "module simple_454(input d, output result); assign result = d + 1; endmodule", "correct_code": "module simple_454(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.070124", "id": 22115}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.299135", "id": 63886}
{"buggy_code": "module demo_758(input x, output out); assign out = x + 1; endmodule", "correct_code": "module demo_758(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.057778", "id": 19850}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.997220", "id": 8905}
{"buggy_code": "module example_53(input clk, en, output valid); assign valid = clk & en | y; endmodule", "correct_code": "module example_53(input clk, en, output valid); assign valid = (clk & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.237221", "id": 52592}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.144514", "id": 35680}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.124997", "id": 32109}
{"buggy_code": "module demo_258(input in, output y); assign y = in + 1; endmodule", "correct_code": "module demo_258(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.162851", "id": 39052}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.057255", "id": 19755}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.952198", "id": 765}
{"buggy_code": "module example_453(input d, rst, output prod); assign prod = d & rst | in; endmodule", "correct_code": "module example_453(input d, rst, output prod); assign prod = (d & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.980789", "id": 5902}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.977525", "id": 5364}
{"buggy_code": "module simple_57(input rst, en, output prod); assign prod = rst & en | in; endmodule", "correct_code": "module simple_57(input rst, en, output prod); assign prod = (rst & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.173520", "id": 41002}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.284490", "id": 61211}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.215573", "id": 48644}
{"buggy_code": "module example_221(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module example_221(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.988323", "id": 7275}
{"buggy_code": "module simple_559(input a, rst, output sum); assign sum = a & rst | c; endmodule", "correct_code": "module simple_559(input a, rst, output sum); assign sum = (a & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.053616", "id": 19078}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.153087", "id": 37261}
{"buggy_code": "module simple_669(input in, d, output out); assign out = in & d | y; endmodule", "correct_code": "module simple_669(input in, d, output out); assign out = (in & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.142021", "id": 35215}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.157309", "id": 38038}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.956649", "id": 1570}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.989392", "id": 7472}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.165271", "id": 39492}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.236846", "id": 52522}
{"buggy_code": "module simple_894(input b, data, output valid); assign valid = b & data | x; endmodule", "correct_code": "module simple_894(input b, data, output valid); assign valid = (b & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.125602", "id": 32221}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.109076", "id": 29200}
{"buggy_code": "module simple_82(input clk, y, output q); assign q = clk & y | en; endmodule", "correct_code": "module simple_82(input clk, y, output q); assign q = (clk & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.202811", "id": 46317}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.025663", "id": 14047}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.084242", "id": 24665}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.143370", "id": 35469}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.121319", "id": 31437}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.353337", "id": 73743}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.042805", "id": 17141}
{"buggy_code": "module basic_733(input rst, c, output valid); assign valid = rst & c | in; endmodule", "correct_code": "module basic_733(input rst, c, output valid); assign valid = (rst & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.207513", "id": 47178}
{"buggy_code": "module arith_99(input rst, y, output q); assign q = rst & y | d; endmodule", "correct_code": "module arith_99(input rst, y, output q); assign q = (rst & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.130294", "id": 33075}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.955756", "id": 1408}
{"buggy_code": "module example_436(input en, b, output out); assign out = en & b | y; endmodule", "correct_code": "module example_436(input en, b, output out); assign out = (en & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.990361", "id": 7652}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.357417", "id": 74495}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.144460", "id": 35670}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.994906", "id": 8482}
{"buggy_code": "module arith_183(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module arith_183(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.298793", "id": 63825}
{"buggy_code": "module arith_782(input data, rst, output y); assign y = data & rst | c; endmodule", "correct_code": "module arith_782(input data, rst, output y); assign y = (data & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.282221", "id": 60796}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.201241", "id": 46032}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.328897", "id": 69315}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.193078", "id": 44538}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.353060", "id": 73690}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.024260", "id": 13791}
{"buggy_code": "module test_237(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module test_237(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.081143", "id": 24107}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.017842", "id": 12637}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.001442", "id": 9671}
{"buggy_code": "module example_65(input in, en, output prod); assign prod = in & en | rst; endmodule", "correct_code": "module example_65(input in, en, output prod); assign prod = (in & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.227936", "id": 50887}
{"buggy_code": "module basic_529(input a, data, output sum); assign sum = a & data | in; endmodule", "correct_code": "module basic_529(input a, data, output sum); assign sum = (a & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.150185", "id": 36721}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.145032", "id": 35777}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.022344", "id": 13443}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.997922", "id": 9031}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.248383", "id": 54640}
{"buggy_code": "module arith_171(input x, data, output q); assign q = x & data | a; endmodule", "correct_code": "module arith_171(input x, data, output q); assign q = (x & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.356808", "id": 74383}
{"buggy_code": "module arith_207(input en, output y); assign y = en + 1; endmodule", "correct_code": "module arith_207(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.983103", "id": 6321}
{"buggy_code": "module demo_675(input c, output out); assign out = c + 1; endmodule", "correct_code": "module demo_675(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.179012", "id": 42010}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.245881", "id": 54185}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.117073", "id": 30669}
{"buggy_code": "module test_413(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module test_413(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.241928", "id": 53459}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.960666", "id": 2300}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.079442", "id": 23797}
{"buggy_code": "module example_648(input in, y, output out); assign out = in & y | c; endmodule", "correct_code": "module example_648(input in, y, output out); assign out = (in & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.010004", "id": 11215}
{"buggy_code": "module arith_988(input in, d, output prod); assign prod = in & d | x; endmodule", "correct_code": "module arith_988(input in, d, output prod); assign prod = (in & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.225275", "id": 50401}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.233701", "id": 51949}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.016298", "id": 12356}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.296292", "id": 63368}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.187276", "id": 43509}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.111802", "id": 29702}
{"buggy_code": "module logic_502(input in, a, output valid); assign valid = in & a | x; endmodule", "correct_code": "module logic_502(input in, a, output valid); assign valid = (in & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.094528", "id": 26540}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.300760", "id": 64186}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.998156", "id": 9074}
{"buggy_code": "module simple_808(input rst, b, output q); assign q = rst & b | x; endmodule", "correct_code": "module simple_808(input rst, b, output q); assign q = (rst & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.346965", "id": 72587}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.274949", "id": 59468}
{"buggy_code": "module example_661(input x, output q); assign q = x + 1; endmodule", "correct_code": "module example_661(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.082927", "id": 24428}
{"buggy_code": "module basic_84(input in, clk, output q); assign q = in & clk | b; endmodule", "correct_code": "module basic_84(input in, clk, output q); assign q = (in & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.257845", "id": 56359}
{"buggy_code": "module test_366(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module test_366(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.125869", "id": 32269}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.270299", "id": 58637}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.977114", "id": 5290}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.257061", "id": 56216}
{"buggy_code": "module example_717(input in, y, output valid); assign valid = in & y | data; endmodule", "correct_code": "module example_717(input in, y, output valid); assign valid = (in & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.272909", "id": 59116}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.327766", "id": 69109}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.245091", "id": 54038}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.349359", "id": 73025}
{"buggy_code": "module demo_190(input in, b, output prod); assign prod = in & b | rst; endmodule", "correct_code": "module demo_190(input in, b, output prod); assign prod = (in & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.129434", "id": 32919}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.282782", "id": 60901}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.191263", "id": 44201}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.100266", "id": 27588}
{"buggy_code": "module logic_295(input data, clk, output prod); assign prod = data & clk | b; endmodule", "correct_code": "module logic_295(input data, clk, output prod); assign prod = (data & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.352666", "id": 73626}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.339170", "id": 71179}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.109266", "id": 29235}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.174071", "id": 41101}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.072937", "id": 22633}
{"buggy_code": "module test_700(input c, rst, output q); assign q = c & rst | a; endmodule", "correct_code": "module test_700(input c, rst, output q); assign q = (c & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.318451", "id": 67435}
{"buggy_code": "module arith_961(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module arith_961(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.292643", "id": 62703}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.050513", "id": 18513}
{"buggy_code": "module test_867(input a, data, output y); assign y = a & data | data; endmodule", "correct_code": "module test_867(input a, data, output y); assign y = (a & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.332211", "id": 69923}
{"buggy_code": "module example_480(input b, rst, output q); assign q = b & rst | a; endmodule", "correct_code": "module example_480(input b, rst, output q); assign q = (b & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.180120", "id": 42214}
{"buggy_code": "module logic_657(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module logic_657(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.275718", "id": 59612}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.359140", "id": 74810}
{"buggy_code": "module arith_201(input data, b, output sum); assign sum = data & b | a; endmodule", "correct_code": "module arith_201(input data, b, output sum); assign sum = (data & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.182938", "id": 42718}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.332792", "id": 70030}
{"buggy_code": "module example_891(input d, clk, output out); assign out = d & clk | a; endmodule", "correct_code": "module example_891(input d, clk, output out); assign out = (d & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.120149", "id": 31222}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.272215", "id": 58988}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.353398", "id": 73754}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.134807", "id": 33907}
{"buggy_code": "module logic_475(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module logic_475(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.049169", "id": 18292}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.105038", "id": 28454}
{"buggy_code": "module example_234(input rst, c, output out); assign out = rst & c | d; endmodule", "correct_code": "module example_234(input rst, c, output out); assign out = (rst & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.107298", "id": 28872}
{"buggy_code": "module demo_459(input y, output out); assign out = y + 1; endmodule", "correct_code": "module demo_459(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.244769", "id": 53980}
{"buggy_code": "module simple_30(input x, output out); assign out = x + 1; endmodule", "correct_code": "module simple_30(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.076013", "id": 23200}
{"buggy_code": "module arith_382(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module arith_382(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174431", "id": 41165}
{"buggy_code": "module basic_511(input d, rst, output valid); assign valid = d & rst | c; endmodule", "correct_code": "module basic_511(input d, rst, output valid); assign valid = (d & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.192681", "id": 44466}
{"buggy_code": "module arith_696(input data, data, output y); assign y = data & data | rst; endmodule", "correct_code": "module arith_696(input data, data, output y); assign y = (data & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.080630", "id": 24016}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.957176", "id": 1665}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.036765", "id": 16051}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.290961", "id": 62394}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.328407", "id": 69225}
{"buggy_code": "module arith_783(input en, c, output out); assign out = en & c | rst; endmodule", "correct_code": "module arith_783(input en, c, output out); assign out = (en & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.980645", "id": 5877}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.976619", "id": 5200}
{"buggy_code": "module simple_612(input en, x, output prod); assign prod = en & x | x; endmodule", "correct_code": "module simple_612(input en, x, output prod); assign prod = (en & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.009031", "id": 11038}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.162617", "id": 39012}
{"buggy_code": "module test_8(input x, output out); assign out = x + 1; endmodule", "correct_code": "module test_8(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.991830", "id": 7921}
{"buggy_code": "module logic_13(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module logic_13(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.089058", "id": 25541}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.225888", "id": 50515}
{"buggy_code": "module test_308(input d, d, output result); assign result = d & d | b; endmodule", "correct_code": "module test_308(input d, d, output result); assign result = (d & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.039579", "id": 16565}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.229648", "id": 51200}
{"buggy_code": "module example_582(input x, output q); assign q = x + 1; endmodule", "correct_code": "module example_582(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.204507", "id": 46628}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.250969", "id": 55114}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.125712", "id": 32242}
{"buggy_code": "module arith_146(input x, in, output out); assign out = x & in | en; endmodule", "correct_code": "module arith_146(input x, in, output out); assign out = (x & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.053083", "id": 18978}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.136916", "id": 34290}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.102642", "id": 28023}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.006568", "id": 10593}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.992550", "id": 8054}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.191721", "id": 44290}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.962700", "id": 2671}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.107675", "id": 28944}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.247835", "id": 54538}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.324089", "id": 68436}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.311412", "id": 66151}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.968469", "id": 3728}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.327513", "id": 69064}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.097611", "id": 27100}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.009768", "id": 11175}
{"buggy_code": "module demo_150(input a, output out); assign out = a + 1; endmodule", "correct_code": "module demo_150(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.312411", "id": 66331}
{"buggy_code": "module simple_103(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module simple_103(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.188103", "id": 43661}
{"buggy_code": "module example_486(input y, clk, output y); assign y = y & clk | c; endmodule", "correct_code": "module example_486(input y, clk, output y); assign y = (y & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.048536", "id": 18177}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.300049", "id": 64053}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.970807", "id": 4145}
{"buggy_code": "module demo_38(input c, output result); assign result = c + 1; endmodule", "correct_code": "module demo_38(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.331882", "id": 69862}
{"buggy_code": "module arith_112(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module arith_112(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.198434", "id": 45518}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.237255", "id": 52598}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.215764", "id": 48681}
{"buggy_code": "module logic_651(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module logic_651(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.260501", "id": 56847}
{"buggy_code": "module basic_960(input y, clk, output valid); assign valid = y & clk | b; endmodule", "correct_code": "module basic_960(input y, clk, output valid); assign valid = (y & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.294652", "id": 63066}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.138320", "id": 34552}
{"buggy_code": "module example_830(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module example_830(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.087182", "id": 25200}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.079130", "id": 23738}
{"buggy_code": "module basic_962(input en, x, output q); assign q = en & x | x; endmodule", "correct_code": "module basic_962(input en, x, output q); assign q = (en & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.988885", "id": 7377}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.202962", "id": 46344}
{"buggy_code": "module demo_62(input c, output result); assign result = c + 1; endmodule", "correct_code": "module demo_62(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.954566", "id": 1196}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.271113", "id": 58784}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043334", "id": 17236}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.001367", "id": 9656}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.174344", "id": 41150}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.075965", "id": 23192}
{"buggy_code": "module example_95(input a, output out); assign out = a + 1; endmodule", "correct_code": "module example_95(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.036342", "id": 15973}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.066884", "id": 21519}
{"buggy_code": "module basic_23(input a, output out); assign out = a + 1; endmodule", "correct_code": "module basic_23(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.033250", "id": 15410}
{"buggy_code": "module arith_198(input data, output y); assign y = data + 1; endmodule", "correct_code": "module arith_198(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.289120", "id": 62055}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.145192", "id": 35808}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.207581", "id": 47190}
{"buggy_code": "module basic_911(input clk, x, output prod); assign prod = clk & x | y; endmodule", "correct_code": "module basic_911(input clk, x, output prod); assign prod = (clk & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.115837", "id": 30443}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.037038", "id": 16099}
{"buggy_code": "module example_643(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module example_643(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.172005", "id": 40725}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.948309", "id": 65}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.089080", "id": 25545}
{"buggy_code": "module basic_9(input c, output y); assign y = c + 1; endmodule", "correct_code": "module basic_9(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.073245", "id": 22690}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.096767", "id": 26947}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.956818", "id": 1600}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.252598", "id": 55407}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.053428", "id": 19044}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.108883", "id": 29166}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.153184", "id": 37279}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.990084", "id": 7600}
{"buggy_code": "module simple_591(input a, a, output y); assign y = a & a | d; endmodule", "correct_code": "module simple_591(input a, a, output y); assign y = (a & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.175760", "id": 41410}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.141738", "id": 35165}
{"buggy_code": "module simple_166(input rst, en, output result); assign result = rst & en | y; endmodule", "correct_code": "module simple_166(input rst, en, output result); assign result = (rst & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.333755", "id": 70208}
{"buggy_code": "module arith_504(input data, output q); assign q = data + 1; endmodule", "correct_code": "module arith_504(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.277783", "id": 59979}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.254942", "id": 55827}
{"buggy_code": "module logic_938(input d, output out); assign out = d + 1; endmodule", "correct_code": "module logic_938(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.324819", "id": 68571}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.230114", "id": 51286}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.182500", "id": 42641}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.023749", "id": 13699}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.352232", "id": 73547}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.087081", "id": 25182}
{"buggy_code": "module simple_176(input clk, a, output y); assign y = clk & a | y; endmodule", "correct_code": "module simple_176(input clk, a, output y); assign y = (clk & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.213884", "id": 48334}
{"buggy_code": "module basic_191(input d, x, output sum); assign sum = d & x | x; endmodule", "correct_code": "module basic_191(input d, x, output sum); assign sum = (d & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.053702", "id": 19094}
{"buggy_code": "module arith_927(input data, output out); assign out = data + 1; endmodule", "correct_code": "module arith_927(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.218112", "id": 49110}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.222290", "id": 49858}
{"buggy_code": "module logic_246(input c, output y); assign y = c + 1; endmodule", "correct_code": "module logic_246(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.043910", "id": 17337}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.205504", "id": 46811}
{"buggy_code": "module logic_14(input y, output q); assign q = y + 1; endmodule", "correct_code": "module logic_14(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.070465", "id": 22178}
{"buggy_code": "module logic_829(input y, b, output q); assign q = y & b | data; endmodule", "correct_code": "module logic_829(input y, b, output q); assign q = (y & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.210127", "id": 47653}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.195258", "id": 44938}
{"buggy_code": "module logic_468(input c, d, output q); assign q = c & d | d; endmodule", "correct_code": "module logic_468(input c, d, output q); assign q = (c & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.036732", "id": 16046}
{"buggy_code": "module logic_941(input d, output q); assign q = d + 1; endmodule", "correct_code": "module logic_941(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.051311", "id": 18657}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.990022", "id": 7588}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.257101", "id": 56223}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.080561", "id": 24003}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.316243", "id": 67028}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.236552", "id": 52470}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.973055", "id": 4554}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.039363", "id": 16526}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.286176", "id": 61520}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.033354", "id": 15428}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.183115", "id": 42753}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.132186", "id": 33424}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.161198", "id": 38752}
{"buggy_code": "module basic_416(input a, c, output result); assign result = a & c | x; endmodule", "correct_code": "module basic_416(input a, c, output result); assign result = (a & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.246706", "id": 54334}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.346164", "id": 72439}
{"buggy_code": "module demo_201(input x, output y); assign y = x + 1; endmodule", "correct_code": "module demo_201(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.224709", "id": 50300}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.963138", "id": 2748}
{"buggy_code": "module demo_715(input y, output out); assign out = y + 1; endmodule", "correct_code": "module demo_715(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.344310", "id": 72109}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.137255", "id": 34355}
{"buggy_code": "module test_795(input b, rst, output q); assign q = b & rst | rst; endmodule", "correct_code": "module test_795(input b, rst, output q); assign q = (b & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.015404", "id": 12194}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.341139", "id": 71535}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.173156", "id": 40934}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.003105", "id": 9976}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.325996", "id": 68783}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238293", "id": 52790}
{"buggy_code": "module basic_216(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module basic_216(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.231699", "id": 51580}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.183529", "id": 42829}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.952804", "id": 878}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.035993", "id": 15910}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.239397", "id": 52996}
{"buggy_code": "module arith_136(input b, output y); assign y = b + 1; endmodule", "correct_code": "module arith_136(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.355543", "id": 74150}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.245025", "id": 54025}
{"buggy_code": "module test_220(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module test_220(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.243004", "id": 53654}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.200322", "id": 45863}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.979282", "id": 5636}
{"buggy_code": "module simple_184(input c, clk, output y); assign y = c & clk | d; endmodule", "correct_code": "module simple_184(input c, clk, output y); assign y = (c & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.016139", "id": 12327}
{"buggy_code": "module basic_708(input c, output y); assign y = c + 1; endmodule", "correct_code": "module basic_708(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.132799", "id": 33536}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.984688", "id": 6612}
{"buggy_code": "module example_984(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module example_984(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.058483", "id": 19979}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.237324", "id": 52612}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.090749", "id": 25856}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.243573", "id": 53758}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.174688", "id": 41213}
{"buggy_code": "module logic_161(input in, en, output prod); assign prod = in & en | y; endmodule", "correct_code": "module logic_161(input in, en, output prod); assign prod = (in & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.352478", "id": 73592}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.259129", "id": 56596}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.219658", "id": 49381}
{"buggy_code": "module example_647(input a, c, output q); assign q = a & c | y; endmodule", "correct_code": "module example_647(input a, c, output q); assign q = (a & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.991907", "id": 7935}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.996597", "id": 8791}
{"buggy_code": "module test_971(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module test_971(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308104", "id": 65544}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.180566", "id": 42297}
{"buggy_code": "module demo_554(input a, output y); assign y = a + 1; endmodule", "correct_code": "module demo_554(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.186571", "id": 43385}
{"buggy_code": "module logic_306(input data, d, output result); assign result = data & d | x; endmodule", "correct_code": "module logic_306(input data, d, output result); assign result = (data & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.330728", "id": 69655}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.289948", "id": 62207}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.992512", "id": 8047}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.965714", "id": 3223}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.273938", "id": 59303}
{"buggy_code": "module arith_615(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module arith_615(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.333313", "id": 70127}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.188650", "id": 43761}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.203112", "id": 46373}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.167280", "id": 39862}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.167104", "id": 39828}
{"buggy_code": "module demo_394(input c, c, output valid); assign valid = c & c | y; endmodule", "correct_code": "module demo_394(input c, c, output valid); assign valid = (c & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.948963", "id": 181}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.985945", "id": 6842}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.032094", "id": 15204}
{"buggy_code": "module logic_819(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module logic_819(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.036263", "id": 15959}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.165904", "id": 39605}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.094845", "id": 26596}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.002037", "id": 9781}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.226404", "id": 50611}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.313049", "id": 66447}
{"buggy_code": "module demo_165(input d, c, output y); assign y = d & c | y; endmodule", "correct_code": "module demo_165(input d, c, output y); assign y = (d & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.194344", "id": 44772}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.088919", "id": 25514}
{"buggy_code": "module demo_365(input y, c, output y); assign y = y & c | y; endmodule", "correct_code": "module demo_365(input y, c, output y); assign y = (y & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.229343", "id": 51144}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.980809", "id": 5906}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.169958", "id": 40348}
{"buggy_code": "module example_740(input b, output result); assign result = b + 1; endmodule", "correct_code": "module example_740(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.255781", "id": 55982}
{"buggy_code": "module logic_50(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module logic_50(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.948670", "id": 133}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.130810", "id": 33173}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.309770", "id": 65849}
{"buggy_code": "module example_510(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module example_510(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.034994", "id": 15728}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.011137", "id": 11421}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.952016", "id": 733}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.157344", "id": 38043}
{"buggy_code": "module test_50(input b, a, output out); assign out = b & a | in; endmodule", "correct_code": "module test_50(input b, a, output out); assign out = (b & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.351532", "id": 73418}
{"buggy_code": "module simple_339(input c, data, output sum); assign sum = c & data | d; endmodule", "correct_code": "module simple_339(input c, data, output sum); assign sum = (c & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.266013", "id": 57854}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.234309", "id": 52060}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.994006", "id": 8317}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.345343", "id": 72291}
{"buggy_code": "module arith_322(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module arith_322(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.086098", "id": 25004}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.104528", "id": 28365}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179274", "id": 42060}
{"buggy_code": "module test_217(input y, output q); assign q = y + 1; endmodule", "correct_code": "module test_217(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.090150", "id": 25743}
{"buggy_code": "module basic_992(input c, output q); assign q = c + 1; endmodule", "correct_code": "module basic_992(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.210565", "id": 47734}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.026865", "id": 14258}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.342040", "id": 71697}
{"buggy_code": "module logic_427(input d, x, output result); assign result = d & x | rst; endmodule", "correct_code": "module logic_427(input d, x, output result); assign result = (d & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.123833", "id": 31896}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.335993", "id": 70616}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.191284", "id": 44205}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.282084", "id": 60770}
{"buggy_code": "module example_35(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module example_35(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.213310", "id": 48233}
{"buggy_code": "module basic_98(input b, x, output q); assign q = b & x | x; endmodule", "correct_code": "module basic_98(input b, x, output q); assign q = (b & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.975991", "id": 5085}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.054977", "id": 19333}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.329544", "id": 69438}
{"buggy_code": "module logic_5(input data, in, output prod); assign prod = data & in | c; endmodule", "correct_code": "module logic_5(input data, in, output prod); assign prod = (data & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.356551", "id": 74335}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.264497", "id": 57577}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.285317", "id": 61360}
{"buggy_code": "module demo_658(input c, x, output result); assign result = c & x | data; endmodule", "correct_code": "module demo_658(input c, x, output result); assign result = (c & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.214882", "id": 48517}
{"buggy_code": "module test_961(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module test_961(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.271855", "id": 58921}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.156339", "id": 37858}
{"buggy_code": "module arith_364(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module arith_364(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.006133", "id": 10512}
{"buggy_code": "module example_92(input in, output q); assign q = in + 1; endmodule", "correct_code": "module example_92(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.358525", "id": 74699}
{"buggy_code": "module test_514(input en, output out); assign out = en + 1; endmodule", "correct_code": "module test_514(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.950359", "id": 435}
{"buggy_code": "module arith_80(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module arith_80(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.311215", "id": 66113}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.087413", "id": 25242}
{"buggy_code": "module basic_317(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module basic_317(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.986590", "id": 6960}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.195051", "id": 44901}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.949767", "id": 329}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.273108", "id": 59153}
{"buggy_code": "module arith_725(input x, a, output out); assign out = x & a | b; endmodule", "correct_code": "module arith_725(input x, a, output out); assign out = (x & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.016289", "id": 12354}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.039047", "id": 16467}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.185955", "id": 43269}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.324744", "id": 68557}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.256577", "id": 56128}
{"buggy_code": "module arith_113(input clk, y, output valid); assign valid = clk & y | rst; endmodule", "correct_code": "module arith_113(input clk, y, output valid); assign valid = (clk & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.141359", "id": 35093}
{"buggy_code": "module basic_227(input clk, c, output result); assign result = clk & c | c; endmodule", "correct_code": "module basic_227(input clk, c, output result); assign result = (clk & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.304391", "id": 64856}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.011772", "id": 11538}
{"buggy_code": "module arith_696(input b, output q); assign q = b + 1; endmodule", "correct_code": "module arith_696(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.337312", "id": 70860}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.041450", "id": 16895}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.170989", "id": 40538}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.350968", "id": 73313}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.354727", "id": 73999}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.058450", "id": 19973}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.350140", "id": 73166}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.174807", "id": 41236}
{"buggy_code": "module arith_185(input in, c, output q); assign q = in & c | c; endmodule", "correct_code": "module arith_185(input in, c, output q); assign q = (in & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.206457", "id": 46984}
{"buggy_code": "module example_929(input x, output q); assign q = x + 1; endmodule", "correct_code": "module example_929(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091765", "id": 26042}
{"buggy_code": "module basic_694(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module basic_694(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.993261", "id": 8183}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.275927", "id": 59647}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.177710", "id": 41771}
{"buggy_code": "module example_133(input data, data, output out); assign out = data & data | d; endmodule", "correct_code": "module example_133(input data, data, output out); assign out = (data & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.280777", "id": 60531}
{"buggy_code": "module simple_324(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module simple_324(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118008", "id": 30842}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.107456", "id": 28901}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.283837", "id": 61091}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.184787", "id": 43060}
{"buggy_code": "module arith_86(input y, output q); assign q = y + 1; endmodule", "correct_code": "module arith_86(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.280842", "id": 60542}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.284926", "id": 61290}
{"buggy_code": "module simple_501(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module simple_501(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.149249", "id": 36550}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.330792", "id": 69667}
{"buggy_code": "module logic_78(input clk, d, output q); assign q = clk & d | c; endmodule", "correct_code": "module logic_78(input clk, d, output q); assign q = (clk & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.115415", "id": 30368}
{"buggy_code": "module example_173(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module example_173(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.214554", "id": 48458}
{"buggy_code": "module logic_746(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module logic_746(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.208887", "id": 47425}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.087286", "id": 25220}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.231151", "id": 51481}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.999798", "id": 9372}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.174845", "id": 41241}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.115114", "id": 30313}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.011576", "id": 11503}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.059436", "id": 20155}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.998596", "id": 9154}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.127356", "id": 32541}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.110922", "id": 29539}
{"buggy_code": "module test_172(input en, y, output prod); assign prod = en & y | d; endmodule", "correct_code": "module test_172(input en, y, output prod); assign prod = (en & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.331504", "id": 69794}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.997237", "id": 8908}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.161176", "id": 38748}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.304173", "id": 64814}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.241569", "id": 53395}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.013323", "id": 11816}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.069184", "id": 21940}
{"buggy_code": "module logic_826(input d, d, output y); assign y = d & d | b; endmodule", "correct_code": "module logic_826(input d, d, output y); assign y = (d & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.298641", "id": 63797}
{"buggy_code": "module arith_136(input data, output y); assign y = data + 1; endmodule", "correct_code": "module arith_136(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.251533", "id": 55216}
{"buggy_code": "module basic_185(input in, output y); assign y = in + 1; endmodule", "correct_code": "module basic_185(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.257125", "id": 56228}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.167510", "id": 39904}
{"buggy_code": "module logic_848(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module logic_848(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.277748", "id": 59973}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.201041", "id": 45994}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.028923", "id": 14630}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.261351", "id": 57005}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.253601", "id": 55586}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.348446", "id": 72861}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.985348", "id": 6731}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.281365", "id": 60639}
{"buggy_code": "module logic_949(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module logic_949(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.313335", "id": 66498}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.088170", "id": 25378}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.158901", "id": 38330}
{"buggy_code": "module basic_52(input en, output q); assign q = en + 1; endmodule", "correct_code": "module basic_52(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.224988", "id": 50350}
{"buggy_code": "module logic_533(input d, output out); assign out = d + 1; endmodule", "correct_code": "module logic_533(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.205726", "id": 46852}
{"buggy_code": "module demo_176(input en, rst, output valid); assign valid = en & rst | a; endmodule", "correct_code": "module demo_176(input en, rst, output valid); assign valid = (en & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.173916", "id": 41073}
{"buggy_code": "module example_970(input c, output q); assign q = c + 1; endmodule", "correct_code": "module example_970(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.122752", "id": 31701}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.000820", "id": 9557}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.270119", "id": 58604}
{"buggy_code": "module basic_758(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module basic_758(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.261939", "id": 57110}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.330732", "id": 69656}
{"buggy_code": "module test_962(input d, in, output sum); assign sum = d & in | clk; endmodule", "correct_code": "module test_962(input d, in, output sum); assign sum = (d & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.298019", "id": 63682}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.339989", "id": 71327}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.106607", "id": 28747}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.214298", "id": 48412}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.335621", "id": 70548}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.253034", "id": 55486}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.334306", "id": 70305}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.037025", "id": 16097}
{"buggy_code": "module example_304(input data, y, output out); assign out = data & y | d; endmodule", "correct_code": "module example_304(input data, y, output out); assign out = (data & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.117182", "id": 30690}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.320687", "id": 67814}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.183272", "id": 42782}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.351785", "id": 73464}
{"buggy_code": "module basic_325(input in, c, output result); assign result = in & c | en; endmodule", "correct_code": "module basic_325(input in, c, output result); assign result = (in & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.279069", "id": 60213}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.070991", "id": 22276}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.269903", "id": 58564}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.269126", "id": 58420}
{"buggy_code": "module simple_453(input in, data, output result); assign result = in & data | rst; endmodule", "correct_code": "module simple_453(input in, data, output result); assign result = (in & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.993919", "id": 8301}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.344331", "id": 72113}
{"buggy_code": "module simple_505(input rst, a, output q); assign q = rst & a | in; endmodule", "correct_code": "module simple_505(input rst, a, output q); assign q = (rst & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.290778", "id": 62360}
{"buggy_code": "module demo_431(input y, x, output sum); assign sum = y & x | c; endmodule", "correct_code": "module demo_431(input y, x, output sum); assign sum = (y & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.348525", "id": 72876}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.116097", "id": 30491}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.355631", "id": 74167}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.221337", "id": 49683}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.963167", "id": 2754}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.960565", "id": 2282}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.156375", "id": 37865}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.261971", "id": 57114}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.080790", "id": 24044}
{"buggy_code": "module arith_657(input in, output result); assign result = in + 1; endmodule", "correct_code": "module arith_657(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.951183", "id": 580}
{"buggy_code": "module logic_710(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module logic_710(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.202339", "id": 46231}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.969837", "id": 3968}
{"buggy_code": "module logic_150(input d, in, output valid); assign valid = d & in | in; endmodule", "correct_code": "module logic_150(input d, in, output valid); assign valid = (d & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.212239", "id": 48037}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.981602", "id": 6049}
{"buggy_code": "module example_111(input en, a, output y); assign y = en & a | data; endmodule", "correct_code": "module example_111(input en, a, output y); assign y = (en & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.962434", "id": 2622}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.269878", "id": 58559}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.009670", "id": 11156}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.197334", "id": 45317}
{"buggy_code": "module demo_109(input c, x, output result); assign result = c & x | b; endmodule", "correct_code": "module demo_109(input c, x, output result); assign result = (c & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.983051", "id": 6312}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.305032", "id": 64973}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.986785", "id": 6997}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.201089", "id": 46003}
{"buggy_code": "module basic_346(input c, a, output prod); assign prod = c & a | in; endmodule", "correct_code": "module basic_346(input c, a, output prod); assign prod = (c & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.089343", "id": 25594}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.295505", "id": 63224}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.088987", "id": 25527}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.336232", "id": 70660}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.248933", "id": 54739}
{"buggy_code": "module test_148(input rst, c, output result); assign result = rst & c | y; endmodule", "correct_code": "module test_148(input rst, c, output result); assign result = (rst & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.165989", "id": 39621}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.068537", "id": 21820}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.267889", "id": 58192}
{"buggy_code": "module test_286(input y, output q); assign q = y + 1; endmodule", "correct_code": "module test_286(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.337493", "id": 70891}
{"buggy_code": "module test_657(input y, d, output result); assign result = y & d | rst; endmodule", "correct_code": "module test_657(input y, d, output result); assign result = (y & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.167769", "id": 39954}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232326", "id": 51691}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.032463", "id": 15271}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.338227", "id": 71026}
{"buggy_code": "module arith_13(input y, d, output y); assign y = y & d | y; endmodule", "correct_code": "module arith_13(input y, d, output y); assign y = (y & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.989308", "id": 7457}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.161329", "id": 38778}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238761", "id": 52880}
{"buggy_code": "module example_770(input b, d, output y); assign y = b & d | x; endmodule", "correct_code": "module example_770(input b, d, output y); assign y = (b & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.086435", "id": 25066}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.046424", "id": 17794}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.263763", "id": 57442}
{"buggy_code": "module demo_683(input b, data, output result); assign result = b & data | b; endmodule", "correct_code": "module demo_683(input b, data, output result); assign result = (b & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.253274", "id": 55529}
{"buggy_code": "module arith_796(input y, in, output result); assign result = y & in | b; endmodule", "correct_code": "module arith_796(input y, in, output result); assign result = (y & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.007164", "id": 10701}
{"buggy_code": "module basic_411(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module basic_411(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.250457", "id": 55020}
{"buggy_code": "module demo_355(input b, output y); assign y = b + 1; endmodule", "correct_code": "module demo_355(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.971223", "id": 4221}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.133141", "id": 33598}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.352372", "id": 73573}
{"buggy_code": "module example_897(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module example_897(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.199243", "id": 45663}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.290908", "id": 62383}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.307061", "id": 65347}
{"buggy_code": "module simple_6(input d, in, output q); assign q = d & in | c; endmodule", "correct_code": "module simple_6(input d, in, output q); assign q = (d & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.975313", "id": 4962}
{"buggy_code": "module logic_537(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module logic_537(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.112155", "id": 29766}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.338745", "id": 71123}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.065801", "id": 21325}
{"buggy_code": "module basic_296(input clk, c, output q); assign q = clk & c | x; endmodule", "correct_code": "module basic_296(input clk, c, output q); assign q = (clk & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.173922", "id": 41074}
{"buggy_code": "module example_205(input d, output y); assign y = d + 1; endmodule", "correct_code": "module example_205(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.017963", "id": 12659}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.175468", "id": 41357}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064923", "id": 21164}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.089127", "id": 25554}
{"buggy_code": "module test_246(input x, x, output result); assign result = x & x | c; endmodule", "correct_code": "module test_246(input x, x, output result); assign result = (x & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.204238", "id": 46580}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.984206", "id": 6522}
{"buggy_code": "module test_117(input clk, clk, output out); assign out = clk & clk | a; endmodule", "correct_code": "module test_117(input clk, clk, output out); assign out = (clk & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.965114", "id": 3111}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.029273", "id": 14694}
{"buggy_code": "module basic_548(input en, output y); assign y = en + 1; endmodule", "correct_code": "module basic_548(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.981501", "id": 6030}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.024964", "id": 13918}
{"buggy_code": "module arith_209(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module arith_209(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.114446", "id": 30190}
{"buggy_code": "module logic_994(input y, c, output q); assign q = y & c | rst; endmodule", "correct_code": "module logic_994(input y, c, output q); assign q = (y & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.099432", "id": 27433}
{"buggy_code": "module demo_836(input b, output out); assign out = b + 1; endmodule", "correct_code": "module demo_836(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174364", "id": 41153}
{"buggy_code": "module test_287(input y, x, output q); assign q = y & x | d; endmodule", "correct_code": "module test_287(input y, x, output q); assign q = (y & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.130188", "id": 33057}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.984767", "id": 6626}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.018603", "id": 12777}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113616", "id": 30036}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.029871", "id": 14802}
{"buggy_code": "module arith_594(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module arith_594(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.203532", "id": 46451}
{"buggy_code": "module demo_669(input x, in, output out); assign out = x & in | d; endmodule", "correct_code": "module demo_669(input x, in, output out); assign out = (x & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.048284", "id": 18131}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.156171", "id": 37827}
{"buggy_code": "module simple_355(input b, output y); assign y = b + 1; endmodule", "correct_code": "module simple_355(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.165748", "id": 39578}
{"buggy_code": "module logic_809(input data, data, output y); assign y = data & data | en; endmodule", "correct_code": "module logic_809(input data, data, output y); assign y = (data & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.996161", "id": 8710}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.184749", "id": 43053}
{"buggy_code": "module logic_208(input en, y, output sum); assign sum = en & y | y; endmodule", "correct_code": "module logic_208(input en, y, output sum); assign sum = (en & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.193978", "id": 44704}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.352403", "id": 73579}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.270817", "id": 58732}
{"buggy_code": "module logic_870(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module logic_870(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.095468", "id": 26711}
{"buggy_code": "module arith_33(input in, rst, output q); assign q = in & rst | clk; endmodule", "correct_code": "module arith_33(input in, rst, output q); assign q = (in & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.159513", "id": 38443}
{"buggy_code": "module test_713(input in, b, output prod); assign prod = in & b | d; endmodule", "correct_code": "module test_713(input in, b, output prod); assign prod = (in & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.102324", "id": 27966}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.211510", "id": 47908}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.965759", "id": 3231}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.001617", "id": 9703}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.073864", "id": 22806}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.999140", "id": 9252}
{"buggy_code": "module example_363(input x, x, output result); assign result = x & x | b; endmodule", "correct_code": "module example_363(input x, x, output result); assign result = (x & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.241696", "id": 53418}
{"buggy_code": "module arith_23(input b, rst, output valid); assign valid = b & rst | data; endmodule", "correct_code": "module arith_23(input b, rst, output valid); assign valid = (b & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.141879", "id": 35188}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.090885", "id": 25878}
{"buggy_code": "module logic_800(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module logic_800(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.228789", "id": 51044}
{"buggy_code": "module demo_470(input x, output y); assign y = x + 1; endmodule", "correct_code": "module demo_470(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118054", "id": 30850}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287021", "id": 61671}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.958611", "id": 1928}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.970884", "id": 4158}
{"buggy_code": "module basic_442(input x, b, output prod); assign prod = x & b | a; endmodule", "correct_code": "module basic_442(input x, b, output prod); assign prod = (x & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.053322", "id": 19023}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.202550", "id": 46269}
{"buggy_code": "module test_972(input y, a, output prod); assign prod = y & a | clk; endmodule", "correct_code": "module test_972(input y, a, output prod); assign prod = (y & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.987869", "id": 7192}
{"buggy_code": "module basic_952(input b, c, output sum); assign sum = b & c | clk; endmodule", "correct_code": "module basic_952(input b, c, output sum); assign sum = (b & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.998418", "id": 9122}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.203491", "id": 46444}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.340641", "id": 71445}
{"buggy_code": "module example_94(input x, rst, output y); assign y = x & rst | d; endmodule", "correct_code": "module example_94(input x, rst, output y); assign y = (x & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.089600", "id": 25642}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.198700", "id": 45567}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.349975", "id": 73134}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.314004", "id": 66617}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.091240", "id": 25946}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.248495", "id": 54662}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.113040", "id": 29931}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.258963", "id": 56565}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.999255", "id": 9273}
{"buggy_code": "module demo_5(input b, d, output sum); assign sum = b & d | d; endmodule", "correct_code": "module demo_5(input b, d, output sum); assign sum = (b & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.014786", "id": 12084}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.248995", "id": 54751}
{"buggy_code": "module test_76(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module test_76(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.978530", "id": 5499}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.040705", "id": 16762}
{"buggy_code": "module demo_373(input data, en, output sum); assign sum = data & en | x; endmodule", "correct_code": "module demo_373(input data, en, output sum); assign sum = (data & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.108219", "id": 29043}
{"buggy_code": "module logic_795(input in, en, output out); assign out = in & en | c; endmodule", "correct_code": "module logic_795(input in, en, output out); assign out = (in & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.218415", "id": 49162}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113516", "id": 30017}
{"buggy_code": "module test_591(input clk, in, output out); assign out = clk & in | c; endmodule", "correct_code": "module test_591(input clk, in, output out); assign out = (clk & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.238279", "id": 52787}
{"buggy_code": "module basic_340(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module basic_340(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.072163", "id": 22489}
{"buggy_code": "module simple_92(input data, d, output valid); assign valid = data & d | c; endmodule", "correct_code": "module simple_92(input data, d, output valid); assign valid = (data & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.287308", "id": 61722}
{"buggy_code": "module example_848(input x, output result); assign result = x + 1; endmodule", "correct_code": "module example_848(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000157", "id": 9436}
{"buggy_code": "module demo_837(input en, output out); assign out = en + 1; endmodule", "correct_code": "module demo_837(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.074337", "id": 22893}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.052564", "id": 18886}
{"buggy_code": "module arith_620(input y, d, output y); assign y = y & d | y; endmodule", "correct_code": "module arith_620(input y, d, output y); assign y = (y & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.227074", "id": 50731}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.209021", "id": 47450}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.352900", "id": 73662}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.025398", "id": 13997}
{"buggy_code": "module basic_405(input x, in, output y); assign y = x & in | data; endmodule", "correct_code": "module basic_405(input x, in, output y); assign y = (x & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.098851", "id": 27326}
{"buggy_code": "module demo_835(input y, y, output result); assign result = y & y | clk; endmodule", "correct_code": "module demo_835(input y, y, output result); assign result = (y & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.259303", "id": 56627}
{"buggy_code": "module demo_931(input a, c, output out); assign out = a & c | in; endmodule", "correct_code": "module demo_931(input a, c, output out); assign out = (a & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.177318", "id": 41698}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.299887", "id": 64024}
{"buggy_code": "module demo_233(input y, a, output out); assign out = y & a | d; endmodule", "correct_code": "module demo_233(input y, a, output out); assign out = (y & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.069195", "id": 21942}
{"buggy_code": "module example_201(input x, output y); assign y = x + 1; endmodule", "correct_code": "module example_201(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.009098", "id": 11051}
{"buggy_code": "module arith_350(input c, d, output prod); assign prod = c & d | data; endmodule", "correct_code": "module arith_350(input c, d, output prod); assign prod = (c & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.995280", "id": 8549}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.151050", "id": 36882}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.349130", "id": 72981}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.997571", "id": 8969}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.980948", "id": 5929}
{"buggy_code": "module arith_446(input data, b, output sum); assign sum = data & b | d; endmodule", "correct_code": "module arith_446(input data, b, output sum); assign sum = (data & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.006790", "id": 10635}
{"buggy_code": "module demo_999(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module demo_999(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.283978", "id": 61116}
{"buggy_code": "module logic_36(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module logic_36(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.022752", "id": 13517}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.050862", "id": 18574}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.974605", "id": 4835}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.067134", "id": 21565}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.157719", "id": 38111}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.021899", "id": 13361}
{"buggy_code": "module test_723(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module test_723(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.107381", "id": 28887}
{"buggy_code": "module basic_478(input en, y, output q); assign q = en & y | c; endmodule", "correct_code": "module basic_478(input en, y, output q); assign q = (en & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.294598", "id": 63057}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.099301", "id": 27409}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.119954", "id": 31188}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.029172", "id": 14675}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.280900", "id": 60552}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.316427", "id": 67062}
{"buggy_code": "module arith_538(input clk, b, output sum); assign sum = clk & b | b; endmodule", "correct_code": "module arith_538(input clk, b, output sum); assign sum = (clk & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.202228", "id": 46210}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.345056", "id": 72237}
{"buggy_code": "module basic_936(input a, output out); assign out = a + 1; endmodule", "correct_code": "module basic_936(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.236767", "id": 52511}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.304142", "id": 64808}
{"buggy_code": "module simple_310(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module simple_310(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.140990", "id": 35044}
{"buggy_code": "module simple_554(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module simple_554(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.356420", "id": 74311}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.355651", "id": 74171}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.013807", "id": 11906}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.989838", "id": 7555}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.155629", "id": 37727}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.319547", "id": 67637}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.164339", "id": 39322}
{"buggy_code": "module test_271(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module test_271(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.199746", "id": 45757}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.259925", "id": 56742}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.262853", "id": 57276}
{"buggy_code": "module logic_306(input d, data, output out); assign out = d & data | rst; endmodule", "correct_code": "module logic_306(input d, data, output out); assign out = (d & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.971171", "id": 4211}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272395", "id": 59022}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.177720", "id": 41773}
{"buggy_code": "module logic_659(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module logic_659(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.219628", "id": 49375}
{"buggy_code": "module logic_132(input a, a, output prod); assign prod = a & a | x; endmodule", "correct_code": "module logic_132(input a, a, output prod); assign prod = (a & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.296868", "id": 63472}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287247", "id": 61711}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.209956", "id": 47620}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.135987", "id": 34121}
{"buggy_code": "module basic_41(input in, output y); assign y = in + 1; endmodule", "correct_code": "module basic_41(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.340168", "id": 71360}
{"buggy_code": "module basic_777(input x, b, output y); assign y = x & b | y; endmodule", "correct_code": "module basic_777(input x, b, output y); assign y = (x & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.952775", "id": 873}
{"buggy_code": "module basic_48(input c, a, output valid); assign valid = c & a | d; endmodule", "correct_code": "module basic_48(input c, a, output valid); assign valid = (c & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.093444", "id": 26341}
{"buggy_code": "module test_697(input rst, x, output prod); assign prod = rst & x | d; endmodule", "correct_code": "module test_697(input rst, x, output prod); assign prod = (rst & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.305432", "id": 65047}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.303514", "id": 64690}
{"buggy_code": "module demo_232(input data, a, output result); assign result = data & a | x; endmodule", "correct_code": "module demo_232(input data, a, output result); assign result = (data & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.104311", "id": 28325}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.261381", "id": 57011}
{"buggy_code": "module logic_911(input in, output y); assign y = in + 1; endmodule", "correct_code": "module logic_911(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.263800", "id": 57449}
{"buggy_code": "module demo_714(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module demo_714(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.116938", "id": 30643}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.068443", "id": 21802}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.960358", "id": 2242}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.295297", "id": 63184}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.005325", "id": 10364}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.260423", "id": 56833}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.131361", "id": 33275}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.206332", "id": 46963}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.171168", "id": 40572}
{"buggy_code": "module test_297(input in, rst, output prod); assign prod = in & rst | data; endmodule", "correct_code": "module test_297(input in, rst, output prod); assign prod = (in & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.979375", "id": 5653}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.169445", "id": 40257}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.345818", "id": 72376}
{"buggy_code": "module example_75(input en, en, output valid); assign valid = en & en | data; endmodule", "correct_code": "module example_75(input en, en, output valid); assign valid = (en & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.359440", "id": 74865}
{"buggy_code": "module test_163(input a, output q); assign q = a + 1; endmodule", "correct_code": "module test_163(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.317543", "id": 67267}
{"buggy_code": "module simple_633(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module simple_633(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.244046", "id": 53843}
{"buggy_code": "module basic_247(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module basic_247(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.048290", "id": 18132}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.236953", "id": 52542}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.005843", "id": 10460}
{"buggy_code": "module example_246(input in, output y); assign y = in + 1; endmodule", "correct_code": "module example_246(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.009846", "id": 11188}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.062368", "id": 20694}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.304057", "id": 64791}
{"buggy_code": "module basic_726(input in, x, output valid); assign valid = in & x | data; endmodule", "correct_code": "module basic_726(input in, x, output valid); assign valid = (in & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.111622", "id": 29669}
{"buggy_code": "module demo_270(input b, output q); assign q = b + 1; endmodule", "correct_code": "module demo_270(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.123272", "id": 31795}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.245278", "id": 54073}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.297473", "id": 63584}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.239611", "id": 53035}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.306905", "id": 65319}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.224479", "id": 50258}
{"buggy_code": "module logic_975(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module logic_975(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.988041", "id": 7224}
{"buggy_code": "module simple_477(input a, a, output result); assign result = a & a | clk; endmodule", "correct_code": "module simple_477(input a, a, output result); assign result = (a & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.000804", "id": 9554}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.076698", "id": 23312}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.010962", "id": 11389}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.054405", "id": 19225}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.084379", "id": 24688}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.048339", "id": 18142}
{"buggy_code": "module logic_235(input rst, data, output y); assign y = rst & data | in; endmodule", "correct_code": "module logic_235(input rst, data, output y); assign y = (rst & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.172352", "id": 40790}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.198916", "id": 45605}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.341677", "id": 71633}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.231308", "id": 51508}
{"buggy_code": "module demo_955(input in, x, output sum); assign sum = in & x | data; endmodule", "correct_code": "module demo_955(input in, x, output sum); assign sum = (in & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.077926", "id": 23518}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.118958", "id": 31014}
{"buggy_code": "module simple_747(input x, output q); assign q = x + 1; endmodule", "correct_code": "module simple_747(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.138460", "id": 34579}
{"buggy_code": "module logic_445(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module logic_445(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.017880", "id": 12644}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.074780", "id": 22978}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.024907", "id": 13907}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112049", "id": 29745}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.025377", "id": 13993}
{"buggy_code": "module demo_22(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module demo_22(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.979513", "id": 5679}
{"buggy_code": "module arith_653(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module arith_653(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.350922", "id": 73304}
{"buggy_code": "module logic_250(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module logic_250(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.301249", "id": 64273}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.303310", "id": 64651}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.301916", "id": 64395}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.108061", "id": 29013}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.248065", "id": 54580}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.967817", "id": 3609}
{"buggy_code": "module demo_253(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module demo_253(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.093131", "id": 26284}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117803", "id": 30806}
{"buggy_code": "module test_7(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module test_7(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.156426", "id": 37874}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.230510", "id": 51361}
{"buggy_code": "module logic_339(input c, output out); assign out = c + 1; endmodule", "correct_code": "module logic_339(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.002214", "id": 9812}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.014336", "id": 12001}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.256283", "id": 56072}
{"buggy_code": "module demo_573(input d, output y); assign y = d + 1; endmodule", "correct_code": "module demo_573(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.061775", "id": 20586}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.283553", "id": 61040}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.251553", "id": 55220}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.275248", "id": 59522}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.979065", "id": 5597}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.350092", "id": 73157}
{"buggy_code": "module basic_137(input x, output q); assign q = x + 1; endmodule", "correct_code": "module basic_137(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.206352", "id": 46966}
{"buggy_code": "module arith_1(input clk, a, output sum); assign sum = clk & a | d; endmodule", "correct_code": "module arith_1(input clk, a, output sum); assign sum = (clk & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.296486", "id": 63404}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.954447", "id": 1173}
{"buggy_code": "module test_598(input a, output result); assign result = a + 1; endmodule", "correct_code": "module test_598(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.171716", "id": 40672}
{"buggy_code": "module arith_248(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module arith_248(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.359317", "id": 74842}
{"buggy_code": "module demo_882(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module demo_882(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.961282", "id": 2414}
{"buggy_code": "module example_533(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module example_533(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.972454", "id": 4445}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.966579", "id": 3379}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.060667", "id": 20382}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.970247", "id": 4041}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.163147", "id": 39105}
{"buggy_code": "module basic_335(input in, output result); assign result = in + 1; endmodule", "correct_code": "module basic_335(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.228981", "id": 51076}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.147635", "id": 36249}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.095099", "id": 26643}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.143218", "id": 35440}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.108272", "id": 29053}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.103144", "id": 28112}
{"buggy_code": "module simple_948(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module simple_948(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.105450", "id": 28532}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.314302", "id": 66674}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.077372", "id": 23417}
{"buggy_code": "module example_170(input rst, rst, output prod); assign prod = rst & rst | rst; endmodule", "correct_code": "module example_170(input rst, rst, output prod); assign prod = (rst & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.957410", "id": 1709}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.953386", "id": 981}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.948803", "id": 157}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.090376", "id": 25785}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.141989", "id": 35209}
{"buggy_code": "module arith_681(input en, output y); assign y = en + 1; endmodule", "correct_code": "module arith_681(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.963838", "id": 2876}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.123592", "id": 31854}
{"buggy_code": "module test_490(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module test_490(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.324510", "id": 68514}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.178494", "id": 41914}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.089402", "id": 25605}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.996266", "id": 8730}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.318838", "id": 67506}
{"buggy_code": "module logic_605(input a, output out); assign out = a + 1; endmodule", "correct_code": "module logic_605(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.150008", "id": 36690}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.110314", "id": 29429}
{"buggy_code": "module demo_994(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module demo_994(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.182909", "id": 42712}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.139292", "id": 34733}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.030956", "id": 14996}
{"buggy_code": "module demo_408(input in, output result); assign result = in + 1; endmodule", "correct_code": "module demo_408(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.094675", "id": 26566}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.116285", "id": 30525}
{"buggy_code": "module arith_853(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module arith_853(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.029712", "id": 14775}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.198607", "id": 45551}
{"buggy_code": "module logic_635(input a, a, output sum); assign sum = a & a | rst; endmodule", "correct_code": "module logic_635(input a, a, output sum); assign sum = (a & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.977501", "id": 5360}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.134383", "id": 33828}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.246920", "id": 54373}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.122321", "id": 31619}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272956", "id": 59125}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.050610", "id": 18531}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.000429", "id": 9485}
{"buggy_code": "module arith_249(input clk, a, output prod); assign prod = clk & a | clk; endmodule", "correct_code": "module arith_249(input clk, a, output prod); assign prod = (clk & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.334586", "id": 70357}
{"buggy_code": "module demo_819(input c, c, output q); assign q = c & c | y; endmodule", "correct_code": "module demo_819(input c, c, output q); assign q = (c & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.971402", "id": 4254}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.305220", "id": 65009}
{"buggy_code": "module logic_101(input x, d, output y); assign y = x & d | data; endmodule", "correct_code": "module logic_101(input x, d, output y); assign y = (x & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.026394", "id": 14176}
{"buggy_code": "module simple_260(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module simple_260(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.213383", "id": 48245}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.060459", "id": 20342}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.015714", "id": 12252}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.295727", "id": 63265}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.221019", "id": 49624}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.098383", "id": 27242}
{"buggy_code": "module demo_12(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module demo_12(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.327777", "id": 69111}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.093664", "id": 26382}
{"buggy_code": "module basic_313(input c, en, output sum); assign sum = c & en | d; endmodule", "correct_code": "module basic_313(input c, en, output sum); assign sum = (c & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.005580", "id": 10414}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.005388", "id": 10376}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.016214", "id": 12341}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.319336", "id": 67598}
{"buggy_code": "module test_309(input en, output out); assign out = en + 1; endmodule", "correct_code": "module test_309(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.968316", "id": 3699}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.080544", "id": 24000}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.070017", "id": 22094}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.128946", "id": 32828}
{"buggy_code": "module basic_173(input a, clk, output y); assign y = a & clk | b; endmodule", "correct_code": "module basic_173(input a, clk, output y); assign y = (a & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.347629", "id": 72708}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.243181", "id": 53686}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.308539", "id": 65625}
{"buggy_code": "module demo_747(input in, c, output prod); assign prod = in & c | rst; endmodule", "correct_code": "module demo_747(input in, c, output prod); assign prod = (in & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116212", "id": 30512}
{"buggy_code": "module example_856(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module example_856(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.968657", "id": 3761}
{"buggy_code": "module arith_294(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module arith_294(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.052984", "id": 18960}
{"buggy_code": "module basic_52(input rst, a, output y); assign y = rst & a | in; endmodule", "correct_code": "module basic_52(input rst, a, output y); assign y = (rst & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.305165", "id": 64998}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.012122", "id": 11599}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.077573", "id": 23454}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.351085", "id": 73335}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.091329", "id": 25962}
{"buggy_code": "module example_648(input c, output y); assign y = c + 1; endmodule", "correct_code": "module example_648(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.185100", "id": 43116}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.992339", "id": 8016}
{"buggy_code": "module logic_970(input a, output out); assign out = a + 1; endmodule", "correct_code": "module logic_970(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.182840", "id": 42700}
{"buggy_code": "module simple_728(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module simple_728(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.272528", "id": 59046}
{"buggy_code": "module simple_422(input data, rst, output y); assign y = data & rst | d; endmodule", "correct_code": "module simple_422(input data, rst, output y); assign y = (data & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.329966", "id": 69513}
{"buggy_code": "module simple_946(input d, y, output valid); assign valid = d & y | x; endmodule", "correct_code": "module simple_946(input d, y, output valid); assign valid = (d & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.226860", "id": 50691}
{"buggy_code": "module demo_142(input d, d, output q); assign q = d & d | b; endmodule", "correct_code": "module demo_142(input d, d, output q); assign q = (d & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.162031", "id": 38905}
{"buggy_code": "module basic_824(input y, data, output valid); assign valid = y & data | b; endmodule", "correct_code": "module basic_824(input y, data, output valid); assign valid = (y & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.264891", "id": 57648}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.045417", "id": 17611}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205426", "id": 46797}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.118536", "id": 30939}
{"buggy_code": "module logic_40(input en, output result); assign result = en + 1; endmodule", "correct_code": "module logic_40(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.013599", "id": 11866}
{"buggy_code": "module logic_622(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module logic_622(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.156470", "id": 37882}
{"buggy_code": "module example_546(input b, c, output sum); assign sum = b & c | data; endmodule", "correct_code": "module example_546(input b, c, output sum); assign sum = (b & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.239323", "id": 52983}
{"buggy_code": "module test_231(input data, rst, output result); assign result = data & rst | d; endmodule", "correct_code": "module test_231(input data, rst, output result); assign result = (data & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.146853", "id": 36106}
{"buggy_code": "module example_233(input b, data, output q); assign q = b & data | x; endmodule", "correct_code": "module example_233(input b, data, output q); assign q = (b & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.302126", "id": 64434}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.161458", "id": 38802}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.079384", "id": 23786}
{"buggy_code": "module simple_654(input c, a, output q); assign q = c & a | c; endmodule", "correct_code": "module simple_654(input c, a, output q); assign q = (c & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.233981", "id": 52000}
{"buggy_code": "module simple_809(input rst, clk, output result); assign result = rst & clk | en; endmodule", "correct_code": "module simple_809(input rst, clk, output result); assign result = (rst & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.294489", "id": 63037}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.231071", "id": 51465}
{"buggy_code": "module test_167(input x, rst, output sum); assign sum = x & rst | b; endmodule", "correct_code": "module test_167(input x, rst, output sum); assign sum = (x & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.129086", "id": 32854}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.204773", "id": 46677}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.137104", "id": 34325}
{"buggy_code": "module logic_73(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module logic_73(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.033186", "id": 15398}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.100955", "id": 27712}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.085258", "id": 24849}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.058123", "id": 19912}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329916", "id": 69504}
{"buggy_code": "module test_202(input rst, d, output y); assign y = rst & d | clk; endmodule", "correct_code": "module test_202(input rst, d, output y); assign y = (rst & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.021837", "id": 13350}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.335817", "id": 70584}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.995946", "id": 8671}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.069162", "id": 21936}
{"buggy_code": "module logic_132(input a, output result); assign result = a + 1; endmodule", "correct_code": "module logic_132(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.148298", "id": 36373}
{"buggy_code": "module demo_837(input en, output y); assign y = en + 1; endmodule", "correct_code": "module demo_837(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.221722", "id": 49755}
{"buggy_code": "module basic_2(input in, rst, output prod); assign prod = in & rst | clk; endmodule", "correct_code": "module basic_2(input in, rst, output prod); assign prod = (in & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.222526", "id": 49899}
{"buggy_code": "module test_401(input data, output y); assign y = data + 1; endmodule", "correct_code": "module test_401(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.198794", "id": 45585}
{"buggy_code": "module arith_144(input data, output q); assign q = data + 1; endmodule", "correct_code": "module arith_144(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.958939", "id": 1986}
{"buggy_code": "module logic_565(input a, output out); assign out = a + 1; endmodule", "correct_code": "module logic_565(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.219499", "id": 49364}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.045815", "id": 17684}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277131", "id": 59857}
{"buggy_code": "module example_287(input a, rst, output prod); assign prod = a & rst | en; endmodule", "correct_code": "module example_287(input a, rst, output prod); assign prod = (a & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.019317", "id": 12895}
{"buggy_code": "module example_441(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module example_441(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.107727", "id": 28953}
{"buggy_code": "module basic_687(input clk, clk, output sum); assign sum = clk & clk | a; endmodule", "correct_code": "module basic_687(input clk, clk, output sum); assign sum = (clk & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.054240", "id": 19194}
{"buggy_code": "module simple_128(input clk, in, output result); assign result = clk & in | d; endmodule", "correct_code": "module simple_128(input clk, in, output result); assign result = (clk & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.075517", "id": 23113}
{"buggy_code": "module test_751(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module test_751(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.171614", "id": 40653}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.004908", "id": 10287}
{"buggy_code": "module simple_672(input c, c, output y); assign y = c & c | clk; endmodule", "correct_code": "module simple_672(input c, c, output y); assign y = (c & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.086646", "id": 25105}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.005838", "id": 10459}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.213408", "id": 48250}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.149951", "id": 36679}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.187752", "id": 43598}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.102366", "id": 27974}
{"buggy_code": "module example_520(input a, data, output result); assign result = a & data | rst; endmodule", "correct_code": "module example_520(input a, data, output result); assign result = (a & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.048590", "id": 18187}
{"buggy_code": "module basic_363(input clk, c, output prod); assign prod = clk & c | en; endmodule", "correct_code": "module basic_363(input clk, c, output prod); assign prod = (clk & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.138597", "id": 34604}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.338355", "id": 71050}
{"buggy_code": "module demo_311(input x, output result); assign result = x + 1; endmodule", "correct_code": "module demo_311(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.954118", "id": 1112}
{"buggy_code": "module example_167(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module example_167(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.072895", "id": 22625}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.319592", "id": 67645}
{"buggy_code": "module logic_690(input data, output y); assign y = data + 1; endmodule", "correct_code": "module logic_690(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.336496", "id": 70708}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.261917", "id": 57106}
{"buggy_code": "module logic_822(input in, output out); assign out = in + 1; endmodule", "correct_code": "module logic_822(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.264589", "id": 57594}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.001259", "id": 9636}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.074678", "id": 22958}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.353943", "id": 73853}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.305341", "id": 65030}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.069102", "id": 21924}
{"buggy_code": "module test_138(input y, output q); assign q = y + 1; endmodule", "correct_code": "module test_138(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.999233", "id": 9269}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.172235", "id": 40769}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.304477", "id": 64873}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.262453", "id": 57204}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.987952", "id": 7207}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.037465", "id": 16178}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.179843", "id": 42162}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.052149", "id": 18810}
{"buggy_code": "module logic_305(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module logic_305(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.260081", "id": 56770}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.988268", "id": 7265}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.092792", "id": 26224}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.229576", "id": 51187}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.315923", "id": 66969}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.298724", "id": 63812}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.062866", "id": 20784}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.111051", "id": 29563}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.121603", "id": 31490}
{"buggy_code": "module test_621(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module test_621(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.114499", "id": 30201}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.963496", "id": 2813}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.096789", "id": 26951}
{"buggy_code": "module simple_475(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module simple_475(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.106510", "id": 28730}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.173539", "id": 41006}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.061321", "id": 20502}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.126416", "id": 32371}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.985528", "id": 6765}
{"buggy_code": "module example_893(input in, output q); assign q = in + 1; endmodule", "correct_code": "module example_893(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.148381", "id": 36388}
{"buggy_code": "module simple_57(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module simple_57(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.974093", "id": 4739}
{"buggy_code": "module arith_523(input y, output q); assign q = y + 1; endmodule", "correct_code": "module arith_523(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.249926", "id": 54922}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.213899", "id": 48337}
{"buggy_code": "module demo_518(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module demo_518(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.337513", "id": 70895}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.007856", "id": 10824}
{"buggy_code": "module logic_64(input b, in, output sum); assign sum = b & in | data; endmodule", "correct_code": "module logic_64(input b, in, output sum); assign sum = (b & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.055266", "id": 19389}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.298046", "id": 63687}
{"buggy_code": "module basic_740(input c, output q); assign q = c + 1; endmodule", "correct_code": "module basic_740(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.977945", "id": 5392}
{"buggy_code": "module simple_576(input c, output q); assign q = c + 1; endmodule", "correct_code": "module simple_576(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.175029", "id": 41276}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.139020", "id": 34681}
{"buggy_code": "module arith_183(input in, x, output valid); assign valid = in & x | y; endmodule", "correct_code": "module arith_183(input in, x, output valid); assign valid = (in & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.236136", "id": 52393}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.353173", "id": 73712}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.159263", "id": 38396}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.348345", "id": 72842}
{"buggy_code": "module test_836(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module test_836(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.109906", "id": 29352}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.971357", "id": 4246}
{"buggy_code": "module demo_728(input a, x, output sum); assign sum = a & x | a; endmodule", "correct_code": "module demo_728(input a, x, output sum); assign sum = (a & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.107144", "id": 28843}
{"buggy_code": "module logic_912(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module logic_912(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.176252", "id": 41500}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277541", "id": 59933}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.052446", "id": 18864}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.185642", "id": 43214}
{"buggy_code": "module basic_155(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module basic_155(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.999685", "id": 9352}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.036673", "id": 16035}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.308732", "id": 65659}
{"buggy_code": "module simple_530(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module simple_530(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.352636", "id": 73620}
{"buggy_code": "module demo_743(input in, b, output out); assign out = in & b | d; endmodule", "correct_code": "module demo_743(input in, b, output out); assign out = (in & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.101437", "id": 27802}
{"buggy_code": "module logic_847(input x, output y); assign y = x + 1; endmodule", "correct_code": "module logic_847(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.208936", "id": 47434}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.152379", "id": 37130}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.216040", "id": 48729}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.144311", "id": 35642}
{"buggy_code": "module example_866(input rst, b, output q); assign q = rst & b | clk; endmodule", "correct_code": "module example_866(input rst, b, output q); assign q = (rst & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.287037", "id": 61674}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064596", "id": 21105}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.161647", "id": 38836}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.330477", "id": 69609}
{"buggy_code": "module logic_248(input en, data, output prod); assign prod = en & data | clk; endmodule", "correct_code": "module logic_248(input en, data, output prod); assign prod = (en & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.005609", "id": 10419}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.038852", "id": 16430}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.291922", "id": 62570}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.199963", "id": 45796}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.961527", "id": 2460}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.099182", "id": 27388}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.062806", "id": 20774}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.172126", "id": 40748}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.119513", "id": 31107}
{"buggy_code": "module arith_271(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module arith_271(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.109331", "id": 29247}
{"buggy_code": "module arith_379(input d, b, output y); assign y = d & b | data; endmodule", "correct_code": "module arith_379(input d, b, output y); assign y = (d & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.139131", "id": 34703}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.310466", "id": 65974}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.151389", "id": 36947}
{"buggy_code": "module simple_506(input data, data, output prod); assign prod = data & data | d; endmodule", "correct_code": "module simple_506(input data, data, output prod); assign prod = (data & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.309434", "id": 65787}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.051083", "id": 18614}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.307769", "id": 65483}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.224078", "id": 50185}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.354893", "id": 74028}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.197403", "id": 45330}
{"buggy_code": "module basic_53(input en, x, output prod); assign prod = en & x | c; endmodule", "correct_code": "module basic_53(input en, x, output prod); assign prod = (en & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.325893", "id": 68764}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.068723", "id": 21854}
{"buggy_code": "module demo_375(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module demo_375(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.349862", "id": 73113}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.172658", "id": 40845}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.097888", "id": 27147}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.222100", "id": 49823}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.318633", "id": 67470}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.161842", "id": 38871}
{"buggy_code": "module simple_487(input clk, in, output out); assign out = clk & in | rst; endmodule", "correct_code": "module simple_487(input clk, in, output out); assign out = (clk & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.186374", "id": 43346}
{"buggy_code": "module simple_245(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module simple_245(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.269613", "id": 58512}
{"buggy_code": "module basic_271(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module basic_271(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.979582", "id": 5692}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.195556", "id": 44994}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.247982", "id": 54565}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.958086", "id": 1830}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.299010", "id": 63863}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.180479", "id": 42281}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.257271", "id": 56256}
{"buggy_code": "module logic_742(input d, output q); assign q = d + 1; endmodule", "correct_code": "module logic_742(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.109615", "id": 29300}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.055641", "id": 19458}
{"buggy_code": "module logic_176(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module logic_176(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.019848", "id": 12989}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.998399", "id": 9118}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.016156", "id": 12330}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.279092", "id": 60217}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.270099", "id": 58600}
{"buggy_code": "module arith_696(input rst, b, output prod); assign prod = rst & b | clk; endmodule", "correct_code": "module arith_696(input rst, b, output prod); assign prod = (rst & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.986457", "id": 6936}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.074629", "id": 22948}
{"buggy_code": "module arith_445(input x, rst, output valid); assign valid = x & rst | x; endmodule", "correct_code": "module arith_445(input x, rst, output valid); assign valid = (x & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.996024", "id": 8686}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.169333", "id": 40235}
{"buggy_code": "module logic_500(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module logic_500(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.261540", "id": 57039}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.983926", "id": 6471}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.968678", "id": 3765}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.299415", "id": 63940}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.301732", "id": 64363}
{"buggy_code": "module simple_236(input data, x, output out); assign out = data & x | x; endmodule", "correct_code": "module simple_236(input data, x, output out); assign out = (data & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.356912", "id": 74399}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.139562", "id": 34782}
{"buggy_code": "module arith_691(input y, clk, output prod); assign prod = y & clk | a; endmodule", "correct_code": "module arith_691(input y, clk, output prod); assign prod = (y & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.966585", "id": 3380}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.169400", "id": 40248}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.950734", "id": 499}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.243041", "id": 53661}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.072436", "id": 22541}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.289518", "id": 62129}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.159874", "id": 38509}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.036149", "id": 15938}
{"buggy_code": "module test_224(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module test_224(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.072446", "id": 22543}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.959584", "id": 2105}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.269094", "id": 58414}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.991894", "id": 7933}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.059799", "id": 20221}
{"buggy_code": "module demo_475(input d, d, output sum); assign sum = d & d | clk; endmodule", "correct_code": "module demo_475(input d, d, output sum); assign sum = (d & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.041902", "id": 16974}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.949038", "id": 194}
{"buggy_code": "module test_186(input clk, en, output q); assign q = clk & en | c; endmodule", "correct_code": "module test_186(input clk, en, output q); assign q = (clk & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.972186", "id": 4397}
{"buggy_code": "module demo_845(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module demo_845(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.189243", "id": 43869}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.200214", "id": 45843}
{"buggy_code": "module logic_682(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module logic_682(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.254500", "id": 55748}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.038953", "id": 16449}
{"buggy_code": "module example_43(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module example_43(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.312576", "id": 66360}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.322912", "id": 68220}
{"buggy_code": "module example_394(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module example_394(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.327802", "id": 69116}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.189185", "id": 43859}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.198524", "id": 45535}
{"buggy_code": "module simple_764(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module simple_764(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.240420", "id": 53179}
{"buggy_code": "module example_67(input x, data, output q); assign q = x & data | a; endmodule", "correct_code": "module example_67(input x, data, output q); assign q = (x & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.297633", "id": 63612}
{"buggy_code": "module example_190(input en, en, output valid); assign valid = en & en | rst; endmodule", "correct_code": "module example_190(input en, en, output valid); assign valid = (en & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.324929", "id": 68589}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.167673", "id": 39935}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.964454", "id": 2991}
{"buggy_code": "module simple_496(input a, in, output y); assign y = a & in | b; endmodule", "correct_code": "module simple_496(input a, in, output y); assign y = (a & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.145420", "id": 35850}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.222751", "id": 49941}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138372", "id": 34562}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.354690", "id": 73992}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.152747", "id": 37198}
{"buggy_code": "module test_304(input rst, rst, output y); assign y = rst & rst | in; endmodule", "correct_code": "module test_304(input rst, rst, output y); assign y = (rst & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.277307", "id": 59890}
{"buggy_code": "module test_500(input in, a, output sum); assign sum = in & a | clk; endmodule", "correct_code": "module test_500(input in, a, output sum); assign sum = (in & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.160874", "id": 38692}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.096777", "id": 26949}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.974396", "id": 4796}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.267233", "id": 58075}
{"buggy_code": "module simple_123(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module simple_123(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.203730", "id": 46485}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.316021", "id": 66986}
{"buggy_code": "module test_691(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module test_691(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.132841", "id": 33542}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.948138", "id": 35}
{"buggy_code": "module arith_322(input d, output q); assign q = d + 1; endmodule", "correct_code": "module arith_322(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.262712", "id": 57253}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.989615", "id": 7514}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.050377", "id": 18487}
{"buggy_code": "module simple_162(input en, clk, output result); assign result = en & clk | en; endmodule", "correct_code": "module simple_162(input en, clk, output result); assign result = (en & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.191761", "id": 44297}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.103783", "id": 28229}
{"buggy_code": "module logic_402(input a, b, output result); assign result = a & b | data; endmodule", "correct_code": "module logic_402(input a, b, output result); assign result = (a & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.284479", "id": 61209}
{"buggy_code": "module arith_276(input rst, in, output q); assign q = rst & in | rst; endmodule", "correct_code": "module arith_276(input rst, in, output q); assign q = (rst & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.093776", "id": 26402}
{"buggy_code": "module logic_214(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module logic_214(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.985477", "id": 6755}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179230", "id": 42052}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.286595", "id": 61594}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.082961", "id": 24434}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.127903", "id": 32640}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.970935", "id": 4167}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.190739", "id": 44106}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.098285", "id": 27223}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.991172", "id": 7801}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.127135", "id": 32502}
{"buggy_code": "module test_478(input y, x, output prod); assign prod = y & x | clk; endmodule", "correct_code": "module test_478(input y, x, output prod); assign prod = (y & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.058746", "id": 20027}
{"buggy_code": "module logic_296(input d, output result); assign result = d + 1; endmodule", "correct_code": "module logic_296(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.034862", "id": 15702}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.250618", "id": 55049}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.050620", "id": 18533}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.064202", "id": 21030}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286963", "id": 61660}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.320700", "id": 67816}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.976418", "id": 5162}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.359275", "id": 74834}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.974881", "id": 4884}
{"buggy_code": "module example_97(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module example_97(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.277635", "id": 59951}
{"buggy_code": "module example_801(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module example_801(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.031607", "id": 15117}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.169833", "id": 40326}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.162237", "id": 38943}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.978372", "id": 5470}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.009922", "id": 11202}
{"buggy_code": "module arith_453(input clk, rst, output sum); assign sum = clk & rst | en; endmodule", "correct_code": "module arith_453(input clk, rst, output sum); assign sum = (clk & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.243744", "id": 53789}
{"buggy_code": "module example_280(input y, output result); assign result = y + 1; endmodule", "correct_code": "module example_280(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.032637", "id": 15301}
{"buggy_code": "module example_430(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module example_430(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.061559", "id": 20546}
{"buggy_code": "module test_196(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module test_196(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.176961", "id": 41629}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.952131", "id": 753}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.213873", "id": 48332}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.186218", "id": 43318}
{"buggy_code": "module simple_28(input data, d, output q); assign q = data & d | a; endmodule", "correct_code": "module simple_28(input data, d, output q); assign q = (data & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.113081", "id": 29938}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.293604", "id": 62877}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.212761", "id": 48131}
{"buggy_code": "module test_128(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module test_128(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.955652", "id": 1389}
{"buggy_code": "module test_84(input b, output y); assign y = b + 1; endmodule", "correct_code": "module test_84(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.039287", "id": 16512}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.295535", "id": 63230}
{"buggy_code": "module test_580(input d, clk, output out); assign out = d & clk | clk; endmodule", "correct_code": "module test_580(input d, clk, output out); assign out = (d & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.032112", "id": 15207}
{"buggy_code": "module basic_83(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module basic_83(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.246132", "id": 54231}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.995462", "id": 8583}
{"buggy_code": "module basic_616(input clk, data, output q); assign q = clk & data | x; endmodule", "correct_code": "module basic_616(input clk, data, output q); assign q = (clk & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.331915", "id": 69867}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.311270", "id": 66124}
{"buggy_code": "module basic_912(input data, en, output y); assign y = data & en | d; endmodule", "correct_code": "module basic_912(input data, en, output y); assign y = (data & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.217044", "id": 48910}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.073949", "id": 22822}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.222677", "id": 49927}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.186088", "id": 43293}
{"buggy_code": "module arith_705(input in, output out); assign out = in + 1; endmodule", "correct_code": "module arith_705(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.106454", "id": 28719}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.150763", "id": 36832}
{"buggy_code": "module demo_887(input rst, c, output valid); assign valid = rst & c | x; endmodule", "correct_code": "module demo_887(input rst, c, output valid); assign valid = (rst & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.008421", "id": 10928}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.164434", "id": 39339}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.077543", "id": 23449}
{"buggy_code": "module simple_799(input x, clk, output valid); assign valid = x & clk | b; endmodule", "correct_code": "module simple_799(input x, clk, output valid); assign valid = (x & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.017338", "id": 12545}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.307161", "id": 65367}
{"buggy_code": "module example_772(input c, rst, output q); assign q = c & rst | c; endmodule", "correct_code": "module example_772(input c, rst, output q); assign q = (c & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.337481", "id": 70889}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.038867", "id": 16433}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.149920", "id": 36673}
{"buggy_code": "module demo_859(input data, in, output y); assign y = data & in | d; endmodule", "correct_code": "module demo_859(input data, in, output y); assign y = (data & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.212079", "id": 48008}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.325749", "id": 68739}
{"buggy_code": "module arith_649(input y, d, output out); assign out = y & d | b; endmodule", "correct_code": "module arith_649(input y, d, output out); assign out = (y & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.201671", "id": 46110}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.110266", "id": 29420}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.054273", "id": 19201}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.327302", "id": 69024}
{"buggy_code": "module basic_133(input data, b, output out); assign out = data & b | clk; endmodule", "correct_code": "module basic_133(input data, b, output out); assign out = (data & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.312633", "id": 66371}
{"buggy_code": "module test_652(input rst, en, output out); assign out = rst & en | y; endmodule", "correct_code": "module test_652(input rst, en, output out); assign out = (rst & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.042390", "id": 17064}
{"buggy_code": "module basic_627(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module basic_627(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.280003", "id": 60387}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.180941", "id": 42364}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.216775", "id": 48863}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.996454", "id": 8765}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.180945", "id": 42365}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.280744", "id": 60525}
{"buggy_code": "module logic_605(input c, in, output q); assign q = c & in | en; endmodule", "correct_code": "module logic_605(input c, in, output q); assign q = (c & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.093233", "id": 26302}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.313915", "id": 66602}
{"buggy_code": "module demo_30(input rst, d, output y); assign y = rst & d | a; endmodule", "correct_code": "module demo_30(input rst, d, output y); assign y = (rst & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.952080", "id": 743}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.339338", "id": 71210}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.173815", "id": 41056}
{"buggy_code": "module arith_946(input b, output y); assign y = b + 1; endmodule", "correct_code": "module arith_946(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.048389", "id": 18151}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.147944", "id": 36306}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182126", "id": 42573}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.214675", "id": 48480}
{"buggy_code": "module example_264(input a, output y); assign y = a + 1; endmodule", "correct_code": "module example_264(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.197357", "id": 45321}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.046819", "id": 17868}
{"buggy_code": "module example_372(input d, output result); assign result = d + 1; endmodule", "correct_code": "module example_372(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.139030", "id": 34683}
{"buggy_code": "module logic_584(input clk, data, output out); assign out = clk & data | x; endmodule", "correct_code": "module logic_584(input clk, data, output out); assign out = (clk & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.233970", "id": 51998}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.107092", "id": 28833}
{"buggy_code": "module simple_512(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module simple_512(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.203861", "id": 46508}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.081719", "id": 24214}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.086574", "id": 25092}
{"buggy_code": "module demo_343(input d, c, output q); assign q = d & c | c; endmodule", "correct_code": "module demo_343(input d, c, output q); assign q = (d & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.969773", "id": 3958}
{"buggy_code": "module simple_784(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module simple_784(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.190813", "id": 44119}
{"buggy_code": "module arith_65(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module arith_65(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.219190", "id": 49308}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.326677", "id": 68910}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.980235", "id": 5811}
{"buggy_code": "module example_793(input data, output result); assign result = data + 1; endmodule", "correct_code": "module example_793(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.317757", "id": 67308}
{"buggy_code": "module basic_431(input x, data, output valid); assign valid = x & data | a; endmodule", "correct_code": "module basic_431(input x, data, output valid); assign valid = (x & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.980564", "id": 5862}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.240657", "id": 53224}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.985729", "id": 6803}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.137123", "id": 34329}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238418", "id": 52815}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.309814", "id": 65856}
{"buggy_code": "module simple_647(input a, output result); assign result = a + 1; endmodule", "correct_code": "module simple_647(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.300292", "id": 64100}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.245306", "id": 54079}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.263673", "id": 57425}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.142232", "id": 35254}
{"buggy_code": "module example_677(input a, x, output valid); assign valid = a & x | en; endmodule", "correct_code": "module example_677(input a, x, output valid); assign valid = (a & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.130866", "id": 33182}
{"buggy_code": "module logic_262(input en, b, output prod); assign prod = en & b | data; endmodule", "correct_code": "module logic_262(input en, b, output prod); assign prod = (en & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.102924", "id": 28072}
{"buggy_code": "module example_544(input x, rst, output valid); assign valid = x & rst | b; endmodule", "correct_code": "module example_544(input x, rst, output valid); assign valid = (x & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.219377", "id": 49341}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.969547", "id": 3917}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.202112", "id": 46190}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.021815", "id": 13348}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.061326", "id": 20503}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.203066", "id": 46364}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.328692", "id": 69279}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.150687", "id": 36817}
{"buggy_code": "module basic_325(input c, c, output q); assign q = c & c | en; endmodule", "correct_code": "module basic_325(input c, c, output q); assign q = (c & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.124272", "id": 31977}
{"buggy_code": "module logic_887(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module logic_887(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.181610", "id": 42487}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.317104", "id": 67186}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.255403", "id": 55913}
{"buggy_code": "module simple_456(input en, c, output result); assign result = en & c | y; endmodule", "correct_code": "module simple_456(input en, c, output result); assign result = (en & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.956363", "id": 1519}
{"buggy_code": "module simple_720(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module simple_720(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.319118", "id": 67559}
{"buggy_code": "module test_601(input en, output out); assign out = en + 1; endmodule", "correct_code": "module test_601(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.153224", "id": 37286}
{"buggy_code": "module demo_347(input a, en, output valid); assign valid = a & en | rst; endmodule", "correct_code": "module demo_347(input a, en, output valid); assign valid = (a & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.183598", "id": 42841}
{"buggy_code": "module test_296(input a, c, output y); assign y = a & c | en; endmodule", "correct_code": "module test_296(input a, c, output y); assign y = (a & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.192490", "id": 44432}
{"buggy_code": "module basic_457(input clk, d, output y); assign y = clk & d | data; endmodule", "correct_code": "module basic_457(input clk, d, output y); assign y = (clk & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.186954", "id": 43451}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.185732", "id": 43231}
{"buggy_code": "module simple_30(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module simple_30(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.957124", "id": 1655}
{"buggy_code": "module simple_140(input a, clk, output prod); assign prod = a & clk | clk; endmodule", "correct_code": "module simple_140(input a, clk, output prod); assign prod = (a & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.953839", "id": 1061}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.218192", "id": 49123}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.198067", "id": 45449}
{"buggy_code": "module basic_849(input d, y, output result); assign result = d & y | clk; endmodule", "correct_code": "module basic_849(input d, y, output result); assign result = (d & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.011895", "id": 11559}
{"buggy_code": "module simple_997(input in, in, output q); assign q = in & in | d; endmodule", "correct_code": "module simple_997(input in, in, output q); assign q = (in & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.984345", "id": 6549}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.005397", "id": 10378}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.149887", "id": 36667}
{"buggy_code": "module example_276(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module example_276(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.267746", "id": 58167}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.234984", "id": 52183}
{"buggy_code": "module example_961(input c, b, output prod); assign prod = c & b | in; endmodule", "correct_code": "module example_961(input c, b, output prod); assign prod = (c & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.344293", "id": 72107}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.005532", "id": 10405}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117427", "id": 30736}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.171733", "id": 40675}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.278766", "id": 60160}
{"buggy_code": "module simple_168(input en, d, output prod); assign prod = en & d | in; endmodule", "correct_code": "module simple_168(input en, d, output prod); assign prod = (en & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.972780", "id": 4505}
{"buggy_code": "module logic_655(input b, output out); assign out = b + 1; endmodule", "correct_code": "module logic_655(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.333572", "id": 70175}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.268264", "id": 58261}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.160221", "id": 38573}
{"buggy_code": "module arith_477(input data, output q); assign q = data + 1; endmodule", "correct_code": "module arith_477(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.232896", "id": 51797}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.319949", "id": 67694}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.144421", "id": 35663}
{"buggy_code": "module example_416(input y, output result); assign result = y + 1; endmodule", "correct_code": "module example_416(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.233337", "id": 51879}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.257921", "id": 56374}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.251923", "id": 55283}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.139243", "id": 34724}
{"buggy_code": "module test_846(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module test_846(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.328403", "id": 69224}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.025125", "id": 13946}
{"buggy_code": "module basic_816(input data, x, output out); assign out = data & x | a; endmodule", "correct_code": "module basic_816(input data, x, output out); assign out = (data & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.093567", "id": 26364}
{"buggy_code": "module logic_253(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module logic_253(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.259042", "id": 56580}
{"buggy_code": "module logic_439(input d, output q); assign q = d + 1; endmodule", "correct_code": "module logic_439(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.077094", "id": 23369}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.118073", "id": 30854}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.082219", "id": 24301}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272329", "id": 59010}
{"buggy_code": "module demo_629(input d, y, output y); assign y = d & y | en; endmodule", "correct_code": "module demo_629(input d, y, output y); assign y = (d & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.083075", "id": 24455}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.001509", "id": 9683}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.260653", "id": 56874}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.243839", "id": 53804}
{"buggy_code": "module arith_17(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module arith_17(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.023614", "id": 13674}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.161698", "id": 38845}
{"buggy_code": "module demo_408(input y, x, output prod); assign prod = y & x | en; endmodule", "correct_code": "module demo_408(input y, x, output prod); assign prod = (y & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.159594", "id": 38458}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.220076", "id": 49453}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.973780", "id": 4685}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.975727", "id": 5039}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.242675", "id": 53594}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.301845", "id": 64382}
{"buggy_code": "module arith_436(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module arith_436(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.177549", "id": 41741}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.102842", "id": 28057}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.166442", "id": 39706}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008852", "id": 11006}
{"buggy_code": "module demo_946(input c, b, output sum); assign sum = c & b | a; endmodule", "correct_code": "module demo_946(input c, b, output sum); assign sum = (c & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.142181", "id": 35244}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.250343", "id": 54998}
{"buggy_code": "module example_830(input x, x, output valid); assign valid = x & x | x; endmodule", "correct_code": "module example_830(input x, x, output valid); assign valid = (x & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.987884", "id": 7194}
{"buggy_code": "module arith_115(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module arith_115(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.241294", "id": 53343}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.309955", "id": 65881}
{"buggy_code": "module basic_345(input x, rst, output out); assign out = x & rst | c; endmodule", "correct_code": "module basic_345(input x, rst, output out); assign out = (x & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.315275", "id": 66850}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.277296", "id": 59888}
{"buggy_code": "module basic_732(input data, data, output out); assign out = data & data | data; endmodule", "correct_code": "module basic_732(input data, data, output out); assign out = (data & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.996631", "id": 8797}
{"buggy_code": "module logic_484(input a, en, output valid); assign valid = a & en | y; endmodule", "correct_code": "module logic_484(input a, en, output valid); assign valid = (a & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.083444", "id": 24523}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.226150", "id": 50563}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.217458", "id": 48990}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.231288", "id": 51504}
{"buggy_code": "module basic_295(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module basic_295(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.304067", "id": 64793}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.301633", "id": 64346}
{"buggy_code": "module basic_547(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module basic_547(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.211719", "id": 47945}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.336890", "id": 70781}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.227403", "id": 50790}
{"buggy_code": "module example_94(input y, output y); assign y = y + 1; endmodule", "correct_code": "module example_94(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.268748", "id": 58352}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.250908", "id": 55103}
{"buggy_code": "module example_74(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module example_74(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.195656", "id": 45013}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.245005", "id": 54021}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.143042", "id": 35408}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.220531", "id": 49537}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.065519", "id": 21273}
{"buggy_code": "module test_361(input en, output out); assign out = en + 1; endmodule", "correct_code": "module test_361(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.195021", "id": 44895}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.295763", "id": 63272}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.154067", "id": 37442}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.226622", "id": 50649}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.163163", "id": 39108}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.144958", "id": 35763}
{"buggy_code": "module arith_489(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module arith_489(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.349728", "id": 73091}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.307505", "id": 65433}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.003171", "id": 9988}
{"buggy_code": "module arith_209(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module arith_209(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.012061", "id": 11588}
{"buggy_code": "module example_432(input y, c, output valid); assign valid = y & c | in; endmodule", "correct_code": "module example_432(input y, c, output valid); assign valid = (y & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.218831", "id": 49241}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.247998", "id": 54568}
{"buggy_code": "module simple_100(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module simple_100(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.157602", "id": 38089}
{"buggy_code": "module basic_232(input rst, y, output sum); assign sum = rst & y | en; endmodule", "correct_code": "module basic_232(input rst, y, output sum); assign sum = (rst & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.169340", "id": 40236}
{"buggy_code": "module basic_781(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module basic_781(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.004517", "id": 10217}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.046372", "id": 17785}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.318913", "id": 67520}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.155294", "id": 37667}
{"buggy_code": "module demo_271(input rst, c, output out); assign out = rst & c | b; endmodule", "correct_code": "module demo_271(input rst, c, output out); assign out = (rst & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.974443", "id": 4804}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.084874", "id": 24779}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.253039", "id": 55487}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.035096", "id": 15747}
{"buggy_code": "module demo_364(input x, d, output out); assign out = x & d | x; endmodule", "correct_code": "module demo_364(input x, d, output out); assign out = (x & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.270448", "id": 58663}
{"buggy_code": "module example_280(input rst, in, output prod); assign prod = rst & in | clk; endmodule", "correct_code": "module example_280(input rst, in, output prod); assign prod = (rst & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.033039", "id": 15370}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.277391", "id": 59905}
{"buggy_code": "module arith_945(input y, data, output y); assign y = y & data | y; endmodule", "correct_code": "module arith_945(input y, data, output y); assign y = (y & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.997445", "id": 8945}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.097460", "id": 27073}
{"buggy_code": "module basic_924(input data, b, output q); assign q = data & b | rst; endmodule", "correct_code": "module basic_924(input data, b, output q); assign q = (data & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.103400", "id": 28159}
{"buggy_code": "module simple_211(input x, y, output q); assign q = x & y | rst; endmodule", "correct_code": "module simple_211(input x, y, output q); assign q = (x & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.312885", "id": 66415}
{"buggy_code": "module test_327(input y, output result); assign result = y + 1; endmodule", "correct_code": "module test_327(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.972626", "id": 4477}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.248248", "id": 54615}
{"buggy_code": "module basic_615(input y, clk, output prod); assign prod = y & clk | clk; endmodule", "correct_code": "module basic_615(input y, clk, output prod); assign prod = (y & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.344287", "id": 72106}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.091378", "id": 25971}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.166162", "id": 39653}
{"buggy_code": "module basic_346(input data, a, output y); assign y = data & a | in; endmodule", "correct_code": "module basic_346(input data, a, output y); assign y = (data & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.113953", "id": 30098}
{"buggy_code": "module logic_412(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module logic_412(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.105507", "id": 28543}
{"buggy_code": "module simple_983(input c, output out); assign out = c + 1; endmodule", "correct_code": "module simple_983(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.272081", "id": 58963}
{"buggy_code": "module simple_151(input en, b, output q); assign q = en & b | x; endmodule", "correct_code": "module simple_151(input en, b, output q); assign q = (en & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.334996", "id": 70431}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.262490", "id": 57211}
{"buggy_code": "module test_539(input en, d, output q); assign q = en & d | a; endmodule", "correct_code": "module test_539(input en, d, output q); assign q = (en & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.302759", "id": 64551}
{"buggy_code": "module logic_141(input y, output result); assign result = y + 1; endmodule", "correct_code": "module logic_141(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.259003", "id": 56572}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.100607", "id": 27650}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.958656", "id": 1936}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.957399", "id": 1707}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.082425", "id": 24338}
{"buggy_code": "module test_301(input rst, c, output sum); assign sum = rst & c | a; endmodule", "correct_code": "module test_301(input rst, c, output sum); assign sum = (rst & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.292794", "id": 62730}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.059329", "id": 20135}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.334194", "id": 70288}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.333550", "id": 70171}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.119542", "id": 31113}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.986242", "id": 6895}
{"buggy_code": "module test_176(input a, output q); assign q = a + 1; endmodule", "correct_code": "module test_176(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.135228", "id": 33982}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.189806", "id": 43936}
{"buggy_code": "module arith_124(input d, output q); assign q = d + 1; endmodule", "correct_code": "module arith_124(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.349543", "id": 73058}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.099995", "id": 27536}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.296188", "id": 63349}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.195272", "id": 44941}
{"buggy_code": "module arith_672(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module arith_672(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.307253", "id": 65385}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.342607", "id": 71800}
{"buggy_code": "module example_336(input rst, rst, output valid); assign valid = rst & rst | in; endmodule", "correct_code": "module example_336(input rst, rst, output valid); assign valid = (rst & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.115579", "id": 30397}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.307319", "id": 65398}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.097135", "id": 27013}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.301437", "id": 64308}
{"buggy_code": "module logic_352(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module logic_352(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.028478", "id": 14552}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.978926", "id": 5570}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.136184", "id": 34157}
{"buggy_code": "module logic_701(input d, c, output y); assign y = d & c | b; endmodule", "correct_code": "module logic_701(input d, c, output y); assign y = (d & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.035842", "id": 15883}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.113584", "id": 30030}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.295626", "id": 63247}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.127064", "id": 32489}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.294689", "id": 63073}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232596", "id": 51742}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008467", "id": 10937}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.088734", "id": 25483}
{"buggy_code": "module demo_948(input x, en, output result); assign result = x & en | data; endmodule", "correct_code": "module demo_948(input x, en, output result); assign result = (x & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.037707", "id": 16222}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.305227", "id": 65010}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.066085", "id": 21374}
{"buggy_code": "module logic_923(input x, output result); assign result = x + 1; endmodule", "correct_code": "module logic_923(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.973433", "id": 4622}
{"buggy_code": "module logic_718(input rst, en, output result); assign result = rst & en | in; endmodule", "correct_code": "module logic_718(input rst, en, output result); assign result = (rst & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.059113", "id": 20094}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.970996", "id": 4179}
{"buggy_code": "module arith_544(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module arith_544(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.286856", "id": 61641}
{"buggy_code": "module simple_371(input d, output out); assign out = d + 1; endmodule", "correct_code": "module simple_371(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.041305", "id": 16869}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.262144", "id": 57147}
{"buggy_code": "module simple_231(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module simple_231(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.333916", "id": 70236}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.039477", "id": 16547}
{"buggy_code": "module simple_114(input a, rst, output result); assign result = a & rst | data; endmodule", "correct_code": "module simple_114(input a, rst, output result); assign result = (a & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.165096", "id": 39459}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.086065", "id": 24998}
{"buggy_code": "module basic_256(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module basic_256(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.218136", "id": 49114}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.024035", "id": 13750}
{"buggy_code": "module basic_822(input in, b, output prod); assign prod = in & b | c; endmodule", "correct_code": "module basic_822(input in, b, output prod); assign prod = (in & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.343227", "id": 71910}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.128624", "id": 32772}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.345000", "id": 72226}
{"buggy_code": "module logic_883(input b, y, output out); assign out = b & y | y; endmodule", "correct_code": "module logic_883(input b, y, output out); assign out = (b & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.229302", "id": 51136}
{"buggy_code": "module logic_950(input rst, d, output y); assign y = rst & d | b; endmodule", "correct_code": "module logic_950(input rst, d, output y); assign y = (rst & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.302976", "id": 64590}
{"buggy_code": "module demo_617(input rst, x, output prod); assign prod = rst & x | a; endmodule", "correct_code": "module demo_617(input rst, x, output prod); assign prod = (rst & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.948860", "id": 163}
{"buggy_code": "module test_996(input c, output out); assign out = c + 1; endmodule", "correct_code": "module test_996(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.973830", "id": 4692}
{"buggy_code": "module arith_510(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module arith_510(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.272259", "id": 58997}
{"buggy_code": "module example_928(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module example_928(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.188493", "id": 43733}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.135932", "id": 34111}
{"buggy_code": "module example_903(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module example_903(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.009408", "id": 11108}
{"buggy_code": "module example_193(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module example_193(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.109211", "id": 29224}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.174130", "id": 41111}
{"buggy_code": "module basic_428(input c, output result); assign result = c + 1; endmodule", "correct_code": "module basic_428(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.953895", "id": 1071}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.041669", "id": 16933}
{"buggy_code": "module simple_234(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module simple_234(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.346938", "id": 72582}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.205280", "id": 46769}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.027460", "id": 14367}
{"buggy_code": "module simple_246(input y, rst, output result); assign result = y & rst | data; endmodule", "correct_code": "module simple_246(input y, rst, output result); assign result = (y & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.169149", "id": 40202}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.098118", "id": 27192}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.103268", "id": 28135}
{"buggy_code": "module simple_846(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module simple_846(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.250931", "id": 55107}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.195915", "id": 45058}
{"buggy_code": "module logic_348(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module logic_348(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.043131", "id": 17199}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.123392", "id": 31817}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.350868", "id": 73295}
{"buggy_code": "module demo_792(input y, output q); assign q = y + 1; endmodule", "correct_code": "module demo_792(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.979562", "id": 5689}
{"buggy_code": "module demo_351(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module demo_351(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.160601", "id": 38644}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.111236", "id": 29598}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.078624", "id": 23647}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.199728", "id": 45754}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.094067", "id": 26454}
{"buggy_code": "module basic_454(input y, y, output prod); assign prod = y & y | en; endmodule", "correct_code": "module basic_454(input y, y, output prod); assign prod = (y & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.266544", "id": 57949}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.218712", "id": 49220}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.072420", "id": 22538}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.303626", "id": 64711}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.009643", "id": 11151}
{"buggy_code": "module simple_74(input en, in, output q); assign q = en & in | data; endmodule", "correct_code": "module simple_74(input en, in, output q); assign q = (en & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.147878", "id": 36294}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.033461", "id": 15448}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.098224", "id": 27212}
{"buggy_code": "module arith_227(input data, output out); assign out = data + 1; endmodule", "correct_code": "module arith_227(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.130471", "id": 33109}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.037543", "id": 16192}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.094326", "id": 26502}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.028133", "id": 14489}
{"buggy_code": "module example_924(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module example_924(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.082678", "id": 24385}
{"buggy_code": "module arith_579(input a, data, output result); assign result = a & data | a; endmodule", "correct_code": "module arith_579(input a, data, output result); assign result = (a & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.123789", "id": 31889}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.233007", "id": 51817}
{"buggy_code": "module simple_31(input clk, b, output out); assign out = clk & b | en; endmodule", "correct_code": "module simple_31(input clk, b, output out); assign out = (clk & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.092982", "id": 26257}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.327433", "id": 69048}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.196548", "id": 45173}
{"buggy_code": "module arith_451(input a, c, output q); assign q = a & c | en; endmodule", "correct_code": "module arith_451(input a, c, output q); assign q = (a & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.033472", "id": 15450}
{"buggy_code": "module test_257(input data, in, output prod); assign prod = data & in | c; endmodule", "correct_code": "module test_257(input data, in, output prod); assign prod = (data & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.032879", "id": 15342}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.288518", "id": 61946}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.158437", "id": 38243}
{"buggy_code": "module basic_522(input x, d, output valid); assign valid = x & d | x; endmodule", "correct_code": "module basic_522(input x, d, output valid); assign valid = (x & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.225180", "id": 50385}
{"buggy_code": "module test_252(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module test_252(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.067949", "id": 21713}
{"buggy_code": "module example_657(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module example_657(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.290449", "id": 62299}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.964368", "id": 2974}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.061135", "id": 20466}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.974200", "id": 4759}
{"buggy_code": "module arith_836(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module arith_836(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.120642", "id": 31312}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.359284", "id": 74836}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.067777", "id": 21682}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.207114", "id": 47105}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.320896", "id": 67850}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.174496", "id": 41177}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.080980", "id": 24078}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.167311", "id": 39868}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.150215", "id": 36727}
{"buggy_code": "module arith_554(input in, x, output out); assign out = in & x | data; endmodule", "correct_code": "module arith_554(input in, x, output out); assign out = (in & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.289137", "id": 62058}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.321246", "id": 67914}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329645", "id": 69456}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179089", "id": 42024}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.010651", "id": 11334}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112032", "id": 29742}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.948129", "id": 33}
{"buggy_code": "module arith_381(input a, output out); assign out = a + 1; endmodule", "correct_code": "module arith_381(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.211920", "id": 47980}
{"buggy_code": "module example_32(input x, b, output y); assign y = x & b | c; endmodule", "correct_code": "module example_32(input x, b, output y); assign y = (x & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.250872", "id": 55096}
{"buggy_code": "module arith_565(input clk, rst, output prod); assign prod = clk & rst | b; endmodule", "correct_code": "module arith_565(input clk, rst, output prod); assign prod = (clk & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.209922", "id": 47614}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.130839", "id": 33177}
{"buggy_code": "module simple_755(input y, y, output q); assign q = y & y | in; endmodule", "correct_code": "module simple_755(input y, y, output q); assign q = (y & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.018743", "id": 12802}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.240542", "id": 53202}
{"buggy_code": "module simple_12(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module simple_12(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.280919", "id": 60555}
{"buggy_code": "module example_234(input en, output y); assign y = en + 1; endmodule", "correct_code": "module example_234(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.195283", "id": 44943}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.216958", "id": 48895}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.199482", "id": 45707}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.183646", "id": 42851}
{"buggy_code": "module simple_467(input y, output result); assign result = y + 1; endmodule", "correct_code": "module simple_467(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.041781", "id": 16953}
{"buggy_code": "module arith_507(input en, output result); assign result = en + 1; endmodule", "correct_code": "module arith_507(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.983974", "id": 6480}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.950237", "id": 412}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.105609", "id": 28562}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.066138", "id": 21385}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.322204", "id": 68091}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.001986", "id": 9771}
{"buggy_code": "module basic_523(input clk, x, output y); assign y = clk & x | b; endmodule", "correct_code": "module basic_523(input clk, x, output y); assign y = (clk & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116107", "id": 30492}
{"buggy_code": "module arith_91(input x, d, output result); assign result = x & d | in; endmodule", "correct_code": "module arith_91(input x, d, output result); assign result = (x & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.254516", "id": 55750}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.359067", "id": 74796}
{"buggy_code": "module arith_158(input data, c, output out); assign out = data & c | c; endmodule", "correct_code": "module arith_158(input data, c, output out); assign out = (data & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.288704", "id": 61979}
{"buggy_code": "module logic_2(input en, output y); assign y = en + 1; endmodule", "correct_code": "module logic_2(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.185126", "id": 43121}
{"buggy_code": "module logic_338(input a, d, output result); assign result = a & d | b; endmodule", "correct_code": "module logic_338(input a, d, output result); assign result = (a & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.169921", "id": 40341}
{"buggy_code": "module arith_545(input data, en, output prod); assign prod = data & en | clk; endmodule", "correct_code": "module arith_545(input data, en, output prod); assign prod = (data & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.236165", "id": 52397}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.201795", "id": 46133}
{"buggy_code": "module basic_533(input en, output result); assign result = en + 1; endmodule", "correct_code": "module basic_533(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.152361", "id": 37126}
{"buggy_code": "module demo_566(input clk, data, output q); assign q = clk & data | x; endmodule", "correct_code": "module demo_566(input clk, data, output q); assign q = (clk & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.233522", "id": 51914}
{"buggy_code": "module basic_918(input x, output result); assign result = x + 1; endmodule", "correct_code": "module basic_918(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.277800", "id": 59982}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.228283", "id": 50951}
{"buggy_code": "module simple_522(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module simple_522(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.989755", "id": 7541}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.044030", "id": 17362}
{"buggy_code": "module basic_417(input d, a, output result); assign result = d & a | d; endmodule", "correct_code": "module basic_417(input d, a, output result); assign result = (d & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.347470", "id": 72679}
{"buggy_code": "module logic_615(input c, y, output valid); assign valid = c & y | en; endmodule", "correct_code": "module logic_615(input c, y, output valid); assign valid = (c & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.159017", "id": 38350}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.311628", "id": 66189}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.002762", "id": 9915}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.950386", "id": 440}
{"buggy_code": "module example_309(input b, b, output q); assign q = b & b | c; endmodule", "correct_code": "module example_309(input b, b, output q); assign q = (b & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.259899", "id": 56737}
{"buggy_code": "module logic_484(input c, output result); assign result = c + 1; endmodule", "correct_code": "module logic_484(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.300968", "id": 64222}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.332281", "id": 69937}
{"buggy_code": "module example_966(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module example_966(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.151556", "id": 36975}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.326239", "id": 68828}
{"buggy_code": "module test_756(input b, output out); assign out = b + 1; endmodule", "correct_code": "module test_756(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.073945", "id": 22821}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.959551", "id": 2099}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.291015", "id": 62404}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.347406", "id": 72668}
{"buggy_code": "module demo_279(input c, y, output sum); assign sum = c & y | data; endmodule", "correct_code": "module demo_279(input c, y, output sum); assign sum = (c & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.148705", "id": 36449}
{"buggy_code": "module basic_168(input x, d, output q); assign q = x & d | x; endmodule", "correct_code": "module basic_168(input x, d, output q); assign q = (x & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.337366", "id": 70869}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.063541", "id": 20908}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.313792", "id": 66581}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.174589", "id": 41194}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.100762", "id": 27678}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.222662", "id": 49924}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.022013", "id": 13381}
{"buggy_code": "module simple_649(input rst, x, output prod); assign prod = rst & x | rst; endmodule", "correct_code": "module simple_649(input rst, x, output prod); assign prod = (rst & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.965012", "id": 3092}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.087541", "id": 25265}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.066711", "id": 21489}
{"buggy_code": "module example_389(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module example_389(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.964990", "id": 3088}
{"buggy_code": "module arith_115(input y, a, output sum); assign sum = y & a | x; endmodule", "correct_code": "module arith_115(input y, a, output sum); assign sum = (y & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.209986", "id": 47626}
{"buggy_code": "module logic_649(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module logic_649(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.347331", "id": 72655}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.335361", "id": 70499}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.090795", "id": 25864}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.268081", "id": 58228}
{"buggy_code": "module simple_954(input data, data, output sum); assign sum = data & data | y; endmodule", "correct_code": "module simple_954(input data, data, output sum); assign sum = (data & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.000997", "id": 9588}
{"buggy_code": "module demo_300(input d, c, output valid); assign valid = d & c | en; endmodule", "correct_code": "module demo_300(input d, c, output valid); assign valid = (d & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.066003", "id": 21359}
{"buggy_code": "module basic_205(input a, a, output sum); assign sum = a & a | a; endmodule", "correct_code": "module basic_205(input a, a, output sum); assign sum = (a & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.001725", "id": 9723}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.203617", "id": 46465}
{"buggy_code": "module demo_71(input data, x, output result); assign result = data & x | en; endmodule", "correct_code": "module demo_71(input data, x, output result); assign result = (data & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.002773", "id": 9917}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.323191", "id": 68271}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.025363", "id": 13990}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.182859", "id": 42703}
{"buggy_code": "module basic_991(input a, data, output out); assign out = a & data | c; endmodule", "correct_code": "module basic_991(input a, data, output out); assign out = (a & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.984153", "id": 6513}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.075639", "id": 23135}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.177116", "id": 41659}
{"buggy_code": "module arith_908(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module arith_908(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.161249", "id": 38762}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287768", "id": 61808}
{"buggy_code": "module demo_792(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module demo_792(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.280134", "id": 60412}
{"buggy_code": "module arith_312(input en, clk, output sum); assign sum = en & clk | d; endmodule", "correct_code": "module arith_312(input en, clk, output sum); assign sum = (en & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.327708", "id": 69099}
{"buggy_code": "module basic_487(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module basic_487(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.169704", "id": 40304}
{"buggy_code": "module logic_910(input en, a, output result); assign result = en & a | clk; endmodule", "correct_code": "module logic_910(input en, a, output result); assign result = (en & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.250486", "id": 55024}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.307458", "id": 65424}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.104919", "id": 28432}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.165015", "id": 39445}
{"buggy_code": "module arith_65(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module arith_65(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.313993", "id": 66615}
{"buggy_code": "module basic_312(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module basic_312(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.248009", "id": 54570}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.168157", "id": 40024}
{"buggy_code": "module test_581(input in, output q); assign q = in + 1; endmodule", "correct_code": "module test_581(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.283003", "id": 60937}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.017600", "id": 12595}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.225435", "id": 50432}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.215527", "id": 48635}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.082509", "id": 24353}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.081575", "id": 24187}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.187644", "id": 43579}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.052854", "id": 18936}
{"buggy_code": "module logic_865(input d, c, output sum); assign sum = d & c | d; endmodule", "correct_code": "module logic_865(input d, c, output sum); assign sum = (d & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.105487", "id": 28539}
{"buggy_code": "module arith_348(input in, c, output out); assign out = in & c | d; endmodule", "correct_code": "module arith_348(input in, c, output out); assign out = (in & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.162673", "id": 39022}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.131894", "id": 33374}
{"buggy_code": "module logic_876(input clk, en, output prod); assign prod = clk & en | x; endmodule", "correct_code": "module logic_876(input clk, en, output prod); assign prod = (clk & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.324309", "id": 68478}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.011128", "id": 11419}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.240339", "id": 53164}
{"buggy_code": "module arith_561(input a, output y); assign y = a + 1; endmodule", "correct_code": "module arith_561(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.193121", "id": 44546}
{"buggy_code": "module test_46(input en, output result); assign result = en + 1; endmodule", "correct_code": "module test_46(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.065073", "id": 21192}
{"buggy_code": "module arith_434(input d, d, output valid); assign valid = d & d | clk; endmodule", "correct_code": "module arith_434(input d, d, output valid); assign valid = (d & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.010984", "id": 11393}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.260928", "id": 56925}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.199541", "id": 45718}
{"buggy_code": "module example_433(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module example_433(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.949925", "id": 354}
{"buggy_code": "module arith_697(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module arith_697(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.182326", "id": 42609}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.178640", "id": 41942}
{"buggy_code": "module demo_100(input rst, d, output prod); assign prod = rst & d | clk; endmodule", "correct_code": "module demo_100(input rst, d, output prod); assign prod = (rst & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.166054", "id": 39633}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.206736", "id": 47036}
{"buggy_code": "module arith_787(input b, output out); assign out = b + 1; endmodule", "correct_code": "module arith_787(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.317296", "id": 67222}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.200307", "id": 45860}
{"buggy_code": "module test_991(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module test_991(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.005885", "id": 10468}
{"buggy_code": "module basic_514(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module basic_514(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.035320", "id": 15789}
{"buggy_code": "module example_893(input data, output result); assign result = data + 1; endmodule", "correct_code": "module example_893(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.266169", "id": 57880}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.244008", "id": 53836}
{"buggy_code": "module logic_104(input clk, in, output valid); assign valid = clk & in | y; endmodule", "correct_code": "module logic_104(input clk, in, output valid); assign valid = (clk & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.115140", "id": 30318}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.294734", "id": 63081}
{"buggy_code": "module example_560(input y, clk, output y); assign y = y & clk | x; endmodule", "correct_code": "module example_560(input y, clk, output y); assign y = (y & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.185785", "id": 43241}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.319506", "id": 67629}
{"buggy_code": "module demo_72(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module demo_72(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.111792", "id": 29700}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.150893", "id": 36854}
{"buggy_code": "module example_334(input d, output q); assign q = d + 1; endmodule", "correct_code": "module example_334(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.313661", "id": 66557}
{"buggy_code": "module demo_200(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module demo_200(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.998128", "id": 9069}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.139065", "id": 34690}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.169391", "id": 40246}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.007764", "id": 10809}
{"buggy_code": "module arith_191(input x, c, output result); assign result = x & c | data; endmodule", "correct_code": "module arith_191(input x, c, output result); assign result = (x & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.287006", "id": 61668}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.101569", "id": 27827}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.980421", "id": 5847}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.105033", "id": 28453}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287274", "id": 61716}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.120562", "id": 31297}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.151130", "id": 36897}
{"buggy_code": "module logic_821(input data, d, output valid); assign valid = data & d | c; endmodule", "correct_code": "module logic_821(input data, d, output valid); assign valid = (data & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.352784", "id": 73647}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.341708", "id": 71639}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.986036", "id": 6859}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.200162", "id": 45833}
{"buggy_code": "module logic_563(input b, output q); assign q = b + 1; endmodule", "correct_code": "module logic_563(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.950149", "id": 396}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.091066", "id": 25913}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.078291", "id": 23586}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.050887", "id": 18579}
{"buggy_code": "module logic_547(input y, rst, output prod); assign prod = y & rst | clk; endmodule", "correct_code": "module logic_547(input y, rst, output prod); assign prod = (y & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.321737", "id": 68006}
{"buggy_code": "module example_153(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module example_153(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.116269", "id": 30522}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182975", "id": 42725}
{"buggy_code": "module demo_997(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module demo_997(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.085790", "id": 24950}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.105356", "id": 28514}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.189977", "id": 43966}
{"buggy_code": "module example_67(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module example_67(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.269100", "id": 58415}
{"buggy_code": "module basic_623(input c, output result); assign result = c + 1; endmodule", "correct_code": "module basic_623(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.022260", "id": 13428}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.224677", "id": 50294}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.074300", "id": 22887}
{"buggy_code": "module arith_719(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module arith_719(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118060", "id": 30851}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.040483", "id": 16728}
{"buggy_code": "module example_519(input clk, b, output result); assign result = clk & b | b; endmodule", "correct_code": "module example_519(input clk, b, output result); assign result = (clk & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.218409", "id": 49161}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.113090", "id": 29940}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.084761", "id": 24759}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.215417", "id": 48614}
{"buggy_code": "module example_470(input in, in, output q); assign q = in & in | a; endmodule", "correct_code": "module example_470(input in, in, output q); assign q = (in & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.074865", "id": 22992}
{"buggy_code": "module test_871(input a, output out); assign out = a + 1; endmodule", "correct_code": "module test_871(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.102134", "id": 27929}
{"buggy_code": "module simple_462(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module simple_462(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.083679", "id": 24565}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.029698", "id": 14773}
{"buggy_code": "module arith_354(input en, clk, output result); assign result = en & clk | b; endmodule", "correct_code": "module arith_354(input en, clk, output result); assign result = (en & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.979529", "id": 5682}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.045667", "id": 17656}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.177558", "id": 41743}
{"buggy_code": "module simple_872(input d, output out); assign out = d + 1; endmodule", "correct_code": "module simple_872(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.301147", "id": 64255}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.967831", "id": 3610}
{"buggy_code": "module example_796(input a, c, output result); assign result = a & c | rst; endmodule", "correct_code": "module example_796(input a, c, output result); assign result = (a & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.003134", "id": 9981}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.116325", "id": 30533}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064976", "id": 21174}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.162175", "id": 38932}
{"buggy_code": "module simple_446(input clk, clk, output y); assign y = clk & clk | data; endmodule", "correct_code": "module simple_446(input clk, clk, output y); assign y = (clk & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.024054", "id": 13753}
{"buggy_code": "module test_191(input rst, b, output valid); assign valid = rst & b | d; endmodule", "correct_code": "module test_191(input rst, b, output valid); assign valid = (rst & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.193392", "id": 44596}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.242856", "id": 53626}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.228837", "id": 51050}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.197481", "id": 45344}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.122029", "id": 31566}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.268461", "id": 58299}
{"buggy_code": "module example_762(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module example_762(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.342431", "id": 71768}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.352503", "id": 73597}
{"buggy_code": "module example_142(input clk, y, output valid); assign valid = clk & y | rst; endmodule", "correct_code": "module example_142(input clk, y, output valid); assign valid = (clk & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.006315", "id": 10547}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.237180", "id": 52585}
{"buggy_code": "module demo_292(input x, output y); assign y = x + 1; endmodule", "correct_code": "module demo_292(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.250334", "id": 54996}
{"buggy_code": "module logic_992(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module logic_992(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.311408", "id": 66150}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.258397", "id": 56463}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.054219", "id": 19190}
{"buggy_code": "module example_936(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module example_936(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.272295", "id": 59004}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.082775", "id": 24403}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.156573", "id": 37902}
{"buggy_code": "module logic_533(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module logic_533(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.221484", "id": 49710}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.107440", "id": 28898}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.115319", "id": 30350}
{"buggy_code": "module demo_812(input d, d, output out); assign out = d & d | x; endmodule", "correct_code": "module demo_812(input d, d, output out); assign out = (d & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.314779", "id": 66762}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.151571", "id": 36978}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.023376", "id": 13630}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.067857", "id": 21696}
{"buggy_code": "module arith_792(input data, output q); assign q = data + 1; endmodule", "correct_code": "module arith_792(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.289775", "id": 62176}
{"buggy_code": "module simple_410(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module simple_410(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.101282", "id": 27774}
{"buggy_code": "module basic_601(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module basic_601(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.247101", "id": 54406}
{"buggy_code": "module arith_647(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module arith_647(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.251558", "id": 55221}
{"buggy_code": "module simple_486(input c, output out); assign out = c + 1; endmodule", "correct_code": "module simple_486(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.282394", "id": 60829}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.058166", "id": 19920}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.225617", "id": 50466}
{"buggy_code": "module basic_998(input in, in, output sum); assign sum = in & in | a; endmodule", "correct_code": "module basic_998(input in, in, output sum); assign sum = (in & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.275102", "id": 59495}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.046608", "id": 17829}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.231281", "id": 51503}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.973330", "id": 4603}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.121910", "id": 31544}
{"buggy_code": "module simple_577(input data, rst, output q); assign q = data & rst | x; endmodule", "correct_code": "module simple_577(input data, rst, output q); assign q = (data & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.060631", "id": 20375}
{"buggy_code": "module example_212(input data, in, output y); assign y = data & in | a; endmodule", "correct_code": "module example_212(input data, in, output y); assign y = (data & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.171227", "id": 40583}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.311524", "id": 66170}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.124228", "id": 31969}
{"buggy_code": "module logic_581(input clk, d, output result); assign result = clk & d | clk; endmodule", "correct_code": "module logic_581(input clk, d, output result); assign result = (clk & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.349519", "id": 73053}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.039912", "id": 16625}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.961446", "id": 2445}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.312186", "id": 66290}
{"buggy_code": "module example_797(input c, in, output prod); assign prod = c & in | data; endmodule", "correct_code": "module example_797(input c, in, output prod); assign prod = (c & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.045389", "id": 17606}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.322300", "id": 68109}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.286764", "id": 61626}
{"buggy_code": "module example_617(input b, y, output valid); assign valid = b & y | y; endmodule", "correct_code": "module example_617(input b, y, output valid); assign valid = (b & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.080534", "id": 23998}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.964011", "id": 2907}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.297627", "id": 63611}
{"buggy_code": "module arith_813(input data, output y); assign y = data + 1; endmodule", "correct_code": "module arith_813(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.057788", "id": 19852}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.095112", "id": 26646}
{"buggy_code": "module simple_125(input rst, clk, output q); assign q = rst & clk | data; endmodule", "correct_code": "module simple_125(input rst, clk, output q); assign q = (rst & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.327942", "id": 69140}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.161260", "id": 38764}
{"buggy_code": "module arith_481(input rst, a, output sum); assign sum = rst & a | data; endmodule", "correct_code": "module arith_481(input rst, a, output sum); assign sum = (rst & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.013784", "id": 11902}
{"buggy_code": "module simple_238(input c, d, output valid); assign valid = c & d | x; endmodule", "correct_code": "module simple_238(input c, d, output valid); assign valid = (c & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.019633", "id": 12952}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.972882", "id": 4521}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.273806", "id": 59280}
{"buggy_code": "module basic_742(input en, x, output result); assign result = en & x | in; endmodule", "correct_code": "module basic_742(input en, x, output result); assign result = (en & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.301604", "id": 64340}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.066057", "id": 21369}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.170676", "id": 40481}
{"buggy_code": "module demo_341(input rst, d, output valid); assign valid = rst & d | b; endmodule", "correct_code": "module demo_341(input rst, d, output valid); assign valid = (rst & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.128800", "id": 32804}
{"buggy_code": "module simple_157(input c, rst, output valid); assign valid = c & rst | data; endmodule", "correct_code": "module simple_157(input c, rst, output valid); assign valid = (c & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.204290", "id": 46589}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.197178", "id": 45288}
{"buggy_code": "module example_766(input en, x, output y); assign y = en & x | rst; endmodule", "correct_code": "module example_766(input en, x, output y); assign y = (en & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.238520", "id": 52834}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.038752", "id": 16413}
{"buggy_code": "module logic_295(input x, output out); assign out = x + 1; endmodule", "correct_code": "module logic_295(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.172769", "id": 40864}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.291020", "id": 62405}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.158706", "id": 38294}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.354746", "id": 74002}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.104114", "id": 28290}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.007007", "id": 10673}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.998865", "id": 9201}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.306594", "id": 65262}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.005473", "id": 10393}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.131544", "id": 33310}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.300930", "id": 64215}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.294952", "id": 63120}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.137555", "id": 34412}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.262023", "id": 57124}
{"buggy_code": "module test_879(input a, output q); assign q = a + 1; endmodule", "correct_code": "module test_879(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.293815", "id": 62915}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.995868", "id": 8656}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.189866", "id": 43946}
{"buggy_code": "module example_812(input en, data, output out); assign out = en & data | y; endmodule", "correct_code": "module example_812(input en, data, output out); assign out = (en & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.044921", "id": 17524}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.952057", "id": 739}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.970267", "id": 4045}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.090038", "id": 25723}
{"buggy_code": "module simple_448(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module simple_448(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.310626", "id": 66005}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.965487", "id": 3181}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.275643", "id": 59598}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.959808", "id": 2145}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.337093", "id": 70818}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.222966", "id": 49981}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.334224", "id": 70294}
{"buggy_code": "module demo_973(input data, a, output prod); assign prod = data & a | b; endmodule", "correct_code": "module demo_973(input data, a, output prod); assign prod = (data & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.160264", "id": 38582}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.061791", "id": 20589}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.243814", "id": 53801}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.012010", "id": 11579}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.225035", "id": 50359}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117078", "id": 30670}
{"buggy_code": "module simple_38(input rst, y, output valid); assign valid = rst & y | a; endmodule", "correct_code": "module simple_38(input rst, y, output valid); assign valid = (rst & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.331984", "id": 69880}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.112112", "id": 29757}
{"buggy_code": "module demo_399(input a, output out); assign out = a + 1; endmodule", "correct_code": "module demo_399(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.274142", "id": 59341}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182578", "id": 42654}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.301466", "id": 64313}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.221443", "id": 49703}
{"buggy_code": "module example_9(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module example_9(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.018505", "id": 12758}
{"buggy_code": "module example_249(input rst, x, output sum); assign sum = rst & x | rst; endmodule", "correct_code": "module example_249(input rst, x, output sum); assign sum = (rst & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.184938", "id": 43086}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.360158", "id": 74999}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.082656", "id": 24381}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.263435", "id": 57381}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.167432", "id": 39890}
{"buggy_code": "module basic_974(input in, data, output sum); assign sum = in & data | rst; endmodule", "correct_code": "module basic_974(input in, data, output sum); assign sum = (in & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.984783", "id": 6628}
{"buggy_code": "module basic_938(input data, clk, output q); assign q = data & clk | data; endmodule", "correct_code": "module basic_938(input data, clk, output q); assign q = (data & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.158275", "id": 38214}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.214928", "id": 48526}
{"buggy_code": "module simple_336(input d, output result); assign result = d + 1; endmodule", "correct_code": "module simple_336(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.130505", "id": 33116}
{"buggy_code": "module simple_895(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module simple_895(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.995736", "id": 8634}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.065284", "id": 21230}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.228029", "id": 50905}
{"buggy_code": "module demo_859(input in, output y); assign y = in + 1; endmodule", "correct_code": "module demo_859(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.307269", "id": 65388}
{"buggy_code": "module test_642(input c, data, output out); assign out = c & data | in; endmodule", "correct_code": "module test_642(input c, data, output out); assign out = (c & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.167798", "id": 39959}
{"buggy_code": "module test_250(input a, in, output q); assign q = a & in | clk; endmodule", "correct_code": "module test_250(input a, in, output q); assign q = (a & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.239585", "id": 53031}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.287122", "id": 61689}
{"buggy_code": "module test_21(input b, data, output sum); assign sum = b & data | clk; endmodule", "correct_code": "module test_21(input b, data, output sum); assign sum = (b & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.226121", "id": 50558}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.015768", "id": 12262}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.333277", "id": 70121}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.971459", "id": 4265}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.105180", "id": 28481}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.350023", "id": 73143}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.309879", "id": 65867}
{"buggy_code": "module demo_183(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module demo_183(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.309885", "id": 65868}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.058972", "id": 20067}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.190040", "id": 43977}
{"buggy_code": "module arith_21(input x, c, output y); assign y = x & c | rst; endmodule", "correct_code": "module arith_21(input x, c, output y); assign y = (x & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.069023", "id": 21909}
{"buggy_code": "module logic_706(input en, d, output sum); assign sum = en & d | clk; endmodule", "correct_code": "module logic_706(input en, d, output sum); assign sum = (en & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.277110", "id": 59853}
{"buggy_code": "module example_597(input in, output result); assign result = in + 1; endmodule", "correct_code": "module example_597(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.101791", "id": 27868}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113112", "id": 29944}
{"buggy_code": "module demo_35(input a, clk, output q); assign q = a & clk | in; endmodule", "correct_code": "module demo_35(input a, clk, output q); assign q = (a & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.319930", "id": 67691}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.265801", "id": 57816}
{"buggy_code": "module example_906(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module example_906(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.326173", "id": 68815}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.172089", "id": 40741}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.057982", "id": 19886}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.161211", "id": 38754}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.157730", "id": 38113}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.056368", "id": 19591}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.952914", "id": 896}
{"buggy_code": "module example_372(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module example_372(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.335108", "id": 70452}
{"buggy_code": "module simple_353(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module simple_353(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.315689", "id": 66927}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.187153", "id": 43487}
{"buggy_code": "module demo_979(input x, c, output valid); assign valid = x & c | data; endmodule", "correct_code": "module demo_979(input x, c, output valid); assign valid = (x & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.196400", "id": 45147}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.018121", "id": 12689}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.115109", "id": 30312}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.221502", "id": 49714}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.350859", "id": 73293}
{"buggy_code": "module basic_313(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module basic_313(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.223015", "id": 49990}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.336163", "id": 70647}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.078754", "id": 23671}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.102853", "id": 28059}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.081819", "id": 24231}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.071226", "id": 22319}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.025301", "id": 13978}
{"buggy_code": "module arith_775(input a, output out); assign out = a + 1; endmodule", "correct_code": "module arith_775(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091479", "id": 25990}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.166740", "id": 39762}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.968192", "id": 3677}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.353121", "id": 73702}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.263238", "id": 57345}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.156718", "id": 37929}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.285987", "id": 61483}
{"buggy_code": "module simple_974(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module simple_974(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.952564", "id": 834}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.106753", "id": 28774}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.032630", "id": 15300}
{"buggy_code": "module demo_988(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module demo_988(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.272475", "id": 59037}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.157205", "id": 38017}
{"buggy_code": "module simple_997(input y, b, output out); assign out = y & b | data; endmodule", "correct_code": "module simple_997(input y, b, output out); assign out = (y & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.176521", "id": 41550}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.257902", "id": 56371}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.093730", "id": 26394}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.339212", "id": 71187}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.957679", "id": 1757}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.302057", "id": 64421}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.027020", "id": 14286}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.111735", "id": 29690}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.330226", "id": 69561}
{"buggy_code": "module simple_255(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module simple_255(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.998085", "id": 9061}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.298331", "id": 63741}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.156099", "id": 37813}
{"buggy_code": "module demo_616(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module demo_616(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.298829", "id": 63830}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.303227", "id": 64636}
{"buggy_code": "module arith_471(input y, output result); assign result = y + 1; endmodule", "correct_code": "module arith_471(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.988701", "id": 7345}
{"buggy_code": "module simple_431(input y, output y); assign y = y + 1; endmodule", "correct_code": "module simple_431(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.163548", "id": 39179}
{"buggy_code": "module simple_409(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module simple_409(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.119981", "id": 31193}
{"buggy_code": "module logic_481(input in, en, output out); assign out = in & en | c; endmodule", "correct_code": "module logic_481(input in, en, output out); assign out = (in & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.321891", "id": 68032}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.280171", "id": 60419}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.232863", "id": 51791}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.345066", "id": 72239}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.072281", "id": 22512}
{"buggy_code": "module arith_553(input x, output q); assign q = x + 1; endmodule", "correct_code": "module arith_553(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.951909", "id": 713}
{"buggy_code": "module demo_853(input x, b, output valid); assign valid = x & b | in; endmodule", "correct_code": "module demo_853(input x, b, output valid); assign valid = (x & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.276998", "id": 59832}
{"buggy_code": "module simple_815(input y, in, output valid); assign valid = y & in | data; endmodule", "correct_code": "module simple_815(input y, in, output valid); assign valid = (y & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.186152", "id": 43305}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.083683", "id": 24566}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.951898", "id": 711}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.341055", "id": 71519}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.292487", "id": 62675}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.068132", "id": 21745}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.201003", "id": 45987}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.257613", "id": 56319}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.951487", "id": 636}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.285302", "id": 61357}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.038762", "id": 16415}
{"buggy_code": "module demo_477(input y, b, output sum); assign sum = y & b | a; endmodule", "correct_code": "module demo_477(input y, b, output sum); assign sum = (y & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.292786", "id": 62729}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.177209", "id": 41677}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.195528", "id": 44989}
{"buggy_code": "module test_118(input y, output y); assign y = y + 1; endmodule", "correct_code": "module test_118(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.301275", "id": 64278}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.353448", "id": 73764}
{"buggy_code": "module simple_745(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module simple_745(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.347076", "id": 72608}
{"buggy_code": "module example_685(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module example_685(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091317", "id": 25960}
{"buggy_code": "module logic_953(input c, y, output sum); assign sum = c & y | in; endmodule", "correct_code": "module logic_953(input c, y, output sum); assign sum = (c & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.132783", "id": 33533}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.038573", "id": 16379}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.013747", "id": 11895}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.994339", "id": 8379}
{"buggy_code": "module basic_219(input x, y, output result); assign result = x & y | x; endmodule", "correct_code": "module basic_219(input x, y, output result); assign result = (x & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.947945", "id": 5}
{"buggy_code": "module example_603(input data, clk, output valid); assign valid = data & clk | rst; endmodule", "correct_code": "module example_603(input data, clk, output valid); assign valid = (data & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.292510", "id": 62679}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.120027", "id": 31201}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.178924", "id": 41994}
{"buggy_code": "module demo_740(input c, output q); assign q = c + 1; endmodule", "correct_code": "module demo_740(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.990481", "id": 7674}
{"buggy_code": "module simple_741(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module simple_741(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.084416", "id": 24695}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.218980", "id": 49268}
{"buggy_code": "module basic_959(input b, in, output prod); assign prod = b & in | rst; endmodule", "correct_code": "module basic_959(input b, in, output prod); assign prod = (b & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.290711", "id": 62347}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.976981", "id": 5265}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.282271", "id": 60805}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.231547", "id": 51554}
{"buggy_code": "module basic_758(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module basic_758(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.011674", "id": 11520}
{"buggy_code": "module demo_999(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module demo_999(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.951839", "id": 700}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.028869", "id": 14620}
{"buggy_code": "module demo_431(input a, c, output result); assign result = a & c | rst; endmodule", "correct_code": "module demo_431(input a, c, output result); assign result = (a & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.347061", "id": 72605}
{"buggy_code": "module demo_78(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module demo_78(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.139406", "id": 34752}
{"buggy_code": "module test_16(input data, output y); assign y = data + 1; endmodule", "correct_code": "module test_16(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.309427", "id": 65786}
{"buggy_code": "module demo_314(input en, y, output out); assign out = en & y | d; endmodule", "correct_code": "module demo_314(input en, y, output out); assign out = (en & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.168298", "id": 40049}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.153429", "id": 37325}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.035248", "id": 15776}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.319271", "id": 67586}
{"buggy_code": "module demo_190(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module demo_190(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.083636", "id": 24557}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277623", "id": 59949}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.304047", "id": 64789}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.049220", "id": 18302}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.175128", "id": 41294}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.952835", "id": 881}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.067918", "id": 21707}
{"buggy_code": "module example_734(input c, output q); assign q = c + 1; endmodule", "correct_code": "module example_734(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.355608", "id": 74162}
{"buggy_code": "module demo_831(input data, rst, output q); assign q = data & rst | y; endmodule", "correct_code": "module demo_831(input data, rst, output q); assign q = (data & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.070408", "id": 22168}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.228589", "id": 51008}
{"buggy_code": "module basic_311(input b, clk, output out); assign out = b & clk | c; endmodule", "correct_code": "module basic_311(input b, clk, output out); assign out = (b & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.124313", "id": 31984}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.011077", "id": 11410}
{"buggy_code": "module logic_905(input b, output out); assign out = b + 1; endmodule", "correct_code": "module logic_905(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.104272", "id": 28318}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.110662", "id": 29492}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.195547", "id": 44992}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.193188", "id": 44558}
{"buggy_code": "module basic_582(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module basic_582(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.164757", "id": 39398}
{"buggy_code": "module logic_13(input b, a, output result); assign result = b & a | rst; endmodule", "correct_code": "module logic_13(input b, a, output result); assign result = (b & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.167971", "id": 39989}
{"buggy_code": "module example_966(input en, rst, output sum); assign sum = en & rst | a; endmodule", "correct_code": "module example_966(input en, rst, output sum); assign sum = (en & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.047490", "id": 17988}
{"buggy_code": "module basic_626(input c, en, output sum); assign sum = c & en | b; endmodule", "correct_code": "module basic_626(input c, en, output sum); assign sum = (c & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.293012", "id": 62769}
{"buggy_code": "module demo_618(input a, in, output result); assign result = a & in | clk; endmodule", "correct_code": "module demo_618(input a, in, output result); assign result = (a & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.046549", "id": 17817}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.304938", "id": 64955}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.952887", "id": 891}
{"buggy_code": "module simple_683(input rst, y, output y); assign y = rst & y | en; endmodule", "correct_code": "module simple_683(input rst, y, output y); assign y = (rst & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.106893", "id": 28798}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.280972", "id": 60565}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.259932", "id": 56743}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.108181", "id": 29036}
{"buggy_code": "module logic_232(input d, y, output sum); assign sum = d & y | x; endmodule", "correct_code": "module logic_232(input d, y, output sum); assign sum = (d & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.213713", "id": 48305}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.220962", "id": 49614}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.107655", "id": 28940}
{"buggy_code": "module demo_75(input data, en, output q); assign q = data & en | en; endmodule", "correct_code": "module demo_75(input data, en, output q); assign q = (data & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.311502", "id": 66166}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.351604", "id": 73431}
{"buggy_code": "module example_749(input rst, c, output sum); assign sum = rst & c | x; endmodule", "correct_code": "module example_749(input rst, c, output sum); assign sum = (rst & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.156515", "id": 37890}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.227813", "id": 50867}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.309267", "id": 65755}
{"buggy_code": "module test_727(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module test_727(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.071565", "id": 22381}
{"buggy_code": "module simple_324(input a, d, output out); assign out = a & d | y; endmodule", "correct_code": "module simple_324(input a, d, output out); assign out = (a & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.324061", "id": 68431}
{"buggy_code": "module arith_479(input in, output result); assign result = in + 1; endmodule", "correct_code": "module arith_479(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.123743", "id": 31881}
{"buggy_code": "module simple_314(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module simple_314(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.353291", "id": 73734}
{"buggy_code": "module demo_854(input data, output out); assign out = data + 1; endmodule", "correct_code": "module demo_854(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.334881", "id": 70410}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.270219", "id": 58623}
{"buggy_code": "module arith_927(input b, b, output valid); assign valid = b & b | a; endmodule", "correct_code": "module arith_927(input b, b, output valid); assign valid = (b & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.106801", "id": 28783}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.103937", "id": 28255}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.331424", "id": 69780}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.079918", "id": 23884}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.246775", "id": 54347}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.347402", "id": 72667}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.984211", "id": 6523}
{"buggy_code": "module arith_555(input en, output out); assign out = en + 1; endmodule", "correct_code": "module arith_555(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.993425", "id": 8211}
{"buggy_code": "module simple_692(input y, output y); assign y = y + 1; endmodule", "correct_code": "module simple_692(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.265698", "id": 57797}
{"buggy_code": "module demo_521(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module demo_521(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.216597", "id": 48829}
{"buggy_code": "module simple_134(input b, rst, output valid); assign valid = b & rst | y; endmodule", "correct_code": "module simple_134(input b, rst, output valid); assign valid = (b & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.054954", "id": 19328}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.340131", "id": 71353}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.176658", "id": 41573}
{"buggy_code": "module basic_553(input y, y, output y); assign y = y & y | clk; endmodule", "correct_code": "module basic_553(input y, y, output y); assign y = (y & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.113660", "id": 30045}
{"buggy_code": "module logic_414(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module logic_414(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.157641", "id": 38096}
{"buggy_code": "module example_243(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module example_243(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.991665", "id": 7893}
{"buggy_code": "module logic_94(input clk, in, output prod); assign prod = clk & in | in; endmodule", "correct_code": "module logic_94(input clk, in, output prod); assign prod = (clk & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.102539", "id": 28004}
{"buggy_code": "module arith_330(input in, in, output out); assign out = in & in | c; endmodule", "correct_code": "module arith_330(input in, in, output out); assign out = (in & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.948716", "id": 141}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.975943", "id": 5077}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.231344", "id": 51515}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.007565", "id": 10772}
{"buggy_code": "module simple_821(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module simple_821(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.072767", "id": 22602}
{"buggy_code": "module simple_461(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module simple_461(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.130922", "id": 33192}
{"buggy_code": "module basic_351(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module basic_351(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.157573", "id": 38084}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.081531", "id": 24178}
{"buggy_code": "module demo_499(input x, en, output result); assign result = x & en | y; endmodule", "correct_code": "module demo_499(input x, en, output result); assign result = (x & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.313485", "id": 66526}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.349768", "id": 73098}
{"buggy_code": "module simple_593(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module simple_593(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.289188", "id": 62067}
{"buggy_code": "module basic_810(input a, output q); assign q = a + 1; endmodule", "correct_code": "module basic_810(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.039690", "id": 16586}
{"buggy_code": "module arith_59(input d, b, output prod); assign prod = d & b | clk; endmodule", "correct_code": "module arith_59(input d, b, output prod); assign prod = (d & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.137993", "id": 34492}
{"buggy_code": "module example_125(input a, output q); assign q = a + 1; endmodule", "correct_code": "module example_125(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.294001", "id": 62948}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.339409", "id": 71223}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.176458", "id": 41538}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.016800", "id": 12449}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.994147", "id": 8343}
{"buggy_code": "module simple_281(input data, data, output prod); assign prod = data & data | data; endmodule", "correct_code": "module simple_281(input data, data, output prod); assign prod = (data & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.202777", "id": 46311}
{"buggy_code": "module test_191(input data, x, output sum); assign sum = data & x | b; endmodule", "correct_code": "module test_191(input data, x, output sum); assign sum = (data & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.970748", "id": 4133}
{"buggy_code": "module logic_130(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module logic_130(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.267695", "id": 58158}
{"buggy_code": "module test_287(input data, output result); assign result = data + 1; endmodule", "correct_code": "module test_287(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.993354", "id": 8200}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.025701", "id": 14054}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.016449", "id": 12385}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.236851", "id": 52523}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.078541", "id": 23632}
{"buggy_code": "module test_781(input y, output out); assign out = y + 1; endmodule", "correct_code": "module test_781(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.211164", "id": 47842}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.003194", "id": 9992}
{"buggy_code": "module arith_235(input data, output result); assign result = data + 1; endmodule", "correct_code": "module arith_235(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.049390", "id": 18308}
{"buggy_code": "module simple_871(input y, data, output sum); assign sum = y & data | en; endmodule", "correct_code": "module simple_871(input y, data, output sum); assign sum = (y & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.339471", "id": 71235}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.990750", "id": 7725}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.253736", "id": 55610}
{"buggy_code": "module arith_495(input y, data, output valid); assign valid = y & data | in; endmodule", "correct_code": "module arith_495(input y, data, output valid); assign valid = (y & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.999720", "id": 9358}
{"buggy_code": "module example_674(input a, output y); assign y = a + 1; endmodule", "correct_code": "module example_674(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.114655", "id": 30230}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.042306", "id": 17049}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.344955", "id": 72218}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.313605", "id": 66548}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.211396", "id": 47886}
{"buggy_code": "module logic_613(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module logic_613(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.969793", "id": 3962}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.074974", "id": 23013}
{"buggy_code": "module basic_924(input c, b, output result); assign result = c & b | b; endmodule", "correct_code": "module basic_924(input c, b, output result); assign result = (c & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.199649", "id": 45738}
{"buggy_code": "module test_345(input a, x, output prod); assign prod = a & x | y; endmodule", "correct_code": "module test_345(input a, x, output prod); assign prod = (a & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.313350", "id": 66501}
{"buggy_code": "module arith_178(input x, output result); assign result = x + 1; endmodule", "correct_code": "module arith_178(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.171311", "id": 40597}
{"buggy_code": "module demo_808(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module demo_808(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.242176", "id": 53502}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.105779", "id": 28594}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.951730", "id": 683}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.971527", "id": 4278}
{"buggy_code": "module logic_596(input d, output out); assign out = d + 1; endmodule", "correct_code": "module logic_596(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.019656", "id": 12956}
{"buggy_code": "module example_91(input a, output result); assign result = a + 1; endmodule", "correct_code": "module example_91(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.955035", "id": 1277}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.061140", "id": 20467}
{"buggy_code": "module logic_576(input d, y, output sum); assign sum = d & y | rst; endmodule", "correct_code": "module logic_576(input d, y, output sum); assign sum = (d & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.357559", "id": 74520}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.269993", "id": 58580}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.284471", "id": 61208}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.293679", "id": 62891}
{"buggy_code": "module test_398(input y, output q); assign q = y + 1; endmodule", "correct_code": "module test_398(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.187639", "id": 43578}
{"buggy_code": "module test_881(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module test_881(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.321959", "id": 68045}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.338711", "id": 71116}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.037579", "id": 16199}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.245999", "id": 54207}
{"buggy_code": "module arith_688(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module arith_688(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.979409", "id": 5659}
{"buggy_code": "module basic_381(input en, output q); assign q = en + 1; endmodule", "correct_code": "module basic_381(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.243616", "id": 53765}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.159464", "id": 38434}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.202688", "id": 46295}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.275781", "id": 59624}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.022719", "id": 13511}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.135609", "id": 34052}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.228707", "id": 51029}
{"buggy_code": "module arith_803(input b, output y); assign y = b + 1; endmodule", "correct_code": "module arith_803(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.114537", "id": 30207}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.052109", "id": 18802}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.277609", "id": 59946}
{"buggy_code": "module example_552(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module example_552(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.138586", "id": 34602}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.028401", "id": 14537}
{"buggy_code": "module test_913(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module test_913(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.087093", "id": 25184}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.275981", "id": 59656}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.161915", "id": 38884}
{"buggy_code": "module simple_945(input en, data, output sum); assign sum = en & data | c; endmodule", "correct_code": "module simple_945(input en, data, output sum); assign sum = (en & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.263482", "id": 57389}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.951548", "id": 647}
{"buggy_code": "module example_38(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module example_38(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.222781", "id": 49947}
{"buggy_code": "module demo_851(input rst, data, output sum); assign sum = rst & data | x; endmodule", "correct_code": "module demo_851(input rst, data, output sum); assign sum = (rst & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.078234", "id": 23575}
{"buggy_code": "module logic_184(input y, a, output q); assign q = y & a | b; endmodule", "correct_code": "module logic_184(input y, a, output q); assign q = (y & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.024877", "id": 13901}
{"buggy_code": "module demo_147(input y, in, output out); assign out = y & in | b; endmodule", "correct_code": "module demo_147(input y, in, output out); assign out = (y & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.008084", "id": 10865}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.008336", "id": 10911}
{"buggy_code": "module demo_791(input c, x, output valid); assign valid = c & x | rst; endmodule", "correct_code": "module demo_791(input c, x, output valid); assign valid = (c & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.024458", "id": 13825}
{"buggy_code": "module demo_35(input data, rst, output result); assign result = data & rst | data; endmodule", "correct_code": "module demo_35(input data, rst, output result); assign result = (data & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.000915", "id": 9573}
{"buggy_code": "module demo_489(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module demo_489(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.062126", "id": 20648}
{"buggy_code": "module logic_918(input y, output out); assign out = y + 1; endmodule", "correct_code": "module logic_918(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.034675", "id": 15669}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.188600", "id": 43752}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.228948", "id": 51070}
{"buggy_code": "module logic_145(input en, b, output out); assign out = en & b | in; endmodule", "correct_code": "module logic_145(input en, b, output out); assign out = (en & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.122152", "id": 31588}
{"buggy_code": "module simple_755(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module simple_755(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.979432", "id": 5663}
{"buggy_code": "module basic_580(input d, clk, output out); assign out = d & clk | x; endmodule", "correct_code": "module basic_580(input d, clk, output out); assign out = (d & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.293716", "id": 62898}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.975806", "id": 5053}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.193507", "id": 44618}
{"buggy_code": "module test_355(input a, in, output y); assign y = a & in | c; endmodule", "correct_code": "module test_355(input a, in, output y); assign y = (a & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.206593", "id": 47010}
{"buggy_code": "module arith_933(input en, c, output q); assign q = en & c | in; endmodule", "correct_code": "module arith_933(input en, c, output q); assign q = (en & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.236315", "id": 52424}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.988644", "id": 7335}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.957438", "id": 1714}
{"buggy_code": "module logic_447(input a, en, output out); assign out = a & en | d; endmodule", "correct_code": "module logic_447(input a, en, output out); assign out = (a & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.103072", "id": 28099}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.300816", "id": 64197}
{"buggy_code": "module test_691(input in, output q); assign q = in + 1; endmodule", "correct_code": "module test_691(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.124057", "id": 31938}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.259524", "id": 56667}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.289799", "id": 62181}
{"buggy_code": "module test_259(input data, a, output y); assign y = data & a | rst; endmodule", "correct_code": "module test_259(input data, a, output y); assign y = (data & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.306865", "id": 65311}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.295906", "id": 63296}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.956320", "id": 1512}
{"buggy_code": "module simple_824(input clk, clk, output sum); assign sum = clk & clk | b; endmodule", "correct_code": "module simple_824(input clk, clk, output sum); assign sum = (clk & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.983565", "id": 6407}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.197585", "id": 45364}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.067645", "id": 21658}
{"buggy_code": "module simple_783(input y, x, output out); assign out = y & x | d; endmodule", "correct_code": "module simple_783(input y, x, output out); assign out = (y & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.112420", "id": 29815}
{"buggy_code": "module example_185(input x, output out); assign out = x + 1; endmodule", "correct_code": "module example_185(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.009402", "id": 11107}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.309475", "id": 65795}
{"buggy_code": "module simple_504(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module simple_504(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.199204", "id": 45656}
{"buggy_code": "module logic_614(input x, c, output valid); assign valid = x & c | in; endmodule", "correct_code": "module logic_614(input x, c, output valid); assign valid = (x & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.031171", "id": 15036}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.317762", "id": 67309}
{"buggy_code": "module test_368(input y, rst, output q); assign q = y & rst | clk; endmodule", "correct_code": "module test_368(input y, rst, output q); assign q = (y & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.118264", "id": 30888}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.338659", "id": 71106}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.238977", "id": 52917}
{"buggy_code": "module logic_879(input in, output result); assign result = in + 1; endmodule", "correct_code": "module logic_879(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.200339", "id": 45866}
{"buggy_code": "module demo_684(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module demo_684(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.189258", "id": 43872}
{"buggy_code": "module logic_45(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module logic_45(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.293191", "id": 62802}
{"buggy_code": "module test_991(input a, y, output sum); assign sum = a & y | rst; endmodule", "correct_code": "module test_991(input a, y, output sum); assign sum = (a & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.045453", "id": 17618}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.072724", "id": 22594}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.282637", "id": 60874}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.986430", "id": 6931}
{"buggy_code": "module arith_917(input en, output q); assign q = en + 1; endmodule", "correct_code": "module arith_917(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.120404", "id": 31268}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.178987", "id": 42005}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.098410", "id": 27248}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.086886", "id": 25147}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.220787", "id": 49584}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.051647", "id": 18718}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.038001", "id": 16275}
{"buggy_code": "module test_109(input data, rst, output valid); assign valid = data & rst | c; endmodule", "correct_code": "module test_109(input data, rst, output valid); assign valid = (data & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.223344", "id": 50051}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.155713", "id": 37743}
{"buggy_code": "module logic_537(input a, a, output prod); assign prod = a & a | c; endmodule", "correct_code": "module logic_537(input a, a, output prod); assign prod = (a & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.963232", "id": 2767}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.208416", "id": 47341}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.106115", "id": 28655}
{"buggy_code": "module arith_378(input in, x, output prod); assign prod = in & x | clk; endmodule", "correct_code": "module arith_378(input in, x, output prod); assign prod = (in & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.010240", "id": 11257}
{"buggy_code": "module basic_505(input a, data, output y); assign y = a & data | c; endmodule", "correct_code": "module basic_505(input a, data, output y); assign y = (a & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.225900", "id": 50517}
{"buggy_code": "module arith_875(input b, in, output out); assign out = b & in | b; endmodule", "correct_code": "module arith_875(input b, in, output out); assign out = (b & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.986098", "id": 6870}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.323324", "id": 68296}
{"buggy_code": "module example_606(input in, output result); assign result = in + 1; endmodule", "correct_code": "module example_606(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.218094", "id": 49107}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179874", "id": 42168}
{"buggy_code": "module arith_89(input data, output result); assign result = data + 1; endmodule", "correct_code": "module arith_89(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.999066", "id": 9238}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.017066", "id": 12495}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.227628", "id": 50833}
{"buggy_code": "module arith_954(input x, output out); assign out = x + 1; endmodule", "correct_code": "module arith_954(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.037174", "id": 16124}
{"buggy_code": "module arith_736(input y, output q); assign q = y + 1; endmodule", "correct_code": "module arith_736(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.985322", "id": 6726}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.233632", "id": 51936}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.305087", "id": 64984}
{"buggy_code": "module simple_462(input x, output result); assign result = x + 1; endmodule", "correct_code": "module simple_462(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.278912", "id": 60185}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.060625", "id": 20374}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.318685", "id": 67480}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.336056", "id": 70627}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.095797", "id": 26773}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.234657", "id": 52123}
{"buggy_code": "module test_335(input clk, en, output sum); assign sum = clk & en | in; endmodule", "correct_code": "module test_335(input clk, en, output sum); assign sum = (clk & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.010791", "id": 11359}
{"buggy_code": "module simple_447(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module simple_447(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.256104", "id": 56040}
{"buggy_code": "module logic_429(input c, y, output result); assign result = c & y | b; endmodule", "correct_code": "module logic_429(input c, y, output result); assign result = (c & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.059452", "id": 20158}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.185610", "id": 43208}
{"buggy_code": "module simple_754(input x, output result); assign result = x + 1; endmodule", "correct_code": "module simple_754(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.303666", "id": 64718}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.015421", "id": 12197}
{"buggy_code": "module logic_884(input in, output out); assign out = in + 1; endmodule", "correct_code": "module logic_884(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.358260", "id": 74650}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.267224", "id": 58073}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.150157", "id": 36716}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.986527", "id": 6948}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.166832", "id": 39777}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.331767", "id": 69843}
{"buggy_code": "module test_545(input b, output y); assign y = b + 1; endmodule", "correct_code": "module test_545(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.103422", "id": 28163}
{"buggy_code": "module simple_21(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module simple_21(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.170383", "id": 40427}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.301501", "id": 64320}
{"buggy_code": "module example_916(input clk, y, output out); assign out = clk & y | in; endmodule", "correct_code": "module example_916(input clk, y, output out); assign out = (clk & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.345545", "id": 72327}
{"buggy_code": "module simple_735(input y, y, output out); assign out = y & y | en; endmodule", "correct_code": "module simple_735(input y, y, output out); assign out = (y & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.040253", "id": 16689}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.244277", "id": 53887}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.159948", "id": 38523}
{"buggy_code": "module basic_653(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module basic_653(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.312241", "id": 66299}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.276965", "id": 59828}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.134680", "id": 33884}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.054705", "id": 19282}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.264610", "id": 57598}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.220277", "id": 49490}
{"buggy_code": "module arith_602(input y, output y); assign y = y + 1; endmodule", "correct_code": "module arith_602(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.156465", "id": 37881}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.335289", "id": 70487}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.234809", "id": 52152}
{"buggy_code": "module example_704(input data, y, output valid); assign valid = data & y | b; endmodule", "correct_code": "module example_704(input data, y, output valid); assign valid = (data & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.951699", "id": 677}
{"buggy_code": "module logic_773(input y, data, output result); assign result = y & data | rst; endmodule", "correct_code": "module logic_773(input y, data, output result); assign result = (y & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.266550", "id": 57950}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.266517", "id": 57944}
{"buggy_code": "module logic_843(input b, b, output out); assign out = b & b | clk; endmodule", "correct_code": "module logic_843(input b, b, output out); assign out = (b & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.117541", "id": 30757}
{"buggy_code": "module example_16(input y, output result); assign result = y + 1; endmodule", "correct_code": "module example_16(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.138483", "id": 34583}
{"buggy_code": "module arith_735(input in, in, output sum); assign sum = in & in | a; endmodule", "correct_code": "module arith_735(input in, in, output sum); assign sum = (in & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.237250", "id": 52597}
{"buggy_code": "module example_628(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module example_628(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.969201", "id": 3855}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.358877", "id": 74760}
{"buggy_code": "module example_98(input en, output out); assign out = en + 1; endmodule", "correct_code": "module example_98(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.133585", "id": 33680}
{"buggy_code": "module example_889(input data, output y); assign y = data + 1; endmodule", "correct_code": "module example_889(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.253141", "id": 55506}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.318286", "id": 67404}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.112715", "id": 29871}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.121555", "id": 31481}
{"buggy_code": "module example_656(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module example_656(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.286327", "id": 61547}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.101653", "id": 27843}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.989302", "id": 7456}
{"buggy_code": "module test_979(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module test_979(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.107292", "id": 28871}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.323131", "id": 68260}
{"buggy_code": "module logic_13(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module logic_13(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.290681", "id": 62341}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.083385", "id": 24512}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.965216", "id": 3130}
{"buggy_code": "module simple_682(input data, output out); assign out = data + 1; endmodule", "correct_code": "module simple_682(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.088523", "id": 25444}
{"buggy_code": "module arith_861(input d, output out); assign out = d + 1; endmodule", "correct_code": "module arith_861(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.129423", "id": 32917}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.263024", "id": 57306}
{"buggy_code": "module test_438(input rst, clk, output prod); assign prod = rst & clk | y; endmodule", "correct_code": "module test_438(input rst, clk, output prod); assign prod = (rst & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.067783", "id": 21683}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.257388", "id": 56278}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.300339", "id": 64109}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.184505", "id": 43006}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.199556", "id": 45721}
{"buggy_code": "module basic_402(input a, output result); assign result = a + 1; endmodule", "correct_code": "module basic_402(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.969053", "id": 3827}
{"buggy_code": "module logic_354(input data, output result); assign result = data + 1; endmodule", "correct_code": "module logic_354(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.173225", "id": 40947}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.333592", "id": 70179}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.107889", "id": 28981}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.035279", "id": 15782}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.306250", "id": 65198}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.259404", "id": 56646}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.062711", "id": 20756}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.983097", "id": 6320}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.221317", "id": 49679}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.292001", "id": 62584}
{"buggy_code": "module logic_496(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module logic_496(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.349191", "id": 72993}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.949558", "id": 289}
{"buggy_code": "module demo_698(input data, output y); assign y = data + 1; endmodule", "correct_code": "module demo_698(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.278638", "id": 60136}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.059287", "id": 20128}
{"buggy_code": "module demo_851(input x, in, output result); assign result = x & in | data; endmodule", "correct_code": "module demo_851(input x, in, output result); assign result = (x & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.281616", "id": 60685}
{"buggy_code": "module test_345(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module test_345(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.046932", "id": 17886}
{"buggy_code": "module test_968(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module test_968(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.085061", "id": 24813}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.236639", "id": 52486}
{"buggy_code": "module arith_610(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module arith_610(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.244878", "id": 53998}
{"buggy_code": "module simple_965(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module simple_965(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.334978", "id": 70428}
{"buggy_code": "module simple_572(input c, a, output sum); assign sum = c & a | c; endmodule", "correct_code": "module simple_572(input c, a, output sum); assign sum = (c & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.076937", "id": 23348}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.082325", "id": 24321}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.156188", "id": 37830}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.995900", "id": 8662}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.325564", "id": 68704}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.127235", "id": 32519}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.214857", "id": 48513}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.139074", "id": 34692}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.330313", "id": 69577}
{"buggy_code": "module simple_842(input a, c, output sum); assign sum = a & c | data; endmodule", "correct_code": "module simple_842(input a, c, output sum); assign sum = (a & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.106775", "id": 28778}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.186075", "id": 43291}
{"buggy_code": "module example_93(input in, x, output y); assign y = in & x | rst; endmodule", "correct_code": "module example_93(input in, x, output y); assign y = (in & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.011834", "id": 11548}
{"buggy_code": "module arith_677(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module arith_677(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.178279", "id": 41874}
{"buggy_code": "module simple_428(input b, y, output sum); assign sum = b & y | x; endmodule", "correct_code": "module simple_428(input b, y, output sum); assign sum = (b & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.976231", "id": 5128}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.316770", "id": 67125}
{"buggy_code": "module arith_44(input y, output result); assign result = y + 1; endmodule", "correct_code": "module arith_44(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.108176", "id": 29035}
{"buggy_code": "module simple_403(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module simple_403(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.288697", "id": 61978}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.187300", "id": 43514}
{"buggy_code": "module simple_184(input clk, en, output out); assign out = clk & en | in; endmodule", "correct_code": "module simple_184(input clk, en, output out); assign out = (clk & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.044550", "id": 17458}
{"buggy_code": "module logic_20(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module logic_20(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.251398", "id": 55192}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.051476", "id": 18687}
{"buggy_code": "module logic_278(input in, y, output prod); assign prod = in & y | clk; endmodule", "correct_code": "module logic_278(input in, y, output prod); assign prod = (in & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.331907", "id": 69866}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.283377", "id": 61007}
{"buggy_code": "module basic_65(input y, x, output sum); assign sum = y & x | y; endmodule", "correct_code": "module basic_65(input y, x, output sum); assign sum = (y & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.032590", "id": 15293}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.338314", "id": 71042}
{"buggy_code": "module simple_920(input en, en, output out); assign out = en & en | rst; endmodule", "correct_code": "module simple_920(input en, en, output out); assign out = (en & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.983623", "id": 6417}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.108587", "id": 29113}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.030912", "id": 14988}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.104137", "id": 28294}
{"buggy_code": "module logic_103(input a, a, output valid); assign valid = a & a | c; endmodule", "correct_code": "module logic_103(input a, a, output valid); assign valid = (a & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.332243", "id": 69929}
{"buggy_code": "module logic_453(input x, output q); assign q = x + 1; endmodule", "correct_code": "module logic_453(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.269868", "id": 58557}
{"buggy_code": "module demo_641(input rst, clk, output valid); assign valid = rst & clk | en; endmodule", "correct_code": "module demo_641(input rst, clk, output valid); assign valid = (rst & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.029011", "id": 14646}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.999925", "id": 9394}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.140535", "id": 34961}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.179288", "id": 42063}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.320643", "id": 67805}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.171977", "id": 40720}
{"buggy_code": "module example_106(input c, output result); assign result = c + 1; endmodule", "correct_code": "module example_106(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.303977", "id": 64775}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.030844", "id": 14976}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.009783", "id": 11178}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.070816", "id": 22245}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.099168", "id": 27385}
{"buggy_code": "module example_365(input x, output result); assign result = x + 1; endmodule", "correct_code": "module example_365(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.014032", "id": 11947}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.330861", "id": 69679}
{"buggy_code": "module example_495(input rst, data, output sum); assign sum = rst & data | a; endmodule", "correct_code": "module example_495(input rst, data, output sum); assign sum = (rst & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.261570", "id": 57044}
{"buggy_code": "module arith_213(input in, a, output q); assign q = in & a | d; endmodule", "correct_code": "module arith_213(input in, a, output q); assign q = (in & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.094657", "id": 26563}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.996228", "id": 8722}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.311862", "id": 66231}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.335582", "id": 70540}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.280755", "id": 60527}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.114401", "id": 30182}
{"buggy_code": "module logic_459(input c, x, output result); assign result = c & x | en; endmodule", "correct_code": "module logic_459(input c, x, output result); assign result = (c & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.948455", "id": 93}
{"buggy_code": "module demo_292(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module demo_292(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.212708", "id": 48121}
{"buggy_code": "module demo_255(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module demo_255(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.020947", "id": 13186}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.218618", "id": 49202}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.231874", "id": 51610}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.270018", "id": 58585}
{"buggy_code": "module arith_956(input b, output out); assign out = b + 1; endmodule", "correct_code": "module arith_956(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.157758", "id": 38118}
{"buggy_code": "module arith_578(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module arith_578(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.248261", "id": 54617}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.257859", "id": 56362}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.982838", "id": 6272}
{"buggy_code": "module basic_529(input c, output out); assign out = c + 1; endmodule", "correct_code": "module basic_529(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.155795", "id": 37759}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.273763", "id": 59273}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.039988", "id": 16640}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.987313", "id": 7093}
{"buggy_code": "module arith_56(input a, output out); assign out = a + 1; endmodule", "correct_code": "module arith_56(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.190062", "id": 43981}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.114464", "id": 30194}
{"buggy_code": "module basic_322(input in, en, output result); assign result = in & en | a; endmodule", "correct_code": "module basic_322(input in, en, output result); assign result = (in & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.953051", "id": 920}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.098056", "id": 27180}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.997132", "id": 8888}
{"buggy_code": "module logic_969(input c, output result); assign result = c + 1; endmodule", "correct_code": "module logic_969(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.010586", "id": 11322}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.035756", "id": 15869}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.248690", "id": 54697}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.963442", "id": 2803}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.964525", "id": 3004}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.081453", "id": 24164}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.087374", "id": 25235}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.137699", "id": 34439}
{"buggy_code": "module simple_531(input y, d, output q); assign q = y & d | b; endmodule", "correct_code": "module simple_531(input y, d, output q); assign q = (y & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.951522", "id": 642}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.983127", "id": 6326}
{"buggy_code": "module test_205(input a, rst, output out); assign out = a & rst | rst; endmodule", "correct_code": "module test_205(input a, rst, output out); assign out = (a & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.157003", "id": 37980}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.012487", "id": 11665}
{"buggy_code": "module example_287(input b, d, output sum); assign sum = b & d | in; endmodule", "correct_code": "module example_287(input b, d, output sum); assign sum = (b & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.118091", "id": 30857}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.339117", "id": 71169}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287396", "id": 61739}
{"buggy_code": "module test_877(input rst, clk, output prod); assign prod = rst & clk | rst; endmodule", "correct_code": "module test_877(input rst, clk, output prod); assign prod = (rst & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.016832", "id": 12453}
{"buggy_code": "module test_856(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module test_856(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.969162", "id": 3848}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.150871", "id": 36850}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.080941", "id": 24070}
{"buggy_code": "module basic_518(input y, x, output q); assign q = y & x | a; endmodule", "correct_code": "module basic_518(input y, x, output q); assign q = (y & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.983078", "id": 6317}
{"buggy_code": "module demo_647(input data, output result); assign result = data + 1; endmodule", "correct_code": "module demo_647(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.155891", "id": 37774}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.014290", "id": 11992}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.349836", "id": 73108}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.292349", "id": 62650}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.069069", "id": 21918}
{"buggy_code": "module logic_667(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module logic_667(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.275897", "id": 59641}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.197580", "id": 45363}
{"buggy_code": "module simple_237(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module simple_237(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.114325", "id": 30168}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.315356", "id": 66864}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.216315", "id": 48778}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.272714", "id": 59082}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.187179", "id": 43492}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.338459", "id": 71069}
{"buggy_code": "module arith_805(input in, output out); assign out = in + 1; endmodule", "correct_code": "module arith_805(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.277221", "id": 59874}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.961183", "id": 2395}
{"buggy_code": "module demo_174(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module demo_174(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.026171", "id": 14140}
{"buggy_code": "module demo_995(input y, output result); assign result = y + 1; endmodule", "correct_code": "module demo_995(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.142067", "id": 35224}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.216786", "id": 48865}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.060124", "id": 20281}
{"buggy_code": "module logic_531(input y, en, output y); assign y = y & en | y; endmodule", "correct_code": "module logic_531(input y, en, output y); assign y = (y & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.258388", "id": 56461}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.047441", "id": 17978}
{"buggy_code": "module logic_896(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module logic_896(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.349489", "id": 73048}
{"buggy_code": "module arith_222(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module arith_222(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.977955", "id": 5394}
{"buggy_code": "module arith_535(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module arith_535(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.323170", "id": 68267}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.025544", "id": 14024}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.211575", "id": 47920}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.271413", "id": 58840}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.340840", "id": 71480}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.298141", "id": 63705}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.118299", "id": 30895}
{"buggy_code": "module logic_66(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module logic_66(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.144187", "id": 35618}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.954245", "id": 1136}
{"buggy_code": "module demo_797(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module demo_797(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.140580", "id": 34969}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.204158", "id": 46564}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.315628", "id": 66917}
{"buggy_code": "module test_17(input a, x, output result); assign result = a & x | b; endmodule", "correct_code": "module test_17(input a, x, output result); assign result = (a & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.144541", "id": 35685}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008478", "id": 10939}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.234189", "id": 52037}
{"buggy_code": "module simple_643(input rst, b, output valid); assign valid = rst & b | en; endmodule", "correct_code": "module simple_643(input rst, b, output valid); assign valid = (rst & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.157662", "id": 38100}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.081978", "id": 24258}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.062074", "id": 20639}
{"buggy_code": "module test_354(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module test_354(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.162950", "id": 39068}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.095473", "id": 26712}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.258084", "id": 56404}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.156953", "id": 37971}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.996693", "id": 8809}
{"buggy_code": "module test_686(input data, rst, output q); assign q = data & rst | clk; endmodule", "correct_code": "module test_686(input data, rst, output q); assign q = (data & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.303547", "id": 64696}
{"buggy_code": "module demo_845(input x, clk, output out); assign out = x & clk | a; endmodule", "correct_code": "module demo_845(input x, clk, output out); assign out = (x & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.044378", "id": 17426}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.070915", "id": 22262}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.974022", "id": 4727}
{"buggy_code": "module logic_781(input a, clk, output valid); assign valid = a & clk | c; endmodule", "correct_code": "module logic_781(input a, clk, output valid); assign valid = (a & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.318228", "id": 67393}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.298393", "id": 63752}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179118", "id": 42030}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.273115", "id": 59154}
{"buggy_code": "module example_677(input a, x, output q); assign q = a & x | data; endmodule", "correct_code": "module example_677(input a, x, output q); assign q = (a & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.168696", "id": 40122}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.029128", "id": 14667}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.067581", "id": 21647}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.307247", "id": 65384}
{"buggy_code": "module simple_102(input c, output y); assign y = c + 1; endmodule", "correct_code": "module simple_102(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.957426", "id": 1712}
{"buggy_code": "module simple_200(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module simple_200(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.139995", "id": 34860}
{"buggy_code": "module simple_655(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module simple_655(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.300010", "id": 64046}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.289235", "id": 62076}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.248329", "id": 54630}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.311094", "id": 66092}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.081061", "id": 24092}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.357484", "id": 74507}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.247221", "id": 54427}
{"buggy_code": "module logic_858(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module logic_858(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.089003", "id": 25530}
{"buggy_code": "module simple_50(input data, output out); assign out = data + 1; endmodule", "correct_code": "module simple_50(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.338021", "id": 70987}
{"buggy_code": "module test_239(input a, output result); assign result = a + 1; endmodule", "correct_code": "module test_239(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.270340", "id": 58644}
{"buggy_code": "module simple_440(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module simple_440(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.147423", "id": 36209}
{"buggy_code": "module basic_132(input d, in, output valid); assign valid = d & in | y; endmodule", "correct_code": "module basic_132(input d, in, output valid); assign valid = (d & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.215119", "id": 48560}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.355471", "id": 74137}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.336311", "id": 70675}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.978810", "id": 5551}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.330221", "id": 69560}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.354173", "id": 73895}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.220664", "id": 49562}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.075063", "id": 23030}
{"buggy_code": "module demo_93(input y, y, output valid); assign valid = y & y | data; endmodule", "correct_code": "module demo_93(input y, y, output valid); assign valid = (y & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.018383", "id": 12736}
{"buggy_code": "module test_151(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module test_151(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.027780", "id": 14427}
{"buggy_code": "module simple_261(input data, en, output q); assign q = data & en | a; endmodule", "correct_code": "module simple_261(input data, en, output q); assign q = (data & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.228100", "id": 50917}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.353787", "id": 73827}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.053774", "id": 19108}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.183607", "id": 42843}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.164500", "id": 39351}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.994440", "id": 8399}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.042247", "id": 17038}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.203438", "id": 46433}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.340363", "id": 71393}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.186044", "id": 43286}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.316214", "id": 67022}
{"buggy_code": "module arith_720(input d, output q); assign q = d + 1; endmodule", "correct_code": "module arith_720(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.144451", "id": 35668}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.962323", "id": 2601}
{"buggy_code": "module basic_589(input b, c, output y); assign y = b & c | clk; endmodule", "correct_code": "module basic_589(input b, c, output y); assign y = (b & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.183987", "id": 42911}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.952136", "id": 754}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.183030", "id": 42736}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.147413", "id": 36207}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.020480", "id": 13105}
{"buggy_code": "module basic_607(input x, d, output out); assign out = x & d | d; endmodule", "correct_code": "module basic_607(input x, d, output out); assign out = (x & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.064642", "id": 21114}
{"buggy_code": "module demo_982(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module demo_982(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.343203", "id": 71906}
{"buggy_code": "module test_382(input x, output y); assign y = x + 1; endmodule", "correct_code": "module test_382(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.958200", "id": 1850}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.264182", "id": 57518}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.025764", "id": 14065}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112926", "id": 29909}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.327168", "id": 68998}
{"buggy_code": "module basic_670(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module basic_670(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.096202", "id": 26846}
{"buggy_code": "module basic_362(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module basic_362(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.100804", "id": 27686}
{"buggy_code": "module simple_552(input y, data, output q); assign q = y & data | data; endmodule", "correct_code": "module simple_552(input y, data, output q); assign q = (y & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.303780", "id": 64740}
{"buggy_code": "module logic_573(input en, b, output valid); assign valid = en & b | en; endmodule", "correct_code": "module logic_573(input en, b, output valid); assign valid = (en & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.208767", "id": 47405}
{"buggy_code": "module simple_433(input clk, y, output prod); assign prod = clk & y | x; endmodule", "correct_code": "module simple_433(input clk, y, output prod); assign prod = (clk & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.350812", "id": 73287}
{"buggy_code": "module simple_810(input data, c, output y); assign y = data & c | y; endmodule", "correct_code": "module simple_810(input data, c, output y); assign y = (data & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.201981", "id": 46165}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.042117", "id": 17014}
{"buggy_code": "module basic_408(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module basic_408(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.219697", "id": 49388}
{"buggy_code": "module logic_481(input in, rst, output y); assign y = in & rst | in; endmodule", "correct_code": "module logic_481(input in, rst, output y); assign y = (in & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.329183", "id": 69370}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.970544", "id": 4095}
{"buggy_code": "module demo_149(input in, output y); assign y = in + 1; endmodule", "correct_code": "module demo_149(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.218659", "id": 49210}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.260059", "id": 56766}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.357904", "id": 74583}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.280473", "id": 60474}
{"buggy_code": "module example_75(input d, d, output q); assign q = d & d | clk; endmodule", "correct_code": "module example_75(input d, d, output q); assign q = (d & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.979575", "id": 5691}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.085434", "id": 24883}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.244570", "id": 53942}
{"buggy_code": "module test_257(input en, output y); assign y = en + 1; endmodule", "correct_code": "module test_257(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.107391", "id": 28889}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.015676", "id": 12244}
{"buggy_code": "module basic_638(input c, b, output q); assign q = c & b | en; endmodule", "correct_code": "module basic_638(input c, b, output q); assign q = (c & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.192703", "id": 44470}
{"buggy_code": "module basic_911(input en, c, output sum); assign sum = en & c | rst; endmodule", "correct_code": "module basic_911(input en, c, output sum); assign sum = (en & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.127324", "id": 32535}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.970068", "id": 4009}
{"buggy_code": "module simple_857(input b, x, output y); assign y = b & x | data; endmodule", "correct_code": "module simple_857(input b, x, output y); assign y = (b & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.134720", "id": 33891}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.120921", "id": 31362}
{"buggy_code": "module arith_858(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module arith_858(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.032579", "id": 15291}
{"buggy_code": "module demo_590(input d, output q); assign q = d + 1; endmodule", "correct_code": "module demo_590(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.117226", "id": 30698}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.346808", "id": 72560}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.292938", "id": 62755}
{"buggy_code": "module basic_65(input in, x, output sum); assign sum = in & x | a; endmodule", "correct_code": "module basic_65(input in, x, output sum); assign sum = (in & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.253386", "id": 55546}
{"buggy_code": "module test_520(input data, output y); assign y = data + 1; endmodule", "correct_code": "module test_520(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.208986", "id": 47443}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.273957", "id": 59307}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.279500", "id": 60294}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.283803", "id": 61086}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.135321", "id": 33998}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.334707", "id": 70379}
{"buggy_code": "module test_870(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module test_870(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.079491", "id": 23806}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.332994", "id": 70068}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.315564", "id": 66905}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.991947", "id": 7943}
{"buggy_code": "module demo_489(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module demo_489(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.170006", "id": 40357}
{"buggy_code": "module arith_684(input in, output result); assign result = in + 1; endmodule", "correct_code": "module arith_684(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.177596", "id": 41750}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.000855", "id": 9562}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.103551", "id": 28186}
{"buggy_code": "module simple_199(input b, rst, output q); assign q = b & rst | a; endmodule", "correct_code": "module simple_199(input b, rst, output q); assign q = (b & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.309600", "id": 65818}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.006944", "id": 10661}
{"buggy_code": "module simple_119(input en, rst, output valid); assign valid = en & rst | rst; endmodule", "correct_code": "module simple_119(input en, rst, output valid); assign valid = (en & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.356732", "id": 74369}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.299356", "id": 63929}
{"buggy_code": "module logic_208(input data, en, output valid); assign valid = data & en | y; endmodule", "correct_code": "module logic_208(input data, en, output valid); assign valid = (data & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.330570", "id": 69626}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.963747", "id": 2860}
{"buggy_code": "module test_381(input x, output q); assign q = x + 1; endmodule", "correct_code": "module test_381(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.246717", "id": 54336}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.290377", "id": 62285}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.025489", "id": 14014}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.094094", "id": 26459}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.977362", "id": 5336}
{"buggy_code": "module arith_587(input rst, rst, output result); assign result = rst & rst | clk; endmodule", "correct_code": "module arith_587(input rst, rst, output result); assign result = (rst & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.044207", "id": 17393}
{"buggy_code": "module logic_547(input a, output out); assign out = a + 1; endmodule", "correct_code": "module logic_547(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.350326", "id": 73199}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.157552", "id": 38081}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.167637", "id": 39928}
{"buggy_code": "module simple_937(input a, b, output prod); assign prod = a & b | b; endmodule", "correct_code": "module simple_937(input a, b, output prod); assign prod = (a & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.097514", "id": 27082}
{"buggy_code": "module simple_499(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module simple_499(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.191327", "id": 44213}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.962967", "id": 2718}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.004532", "id": 10220}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.214213", "id": 48396}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.292123", "id": 62608}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.081693", "id": 24209}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.254779", "id": 55798}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.074919", "id": 23002}
{"buggy_code": "module logic_948(input c, output result); assign result = c + 1; endmodule", "correct_code": "module logic_948(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.161905", "id": 38882}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.196843", "id": 45227}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.992432", "id": 8033}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192970", "id": 44518}
{"buggy_code": "module basic_181(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module basic_181(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.329602", "id": 69449}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.283317", "id": 60995}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.191207", "id": 44191}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.129758", "id": 32978}
{"buggy_code": "module basic_330(input d, a, output out); assign out = d & a | y; endmodule", "correct_code": "module basic_330(input d, a, output out); assign out = (d & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.223694", "id": 50118}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.988067", "id": 7229}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.156862", "id": 37955}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.207014", "id": 47087}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.069696", "id": 22036}
{"buggy_code": "module example_729(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module example_729(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.967873", "id": 3618}
{"buggy_code": "module demo_251(input en, en, output result); assign result = en & en | clk; endmodule", "correct_code": "module demo_251(input en, en, output result); assign result = (en & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.953632", "id": 1025}
{"buggy_code": "module basic_542(input y, clk, output result); assign result = y & clk | x; endmodule", "correct_code": "module basic_542(input y, clk, output result); assign result = (y & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.968739", "id": 3776}
{"buggy_code": "module basic_804(input y, output q); assign q = y + 1; endmodule", "correct_code": "module basic_804(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.976563", "id": 5189}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.083380", "id": 24511}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.165981", "id": 39620}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.341098", "id": 71527}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.084677", "id": 24743}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.240685", "id": 53230}
{"buggy_code": "module arith_340(input data, en, output out); assign out = data & en | a; endmodule", "correct_code": "module arith_340(input data, en, output out); assign out = (data & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.956326", "id": 1513}
{"buggy_code": "module basic_360(input in, output y); assign y = in + 1; endmodule", "correct_code": "module basic_360(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.008283", "id": 10902}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.041762", "id": 16950}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.092566", "id": 26184}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.062638", "id": 20743}
{"buggy_code": "module logic_20(input c, output out); assign out = c + 1; endmodule", "correct_code": "module logic_20(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.203334", "id": 46414}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.228152", "id": 50927}
{"buggy_code": "module basic_326(input clk, rst, output valid); assign valid = clk & rst | en; endmodule", "correct_code": "module basic_326(input clk, rst, output valid); assign valid = (clk & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.078348", "id": 23596}
{"buggy_code": "module example_230(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module example_230(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.136124", "id": 34146}
{"buggy_code": "module example_739(input b, a, output result); assign result = b & a | c; endmodule", "correct_code": "module example_739(input b, a, output result); assign result = (b & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.261895", "id": 57102}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.122196", "id": 31596}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.276250", "id": 59705}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.005070", "id": 10317}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.148044", "id": 36324}
{"buggy_code": "module basic_411(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module basic_411(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.205433", "id": 46798}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.338674", "id": 71109}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.218281", "id": 49138}
{"buggy_code": "module demo_555(input d, output y); assign y = d + 1; endmodule", "correct_code": "module demo_555(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.055801", "id": 19487}
{"buggy_code": "module test_856(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module test_856(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.982550", "id": 6221}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232916", "id": 51801}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.184447", "id": 42995}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.285398", "id": 61375}
{"buggy_code": "module logic_147(input data, output result); assign result = data + 1; endmodule", "correct_code": "module logic_147(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.157139", "id": 38004}
{"buggy_code": "module test_820(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module test_820(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.961558", "id": 2466}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.337498", "id": 70892}
{"buggy_code": "module basic_308(input a, in, output result); assign result = a & in | b; endmodule", "correct_code": "module basic_308(input a, in, output result); assign result = (a & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.160359", "id": 38599}
{"buggy_code": "module logic_812(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module logic_812(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.289079", "id": 62048}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.104132", "id": 28293}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.990848", "id": 7742}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.076056", "id": 23208}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.037886", "id": 16253}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.196539", "id": 45171}
{"buggy_code": "module arith_533(input data, output out); assign out = data + 1; endmodule", "correct_code": "module arith_533(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.991735", "id": 7905}
{"buggy_code": "module test_535(input in, output out); assign out = in + 1; endmodule", "correct_code": "module test_535(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.138331", "id": 34554}
{"buggy_code": "module test_963(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module test_963(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.066565", "id": 21463}
{"buggy_code": "module basic_884(input c, x, output q); assign q = c & x | in; endmodule", "correct_code": "module basic_884(input c, x, output q); assign q = (c & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.293586", "id": 62874}
{"buggy_code": "module logic_398(input b, y, output result); assign result = b & y | c; endmodule", "correct_code": "module logic_398(input b, y, output result); assign result = (b & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.257165", "id": 56235}
{"buggy_code": "module example_938(input x, y, output q); assign q = x & y | y; endmodule", "correct_code": "module example_938(input x, y, output q); assign q = (x & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.028279", "id": 14515}
{"buggy_code": "module simple_678(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module simple_678(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.011363", "id": 11463}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.332437", "id": 69964}
{"buggy_code": "module logic_147(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module logic_147(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.978570", "id": 5506}
{"buggy_code": "module demo_273(input c, output q); assign q = c + 1; endmodule", "correct_code": "module demo_273(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.229128", "id": 51104}
{"buggy_code": "module basic_450(input d, d, output y); assign y = d & d | c; endmodule", "correct_code": "module basic_450(input d, d, output y); assign y = (d & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.052243", "id": 18827}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.288816", "id": 62001}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.122943", "id": 31735}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.139095", "id": 34696}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.309637", "id": 65825}
{"buggy_code": "module example_40(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module example_40(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.088674", "id": 25472}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.172944", "id": 40894}
{"buggy_code": "module logic_512(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module logic_512(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.256178", "id": 56052}
{"buggy_code": "module simple_332(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module simple_332(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.169910", "id": 40339}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.331993", "id": 69882}
{"buggy_code": "module simple_217(input d, output q); assign q = d + 1; endmodule", "correct_code": "module simple_217(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.103275", "id": 28136}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.279110", "id": 60221}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.130332", "id": 33083}
{"buggy_code": "module basic_315(input c, output y); assign y = c + 1; endmodule", "correct_code": "module basic_315(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.109787", "id": 29331}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.006461", "id": 10574}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.092218", "id": 26123}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.216484", "id": 48809}
{"buggy_code": "module demo_6(input x, d, output sum); assign sum = x & d | c; endmodule", "correct_code": "module demo_6(input x, d, output sum); assign sum = (x & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.200302", "id": 45859}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.297010", "id": 63497}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.140526", "id": 34959}
{"buggy_code": "module demo_723(input data, d, output out); assign out = data & d | clk; endmodule", "correct_code": "module demo_723(input data, d, output out); assign out = (data & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.329614", "id": 69451}
{"buggy_code": "module arith_279(input x, b, output sum); assign sum = x & b | en; endmodule", "correct_code": "module arith_279(input x, b, output sum); assign sum = (x & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.181354", "id": 42438}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.193737", "id": 44660}
{"buggy_code": "module simple_514(input d, c, output out); assign out = d & c | x; endmodule", "correct_code": "module simple_514(input d, c, output out); assign out = (d & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.976714", "id": 5217}
{"buggy_code": "module test_885(input en, output y); assign y = en + 1; endmodule", "correct_code": "module test_885(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091621", "id": 26016}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.130018", "id": 33025}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.268516", "id": 58309}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.257157", "id": 56234}
{"buggy_code": "module basic_176(input d, output q); assign q = d + 1; endmodule", "correct_code": "module basic_176(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.296944", "id": 63486}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.101331", "id": 27784}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.985116", "id": 6688}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.356801", "id": 74382}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.257255", "id": 56253}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.220204", "id": 49476}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210182", "id": 47664}
{"buggy_code": "module arith_776(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module arith_776(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.177410", "id": 41716}
{"buggy_code": "module simple_408(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module simple_408(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.119655", "id": 31135}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.959677", "id": 2122}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.966976", "id": 3450}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.195859", "id": 45048}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.122884", "id": 31724}
{"buggy_code": "module demo_204(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module demo_204(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.172106", "id": 40744}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.025402", "id": 13998}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.300945", "id": 64218}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.273159", "id": 59162}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.204232", "id": 46579}
{"buggy_code": "module basic_341(input d, x, output q); assign q = d & x | data; endmodule", "correct_code": "module basic_341(input d, x, output q); assign q = (d & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.095090", "id": 26641}
{"buggy_code": "module example_963(input in, output result); assign result = in + 1; endmodule", "correct_code": "module example_963(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.083619", "id": 24554}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.237498", "id": 52645}
{"buggy_code": "module demo_669(input c, output result); assign result = c + 1; endmodule", "correct_code": "module demo_669(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.210450", "id": 47714}
{"buggy_code": "module demo_886(input d, b, output prod); assign prod = d & b | x; endmodule", "correct_code": "module demo_886(input d, b, output prod); assign prod = (d & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.193270", "id": 44573}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.120193", "id": 31230}
{"buggy_code": "module simple_432(input rst, data, output q); assign q = rst & data | c; endmodule", "correct_code": "module simple_432(input rst, data, output q); assign q = (rst & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.350361", "id": 73205}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.103500", "id": 28176}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.265354", "id": 57733}
{"buggy_code": "module demo_15(input clk, c, output q); assign q = clk & c | y; endmodule", "correct_code": "module demo_15(input clk, c, output q); assign q = (clk & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.052461", "id": 18867}
{"buggy_code": "module demo_477(input clk, data, output result); assign result = clk & data | x; endmodule", "correct_code": "module demo_477(input clk, data, output result); assign result = (clk & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.094032", "id": 26447}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.998205", "id": 9083}
{"buggy_code": "module arith_163(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module arith_163(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.116022", "id": 30477}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.133271", "id": 33622}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.159741", "id": 38487}
{"buggy_code": "module arith_949(input b, data, output q); assign q = b & data | c; endmodule", "correct_code": "module arith_949(input b, data, output q); assign q = (b & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.164468", "id": 39345}
{"buggy_code": "module simple_102(input clk, data, output y); assign y = clk & data | x; endmodule", "correct_code": "module simple_102(input clk, data, output y); assign y = (clk & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.071072", "id": 22291}
{"buggy_code": "module basic_854(input in, a, output prod); assign prod = in & a | a; endmodule", "correct_code": "module basic_854(input in, a, output prod); assign prod = (in & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.199048", "id": 45629}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.280661", "id": 60509}
{"buggy_code": "module example_766(input en, x, output result); assign result = en & x | in; endmodule", "correct_code": "module example_766(input en, x, output result); assign result = (en & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.195931", "id": 45061}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.096672", "id": 26929}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.158863", "id": 38322}
{"buggy_code": "module logic_938(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module logic_938(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.125622", "id": 32225}
{"buggy_code": "module basic_483(input y, clk, output q); assign q = y & clk | a; endmodule", "correct_code": "module basic_483(input y, clk, output q); assign q = (y & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.231693", "id": 51579}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.202624", "id": 46283}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.964773", "id": 3051}
{"buggy_code": "module basic_262(input y, output q); assign q = y + 1; endmodule", "correct_code": "module basic_262(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.217219", "id": 48944}
{"buggy_code": "module example_131(input d, output result); assign result = d + 1; endmodule", "correct_code": "module example_131(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.324392", "id": 68492}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.172142", "id": 40751}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.359175", "id": 74816}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.272134", "id": 58973}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.191521", "id": 44250}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.032259", "id": 15234}
{"buggy_code": "module test_654(input c, c, output y); assign y = c & c | x; endmodule", "correct_code": "module test_654(input c, c, output y); assign y = (c & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.035814", "id": 15880}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.130685", "id": 33150}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.036570", "id": 16016}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.951636", "id": 664}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.030216", "id": 14865}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.254106", "id": 55675}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.194632", "id": 44826}
{"buggy_code": "module basic_960(input b, a, output q); assign q = b & a | a; endmodule", "correct_code": "module basic_960(input b, a, output q); assign q = (b & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.130806", "id": 33172}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.302680", "id": 64537}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.243381", "id": 53724}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.189994", "id": 43969}
{"buggy_code": "module example_523(input y, a, output result); assign result = y & a | data; endmodule", "correct_code": "module example_523(input y, a, output result); assign result = (y & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.106535", "id": 28734}
{"buggy_code": "module logic_295(input y, data, output valid); assign valid = y & data | a; endmodule", "correct_code": "module logic_295(input y, data, output valid); assign valid = (y & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.959803", "id": 2144}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.026334", "id": 14166}
{"buggy_code": "module demo_777(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module demo_777(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.104983", "id": 28444}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.213868", "id": 48331}
{"buggy_code": "module simple_142(input a, in, output valid); assign valid = a & in | clk; endmodule", "correct_code": "module simple_142(input a, in, output valid); assign valid = (a & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.354220", "id": 73903}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.281701", "id": 60701}
{"buggy_code": "module logic_459(input a, output result); assign result = a + 1; endmodule", "correct_code": "module logic_459(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.992427", "id": 8032}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.206748", "id": 47038}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.308927", "id": 65694}
{"buggy_code": "module arith_548(input b, output result); assign result = b + 1; endmodule", "correct_code": "module arith_548(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.358948", "id": 74772}
{"buggy_code": "module demo_638(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module demo_638(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.041129", "id": 16837}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.332178", "id": 69917}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.981526", "id": 6035}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.065321", "id": 21237}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.109868", "id": 29345}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.126208", "id": 32331}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.017325", "id": 12543}
{"buggy_code": "module arith_37(input clk, rst, output y); assign y = clk & rst | x; endmodule", "correct_code": "module arith_37(input clk, rst, output y); assign y = (clk & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.009998", "id": 11214}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.969305", "id": 3874}
{"buggy_code": "module logic_213(input in, output result); assign result = in + 1; endmodule", "correct_code": "module logic_213(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.972727", "id": 4496}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.168701", "id": 40123}
{"buggy_code": "module simple_500(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module simple_500(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.200443", "id": 45885}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.250152", "id": 54963}
{"buggy_code": "module demo_264(input en, en, output prod); assign prod = en & en | clk; endmodule", "correct_code": "module demo_264(input en, en, output prod); assign prod = (en & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.175241", "id": 41313}
{"buggy_code": "module simple_686(input y, clk, output y); assign y = y & clk | data; endmodule", "correct_code": "module simple_686(input y, clk, output y); assign y = (y & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.196528", "id": 45169}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.225879", "id": 50513}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.971572", "id": 4286}
{"buggy_code": "module basic_4(input d, rst, output out); assign out = d & rst | en; endmodule", "correct_code": "module basic_4(input d, rst, output out); assign out = (d & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.154981", "id": 37608}
{"buggy_code": "module simple_881(input x, en, output valid); assign valid = x & en | data; endmodule", "correct_code": "module simple_881(input x, en, output valid); assign valid = (x & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.293615", "id": 62879}
{"buggy_code": "module test_222(input en, output out); assign out = en + 1; endmodule", "correct_code": "module test_222(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.243664", "id": 53774}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.354572", "id": 73968}
{"buggy_code": "module demo_624(input c, in, output out); assign out = c & in | data; endmodule", "correct_code": "module demo_624(input c, in, output out); assign out = (c & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.331838", "id": 69854}
{"buggy_code": "module demo_733(input en, output result); assign result = en + 1; endmodule", "correct_code": "module demo_733(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.162482", "id": 38988}
{"buggy_code": "module arith_726(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module arith_726(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.072663", "id": 22583}
{"buggy_code": "module basic_639(input en, x, output result); assign result = en & x | clk; endmodule", "correct_code": "module basic_639(input en, x, output result); assign result = (en & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.075977", "id": 23194}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.069705", "id": 22038}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.101665", "id": 27845}
{"buggy_code": "module arith_699(input in, b, output valid); assign valid = in & b | c; endmodule", "correct_code": "module arith_699(input in, b, output valid); assign valid = (in & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.233884", "id": 51981}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.261053", "id": 56949}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.096519", "id": 26901}
{"buggy_code": "module simple_579(input rst, d, output prod); assign prod = rst & d | d; endmodule", "correct_code": "module simple_579(input rst, d, output prod); assign prod = (rst & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.211005", "id": 47813}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.027293", "id": 14334}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.140585", "id": 34970}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.236450", "id": 52450}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.194183", "id": 44742}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.225136", "id": 50378}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.108979", "id": 29183}
{"buggy_code": "module example_344(input data, a, output prod); assign prod = data & a | b; endmodule", "correct_code": "module example_344(input data, a, output prod); assign prod = (data & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.110793", "id": 29516}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.233083", "id": 51831}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.235584", "id": 52294}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.175276", "id": 41320}
{"buggy_code": "module demo_877(input rst, clk, output valid); assign valid = rst & clk | a; endmodule", "correct_code": "module demo_877(input rst, clk, output valid); assign valid = (rst & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.028296", "id": 14518}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.055203", "id": 19377}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.071906", "id": 22442}
{"buggy_code": "module demo_226(input a, d, output result); assign result = a & d | d; endmodule", "correct_code": "module demo_226(input a, d, output result); assign result = (a & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.331696", "id": 69829}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.149194", "id": 36540}
{"buggy_code": "module simple_480(input clk, c, output y); assign y = clk & c | clk; endmodule", "correct_code": "module simple_480(input clk, c, output y); assign y = (clk & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.330787", "id": 69666}
{"buggy_code": "module test_681(input a, output q); assign q = a + 1; endmodule", "correct_code": "module test_681(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.284216", "id": 61161}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.225884", "id": 50514}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277144", "id": 59860}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.990796", "id": 7734}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.106148", "id": 28661}
{"buggy_code": "module arith_524(input clk, in, output result); assign result = clk & in | rst; endmodule", "correct_code": "module arith_524(input clk, in, output result); assign result = (clk & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.266145", "id": 57876}
{"buggy_code": "module basic_646(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module basic_646(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.141411", "id": 35103}
{"buggy_code": "module simple_877(input x, output q); assign q = x + 1; endmodule", "correct_code": "module simple_877(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.345534", "id": 72325}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.130815", "id": 33174}
{"buggy_code": "module example_712(input en, output result); assign result = en + 1; endmodule", "correct_code": "module example_712(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.982715", "id": 6251}
{"buggy_code": "module arith_580(input y, clk, output result); assign result = y & clk | rst; endmodule", "correct_code": "module arith_580(input y, clk, output result); assign result = (y & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.115100", "id": 30310}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.316522", "id": 67079}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.988084", "id": 7232}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.071397", "id": 22350}
{"buggy_code": "module example_701(input in, output y); assign y = in + 1; endmodule", "correct_code": "module example_701(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.328844", "id": 69305}
{"buggy_code": "module example_659(input b, output result); assign result = b + 1; endmodule", "correct_code": "module example_659(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.178140", "id": 41848}
{"buggy_code": "module basic_911(input in, data, output y); assign y = in & data | x; endmodule", "correct_code": "module basic_911(input in, data, output y); assign y = (in & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.058107", "id": 19909}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.265132", "id": 57692}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.160776", "id": 38676}
{"buggy_code": "module test_241(input d, data, output sum); assign sum = d & data | in; endmodule", "correct_code": "module test_241(input d, data, output sum); assign sum = (d & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.164123", "id": 39284}
{"buggy_code": "module logic_433(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module logic_433(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.119649", "id": 31134}
{"buggy_code": "module logic_420(input y, y, output prod); assign prod = y & y | rst; endmodule", "correct_code": "module logic_420(input y, y, output prod); assign prod = (y & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.977490", "id": 5358}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.166848", "id": 39780}
{"buggy_code": "module demo_115(input d, clk, output result); assign result = d & clk | rst; endmodule", "correct_code": "module demo_115(input d, clk, output result); assign result = (d & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.334090", "id": 70269}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138900", "id": 34660}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.085534", "id": 24902}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.355647", "id": 74170}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.131724", "id": 33344}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.224590", "id": 50279}
{"buggy_code": "module example_51(input data, d, output sum); assign sum = data & d | b; endmodule", "correct_code": "module example_51(input data, d, output sum); assign sum = (data & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.974859", "id": 4880}
{"buggy_code": "module simple_577(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module simple_577(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.064509", "id": 21088}
{"buggy_code": "module demo_612(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module demo_612(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.953312", "id": 968}
{"buggy_code": "module example_921(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module example_921(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.228778", "id": 51042}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.079224", "id": 23757}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.994394", "id": 8390}
{"buggy_code": "module test_971(input in, y, output sum); assign sum = in & y | x; endmodule", "correct_code": "module test_971(input in, y, output sum); assign sum = (in & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.137391", "id": 34379}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.021430", "id": 13276}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.350226", "id": 73181}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.145515", "id": 35867}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.131729", "id": 33345}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.235575", "id": 52292}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.009665", "id": 11155}
{"buggy_code": "module basic_801(input b, data, output prod); assign prod = b & data | clk; endmodule", "correct_code": "module basic_801(input b, data, output prod); assign prod = (b & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.151152", "id": 36901}
{"buggy_code": "module example_516(input clk, y, output q); assign q = clk & y | rst; endmodule", "correct_code": "module example_516(input clk, y, output q); assign q = (clk & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.185948", "id": 43268}
{"buggy_code": "module logic_768(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module logic_768(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.234780", "id": 52146}
{"buggy_code": "module arith_826(input data, x, output y); assign y = data & x | x; endmodule", "correct_code": "module arith_826(input data, x, output y); assign y = (data & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.030016", "id": 14829}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.198987", "id": 45618}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.248458", "id": 54655}
{"buggy_code": "module example_806(input c, output y); assign y = c + 1; endmodule", "correct_code": "module example_806(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.265080", "id": 57683}
{"buggy_code": "module logic_342(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module logic_342(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.296744", "id": 63452}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.977274", "id": 5320}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.105250", "id": 28494}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.965673", "id": 3215}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.080423", "id": 23977}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.077473", "id": 23436}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.100418", "id": 27617}
{"buggy_code": "module test_843(input d, output result); assign result = d + 1; endmodule", "correct_code": "module test_843(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.015294", "id": 12174}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.142077", "id": 35226}
{"buggy_code": "module arith_381(input clk, rst, output out); assign out = clk & rst | y; endmodule", "correct_code": "module arith_381(input clk, rst, output out); assign out = (clk & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.082783", "id": 24404}
{"buggy_code": "module demo_705(input rst, rst, output prod); assign prod = rst & rst | y; endmodule", "correct_code": "module demo_705(input rst, rst, output prod); assign prod = (rst & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.353556", "id": 73785}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.271348", "id": 58828}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.345313", "id": 72285}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.008452", "id": 10934}
{"buggy_code": "module demo_858(input x, x, output result); assign result = x & x | rst; endmodule", "correct_code": "module demo_858(input x, x, output result); assign result = (x & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.976701", "id": 5215}
{"buggy_code": "module logic_143(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module logic_143(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.014860", "id": 12095}
{"buggy_code": "module arith_735(input y, en, output sum); assign sum = y & en | b; endmodule", "correct_code": "module arith_735(input y, en, output sum); assign sum = (y & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.101897", "id": 27887}
{"buggy_code": "module logic_327(input rst, data, output prod); assign prod = rst & data | en; endmodule", "correct_code": "module logic_327(input rst, data, output prod); assign prod = (rst & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.041053", "id": 16824}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.150260", "id": 36735}
{"buggy_code": "module test_649(input d, output y); assign y = d + 1; endmodule", "correct_code": "module test_649(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.265172", "id": 57699}
{"buggy_code": "module logic_80(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module logic_80(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.004228", "id": 10164}
{"buggy_code": "module logic_136(input rst, d, output sum); assign sum = rst & d | rst; endmodule", "correct_code": "module logic_136(input rst, d, output sum); assign sum = (rst & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.105721", "id": 28583}
{"buggy_code": "module test_872(input b, y, output valid); assign valid = b & y | c; endmodule", "correct_code": "module test_872(input b, y, output valid); assign valid = (b & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.282571", "id": 60861}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.252099", "id": 55316}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.137425", "id": 34386}
{"buggy_code": "module demo_834(input in, output q); assign q = in + 1; endmodule", "correct_code": "module demo_834(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.278553", "id": 60122}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.224682", "id": 50295}
{"buggy_code": "module simple_271(input in, data, output valid); assign valid = in & data | b; endmodule", "correct_code": "module simple_271(input in, data, output valid); assign valid = (in & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.151213", "id": 36912}
{"buggy_code": "module simple_41(input in, rst, output result); assign result = in & rst | b; endmodule", "correct_code": "module simple_41(input in, rst, output result); assign result = (in & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.220462", "id": 49524}
{"buggy_code": "module demo_99(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module demo_99(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.179316", "id": 42068}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.002590", "id": 9883}
{"buggy_code": "module arith_488(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module arith_488(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.082198", "id": 24297}
{"buggy_code": "module demo_925(input rst, c, output prod); assign prod = rst & c | rst; endmodule", "correct_code": "module demo_925(input rst, c, output prod); assign prod = (rst & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.150131", "id": 36712}
{"buggy_code": "module example_410(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module example_410(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.024013", "id": 13746}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.177684", "id": 41766}
{"buggy_code": "module simple_14(input in, output result); assign result = in + 1; endmodule", "correct_code": "module simple_14(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.990323", "id": 7644}
{"buggy_code": "module demo_208(input data, a, output valid); assign valid = data & a | rst; endmodule", "correct_code": "module demo_208(input data, a, output valid); assign valid = (data & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.326984", "id": 68964}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.244451", "id": 53920}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.112972", "id": 29918}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.197947", "id": 45428}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.351310", "id": 73377}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.086372", "id": 25055}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.028493", "id": 14555}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.171540", "id": 40640}
{"buggy_code": "module simple_756(input rst, y, output sum); assign sum = rst & y | x; endmodule", "correct_code": "module simple_756(input rst, y, output sum); assign sum = (rst & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.359181", "id": 74817}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.057642", "id": 19825}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.267167", "id": 58063}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.097939", "id": 27157}
{"buggy_code": "module test_897(input d, x, output q); assign q = d & x | data; endmodule", "correct_code": "module test_897(input d, x, output q); assign q = (d & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.046419", "id": 17793}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.995122", "id": 8521}
{"buggy_code": "module test_642(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module test_642(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.259327", "id": 56632}
{"buggy_code": "module logic_237(input c, in, output valid); assign valid = c & in | in; endmodule", "correct_code": "module logic_237(input c, in, output valid); assign valid = (c & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.181851", "id": 42520}
{"buggy_code": "module example_623(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module example_623(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.252192", "id": 55333}
{"buggy_code": "module demo_544(input d, data, output valid); assign valid = d & data | clk; endmodule", "correct_code": "module demo_544(input d, data, output valid); assign valid = (d & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.171810", "id": 40690}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.215656", "id": 48660}
{"buggy_code": "module logic_939(input data, in, output y); assign y = data & in | y; endmodule", "correct_code": "module logic_939(input data, in, output y); assign y = (data & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.964267", "id": 2954}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.245598", "id": 54134}
{"buggy_code": "module example_445(input a, output q); assign q = a + 1; endmodule", "correct_code": "module example_445(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.234051", "id": 52012}
{"buggy_code": "module simple_444(input data, output out); assign out = data + 1; endmodule", "correct_code": "module simple_444(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.190456", "id": 44054}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.967906", "id": 3624}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.983254", "id": 6350}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.163081", "id": 39093}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.269544", "id": 58499}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.101215", "id": 27761}
{"buggy_code": "module example_361(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module example_361(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.190234", "id": 44014}
{"buggy_code": "module demo_341(input y, rst, output q); assign q = y & rst | clk; endmodule", "correct_code": "module demo_341(input y, rst, output q); assign q = (y & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.152458", "id": 37144}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.142884", "id": 35378}
{"buggy_code": "module test_776(input d, clk, output out); assign out = d & clk | d; endmodule", "correct_code": "module test_776(input d, clk, output out); assign out = (d & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.207273", "id": 47134}
{"buggy_code": "module simple_494(input in, b, output q); assign q = in & b | y; endmodule", "correct_code": "module simple_494(input in, b, output q); assign q = (in & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.968284", "id": 3693}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.112169", "id": 29769}
{"buggy_code": "module logic_211(input rst, en, output prod); assign prod = rst & en | clk; endmodule", "correct_code": "module logic_211(input rst, en, output prod); assign prod = (rst & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.056770", "id": 19666}
{"buggy_code": "module test_570(input rst, data, output sum); assign sum = rst & data | rst; endmodule", "correct_code": "module test_570(input rst, data, output sum); assign sum = (rst & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.068162", "id": 21750}
{"buggy_code": "module simple_666(input c, b, output q); assign q = c & b | en; endmodule", "correct_code": "module simple_666(input c, b, output q); assign q = (c & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.016335", "id": 12362}
{"buggy_code": "module logic_497(input in, c, output prod); assign prod = in & c | x; endmodule", "correct_code": "module logic_497(input in, c, output prod); assign prod = (in & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.955935", "id": 1440}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.262355", "id": 57185}
{"buggy_code": "module logic_206(input y, y, output y); assign y = y & y | rst; endmodule", "correct_code": "module logic_206(input y, y, output y); assign y = (y & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.015731", "id": 12255}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.211385", "id": 47884}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.026033", "id": 14114}
{"buggy_code": "module test_391(input clk, clk, output q); assign q = clk & clk | a; endmodule", "correct_code": "module test_391(input clk, clk, output q); assign q = (clk & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.241613", "id": 53403}
{"buggy_code": "module example_245(input rst, en, output prod); assign prod = rst & en | rst; endmodule", "correct_code": "module example_245(input rst, en, output prod); assign prod = (rst & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.016671", "id": 12425}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.203061", "id": 46363}
{"buggy_code": "module simple_973(input y, b, output y); assign y = y & b | b; endmodule", "correct_code": "module simple_973(input y, b, output y); assign y = (y & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.114684", "id": 30235}
{"buggy_code": "module demo_586(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module demo_586(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.972096", "id": 4382}
{"buggy_code": "module demo_347(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module demo_347(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.313681", "id": 66560}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.221471", "id": 49708}
{"buggy_code": "module basic_913(input b, rst, output sum); assign sum = b & rst | clk; endmodule", "correct_code": "module basic_913(input b, rst, output sum); assign sum = (b & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.068606", "id": 21832}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.226528", "id": 50633}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.131003", "id": 33207}
{"buggy_code": "module arith_584(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module arith_584(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.120251", "id": 31241}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.349317", "id": 73016}
{"buggy_code": "module demo_681(input rst, x, output result); assign result = rst & x | rst; endmodule", "correct_code": "module demo_681(input rst, x, output result); assign result = (rst & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.105589", "id": 28558}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.066159", "id": 21389}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.208748", "id": 47402}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.163804", "id": 39228}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192835", "id": 44493}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.040870", "id": 16791}
{"buggy_code": "module simple_408(input en, a, output valid); assign valid = en & a | a; endmodule", "correct_code": "module simple_408(input en, a, output valid); assign valid = (en & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.024708", "id": 13871}
{"buggy_code": "module basic_489(input x, en, output y); assign y = x & en | y; endmodule", "correct_code": "module basic_489(input x, en, output y); assign y = (x & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.030022", "id": 14830}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.330471", "id": 69608}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.324418", "id": 68497}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.158681", "id": 38289}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.279076", "id": 60214}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.246367", "id": 54272}
{"buggy_code": "module logic_823(input c, x, output out); assign out = c & x | en; endmodule", "correct_code": "module logic_823(input c, x, output out); assign out = (c & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.962558", "id": 2646}
{"buggy_code": "module basic_480(input y, output result); assign result = y + 1; endmodule", "correct_code": "module basic_480(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.968792", "id": 3781}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.169461", "id": 40260}
{"buggy_code": "module example_345(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module example_345(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.304637", "id": 64903}
{"buggy_code": "module logic_94(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module logic_94(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.954919", "id": 1256}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.311110", "id": 66095}
{"buggy_code": "module arith_718(input en, output q); assign q = en + 1; endmodule", "correct_code": "module arith_718(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.235137", "id": 52212}
{"buggy_code": "module example_248(input in, c, output y); assign y = in & c | in; endmodule", "correct_code": "module example_248(input in, c, output y); assign y = (in & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.047609", "id": 18010}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.291692", "id": 62528}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.064524", "id": 21091}
{"buggy_code": "module basic_700(input en, in, output valid); assign valid = en & in | d; endmodule", "correct_code": "module basic_700(input en, in, output valid); assign valid = (en & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.974166", "id": 4753}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.144692", "id": 35714}
{"buggy_code": "module arith_25(input en, y, output out); assign out = en & y | in; endmodule", "correct_code": "module arith_25(input en, y, output out); assign out = (en & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.022694", "id": 13506}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.045532", "id": 17633}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.954664", "id": 1215}
{"buggy_code": "module basic_547(input rst, en, output prod); assign prod = rst & en | x; endmodule", "correct_code": "module basic_547(input rst, en, output prod); assign prod = (rst & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.349886", "id": 73117}
{"buggy_code": "module example_460(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module example_460(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.108409", "id": 29078}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.997083", "id": 8879}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.266636", "id": 57966}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.281736", "id": 60707}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.970451", "id": 4078}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.264171", "id": 57516}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.955494", "id": 1362}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.963706", "id": 2852}
{"buggy_code": "module logic_34(input d, output y); assign y = d + 1; endmodule", "correct_code": "module logic_34(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.078323", "id": 23592}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.961374", "id": 2431}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.133939", "id": 33746}
{"buggy_code": "module example_212(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module example_212(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.231653", "id": 51572}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.990235", "id": 7628}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.060571", "id": 20363}
{"buggy_code": "module test_132(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module test_132(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.172371", "id": 40793}
{"buggy_code": "module demo_233(input d, clk, output y); assign y = d & clk | in; endmodule", "correct_code": "module demo_233(input d, clk, output y); assign y = (d & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.338389", "id": 71056}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.174855", "id": 41243}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.199209", "id": 45657}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.144286", "id": 35637}
{"buggy_code": "module test_963(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module test_963(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.138721", "id": 34628}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.100152", "id": 27566}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.977418", "id": 5345}
{"buggy_code": "module example_746(input x, c, output valid); assign valid = x & c | c; endmodule", "correct_code": "module example_746(input x, c, output valid); assign valid = (x & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.076378", "id": 23262}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.237380", "id": 52623}
{"buggy_code": "module example_239(input d, b, output result); assign result = d & b | en; endmodule", "correct_code": "module example_239(input d, b, output result); assign result = (d & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.269890", "id": 58561}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.130614", "id": 33137}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.131494", "id": 33300}
{"buggy_code": "module simple_819(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module simple_819(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.311397", "id": 66148}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.147287", "id": 36186}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.325036", "id": 68609}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.959076", "id": 2011}
{"buggy_code": "module example_353(input b, output result); assign result = b + 1; endmodule", "correct_code": "module example_353(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308681", "id": 65651}
{"buggy_code": "module arith_264(input b, en, output y); assign y = b & en | d; endmodule", "correct_code": "module arith_264(input b, en, output y); assign y = (b & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.314792", "id": 66764}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.159618", "id": 38463}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.176513", "id": 41549}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.211444", "id": 47895}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.146477", "id": 36041}
{"buggy_code": "module test_837(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module test_837(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.158590", "id": 38271}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.110149", "id": 29398}
{"buggy_code": "module test_528(input c, b, output sum); assign sum = c & b | x; endmodule", "correct_code": "module test_528(input c, b, output sum); assign sum = (c & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.052964", "id": 18956}
{"buggy_code": "module example_399(input b, output out); assign out = b + 1; endmodule", "correct_code": "module example_399(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.262795", "id": 57268}
{"buggy_code": "module basic_224(input data, data, output y); assign y = data & data | c; endmodule", "correct_code": "module basic_224(input data, data, output y); assign y = (data & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.200908", "id": 45970}
{"buggy_code": "module arith_915(input en, output y); assign y = en + 1; endmodule", "correct_code": "module arith_915(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.115608", "id": 30402}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.978780", "id": 5545}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138732", "id": 34630}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.154747", "id": 37568}
{"buggy_code": "module basic_78(input data, output result); assign result = data + 1; endmodule", "correct_code": "module basic_78(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.041991", "id": 16990}
{"buggy_code": "module example_659(input a, rst, output valid); assign valid = a & rst | rst; endmodule", "correct_code": "module example_659(input a, rst, output valid); assign valid = (a & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.265189", "id": 57702}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.229116", "id": 51102}
{"buggy_code": "module basic_411(input data, output q); assign q = data + 1; endmodule", "correct_code": "module basic_411(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.038471", "id": 16361}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.324671", "id": 68543}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.985964", "id": 6845}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.352377", "id": 73574}
{"buggy_code": "module demo_684(input c, x, output out); assign out = c & x | y; endmodule", "correct_code": "module demo_684(input c, x, output out); assign out = (c & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.966245", "id": 3317}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.354422", "id": 73941}
{"buggy_code": "module logic_252(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module logic_252(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.240514", "id": 53196}
{"buggy_code": "module example_786(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module example_786(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.266943", "id": 58020}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.240805", "id": 53252}
{"buggy_code": "module test_544(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module test_544(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.005718", "id": 10439}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.142132", "id": 35236}
{"buggy_code": "module example_303(input a, y, output sum); assign sum = a & y | clk; endmodule", "correct_code": "module example_303(input a, y, output sum); assign sum = (a & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.217637", "id": 49024}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.179970", "id": 42186}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.964507", "id": 3001}
{"buggy_code": "module test_375(input d, output y); assign y = d + 1; endmodule", "correct_code": "module test_375(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.025942", "id": 14096}
{"buggy_code": "module logic_478(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module logic_478(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.231373", "id": 51520}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.037164", "id": 16122}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.271811", "id": 58914}
{"buggy_code": "module simple_752(input d, output out); assign out = d + 1; endmodule", "correct_code": "module simple_752(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.115843", "id": 30444}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.346803", "id": 72559}
{"buggy_code": "module example_477(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module example_477(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.142226", "id": 35253}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.343038", "id": 71877}
{"buggy_code": "module arith_672(input d, b, output y); assign y = d & b | y; endmodule", "correct_code": "module arith_672(input d, b, output y); assign y = (d & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.119371", "id": 31089}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.269009", "id": 58398}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.174739", "id": 41223}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.235767", "id": 52327}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.319129", "id": 67561}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.094854", "id": 26598}
{"buggy_code": "module logic_911(input clk, d, output result); assign result = clk & d | x; endmodule", "correct_code": "module logic_911(input clk, d, output result); assign result = (clk & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.093343", "id": 26322}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.107650", "id": 28939}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.171710", "id": 40671}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.263883", "id": 57463}
{"buggy_code": "module demo_384(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module demo_384(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.069985", "id": 22088}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.168515", "id": 40089}
{"buggy_code": "module basic_997(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module basic_997(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.194393", "id": 44781}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.957521", "id": 1729}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.198376", "id": 45507}
{"buggy_code": "module arith_212(input b, y, output valid); assign valid = b & y | rst; endmodule", "correct_code": "module arith_212(input b, y, output valid); assign valid = (b & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.973089", "id": 4560}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.234846", "id": 52157}
{"buggy_code": "module logic_950(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module logic_950(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.282118", "id": 60777}
{"buggy_code": "module basic_353(input y, c, output valid); assign valid = y & c | data; endmodule", "correct_code": "module basic_353(input y, c, output valid); assign valid = (y & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.303807", "id": 64745}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.156454", "id": 37879}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287438", "id": 61747}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.346268", "id": 72459}
{"buggy_code": "module basic_918(input a, clk, output q); assign q = a & clk | rst; endmodule", "correct_code": "module basic_918(input a, clk, output q); assign q = (a & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.180163", "id": 42222}
{"buggy_code": "module arith_372(input a, output y); assign y = a + 1; endmodule", "correct_code": "module arith_372(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.039959", "id": 16634}
{"buggy_code": "module test_403(input b, d, output y); assign y = b & d | en; endmodule", "correct_code": "module test_403(input b, d, output y); assign y = (b & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.998800", "id": 9190}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.162678", "id": 39023}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.276302", "id": 59715}
{"buggy_code": "module demo_788(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module demo_788(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.006913", "id": 10655}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.990500", "id": 7678}
{"buggy_code": "module test_422(input c, output q); assign q = c + 1; endmodule", "correct_code": "module test_422(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.087643", "id": 25283}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.970054", "id": 4006}
{"buggy_code": "module test_981(input clk, b, output q); assign q = clk & b | y; endmodule", "correct_code": "module test_981(input clk, b, output q); assign q = (clk & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.266121", "id": 57872}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.183705", "id": 42862}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.033579", "id": 15470}
{"buggy_code": "module simple_756(input y, output y); assign y = y + 1; endmodule", "correct_code": "module simple_756(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.203098", "id": 46370}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.183502", "id": 42824}
{"buggy_code": "module example_59(input c, output result); assign result = c + 1; endmodule", "correct_code": "module example_59(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.992935", "id": 8123}
{"buggy_code": "module example_206(input in, y, output y); assign y = in & y | data; endmodule", "correct_code": "module example_206(input in, y, output y); assign y = (in & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.005627", "id": 10422}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.217306", "id": 48960}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.213028", "id": 48181}
{"buggy_code": "module demo_994(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module demo_994(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.232628", "id": 51748}
{"buggy_code": "module logic_113(input x, output y); assign y = x + 1; endmodule", "correct_code": "module logic_113(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.951869", "id": 706}
{"buggy_code": "module demo_927(input b, output result); assign result = b + 1; endmodule", "correct_code": "module demo_927(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.144411", "id": 35661}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.004657", "id": 10243}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.137185", "id": 34341}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.317649", "id": 67287}
{"buggy_code": "module basic_852(input in, d, output y); assign y = in & d | en; endmodule", "correct_code": "module basic_852(input in, d, output y); assign y = (in & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.095240", "id": 26670}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.085382", "id": 24873}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.011758", "id": 11535}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.981040", "id": 5946}
{"buggy_code": "module test_839(input a, d, output out); assign out = a & d | clk; endmodule", "correct_code": "module test_839(input a, d, output out); assign out = (a & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.273976", "id": 59310}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.109164", "id": 29216}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.177178", "id": 41671}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.076323", "id": 23255}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.306909", "id": 65320}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.142966", "id": 35393}
{"buggy_code": "module demo_541(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module demo_541(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.346493", "id": 72501}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.178815", "id": 41975}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.174707", "id": 41217}
{"buggy_code": "module test_633(input x, c, output prod); assign prod = x & c | data; endmodule", "correct_code": "module test_633(input x, c, output prod); assign prod = (x & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.280683", "id": 60513}
{"buggy_code": "module simple_985(input in, y, output out); assign out = in & y | c; endmodule", "correct_code": "module simple_985(input in, y, output out); assign out = (in & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.199158", "id": 45648}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.270641", "id": 58699}
{"buggy_code": "module logic_905(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module logic_905(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.982908", "id": 6285}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.302623", "id": 64526}
{"buggy_code": "module demo_680(input in, output q); assign q = in + 1; endmodule", "correct_code": "module demo_680(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.077389", "id": 23420}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.358387", "id": 74673}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.153614", "id": 37359}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.190794", "id": 44115}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.269429", "id": 58477}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.302619", "id": 64525}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.261103", "id": 56958}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.116200", "id": 30510}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.289864", "id": 62191}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.082966", "id": 24435}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.972903", "id": 4525}
{"buggy_code": "module demo_837(input rst, rst, output sum); assign sum = rst & rst | en; endmodule", "correct_code": "module demo_837(input rst, rst, output sum); assign sum = (rst & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.229386", "id": 51151}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.153109", "id": 37265}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.975773", "id": 5047}
{"buggy_code": "module arith_5(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module arith_5(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.184224", "id": 42953}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.949618", "id": 300}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.261018", "id": 56942}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.118176", "id": 30872}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.126271", "id": 32343}
{"buggy_code": "module demo_751(input d, x, output valid); assign valid = d & x | a; endmodule", "correct_code": "module demo_751(input d, x, output valid); assign valid = (d & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.020893", "id": 13177}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.962683", "id": 2668}
{"buggy_code": "module test_9(input y, output result); assign result = y + 1; endmodule", "correct_code": "module test_9(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.175782", "id": 41414}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.154763", "id": 37571}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.972566", "id": 4466}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.118885", "id": 31001}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.296933", "id": 63484}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.215193", "id": 48573}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.129259", "id": 32887}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.222090", "id": 49821}
{"buggy_code": "module arith_430(input c, output result); assign result = c + 1; endmodule", "correct_code": "module arith_430(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.117741", "id": 30795}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.260380", "id": 56825}
{"buggy_code": "module test_848(input x, output result); assign result = x + 1; endmodule", "correct_code": "module test_848(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.333661", "id": 70191}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.215938", "id": 48710}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.013731", "id": 11892}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.152122", "id": 37081}
{"buggy_code": "module logic_188(input x, x, output valid); assign valid = x & x | clk; endmodule", "correct_code": "module logic_188(input x, x, output valid); assign valid = (x & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.046439", "id": 17797}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.165643", "id": 39560}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.017030", "id": 12488}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.344729", "id": 72183}
{"buggy_code": "module demo_363(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module demo_363(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.153082", "id": 37260}
{"buggy_code": "module demo_728(input b, in, output out); assign out = b & in | b; endmodule", "correct_code": "module demo_728(input b, in, output out); assign out = (b & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.334928", "id": 70418}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.184379", "id": 42982}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.075660", "id": 23139}
{"buggy_code": "module simple_122(input b, output q); assign q = b + 1; endmodule", "correct_code": "module simple_122(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.095256", "id": 26673}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.041412", "id": 16888}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.324173", "id": 68452}
{"buggy_code": "module logic_539(input en, output out); assign out = en + 1; endmodule", "correct_code": "module logic_539(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.056655", "id": 19644}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.989537", "id": 7500}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.104103", "id": 28288}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.978757", "id": 5540}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.294946", "id": 63119}
{"buggy_code": "module test_233(input d, x, output result); assign result = d & x | rst; endmodule", "correct_code": "module test_233(input d, x, output result); assign result = (d & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.317533", "id": 67265}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.981269", "id": 5988}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.049851", "id": 18390}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.069136", "id": 21931}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.304279", "id": 64834}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.154386", "id": 37501}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.045173", "id": 17569}
{"buggy_code": "module demo_522(input b, output out); assign out = b + 1; endmodule", "correct_code": "module demo_522(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.075507", "id": 23111}
{"buggy_code": "module example_122(input c, output q); assign q = c + 1; endmodule", "correct_code": "module example_122(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.119608", "id": 31126}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.053636", "id": 19082}
{"buggy_code": "module test_593(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module test_593(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.160283", "id": 38585}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.283328", "id": 60997}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.325516", "id": 68695}
{"buggy_code": "module simple_662(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module simple_662(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.113326", "id": 29983}
{"buggy_code": "module example_253(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module example_253(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000100", "id": 9426}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.139680", "id": 34805}
{"buggy_code": "module example_198(input b, d, output q); assign q = b & d | in; endmodule", "correct_code": "module example_198(input b, d, output q); assign q = (b & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.948854", "id": 162}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.230460", "id": 51352}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.205484", "id": 46807}
{"buggy_code": "module arith_861(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module arith_861(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.161013", "id": 38717}
{"buggy_code": "module logic_599(input y, data, output out); assign out = y & data | c; endmodule", "correct_code": "module logic_599(input y, data, output out); assign out = (y & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.973264", "id": 4591}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182244", "id": 42594}
{"buggy_code": "module example_619(input x, x, output out); assign out = x & x | in; endmodule", "correct_code": "module example_619(input x, x, output out); assign out = (x & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.341612", "id": 71620}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.181920", "id": 42533}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.953698", "id": 1038}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.114440", "id": 30189}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.995982", "id": 8678}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.268085", "id": 58229}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.060414", "id": 20334}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.056295", "id": 19576}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.031942", "id": 15177}
{"buggy_code": "module example_717(input c, in, output sum); assign sum = c & in | y; endmodule", "correct_code": "module example_717(input c, in, output sum); assign sum = (c & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.144472", "id": 35672}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.092767", "id": 26219}
{"buggy_code": "module demo_451(input in, in, output out); assign out = in & in | clk; endmodule", "correct_code": "module demo_451(input in, in, output out); assign out = (in & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.170542", "id": 40457}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.963762", "id": 2863}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.269447", "id": 58480}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.165137", "id": 39466}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.166757", "id": 39765}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.130308", "id": 33078}
{"buggy_code": "module logic_345(input in, output q); assign q = in + 1; endmodule", "correct_code": "module logic_345(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.153140", "id": 37271}
{"buggy_code": "module logic_762(input a, clk, output q); assign q = a & clk | en; endmodule", "correct_code": "module logic_762(input a, clk, output q); assign q = (a & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.064179", "id": 21026}
{"buggy_code": "module test_510(input a, output out); assign out = a + 1; endmodule", "correct_code": "module test_510(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.206551", "id": 47002}
{"buggy_code": "module arith_152(input b, c, output valid); assign valid = b & c | rst; endmodule", "correct_code": "module arith_152(input b, c, output valid); assign valid = (b & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.063040", "id": 20815}
{"buggy_code": "module arith_808(input d, en, output result); assign result = d & en | en; endmodule", "correct_code": "module arith_808(input d, en, output result); assign result = (d & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.040352", "id": 16707}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.333318", "id": 70128}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.147689", "id": 36259}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.291634", "id": 62518}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.171593", "id": 40649}
{"buggy_code": "module demo_406(input d, en, output q); assign q = d & en | c; endmodule", "correct_code": "module demo_406(input d, en, output q); assign q = (d & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.246510", "id": 54298}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.324046", "id": 68428}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.241048", "id": 53295}
{"buggy_code": "module example_548(input c, output result); assign result = c + 1; endmodule", "correct_code": "module example_548(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.992139", "id": 7979}
{"buggy_code": "module simple_660(input data, output q); assign q = data + 1; endmodule", "correct_code": "module simple_660(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.302991", "id": 64593}
{"buggy_code": "module logic_520(input b, output out); assign out = b + 1; endmodule", "correct_code": "module logic_520(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.223498", "id": 50081}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.085746", "id": 24942}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.139774", "id": 34822}
{"buggy_code": "module example_653(input d, output y); assign y = d + 1; endmodule", "correct_code": "module example_653(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.246268", "id": 54255}
{"buggy_code": "module example_75(input in, output result); assign result = in + 1; endmodule", "correct_code": "module example_75(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.132660", "id": 33510}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.237301", "id": 52608}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.057840", "id": 19861}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.347692", "id": 72720}
{"buggy_code": "module example_950(input en, data, output out); assign out = en & data | en; endmodule", "correct_code": "module example_950(input en, data, output out); assign out = (en & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.168713", "id": 40124}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.959843", "id": 2150}
{"buggy_code": "module basic_800(input in, output out); assign out = in + 1; endmodule", "correct_code": "module basic_800(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.020793", "id": 13161}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.245541", "id": 54123}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.235019", "id": 52190}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.175511", "id": 41364}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.127173", "id": 32508}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.358086", "id": 74617}
{"buggy_code": "module logic_893(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module logic_893(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.062201", "id": 20662}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.182605", "id": 42659}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.279505", "id": 60295}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.171133", "id": 40565}
{"buggy_code": "module basic_346(input en, output y); assign y = en + 1; endmodule", "correct_code": "module basic_346(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.018933", "id": 12836}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.072064", "id": 22472}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.097882", "id": 27146}
{"buggy_code": "module test_687(input a, output out); assign out = a + 1; endmodule", "correct_code": "module test_687(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.303747", "id": 64734}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.289975", "id": 62212}
{"buggy_code": "module logic_855(input x, output q); assign q = x + 1; endmodule", "correct_code": "module logic_855(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.973809", "id": 4690}
{"buggy_code": "module logic_793(input c, d, output out); assign out = c & d | rst; endmodule", "correct_code": "module logic_793(input c, d, output out); assign out = (c & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.066933", "id": 21528}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.245748", "id": 54164}
{"buggy_code": "module test_370(input data, output y); assign y = data + 1; endmodule", "correct_code": "module test_370(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.023526", "id": 13658}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.176035", "id": 41460}
{"buggy_code": "module example_218(input in, en, output out); assign out = in & en | data; endmodule", "correct_code": "module example_218(input in, en, output out); assign out = (in & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.336108", "id": 70636}
{"buggy_code": "module arith_747(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module arith_747(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.009778", "id": 11177}
{"buggy_code": "module basic_897(input rst, a, output q); assign q = rst & a | in; endmodule", "correct_code": "module basic_897(input rst, a, output q); assign q = (rst & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.241483", "id": 53379}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.214655", "id": 48476}
{"buggy_code": "module arith_229(input rst, a, output sum); assign sum = rst & a | d; endmodule", "correct_code": "module arith_229(input rst, a, output sum); assign sum = (rst & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.951952", "id": 720}
{"buggy_code": "module logic_403(input b, clk, output prod); assign prod = b & clk | x; endmodule", "correct_code": "module logic_403(input b, clk, output prod); assign prod = (b & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.974525", "id": 4820}
{"buggy_code": "module test_499(input d, clk, output sum); assign sum = d & clk | b; endmodule", "correct_code": "module test_499(input d, clk, output sum); assign sum = (d & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.991973", "id": 7948}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.013545", "id": 11856}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.218675", "id": 49213}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.357937", "id": 74589}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.268623", "id": 58329}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.978235", "id": 5445}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.317232", "id": 67211}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.029651", "id": 14764}
{"buggy_code": "module basic_382(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module basic_382(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.145091", "id": 35788}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.062056", "id": 20636}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.010124", "id": 11237}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.960740", "id": 2314}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.160028", "id": 38539}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.282199", "id": 60792}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.265205", "id": 57705}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.241760", "id": 53429}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.969579", "id": 3923}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.949143", "id": 214}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.280484", "id": 60476}
{"buggy_code": "module example_654(input x, output y); assign y = x + 1; endmodule", "correct_code": "module example_654(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.175799", "id": 41417}
{"buggy_code": "module example_65(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module example_65(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.247734", "id": 54521}
{"buggy_code": "module simple_866(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module simple_866(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.288888", "id": 62013}
{"buggy_code": "module demo_363(input x, c, output sum); assign sum = x & c | a; endmodule", "correct_code": "module demo_363(input x, c, output sum); assign sum = (x & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.104151", "id": 28296}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.076284", "id": 23249}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.006750", "id": 10628}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.170318", "id": 40415}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.995516", "id": 8593}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.280923", "id": 60556}
{"buggy_code": "module basic_9(input clk, d, output sum); assign sum = clk & d | y; endmodule", "correct_code": "module basic_9(input clk, d, output sum); assign sum = (clk & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.126049", "id": 32302}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.140493", "id": 34953}
{"buggy_code": "module simple_817(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module simple_817(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.998709", "id": 9174}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.072667", "id": 22584}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.245465", "id": 54109}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.218909", "id": 49256}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.990106", "id": 7604}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.972926", "id": 4530}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.119866", "id": 31171}
{"buggy_code": "module demo_921(input clk, c, output out); assign out = clk & c | d; endmodule", "correct_code": "module demo_921(input clk, c, output out); assign out = (clk & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.273155", "id": 59161}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.299908", "id": 64028}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.978194", "id": 5437}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.136398", "id": 34196}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.353373", "id": 73749}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.119920", "id": 31181}
{"buggy_code": "module test_284(input clk, rst, output result); assign result = clk & rst | y; endmodule", "correct_code": "module test_284(input clk, rst, output result); assign result = (clk & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.350151", "id": 73168}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.086569", "id": 25091}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.053516", "id": 19060}
{"buggy_code": "module logic_220(input rst, en, output sum); assign sum = rst & en | y; endmodule", "correct_code": "module logic_220(input rst, en, output sum); assign sum = (rst & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.357885", "id": 74579}
{"buggy_code": "module example_536(input a, data, output q); assign q = a & data | en; endmodule", "correct_code": "module example_536(input a, data, output q); assign q = (a & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.311815", "id": 66224}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.074360", "id": 22898}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.002344", "id": 9838}
{"buggy_code": "module arith_233(input d, in, output y); assign y = d & in | rst; endmodule", "correct_code": "module arith_233(input d, in, output y); assign y = (d & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.178151", "id": 41850}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.018885", "id": 12827}
{"buggy_code": "module test_388(input d, x, output y); assign y = d & x | in; endmodule", "correct_code": "module test_388(input d, x, output y); assign y = (d & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.062779", "id": 20769}
{"buggy_code": "module basic_24(input a, d, output q); assign q = a & d | x; endmodule", "correct_code": "module basic_24(input a, d, output q); assign q = (a & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.031152", "id": 15033}
{"buggy_code": "module basic_974(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module basic_974(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.337847", "id": 70955}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.093965", "id": 26435}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.068995", "id": 21904}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.155462", "id": 37697}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.356695", "id": 74362}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.964898", "id": 3071}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.122476", "id": 31648}
{"buggy_code": "module example_937(input a, output result); assign result = a + 1; endmodule", "correct_code": "module example_937(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.154799", "id": 37577}
{"buggy_code": "module basic_996(input x, output out); assign out = x + 1; endmodule", "correct_code": "module basic_996(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.348900", "id": 72939}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.023414", "id": 13637}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.949585", "id": 294}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.333894", "id": 70232}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.195361", "id": 44958}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.282700", "id": 60886}
{"buggy_code": "module example_84(input c, y, output y); assign y = c & y | in; endmodule", "correct_code": "module example_84(input c, y, output y); assign y = (c & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.215054", "id": 48548}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.218031", "id": 49095}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.977213", "id": 5308}
{"buggy_code": "module arith_733(input x, d, output out); assign out = x & d | data; endmodule", "correct_code": "module arith_733(input x, d, output out); assign out = (x & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.284004", "id": 61121}
{"buggy_code": "module demo_806(input en, x, output q); assign q = en & x | in; endmodule", "correct_code": "module demo_806(input en, x, output q); assign q = (en & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.106416", "id": 28711}
{"buggy_code": "module logic_489(input in, output q); assign q = in + 1; endmodule", "correct_code": "module logic_489(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.036375", "id": 15979}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.127095", "id": 32495}
{"buggy_code": "module demo_693(input x, in, output y); assign y = x & in | clk; endmodule", "correct_code": "module demo_693(input x, in, output y); assign y = (x & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.269666", "id": 58521}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.953481", "id": 998}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.070777", "id": 22237}
{"buggy_code": "module example_808(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module example_808(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.010680", "id": 11339}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.190861", "id": 44126}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.281981", "id": 60750}
{"buggy_code": "module arith_708(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module arith_708(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.061470", "id": 20529}
{"buggy_code": "module arith_907(input en, output q); assign q = en + 1; endmodule", "correct_code": "module arith_907(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.302578", "id": 64517}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.319082", "id": 67552}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.991187", "id": 7804}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.266937", "id": 58019}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.069478", "id": 21995}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.991156", "id": 7798}
{"buggy_code": "module logic_977(input clk, y, output prod); assign prod = clk & y | in; endmodule", "correct_code": "module logic_977(input clk, y, output prod); assign prod = (clk & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.014433", "id": 12019}
{"buggy_code": "module arith_32(input en, output result); assign result = en + 1; endmodule", "correct_code": "module arith_32(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.023450", "id": 13644}
{"buggy_code": "module simple_148(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module simple_148(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.052683", "id": 18907}
{"buggy_code": "module simple_296(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module simple_296(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.100518", "id": 27634}
{"buggy_code": "module simple_170(input b, b, output q); assign q = b & b | rst; endmodule", "correct_code": "module simple_170(input b, b, output q); assign q = (b & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.181968", "id": 42543}
{"buggy_code": "module simple_862(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module simple_862(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.053887", "id": 19127}
{"buggy_code": "module example_662(input rst, y, output prod); assign prod = rst & y | a; endmodule", "correct_code": "module example_662(input rst, y, output prod); assign prod = (rst & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.341790", "id": 71651}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.260849", "id": 56910}
{"buggy_code": "module simple_662(input en, output y); assign y = en + 1; endmodule", "correct_code": "module simple_662(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.203781", "id": 46495}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.221034", "id": 49626}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.074084", "id": 22846}
{"buggy_code": "module demo_777(input en, data, output y); assign y = en & data | d; endmodule", "correct_code": "module demo_777(input en, data, output y); assign y = (en & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.157375", "id": 38048}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.986112", "id": 6873}
{"buggy_code": "module arith_179(input en, c, output out); assign out = en & c | data; endmodule", "correct_code": "module arith_179(input en, c, output out); assign out = (en & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.355114", "id": 74069}
{"buggy_code": "module logic_872(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module logic_872(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.235006", "id": 52187}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.336527", "id": 70714}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.324156", "id": 68449}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.093533", "id": 26358}
{"buggy_code": "module basic_363(input a, output y); assign y = a + 1; endmodule", "correct_code": "module basic_363(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.299572", "id": 63969}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.322275", "id": 68104}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.090351", "id": 25780}
{"buggy_code": "module example_180(input d, d, output prod); assign prod = d & d | clk; endmodule", "correct_code": "module example_180(input d, d, output prod); assign prod = (d & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.320054", "id": 67713}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.339065", "id": 71159}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.001541", "id": 9689}
{"buggy_code": "module basic_770(input a, output result); assign result = a + 1; endmodule", "correct_code": "module basic_770(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.150039", "id": 36696}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.349027", "id": 72963}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.295027", "id": 63134}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.967619", "id": 3570}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.142708", "id": 35345}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.980897", "id": 5920}
{"buggy_code": "module demo_279(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module demo_279(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.199494", "id": 45709}
{"buggy_code": "module basic_836(input data, output y); assign y = data + 1; endmodule", "correct_code": "module basic_836(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.330259", "id": 69567}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.226992", "id": 50716}
{"buggy_code": "module logic_693(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module logic_693(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.027288", "id": 14333}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.139914", "id": 34845}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.237226", "id": 52593}
{"buggy_code": "module basic_736(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module basic_736(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.009215", "id": 11073}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.178385", "id": 41894}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.018793", "id": 12811}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.304395", "id": 64857}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.034138", "id": 15571}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.023285", "id": 13614}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.192820", "id": 44492}
{"buggy_code": "module example_376(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module example_376(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.031466", "id": 15091}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.180055", "id": 42202}
{"buggy_code": "module arith_490(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module arith_490(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.109621", "id": 29301}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.325520", "id": 68696}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.230944", "id": 51441}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.250781", "id": 55080}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.010524", "id": 11310}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.153604", "id": 37357}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.170639", "id": 40474}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.987805", "id": 7183}
{"buggy_code": "module logic_7(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module logic_7(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.323712", "id": 68368}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.205996", "id": 46900}
{"buggy_code": "module demo_596(input data, rst, output out); assign out = data & rst | a; endmodule", "correct_code": "module demo_596(input data, rst, output out); assign out = (data & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.315884", "id": 66961}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.204184", "id": 46569}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.252071", "id": 55310}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.280887", "id": 60550}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.165957", "id": 39615}
{"buggy_code": "module simple_302(input data, in, output prod); assign prod = data & in | rst; endmodule", "correct_code": "module simple_302(input data, in, output prod); assign prod = (data & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.231710", "id": 51582}
{"buggy_code": "module arith_965(input b, output out); assign out = b + 1; endmodule", "correct_code": "module arith_965(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.046473", "id": 17803}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.196203", "id": 45112}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.209468", "id": 47531}
{"buggy_code": "module arith_300(input b, output q); assign q = b + 1; endmodule", "correct_code": "module arith_300(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.120806", "id": 31343}
{"buggy_code": "module test_174(input x, a, output q); assign q = x & a | c; endmodule", "correct_code": "module test_174(input x, a, output q); assign q = (x & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.089499", "id": 25623}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.153987", "id": 37427}
{"buggy_code": "module arith_428(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module arith_428(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.949548", "id": 287}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329203", "id": 69374}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.264961", "id": 57661}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.235079", "id": 52201}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.014144", "id": 11968}
{"buggy_code": "module simple_461(input en, x, output sum); assign sum = en & x | rst; endmodule", "correct_code": "module simple_461(input en, x, output sum); assign sum = (en & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.252974", "id": 55475}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.348055", "id": 72785}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.129186", "id": 32874}
{"buggy_code": "module basic_292(input clk, b, output valid); assign valid = clk & b | data; endmodule", "correct_code": "module basic_292(input clk, b, output valid); assign valid = (clk & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.051052", "id": 18608}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.213853", "id": 48328}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.218011", "id": 49091}
{"buggy_code": "module simple_509(input en, output result); assign result = en + 1; endmodule", "correct_code": "module simple_509(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.302022", "id": 64414}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.068611", "id": 21833}
{"buggy_code": "module basic_39(input x, in, output y); assign y = x & in | rst; endmodule", "correct_code": "module basic_39(input x, in, output y); assign y = (x & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.048955", "id": 18252}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.995316", "id": 8556}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.110273", "id": 29421}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.276474", "id": 59742}
{"buggy_code": "module arith_217(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module arith_217(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.030039", "id": 14833}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.316781", "id": 67127}
{"buggy_code": "module example_189(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module example_189(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.024758", "id": 13881}
{"buggy_code": "module example_156(input d, d, output out); assign out = d & d | d; endmodule", "correct_code": "module example_156(input d, d, output out); assign out = (d & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.194691", "id": 44837}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.317962", "id": 67344}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.963205", "id": 2762}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.323746", "id": 68374}
{"buggy_code": "module basic_813(input a, output y); assign y = a + 1; endmodule", "correct_code": "module basic_813(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.270811", "id": 58731}
{"buggy_code": "module logic_134(input y, clk, output q); assign q = y & clk | en; endmodule", "correct_code": "module logic_134(input y, clk, output q); assign q = (y & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.231304", "id": 51507}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.220308", "id": 49496}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.201869", "id": 46144}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.041809", "id": 16959}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.046453", "id": 17800}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.087715", "id": 25296}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.079032", "id": 23719}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.170922", "id": 40525}
{"buggy_code": "module example_924(input x, c, output prod); assign prod = x & c | in; endmodule", "correct_code": "module example_924(input x, c, output prod); assign prod = (x & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.103140", "id": 28111}
{"buggy_code": "module demo_637(input d, d, output y); assign y = d & d | in; endmodule", "correct_code": "module demo_637(input d, d, output y); assign y = (d & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.026357", "id": 14170}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.026972", "id": 14277}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.027567", "id": 14387}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.304616", "id": 64899}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.983742", "id": 6438}
{"buggy_code": "module arith_670(input data, d, output sum); assign sum = data & d | rst; endmodule", "correct_code": "module arith_670(input data, d, output sum); assign sum = (data & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.045129", "id": 17561}
{"buggy_code": "module simple_217(input b, a, output result); assign result = b & a | y; endmodule", "correct_code": "module simple_217(input b, a, output result); assign result = (b & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.066615", "id": 21472}
{"buggy_code": "module simple_816(input en, x, output valid); assign valid = en & x | in; endmodule", "correct_code": "module simple_816(input en, x, output valid); assign valid = (en & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.227963", "id": 50892}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.200753", "id": 45944}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.954275", "id": 1142}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.306004", "id": 65153}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.279101", "id": 60219}
{"buggy_code": "module simple_453(input x, output out); assign out = x + 1; endmodule", "correct_code": "module simple_453(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.103915", "id": 28251}
{"buggy_code": "module logic_750(input d, d, output valid); assign valid = d & d | data; endmodule", "correct_code": "module logic_750(input d, d, output valid); assign valid = (d & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.015029", "id": 12126}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.137530", "id": 34407}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.981216", "id": 5979}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.344923", "id": 72212}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.133992", "id": 33756}
{"buggy_code": "module demo_409(input in, rst, output q); assign q = in & rst | c; endmodule", "correct_code": "module demo_409(input in, rst, output q); assign q = (in & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.118200", "id": 30876}
{"buggy_code": "module simple_145(input x, c, output out); assign out = x & c | a; endmodule", "correct_code": "module simple_145(input x, c, output out); assign out = (x & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.157889", "id": 38141}
{"buggy_code": "module simple_710(input data, rst, output result); assign result = data & rst | clk; endmodule", "correct_code": "module simple_710(input data, rst, output result); assign result = (data & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.984679", "id": 6610}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.949649", "id": 306}
{"buggy_code": "module arith_410(input a, in, output y); assign y = a & in | en; endmodule", "correct_code": "module arith_410(input a, in, output y); assign y = (a & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.218218", "id": 49128}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.106448", "id": 28718}
{"buggy_code": "module simple_251(input rst, in, output y); assign y = rst & in | in; endmodule", "correct_code": "module simple_251(input rst, in, output y); assign y = (rst & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.949330", "id": 248}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.027615", "id": 14396}
{"buggy_code": "module example_838(input in, y, output prod); assign prod = in & y | en; endmodule", "correct_code": "module example_838(input in, y, output prod); assign prod = (in & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.234058", "id": 52013}
{"buggy_code": "module logic_735(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module logic_735(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.974146", "id": 4749}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.245665", "id": 54148}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.337052", "id": 70810}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.951163", "id": 576}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.014705", "id": 12069}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.131206", "id": 33246}
{"buggy_code": "module arith_104(input x, rst, output y); assign y = x & rst | data; endmodule", "correct_code": "module arith_104(input x, rst, output y); assign y = (x & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.133182", "id": 33606}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.101770", "id": 27864}
{"buggy_code": "module example_856(input b, in, output valid); assign valid = b & in | d; endmodule", "correct_code": "module example_856(input b, in, output valid); assign valid = (b & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.992165", "id": 7984}
{"buggy_code": "module demo_45(input data, output out); assign out = data + 1; endmodule", "correct_code": "module demo_45(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.010093", "id": 11231}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.979022", "id": 5589}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.147202", "id": 36170}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.122201", "id": 31597}
{"buggy_code": "module basic_107(input data, output out); assign out = data + 1; endmodule", "correct_code": "module basic_107(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.978338", "id": 5464}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.046168", "id": 17747}
{"buggy_code": "module example_573(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module example_573(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.134530", "id": 33855}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.226688", "id": 50662}
{"buggy_code": "module demo_234(input en, in, output q); assign q = en & in | d; endmodule", "correct_code": "module demo_234(input en, in, output q); assign q = (en & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.198456", "id": 45522}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.228773", "id": 51041}
{"buggy_code": "module example_187(input x, y, output prod); assign prod = x & y | rst; endmodule", "correct_code": "module example_187(input x, y, output prod); assign prod = (x & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.265647", "id": 57788}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.013287", "id": 11809}
{"buggy_code": "module test_699(input in, data, output y); assign y = in & data | in; endmodule", "correct_code": "module test_699(input in, data, output y); assign y = (in & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.216200", "id": 48757}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.055569", "id": 19444}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.230576", "id": 51374}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.279023", "id": 60205}
{"buggy_code": "module logic_777(input d, output out); assign out = d + 1; endmodule", "correct_code": "module logic_777(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.338999", "id": 71149}
{"buggy_code": "module example_387(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module example_387(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.007955", "id": 10842}
{"buggy_code": "module example_965(input c, in, output out); assign out = c & in | rst; endmodule", "correct_code": "module example_965(input c, in, output out); assign out = (c & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.117009", "id": 30656}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.126879", "id": 32455}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.153035", "id": 37250}
{"buggy_code": "module logic_402(input in, rst, output valid); assign valid = in & rst | rst; endmodule", "correct_code": "module logic_402(input in, rst, output valid); assign valid = (in & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.028263", "id": 14512}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.353163", "id": 73710}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.978776", "id": 5544}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.152430", "id": 37139}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.295553", "id": 63233}
{"buggy_code": "module demo_667(input y, d, output q); assign q = y & d | x; endmodule", "correct_code": "module demo_667(input y, d, output q); assign q = (y & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.091095", "id": 25918}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.130527", "id": 33120}
{"buggy_code": "module simple_400(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module simple_400(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.213155", "id": 48203}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.322423", "id": 68131}
{"buggy_code": "module logic_930(input c, d, output sum); assign sum = c & d | in; endmodule", "correct_code": "module logic_930(input c, d, output sum); assign sum = (c & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.155495", "id": 37703}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.310809", "id": 66040}
{"buggy_code": "module logic_555(input c, output q); assign q = c + 1; endmodule", "correct_code": "module logic_555(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.263339", "id": 57364}
{"buggy_code": "module simple_917(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module simple_917(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118430", "id": 30919}
{"buggy_code": "module arith_491(input data, rst, output valid); assign valid = data & rst | a; endmodule", "correct_code": "module arith_491(input data, rst, output valid); assign valid = (data & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.293125", "id": 62789}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.273380", "id": 59204}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.021037", "id": 13203}
{"buggy_code": "module demo_393(input y, in, output valid); assign valid = y & in | a; endmodule", "correct_code": "module demo_393(input y, in, output valid); assign valid = (y & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.066783", "id": 21503}
{"buggy_code": "module arith_798(input c, en, output valid); assign valid = c & en | data; endmodule", "correct_code": "module arith_798(input c, en, output valid); assign valid = (c & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.967785", "id": 3603}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.091110", "id": 25921}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.271491", "id": 58855}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.090894", "id": 25880}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.351997", "id": 73502}
{"buggy_code": "module basic_124(input x, y, output q); assign q = x & y | y; endmodule", "correct_code": "module basic_124(input x, y, output q); assign q = (x & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.112634", "id": 29855}
{"buggy_code": "module simple_323(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module simple_323(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.078124", "id": 23555}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.972894", "id": 4523}
{"buggy_code": "module simple_546(input x, d, output valid); assign valid = x & d | x; endmodule", "correct_code": "module simple_546(input x, d, output valid); assign valid = (x & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.310461", "id": 65973}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.095132", "id": 26650}
{"buggy_code": "module simple_369(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module simple_369(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.343872", "id": 72029}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.058994", "id": 20071}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.085973", "id": 24982}
{"buggy_code": "module arith_876(input y, c, output q); assign q = y & c | c; endmodule", "correct_code": "module arith_876(input y, c, output q); assign q = (y & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.960100", "id": 2194}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.175915", "id": 41437}
{"buggy_code": "module basic_344(input c, output result); assign result = c + 1; endmodule", "correct_code": "module basic_344(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.305889", "id": 65132}
{"buggy_code": "module simple_944(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module simple_944(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.072399", "id": 22535}
{"buggy_code": "module basic_133(input en, rst, output valid); assign valid = en & rst | d; endmodule", "correct_code": "module basic_133(input en, rst, output valid); assign valid = (en & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.958069", "id": 1827}
{"buggy_code": "module test_940(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module test_940(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.189642", "id": 43905}
{"buggy_code": "module test_210(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module test_210(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118253", "id": 30886}
{"buggy_code": "module simple_915(input in, data, output valid); assign valid = in & data | rst; endmodule", "correct_code": "module simple_915(input in, data, output valid); assign valid = (in & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.307500", "id": 65432}
{"buggy_code": "module simple_794(input clk, x, output y); assign y = clk & x | data; endmodule", "correct_code": "module simple_794(input clk, x, output y); assign y = (clk & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.127124", "id": 32500}
{"buggy_code": "module demo_329(input in, b, output sum); assign sum = in & b | clk; endmodule", "correct_code": "module demo_329(input in, b, output sum); assign sum = (in & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.108289", "id": 29056}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.960125", "id": 2199}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.184453", "id": 42996}
{"buggy_code": "module demo_317(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module demo_317(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.959176", "id": 2029}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.000906", "id": 9572}
{"buggy_code": "module simple_607(input y, output result); assign result = y + 1; endmodule", "correct_code": "module simple_607(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.131063", "id": 33219}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.235320", "id": 52245}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.018261", "id": 12715}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.268456", "id": 58298}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.272693", "id": 59078}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.133512", "id": 33667}
{"buggy_code": "module demo_385(input data, a, output result); assign result = data & a | clk; endmodule", "correct_code": "module demo_385(input data, a, output result); assign result = (data & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.302414", "id": 64488}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.315560", "id": 66904}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.188450", "id": 43725}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.034080", "id": 15560}
{"buggy_code": "module logic_224(input en, output y); assign y = en + 1; endmodule", "correct_code": "module logic_224(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.966798", "id": 3419}
{"buggy_code": "module test_168(input x, output y); assign y = x + 1; endmodule", "correct_code": "module test_168(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.124651", "id": 32046}
{"buggy_code": "module demo_941(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module demo_941(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.355039", "id": 74056}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.021885", "id": 13358}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.227986", "id": 50896}
{"buggy_code": "module example_186(input en, a, output sum); assign sum = en & a | data; endmodule", "correct_code": "module example_186(input en, a, output sum); assign sum = (en & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.038329", "id": 16335}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.243298", "id": 53708}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.023599", "id": 13671}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.957180", "id": 1666}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.218389", "id": 49158}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.209236", "id": 47489}
{"buggy_code": "module basic_433(input d, d, output out); assign out = d & d | x; endmodule", "correct_code": "module basic_433(input d, d, output out); assign out = (d & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.109314", "id": 29244}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.989347", "id": 7464}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.291224", "id": 62445}
{"buggy_code": "module arith_493(input b, a, output sum); assign sum = b & a | rst; endmodule", "correct_code": "module arith_493(input b, a, output sum); assign sum = (b & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.100424", "id": 27618}
{"buggy_code": "module example_348(input y, data, output prod); assign prod = y & data | en; endmodule", "correct_code": "module example_348(input y, data, output prod); assign prod = (y & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.351021", "id": 73323}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.957193", "id": 1668}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.224530", "id": 50268}
{"buggy_code": "module arith_792(input a, rst, output result); assign result = a & rst | en; endmodule", "correct_code": "module arith_792(input a, rst, output result); assign result = (a & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.357309", "id": 74475}
{"buggy_code": "module test_945(input c, rst, output result); assign result = c & rst | b; endmodule", "correct_code": "module test_945(input c, rst, output result); assign result = (c & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.127143", "id": 32503}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.970971", "id": 4174}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.188502", "id": 43735}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.224520", "id": 50266}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.055810", "id": 19489}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.307207", "id": 65376}
{"buggy_code": "module example_253(input data, output q); assign q = data + 1; endmodule", "correct_code": "module example_253(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.198883", "id": 45599}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192747", "id": 44478}
{"buggy_code": "module logic_447(input c, rst, output valid); assign valid = c & rst | data; endmodule", "correct_code": "module logic_447(input c, rst, output valid); assign valid = (c & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.123065", "id": 31757}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.187757", "id": 43599}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.220505", "id": 49532}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.975457", "id": 4989}
{"buggy_code": "module arith_290(input b, y, output y); assign y = b & y | clk; endmodule", "correct_code": "module arith_290(input b, y, output y); assign y = (b & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.978548", "id": 5502}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.178820", "id": 41976}
{"buggy_code": "module simple_837(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module simple_837(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.224245", "id": 50215}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.309444", "id": 65789}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.148131", "id": 36341}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.196292", "id": 45128}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.264123", "id": 57507}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.124646", "id": 32045}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.295872", "id": 63290}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.295778", "id": 63275}
{"buggy_code": "module simple_161(input x, en, output out); assign out = x & en | clk; endmodule", "correct_code": "module simple_161(input x, en, output out); assign out = (x & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.347864", "id": 72751}
{"buggy_code": "module simple_637(input b, c, output out); assign out = b & c | y; endmodule", "correct_code": "module simple_637(input b, c, output out); assign out = (b & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.159107", "id": 38366}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.261044", "id": 56947}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.147649", "id": 36252}
{"buggy_code": "module logic_593(input rst, rst, output q); assign q = rst & rst | a; endmodule", "correct_code": "module logic_593(input rst, rst, output q); assign q = (rst & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.236980", "id": 52547}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.125396", "id": 32183}
{"buggy_code": "module simple_856(input rst, a, output result); assign result = rst & a | x; endmodule", "correct_code": "module simple_856(input rst, a, output result); assign result = (rst & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.251980", "id": 55294}
{"buggy_code": "module arith_119(input x, a, output out); assign out = x & a | rst; endmodule", "correct_code": "module arith_119(input x, a, output out); assign out = (x & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.269959", "id": 58574}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.324386", "id": 68491}
{"buggy_code": "module basic_643(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module basic_643(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.134255", "id": 33805}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.232026", "id": 51637}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.142659", "id": 35335}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.948108", "id": 29}
{"buggy_code": "module logic_674(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module logic_674(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.121421", "id": 31456}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.223068", "id": 50001}
{"buggy_code": "module test_350(input rst, clk, output prod); assign prod = rst & clk | x; endmodule", "correct_code": "module test_350(input rst, clk, output prod); assign prod = (rst & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.333692", "id": 70197}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.021865", "id": 13355}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.953808", "id": 1058}
{"buggy_code": "module demo_633(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module demo_633(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.974196", "id": 4758}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138665", "id": 34617}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.116195", "id": 30509}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.057210", "id": 19747}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.260911", "id": 56922}
{"buggy_code": "module test_350(input a, data, output out); assign out = a & data | b; endmodule", "correct_code": "module test_350(input a, data, output out); assign out = (a & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.236928", "id": 52537}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.950204", "id": 406}
{"buggy_code": "module basic_963(input c, output y); assign y = c + 1; endmodule", "correct_code": "module basic_963(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.339303", "id": 71203}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.134105", "id": 33777}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.145115", "id": 35793}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.334037", "id": 70259}
{"buggy_code": "module logic_996(input x, clk, output out); assign out = x & clk | data; endmodule", "correct_code": "module logic_996(input x, clk, output out); assign out = (x & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.015150", "id": 12147}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.135035", "id": 33947}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.213522", "id": 48272}
{"buggy_code": "module arith_670(input b, output result); assign result = b + 1; endmodule", "correct_code": "module arith_670(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.046891", "id": 17879}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.203030", "id": 46357}
{"buggy_code": "module simple_878(input rst, a, output sum); assign sum = rst & a | data; endmodule", "correct_code": "module simple_878(input rst, a, output sum); assign sum = (rst & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.110063", "id": 29381}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.334853", "id": 70405}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.222531", "id": 49900}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.340565", "id": 71431}
{"buggy_code": "module logic_637(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module logic_637(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.306939", "id": 65325}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.267808", "id": 58179}
{"buggy_code": "module basic_182(input a, c, output q); assign q = a & c | c; endmodule", "correct_code": "module basic_182(input a, c, output q); assign q = (a & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.287888", "id": 61827}
{"buggy_code": "module example_353(input clk, en, output y); assign y = clk & en | y; endmodule", "correct_code": "module example_353(input clk, en, output y); assign y = (clk & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.190710", "id": 44101}
{"buggy_code": "module test_82(input x, in, output result); assign result = x & in | clk; endmodule", "correct_code": "module test_82(input x, in, output result); assign result = (x & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.096445", "id": 26889}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.213388", "id": 48246}
{"buggy_code": "module demo_224(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module demo_224(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118612", "id": 30952}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.064478", "id": 21082}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.094169", "id": 26472}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.990491", "id": 7676}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.069570", "id": 22013}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.990531", "id": 7684}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.987971", "id": 7211}
{"buggy_code": "module simple_251(input c, output y); assign y = c + 1; endmodule", "correct_code": "module simple_251(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.971672", "id": 4306}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.180309", "id": 42250}
{"buggy_code": "module logic_942(input b, output q); assign q = b + 1; endmodule", "correct_code": "module logic_942(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.178965", "id": 42001}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.326838", "id": 68938}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.037970", "id": 16269}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.358839", "id": 74753}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.123534", "id": 31843}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.002660", "id": 9896}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.302249", "id": 64458}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.078640", "id": 23650}
{"buggy_code": "module simple_967(input y, en, output out); assign out = y & en | x; endmodule", "correct_code": "module simple_967(input y, en, output out); assign out = (y & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.264723", "id": 57618}
{"buggy_code": "module basic_709(input b, output q); assign q = b + 1; endmodule", "correct_code": "module basic_709(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.211477", "id": 47901}
{"buggy_code": "module demo_325(input b, d, output prod); assign prod = b & d | en; endmodule", "correct_code": "module demo_325(input b, d, output prod); assign prod = (b & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.199087", "id": 45635}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.290635", "id": 62333}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.204632", "id": 46651}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.969225", "id": 3859}
{"buggy_code": "module logic_637(input data, en, output q); assign q = data & en | b; endmodule", "correct_code": "module logic_637(input data, en, output q); assign q = (data & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.999830", "id": 9376}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.331464", "id": 69787}
{"buggy_code": "module simple_62(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module simple_62(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.330026", "id": 69525}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.296883", "id": 63475}
{"buggy_code": "module example_400(input y, en, output sum); assign sum = y & en | c; endmodule", "correct_code": "module example_400(input y, en, output sum); assign sum = (y & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.162411", "id": 38975}
{"buggy_code": "module basic_187(input d, b, output sum); assign sum = d & b | data; endmodule", "correct_code": "module basic_187(input d, b, output sum); assign sum = (d & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.208599", "id": 47373}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.964256", "id": 2952}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.130124", "id": 33045}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.236392", "id": 52439}
{"buggy_code": "module example_129(input en, output y); assign y = en + 1; endmodule", "correct_code": "module example_129(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.135296", "id": 33993}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.224818", "id": 50322}
{"buggy_code": "module basic_320(input d, d, output prod); assign prod = d & d | x; endmodule", "correct_code": "module basic_320(input d, d, output prod); assign prod = (d & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.125194", "id": 32146}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.144674", "id": 35710}
{"buggy_code": "module arith_937(input d, d, output sum); assign sum = d & d | clk; endmodule", "correct_code": "module arith_937(input d, d, output sum); assign sum = (d & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.012820", "id": 11724}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.273213", "id": 59172}
{"buggy_code": "module demo_699(input a, en, output y); assign y = a & en | b; endmodule", "correct_code": "module demo_699(input a, en, output y); assign y = (a & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.255618", "id": 55952}
{"buggy_code": "module test_921(input b, output q); assign q = b + 1; endmodule", "correct_code": "module test_921(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.178306", "id": 41879}
{"buggy_code": "module basic_379(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module basic_379(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.314815", "id": 66768}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.207316", "id": 47142}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.104719", "id": 28400}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.270772", "id": 58724}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.079168", "id": 23746}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.111221", "id": 29595}
{"buggy_code": "module basic_411(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module basic_411(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.201113", "id": 46007}
{"buggy_code": "module logic_521(input data, y, output sum); assign sum = data & y | data; endmodule", "correct_code": "module logic_521(input data, y, output sum); assign sum = (data & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.189081", "id": 43840}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.190533", "id": 44068}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.052894", "id": 18943}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.055877", "id": 19499}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.323645", "id": 68355}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.207507", "id": 47177}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.115249", "id": 30338}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.300239", "id": 64090}
{"buggy_code": "module demo_324(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module demo_324(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174749", "id": 41225}
{"buggy_code": "module demo_760(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module demo_760(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.978895", "id": 5564}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.992069", "id": 7966}
{"buggy_code": "module simple_821(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module simple_821(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.123577", "id": 31851}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.115339", "id": 30354}
{"buggy_code": "module basic_609(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module basic_609(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.042252", "id": 17039}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.078979", "id": 23710}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.023972", "id": 13739}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.181651", "id": 42494}
{"buggy_code": "module demo_198(input a, rst, output result); assign result = a & rst | in; endmodule", "correct_code": "module demo_198(input a, rst, output result); assign result = (a & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.223904", "id": 50153}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.065206", "id": 21215}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.029161", "id": 14673}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.313045", "id": 66446}
{"buggy_code": "module test_932(input y, b, output sum); assign sum = y & b | rst; endmodule", "correct_code": "module test_932(input y, b, output sum); assign sum = (y & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.175559", "id": 41373}
{"buggy_code": "module example_564(input a, en, output prod); assign prod = a & en | data; endmodule", "correct_code": "module example_564(input a, en, output prod); assign prod = (a & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.138805", "id": 34644}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.284577", "id": 61228}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.958005", "id": 1815}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.084212", "id": 24659}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.230237", "id": 51309}
{"buggy_code": "module demo_124(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module demo_124(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.996664", "id": 8803}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.139721", "id": 34812}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.227283", "id": 50768}
{"buggy_code": "module logic_599(input en, c, output prod); assign prod = en & c | en; endmodule", "correct_code": "module logic_599(input en, c, output prod); assign prod = (en & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.344568", "id": 72156}
{"buggy_code": "module test_97(input data, output y); assign y = data + 1; endmodule", "correct_code": "module test_97(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.110031", "id": 29375}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.300422", "id": 64124}
{"buggy_code": "module basic_776(input d, output y); assign y = d + 1; endmodule", "correct_code": "module basic_776(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.028113", "id": 14486}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.093513", "id": 26354}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.969570", "id": 3921}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.240002", "id": 53105}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.955237", "id": 1313}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.962113", "id": 2562}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.039917", "id": 16626}
{"buggy_code": "module test_785(input en, y, output out); assign out = en & y | en; endmodule", "correct_code": "module test_785(input en, y, output out); assign out = (en & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.057337", "id": 19770}
{"buggy_code": "module example_750(input d, x, output q); assign q = d & x | en; endmodule", "correct_code": "module example_750(input d, x, output q); assign q = (d & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.014135", "id": 11966}
{"buggy_code": "module basic_436(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module basic_436(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.284640", "id": 61240}
{"buggy_code": "module logic_178(input rst, a, output result); assign result = rst & a | y; endmodule", "correct_code": "module logic_178(input rst, a, output result); assign result = (rst & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.226497", "id": 50627}
{"buggy_code": "module logic_800(input data, output y); assign y = data + 1; endmodule", "correct_code": "module logic_800(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.006293", "id": 10543}
{"buggy_code": "module example_25(input data, in, output out); assign out = data & in | a; endmodule", "correct_code": "module example_25(input data, in, output out); assign out = (data & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.215337", "id": 48599}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.199546", "id": 45719}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.949965", "id": 362}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.338115", "id": 71005}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.271277", "id": 58815}
{"buggy_code": "module logic_667(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module logic_667(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.216423", "id": 48799}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.021606", "id": 13309}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.087724", "id": 25298}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.003050", "id": 9965}
{"buggy_code": "module logic_326(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module logic_326(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.195784", "id": 45036}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.238352", "id": 52802}
{"buggy_code": "module arith_737(input rst, x, output result); assign result = rst & x | clk; endmodule", "correct_code": "module arith_737(input rst, x, output result); assign result = (rst & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.033804", "id": 15512}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.271972", "id": 58943}
{"buggy_code": "module test_388(input en, a, output prod); assign prod = en & a | a; endmodule", "correct_code": "module test_388(input en, a, output prod); assign prod = (en & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.254413", "id": 55732}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.031621", "id": 15120}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.963866", "id": 2881}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.992955", "id": 8127}
{"buggy_code": "module logic_74(input x, c, output out); assign out = x & c | a; endmodule", "correct_code": "module logic_74(input x, c, output out); assign out = (x & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.240124", "id": 53127}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117220", "id": 30697}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.121287", "id": 31431}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.359135", "id": 74809}
{"buggy_code": "module basic_778(input in, output y); assign y = in + 1; endmodule", "correct_code": "module basic_778(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.972742", "id": 4499}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.133309", "id": 33629}
{"buggy_code": "module simple_992(input in, en, output out); assign out = in & en | y; endmodule", "correct_code": "module simple_992(input in, en, output out); assign out = (in & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.156437", "id": 37876}
{"buggy_code": "module arith_563(input x, rst, output sum); assign sum = x & rst | rst; endmodule", "correct_code": "module arith_563(input x, rst, output sum); assign sum = (x & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.149315", "id": 36562}
{"buggy_code": "module logic_957(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module logic_957(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.070642", "id": 22211}
{"buggy_code": "module demo_397(input en, rst, output valid); assign valid = en & rst | rst; endmodule", "correct_code": "module demo_397(input en, rst, output valid); assign valid = (en & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.317601", "id": 67278}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.145552", "id": 35874}
{"buggy_code": "module logic_891(input d, data, output out); assign out = d & data | y; endmodule", "correct_code": "module logic_891(input d, data, output out); assign out = (d & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.962274", "id": 2592}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.146602", "id": 36064}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.952898", "id": 893}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.347755", "id": 72732}
{"buggy_code": "module logic_486(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module logic_486(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.141086", "id": 35061}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.262691", "id": 57249}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286657", "id": 61606}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.094479", "id": 26531}
{"buggy_code": "module test_173(input rst, c, output prod); assign prod = rst & c | data; endmodule", "correct_code": "module test_173(input rst, c, output prod); assign prod = (rst & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.003675", "id": 10061}
{"buggy_code": "module example_758(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module example_758(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.230753", "id": 51407}
{"buggy_code": "module logic_227(input data, d, output sum); assign sum = data & d | rst; endmodule", "correct_code": "module logic_227(input data, d, output sum); assign sum = (data & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.962952", "id": 2715}
{"buggy_code": "module test_278(input in, y, output sum); assign sum = in & y | b; endmodule", "correct_code": "module test_278(input in, y, output sum); assign sum = (in & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.046288", "id": 17770}
{"buggy_code": "module arith_982(input c, d, output q); assign q = c & d | data; endmodule", "correct_code": "module arith_982(input c, d, output q); assign q = (c & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.135578", "id": 34046}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.036711", "id": 16042}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.305603", "id": 65079}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.957659", "id": 1753}
{"buggy_code": "module example_364(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module example_364(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.357718", "id": 74550}
{"buggy_code": "module arith_790(input rst, rst, output y); assign y = rst & rst | b; endmodule", "correct_code": "module arith_790(input rst, rst, output y); assign y = (rst & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.024370", "id": 13812}
{"buggy_code": "module demo_515(input clk, rst, output sum); assign sum = clk & rst | clk; endmodule", "correct_code": "module demo_515(input clk, rst, output sum); assign sum = (clk & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.195682", "id": 45018}
{"buggy_code": "module logic_689(input a, output out); assign out = a + 1; endmodule", "correct_code": "module logic_689(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.038589", "id": 16382}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.968351", "id": 3706}
{"buggy_code": "module demo_912(input rst, y, output y); assign y = rst & y | en; endmodule", "correct_code": "module demo_912(input rst, y, output y); assign y = (rst & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.125454", "id": 32194}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.961058", "id": 2372}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.072966", "id": 22638}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.011785", "id": 11541}
{"buggy_code": "module example_880(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module example_880(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.285263", "id": 61349}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.964214", "id": 2945}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.198528", "id": 45536}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.995183", "id": 8532}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.126121", "id": 32315}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.080189", "id": 23934}
{"buggy_code": "module demo_783(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module demo_783(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.952693", "id": 858}
{"buggy_code": "module simple_819(input x, output q); assign q = x + 1; endmodule", "correct_code": "module simple_819(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.142875", "id": 35376}
{"buggy_code": "module basic_791(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module basic_791(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.344580", "id": 72158}
{"buggy_code": "module basic_499(input y, en, output result); assign result = y & en | c; endmodule", "correct_code": "module basic_499(input y, en, output result); assign result = (y & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.132014", "id": 33394}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.198126", "id": 45460}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.151914", "id": 37042}
{"buggy_code": "module test_772(input a, b, output result); assign result = a & b | rst; endmodule", "correct_code": "module test_772(input a, b, output result); assign result = (a & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.991283", "id": 7822}
{"buggy_code": "module demo_133(input y, en, output sum); assign sum = y & en | d; endmodule", "correct_code": "module demo_133(input y, en, output sum); assign sum = (y & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.228629", "id": 51015}
{"buggy_code": "module logic_42(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module logic_42(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.045168", "id": 17568}
{"buggy_code": "module example_817(input rst, in, output prod); assign prod = rst & in | data; endmodule", "correct_code": "module example_817(input rst, in, output prod); assign prod = (rst & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.226419", "id": 50614}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.339851", "id": 71303}
{"buggy_code": "module logic_423(input a, in, output result); assign result = a & in | y; endmodule", "correct_code": "module logic_423(input a, in, output result); assign result = (a & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.297545", "id": 63596}
{"buggy_code": "module test_699(input c, output q); assign q = c + 1; endmodule", "correct_code": "module test_699(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.126986", "id": 32475}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.157196", "id": 38015}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.170464", "id": 40442}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.152313", "id": 37117}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.980428", "id": 5848}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.950550", "id": 470}
{"buggy_code": "module example_670(input x, in, output prod); assign prod = x & in | d; endmodule", "correct_code": "module example_670(input x, in, output prod); assign prod = (x & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.080231", "id": 23942}
{"buggy_code": "module arith_348(input in, d, output y); assign y = in & d | c; endmodule", "correct_code": "module arith_348(input in, d, output y); assign y = (in & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.160143", "id": 38558}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.098734", "id": 27308}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.008396", "id": 10923}
{"buggy_code": "module logic_971(input a, output out); assign out = a + 1; endmodule", "correct_code": "module logic_971(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.314057", "id": 66628}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.294846", "id": 63100}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.270003", "id": 58582}
{"buggy_code": "module logic_119(input c, output q); assign q = c + 1; endmodule", "correct_code": "module logic_119(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.027104", "id": 14301}
{"buggy_code": "module logic_385(input c, clk, output result); assign result = c & clk | c; endmodule", "correct_code": "module logic_385(input c, clk, output result); assign result = (c & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.061399", "id": 20516}
{"buggy_code": "module demo_879(input a, in, output out); assign out = a & in | en; endmodule", "correct_code": "module demo_879(input a, in, output out); assign out = (a & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.177982", "id": 41819}
{"buggy_code": "module arith_307(input data, en, output sum); assign sum = data & en | clk; endmodule", "correct_code": "module arith_307(input data, en, output sum); assign sum = (data & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.093504", "id": 26352}
{"buggy_code": "module logic_853(input y, output result); assign result = y + 1; endmodule", "correct_code": "module logic_853(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.251106", "id": 55138}
{"buggy_code": "module test_314(input y, output result); assign result = y + 1; endmodule", "correct_code": "module test_314(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.241733", "id": 53425}
{"buggy_code": "module example_679(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module example_679(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.286404", "id": 61560}
{"buggy_code": "module arith_959(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module arith_959(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.227266", "id": 50765}
{"buggy_code": "module simple_344(input a, b, output y); assign y = a & b | b; endmodule", "correct_code": "module simple_344(input a, b, output y); assign y = (a & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.346186", "id": 72443}
{"buggy_code": "module test_139(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module test_139(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.164751", "id": 39397}
{"buggy_code": "module example_908(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module example_908(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.009093", "id": 11050}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.063506", "id": 20902}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.951504", "id": 639}
{"buggy_code": "module demo_21(input c, x, output result); assign result = c & x | in; endmodule", "correct_code": "module demo_21(input c, x, output result); assign result = (c & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.047169", "id": 17928}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.138911", "id": 34662}
{"buggy_code": "module basic_219(input x, output q); assign q = x + 1; endmodule", "correct_code": "module basic_219(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.020705", "id": 13146}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.000631", "id": 9523}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.032041", "id": 15194}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.285784", "id": 61447}
{"buggy_code": "module demo_753(input y, output result); assign result = y + 1; endmodule", "correct_code": "module demo_753(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.334043", "id": 70260}
{"buggy_code": "module basic_768(input a, b, output y); assign y = a & b | c; endmodule", "correct_code": "module basic_768(input a, b, output y); assign y = (a & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.170911", "id": 40523}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.081634", "id": 24198}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.291055", "id": 62412}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.313203", "id": 66474}
{"buggy_code": "module simple_998(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module simple_998(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.182696", "id": 42676}
{"buggy_code": "module simple_932(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module simple_932(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.213774", "id": 48315}
{"buggy_code": "module logic_468(input c, clk, output q); assign q = c & clk | in; endmodule", "correct_code": "module logic_468(input c, clk, output q); assign q = (c & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.285339", "id": 61364}
{"buggy_code": "module demo_70(input x, output out); assign out = x + 1; endmodule", "correct_code": "module demo_70(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.264913", "id": 57652}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.095904", "id": 26791}
{"buggy_code": "module demo_479(input clk, b, output y); assign y = clk & b | c; endmodule", "correct_code": "module demo_479(input clk, b, output y); assign y = (clk & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.995386", "id": 8569}
{"buggy_code": "module example_377(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module example_377(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.109034", "id": 29192}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.291538", "id": 62500}
{"buggy_code": "module demo_764(input a, b, output valid); assign valid = a & b | rst; endmodule", "correct_code": "module demo_764(input a, b, output valid); assign valid = (a & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.987452", "id": 7117}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.959776", "id": 2139}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.105689", "id": 28577}
{"buggy_code": "module simple_391(input d, output out); assign out = d + 1; endmodule", "correct_code": "module simple_391(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.086000", "id": 24986}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.182469", "id": 42635}
{"buggy_code": "module simple_182(input in, output y); assign y = in + 1; endmodule", "correct_code": "module simple_182(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.339839", "id": 71301}
{"buggy_code": "module basic_510(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module basic_510(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.242670", "id": 53593}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.985104", "id": 6686}
{"buggy_code": "module basic_516(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module basic_516(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.006407", "id": 10564}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.293384", "id": 62837}
{"buggy_code": "module simple_656(input d, rst, output y); assign y = d & rst | data; endmodule", "correct_code": "module simple_656(input d, rst, output y); assign y = (d & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.997381", "id": 8933}
{"buggy_code": "module test_904(input in, output y); assign y = in + 1; endmodule", "correct_code": "module test_904(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.341334", "id": 71568}
{"buggy_code": "module example_973(input c, data, output valid); assign valid = c & data | d; endmodule", "correct_code": "module example_973(input c, data, output valid); assign valid = (c & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.281564", "id": 60677}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.255803", "id": 55986}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.340603", "id": 71438}
{"buggy_code": "module logic_747(input b, x, output prod); assign prod = b & x | x; endmodule", "correct_code": "module logic_747(input b, x, output prod); assign prod = (b & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.328077", "id": 69164}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.012184", "id": 11610}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.976689", "id": 5213}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287947", "id": 61838}
{"buggy_code": "module arith_721(input clk, d, output prod); assign prod = clk & d | data; endmodule", "correct_code": "module arith_721(input clk, d, output prod); assign prod = (clk & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.954714", "id": 1224}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.960297", "id": 2231}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.077754", "id": 23488}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.954578", "id": 1198}
{"buggy_code": "module demo_407(input x, data, output q); assign q = x & data | data; endmodule", "correct_code": "module demo_407(input x, data, output q); assign q = (x & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.992867", "id": 8110}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.238741", "id": 52876}
{"buggy_code": "module logic_258(input c, output y); assign y = c + 1; endmodule", "correct_code": "module logic_258(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.256603", "id": 56133}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.325641", "id": 68718}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.031857", "id": 15162}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.309722", "id": 65840}
{"buggy_code": "module basic_28(input in, output q); assign q = in + 1; endmodule", "correct_code": "module basic_28(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.136383", "id": 34193}
{"buggy_code": "module test_63(input clk, in, output y); assign y = clk & in | c; endmodule", "correct_code": "module test_63(input clk, in, output y); assign y = (clk & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.013391", "id": 11828}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.122715", "id": 31694}
{"buggy_code": "module example_927(input data, output result); assign result = data + 1; endmodule", "correct_code": "module example_927(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.247045", "id": 54396}
{"buggy_code": "module demo_428(input en, output y); assign y = en + 1; endmodule", "correct_code": "module demo_428(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.133543", "id": 33673}
{"buggy_code": "module demo_360(input d, output out); assign out = d + 1; endmodule", "correct_code": "module demo_360(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.111719", "id": 29687}
{"buggy_code": "module logic_508(input en, output y); assign y = en + 1; endmodule", "correct_code": "module logic_508(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.297479", "id": 63585}
{"buggy_code": "module demo_642(input a, b, output valid); assign valid = a & b | data; endmodule", "correct_code": "module demo_642(input a, b, output valid); assign valid = (a & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.228543", "id": 50999}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.187357", "id": 43524}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.304690", "id": 64913}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.301055", "id": 64239}
{"buggy_code": "module simple_28(input a, d, output result); assign result = a & d | d; endmodule", "correct_code": "module simple_28(input a, d, output result); assign result = (a & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.150398", "id": 36762}
{"buggy_code": "module logic_531(input en, output out); assign out = en + 1; endmodule", "correct_code": "module logic_531(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.047388", "id": 17968}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.047972", "id": 18075}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.243072", "id": 53666}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.162781", "id": 39043}
{"buggy_code": "module demo_756(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module demo_756(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.989960", "id": 7577}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.166424", "id": 39703}
{"buggy_code": "module demo_633(input c, output result); assign result = c + 1; endmodule", "correct_code": "module demo_633(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.320293", "id": 67756}
{"buggy_code": "module simple_869(input in, clk, output sum); assign sum = in & clk | data; endmodule", "correct_code": "module simple_869(input in, clk, output sum); assign sum = (in & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.132399", "id": 33462}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.329277", "id": 69388}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.119671", "id": 31138}
{"buggy_code": "module example_579(input a, a, output result); assign result = a & a | y; endmodule", "correct_code": "module example_579(input a, a, output result); assign result = (a & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.251521", "id": 55214}
{"buggy_code": "module test_619(input en, output out); assign out = en + 1; endmodule", "correct_code": "module test_619(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.284246", "id": 61167}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.955597", "id": 1380}
{"buggy_code": "module simple_654(input a, output y); assign y = a + 1; endmodule", "correct_code": "module simple_654(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.245216", "id": 54061}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.342313", "id": 71747}
{"buggy_code": "module basic_773(input en, output y); assign y = en + 1; endmodule", "correct_code": "module basic_773(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.137780", "id": 34454}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.236482", "id": 52455}
{"buggy_code": "module demo_835(input d, y, output sum); assign sum = d & y | b; endmodule", "correct_code": "module demo_835(input d, y, output sum); assign sum = (d & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.185926", "id": 43264}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.147586", "id": 36240}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.992939", "id": 8124}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.992216", "id": 7993}
{"buggy_code": "module basic_450(input data, output out); assign out = data + 1; endmodule", "correct_code": "module basic_450(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.991494", "id": 7861}
{"buggy_code": "module simple_54(input en, x, output prod); assign prod = en & x | a; endmodule", "correct_code": "module simple_54(input en, x, output prod); assign prod = (en & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.029977", "id": 14822}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.021617", "id": 13311}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.095837", "id": 26779}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.290474", "id": 62303}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.982642", "id": 6238}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.290347", "id": 62279}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.359842", "id": 74941}
{"buggy_code": "module simple_975(input in, clk, output sum); assign sum = in & clk | in; endmodule", "correct_code": "module simple_975(input in, clk, output sum); assign sum = (in & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.261632", "id": 57056}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.307243", "id": 65383}
{"buggy_code": "module logic_801(input en, in, output out); assign out = en & in | b; endmodule", "correct_code": "module logic_801(input en, in, output out); assign out = (en & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.969332", "id": 3878}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.015978", "id": 12298}
{"buggy_code": "module example_439(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module example_439(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.321418", "id": 67945}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.255275", "id": 55889}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.240924", "id": 53272}
{"buggy_code": "module example_391(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module example_391(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.949076", "id": 201}
{"buggy_code": "module arith_434(input data, output y); assign y = data + 1; endmodule", "correct_code": "module arith_434(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.351918", "id": 73487}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.353355", "id": 73746}
{"buggy_code": "module example_299(input x, output out); assign out = x + 1; endmodule", "correct_code": "module example_299(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.336016", "id": 70620}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277916", "id": 60001}
{"buggy_code": "module test_477(input a, en, output valid); assign valid = a & en | b; endmodule", "correct_code": "module test_477(input a, en, output valid); assign valid = (a & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.982201", "id": 6156}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.248685", "id": 54696}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.220265", "id": 49488}
{"buggy_code": "module arith_58(input data, output result); assign result = data + 1; endmodule", "correct_code": "module arith_58(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.010520", "id": 11309}
{"buggy_code": "module test_310(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module test_310(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.218175", "id": 49120}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.216574", "id": 48825}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.126751", "id": 32433}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.196635", "id": 45190}
{"buggy_code": "module logic_864(input y, y, output valid); assign valid = y & y | data; endmodule", "correct_code": "module logic_864(input y, y, output valid); assign valid = (y & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.071641", "id": 22394}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.325950", "id": 68774}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182195", "id": 42585}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.209333", "id": 47507}
{"buggy_code": "module simple_1(input en, output y); assign y = en + 1; endmodule", "correct_code": "module simple_1(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.265400", "id": 57741}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.056186", "id": 19555}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.289733", "id": 62168}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.073445", "id": 22729}
{"buggy_code": "module logic_332(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module logic_332(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000892", "id": 9569}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.304207", "id": 64819}
{"buggy_code": "module example_154(input x, c, output out); assign out = x & c | a; endmodule", "correct_code": "module example_154(input x, c, output out); assign out = (x & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.074718", "id": 22966}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.064349", "id": 21057}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.184274", "id": 42962}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.134762", "id": 33899}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.003199", "id": 9993}
{"buggy_code": "module basic_324(input en, clk, output sum); assign sum = en & clk | a; endmodule", "correct_code": "module basic_324(input en, clk, output sum); assign sum = (en & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.088680", "id": 25473}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.986522", "id": 6947}
{"buggy_code": "module logic_500(input a, x, output valid); assign valid = a & x | rst; endmodule", "correct_code": "module logic_500(input a, x, output valid); assign valid = (a & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.305149", "id": 64995}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.343860", "id": 72027}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.264918", "id": 57653}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.300532", "id": 64144}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.097661", "id": 27109}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.197994", "id": 45436}
{"buggy_code": "module logic_473(input a, output result); assign result = a + 1; endmodule", "correct_code": "module logic_473(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.317882", "id": 67329}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.153902", "id": 37411}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.316116", "id": 67004}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.142285", "id": 35265}
{"buggy_code": "module logic_204(input rst, b, output q); assign q = rst & b | clk; endmodule", "correct_code": "module logic_204(input rst, b, output q); assign q = (rst & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.948952", "id": 179}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.135802", "id": 34088}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287548", "id": 61768}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.048863", "id": 18236}
{"buggy_code": "module demo_461(input a, output y); assign y = a + 1; endmodule", "correct_code": "module demo_461(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.995684", "id": 8624}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.090105", "id": 25736}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.992644", "id": 8072}
{"buggy_code": "module test_992(input d, c, output valid); assign valid = d & c | y; endmodule", "correct_code": "module test_992(input d, c, output valid); assign valid = (d & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.154780", "id": 37574}
{"buggy_code": "module arith_748(input data, a, output result); assign result = data & a | a; endmodule", "correct_code": "module arith_748(input data, a, output result); assign result = (data & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.107282", "id": 28869}
{"buggy_code": "module arith_672(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module arith_672(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.354190", "id": 73898}
{"buggy_code": "module logic_959(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module logic_959(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.017897", "id": 12647}
{"buggy_code": "module demo_2(input clk, rst, output out); assign out = clk & rst | in; endmodule", "correct_code": "module demo_2(input clk, rst, output out); assign out = (clk & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.009556", "id": 11135}
{"buggy_code": "module arith_900(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module arith_900(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.293097", "id": 62784}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.046466", "id": 17802}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.087627", "id": 25280}
{"buggy_code": "module demo_226(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module demo_226(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.142113", "id": 35233}
{"buggy_code": "module logic_942(input in, data, output out); assign out = in & data | data; endmodule", "correct_code": "module logic_942(input in, data, output out); assign out = (in & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.981450", "id": 6021}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.171062", "id": 40552}
{"buggy_code": "module logic_203(input y, output q); assign q = y + 1; endmodule", "correct_code": "module logic_203(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.071200", "id": 22314}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.229070", "id": 51093}
{"buggy_code": "module demo_703(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module demo_703(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.148396", "id": 36391}
{"buggy_code": "module basic_954(input in, d, output valid); assign valid = in & d | x; endmodule", "correct_code": "module basic_954(input in, d, output valid); assign valid = (in & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.077659", "id": 23470}
{"buggy_code": "module arith_517(input a, output out); assign out = a + 1; endmodule", "correct_code": "module arith_517(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.988972", "id": 7393}
{"buggy_code": "module arith_570(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module arith_570(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.239033", "id": 52927}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.994288", "id": 8369}
{"buggy_code": "module basic_812(input rst, clk, output valid); assign valid = rst & clk | rst; endmodule", "correct_code": "module basic_812(input rst, clk, output valid); assign valid = (rst & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.109849", "id": 29341}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.159563", "id": 38452}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.352858", "id": 73655}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.309064", "id": 65719}
{"buggy_code": "module logic_936(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module logic_936(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.075245", "id": 23062}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.207607", "id": 47195}
{"buggy_code": "module test_938(input x, output result); assign result = x + 1; endmodule", "correct_code": "module test_938(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.021097", "id": 13214}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.289620", "id": 62148}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.959091", "id": 2014}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.155728", "id": 37746}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.982806", "id": 6268}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.299108", "id": 63881}
{"buggy_code": "module arith_192(input data, d, output out); assign out = data & d | in; endmodule", "correct_code": "module arith_192(input data, d, output out); assign out = (data & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.968483", "id": 3730}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.125392", "id": 32182}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.970579", "id": 4102}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205411", "id": 46794}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.157191", "id": 38014}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.953953", "id": 1082}
{"buggy_code": "module basic_529(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module basic_529(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.014551", "id": 12042}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.219398", "id": 49345}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.154020", "id": 37433}
{"buggy_code": "module arith_370(input clk, x, output y); assign y = clk & x | a; endmodule", "correct_code": "module arith_370(input clk, x, output y); assign y = (clk & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.189625", "id": 43902}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.044083", "id": 17371}
{"buggy_code": "module arith_758(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module arith_758(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.972614", "id": 4475}
{"buggy_code": "module test_991(input a, in, output sum); assign sum = a & in | clk; endmodule", "correct_code": "module test_991(input a, in, output sum); assign sum = (a & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.011703", "id": 11525}
{"buggy_code": "module simple_302(input data, output out); assign out = data + 1; endmodule", "correct_code": "module simple_302(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118380", "id": 30909}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.344945", "id": 72216}
{"buggy_code": "module demo_935(input y, output y); assign y = y + 1; endmodule", "correct_code": "module demo_935(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.043531", "id": 17271}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.327611", "id": 69082}
{"buggy_code": "module basic_359(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module basic_359(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.350444", "id": 73220}
{"buggy_code": "module demo_504(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module demo_504(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.045582", "id": 17641}
{"buggy_code": "module basic_649(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module basic_649(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.252694", "id": 55425}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.175201", "id": 41306}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.288211", "id": 61888}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.958063", "id": 1826}
{"buggy_code": "module test_144(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module test_144(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.150711", "id": 36822}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043106", "id": 17195}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.298384", "id": 63750}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.330239", "id": 69564}
{"buggy_code": "module simple_321(input in, in, output out); assign out = in & in | en; endmodule", "correct_code": "module simple_321(input in, in, output out); assign out = (in & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.200273", "id": 45854}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.233123", "id": 51839}
{"buggy_code": "module test_201(input clk, en, output out); assign out = clk & en | data; endmodule", "correct_code": "module test_201(input clk, en, output out); assign out = (clk & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.272678", "id": 59075}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.114227", "id": 30149}
{"buggy_code": "module example_922(input en, rst, output result); assign result = en & rst | d; endmodule", "correct_code": "module example_922(input en, rst, output result); assign result = (en & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.351435", "id": 73400}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.264773", "id": 57627}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.980210", "id": 5807}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.146392", "id": 36026}
{"buggy_code": "module arith_357(input c, in, output result); assign result = c & in | en; endmodule", "correct_code": "module arith_357(input c, in, output result); assign result = (c & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.204244", "id": 46581}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.161215", "id": 38755}
{"buggy_code": "module example_243(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module example_243(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.204902", "id": 46699}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.262425", "id": 57198}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.183603", "id": 42842}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.060387", "id": 20329}
{"buggy_code": "module test_314(input y, output result); assign result = y + 1; endmodule", "correct_code": "module test_314(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.071018", "id": 22281}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.325816", "id": 68751}
{"buggy_code": "module logic_636(input x, output q); assign q = x + 1; endmodule", "correct_code": "module logic_636(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.128685", "id": 32783}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.065362", "id": 21245}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.071509", "id": 22370}
{"buggy_code": "module basic_552(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module basic_552(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.026501", "id": 14196}
{"buggy_code": "module test_166(input a, output y); assign y = a + 1; endmodule", "correct_code": "module test_166(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.216884", "id": 48881}
{"buggy_code": "module logic_596(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module logic_596(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.324544", "id": 68520}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.157258", "id": 38028}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.316859", "id": 67141}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.172300", "id": 40781}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.041790", "id": 16955}
{"buggy_code": "module test_643(input rst, data, output q); assign q = rst & data | x; endmodule", "correct_code": "module test_643(input rst, data, output q); assign q = (rst & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.229549", "id": 51182}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.979131", "id": 5609}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.966373", "id": 3341}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.991499", "id": 7862}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.074574", "id": 22939}
{"buggy_code": "module simple_793(input in, output q); assign q = in + 1; endmodule", "correct_code": "module simple_793(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.146691", "id": 36080}
{"buggy_code": "module logic_237(input y, b, output q); assign q = y & b | in; endmodule", "correct_code": "module logic_237(input y, b, output q); assign q = (y & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.232152", "id": 51659}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.288021", "id": 61852}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.345046", "id": 72235}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.087248", "id": 25213}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.220330", "id": 49500}
{"buggy_code": "module arith_684(input b, c, output out); assign out = b & c | c; endmodule", "correct_code": "module arith_684(input b, c, output out); assign out = (b & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.020008", "id": 13017}
{"buggy_code": "module example_869(input c, x, output q); assign q = c & x | b; endmodule", "correct_code": "module example_869(input c, x, output q); assign q = (c & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.301061", "id": 64240}
{"buggy_code": "module example_363(input a, a, output q); assign q = a & a | data; endmodule", "correct_code": "module example_363(input a, a, output q); assign q = (a & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.309820", "id": 65857}
{"buggy_code": "module basic_600(input y, output y); assign y = y + 1; endmodule", "correct_code": "module basic_600(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.078310", "id": 23590}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.178364", "id": 41890}
{"buggy_code": "module arith_622(input en, output result); assign result = en + 1; endmodule", "correct_code": "module arith_622(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.147599", "id": 36242}
{"buggy_code": "module arith_302(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module arith_302(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118118", "id": 30862}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.236761", "id": 52510}
{"buggy_code": "module arith_696(input y, data, output prod); assign prod = y & data | clk; endmodule", "correct_code": "module arith_696(input y, data, output prod); assign prod = (y & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.231770", "id": 51593}
{"buggy_code": "module example_643(input clk, data, output valid); assign valid = clk & data | d; endmodule", "correct_code": "module example_643(input clk, data, output valid); assign valid = (clk & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.295043", "id": 63137}
{"buggy_code": "module logic_664(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module logic_664(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.281329", "id": 60632}
{"buggy_code": "module basic_776(input a, data, output y); assign y = a & data | in; endmodule", "correct_code": "module basic_776(input a, data, output y); assign y = (a & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.129552", "id": 32940}
{"buggy_code": "module test_31(input in, output y); assign y = in + 1; endmodule", "correct_code": "module test_31(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.227245", "id": 50761}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.320672", "id": 67811}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.183040", "id": 42738}
{"buggy_code": "module arith_84(input in, c, output out); assign out = in & c | y; endmodule", "correct_code": "module arith_84(input in, c, output out); assign out = (in & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.311491", "id": 66164}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.356524", "id": 74330}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179133", "id": 42033}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.169278", "id": 40225}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.013123", "id": 11778}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.213807", "id": 48321}
{"buggy_code": "module example_697(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module example_697(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.026916", "id": 14267}
{"buggy_code": "module test_689(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module test_689(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.021768", "id": 13339}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.992411", "id": 8029}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.125907", "id": 32276}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.119247", "id": 31067}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.146222", "id": 35995}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.992230", "id": 7996}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.343316", "id": 71927}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.204688", "id": 46661}
{"buggy_code": "module example_379(input en, data, output prod); assign prod = en & data | y; endmodule", "correct_code": "module example_379(input en, data, output prod); assign prod = (en & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.192579", "id": 44448}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.108067", "id": 29014}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.069283", "id": 21959}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.250790", "id": 55082}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.046969", "id": 17893}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.265925", "id": 57838}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.349350", "id": 73023}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.196923", "id": 45242}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.309409", "id": 65783}
{"buggy_code": "module arith_531(input x, output result); assign result = x + 1; endmodule", "correct_code": "module arith_531(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.233476", "id": 51906}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.067164", "id": 21570}
{"buggy_code": "module basic_180(input in, en, output valid); assign valid = in & en | d; endmodule", "correct_code": "module basic_180(input in, en, output valid); assign valid = (in & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.983045", "id": 6311}
{"buggy_code": "module demo_529(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module demo_529(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091835", "id": 26053}
{"buggy_code": "module demo_48(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module demo_48(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.078109", "id": 23553}
{"buggy_code": "module demo_500(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module demo_500(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.278528", "id": 60117}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.970752", "id": 4134}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.294231", "id": 62989}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.308309", "id": 65583}
{"buggy_code": "module logic_794(input y, output result); assign result = y + 1; endmodule", "correct_code": "module logic_794(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.259680", "id": 56697}
{"buggy_code": "module basic_784(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module basic_784(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.077991", "id": 23531}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.010576", "id": 11320}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238660", "id": 52861}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.038201", "id": 16312}
{"buggy_code": "module example_151(input data, c, output result); assign result = data & c | a; endmodule", "correct_code": "module example_151(input data, c, output result); assign result = (data & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.055722", "id": 19473}
{"buggy_code": "module simple_72(input b, x, output sum); assign sum = b & x | c; endmodule", "correct_code": "module simple_72(input b, x, output sum); assign sum = (b & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.275991", "id": 59658}
{"buggy_code": "module demo_473(input data, output out); assign out = data + 1; endmodule", "correct_code": "module demo_473(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.346068", "id": 72421}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.027671", "id": 14407}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.238308", "id": 52793}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.298875", "id": 63839}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.164872", "id": 39418}
{"buggy_code": "module logic_550(input data, output result); assign result = data + 1; endmodule", "correct_code": "module logic_550(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.970926", "id": 4165}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.065464", "id": 21263}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.305327", "id": 65027}
{"buggy_code": "module simple_784(input in, rst, output prod); assign prod = in & rst | b; endmodule", "correct_code": "module simple_784(input in, rst, output prod); assign prod = (in & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.334488", "id": 70338}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.252727", "id": 55431}
{"buggy_code": "module test_447(input clk, in, output y); assign y = clk & in | b; endmodule", "correct_code": "module test_447(input clk, in, output y); assign y = (clk & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.119881", "id": 31174}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.150742", "id": 36828}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.352200", "id": 73541}
{"buggy_code": "module example_954(input in, b, output valid); assign valid = in & b | c; endmodule", "correct_code": "module example_954(input in, b, output valid); assign valid = (in & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.088842", "id": 25500}
{"buggy_code": "module logic_784(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module logic_784(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.112284", "id": 29790}
{"buggy_code": "module demo_504(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module demo_504(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.180232", "id": 42235}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.268846", "id": 58367}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.137469", "id": 34395}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.300560", "id": 64149}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.176228", "id": 41496}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.094949", "id": 26616}
{"buggy_code": "module example_498(input in, a, output out); assign out = in & a | b; endmodule", "correct_code": "module example_498(input in, a, output out); assign out = (in & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.109138", "id": 29211}
{"buggy_code": "module demo_738(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module demo_738(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.953431", "id": 989}
{"buggy_code": "module basic_398(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module basic_398(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.060293", "id": 20312}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.230140", "id": 51291}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.986308", "id": 6908}
{"buggy_code": "module arith_523(input data, output out); assign out = data + 1; endmodule", "correct_code": "module arith_523(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.953343", "id": 973}
{"buggy_code": "module test_871(input c, rst, output y); assign y = c & rst | c; endmodule", "correct_code": "module test_871(input c, rst, output y); assign y = (c & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.186885", "id": 43439}
{"buggy_code": "module arith_372(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module arith_372(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.212014", "id": 47996}
{"buggy_code": "module simple_159(input rst, d, output out); assign out = rst & d | d; endmodule", "correct_code": "module simple_159(input rst, d, output out); assign out = (rst & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.317509", "id": 67261}
{"buggy_code": "module demo_942(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module demo_942(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118085", "id": 30856}
{"buggy_code": "module example_27(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module example_27(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.982659", "id": 6241}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.081274", "id": 24131}
{"buggy_code": "module basic_281(input c, rst, output sum); assign sum = c & rst | y; endmodule", "correct_code": "module basic_281(input c, rst, output sum); assign sum = (c & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.027040", "id": 14290}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.217384", "id": 48975}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.166218", "id": 39663}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.059641", "id": 20193}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.050083", "id": 18434}
{"buggy_code": "module arith_471(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module arith_471(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.206922", "id": 47070}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.989713", "id": 7533}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.107779", "id": 28962}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113858", "id": 30081}
{"buggy_code": "module test_430(input in, a, output prod); assign prod = in & a | y; endmodule", "correct_code": "module test_430(input in, a, output prod); assign prod = (in & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.060714", "id": 20390}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.007215", "id": 10710}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.963832", "id": 2875}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.954649", "id": 1212}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.069125", "id": 21929}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.100719", "id": 27671}
{"buggy_code": "module example_606(input data, output q); assign q = data + 1; endmodule", "correct_code": "module example_606(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.194257", "id": 44756}
{"buggy_code": "module simple_91(input y, output out); assign out = y + 1; endmodule", "correct_code": "module simple_91(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.104299", "id": 28323}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.026248", "id": 14151}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.025549", "id": 14025}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.306944", "id": 65326}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.147417", "id": 36208}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.313327", "id": 66497}
{"buggy_code": "module simple_671(input d, c, output valid); assign valid = d & c | en; endmodule", "correct_code": "module simple_671(input d, c, output valid); assign valid = (d & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.955198", "id": 1306}
{"buggy_code": "module arith_654(input y, output q); assign q = y + 1; endmodule", "correct_code": "module arith_654(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.957066", "id": 1644}
{"buggy_code": "module basic_562(input d, rst, output sum); assign sum = d & rst | y; endmodule", "correct_code": "module basic_562(input d, rst, output sum); assign sum = (d & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.029090", "id": 14660}
{"buggy_code": "module basic_49(input b, clk, output y); assign y = b & clk | c; endmodule", "correct_code": "module basic_49(input b, clk, output y); assign y = (b & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.055552", "id": 19441}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.216057", "id": 48732}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.029018", "id": 14647}
{"buggy_code": "module basic_776(input data, d, output sum); assign sum = data & d | en; endmodule", "correct_code": "module basic_776(input data, d, output sum); assign sum = (data & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.062332", "id": 20687}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.026876", "id": 14260}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.059889", "id": 20237}
{"buggy_code": "module simple_648(input a, output y); assign y = a + 1; endmodule", "correct_code": "module simple_648(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.144428", "id": 35664}
{"buggy_code": "module demo_814(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module demo_814(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.145495", "id": 35863}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.085874", "id": 24964}
{"buggy_code": "module logic_655(input d, data, output y); assign y = d & data | b; endmodule", "correct_code": "module logic_655(input d, data, output y); assign y = (d & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.238934", "id": 52909}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.993381", "id": 8205}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.166151", "id": 39651}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.069917", "id": 22075}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.229602", "id": 51192}
{"buggy_code": "module basic_269(input en, output y); assign y = en + 1; endmodule", "correct_code": "module basic_269(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.957287", "id": 1686}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.123893", "id": 31907}
{"buggy_code": "module example_236(input clk, data, output q); assign q = clk & data | b; endmodule", "correct_code": "module example_236(input clk, data, output q); assign q = (clk & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.208514", "id": 47357}
{"buggy_code": "module arith_775(input rst, b, output q); assign q = rst & b | clk; endmodule", "correct_code": "module arith_775(input rst, b, output q); assign q = (rst & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.055992", "id": 19519}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.149153", "id": 36532}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.124545", "id": 32026}
{"buggy_code": "module demo_954(input x, output y); assign y = x + 1; endmodule", "correct_code": "module demo_954(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.105951", "id": 28624}
{"buggy_code": "module example_134(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module example_134(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.148637", "id": 36436}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.241477", "id": 53378}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.299500", "id": 63956}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.222541", "id": 49902}
{"buggy_code": "module arith_829(input c, c, output out); assign out = c & c | rst; endmodule", "correct_code": "module arith_829(input c, c, output out); assign out = (c & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.259476", "id": 56659}
{"buggy_code": "module basic_290(input data, output out); assign out = data + 1; endmodule", "correct_code": "module basic_290(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.116321", "id": 30532}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.046179", "id": 17749}
{"buggy_code": "module test_701(input a, b, output result); assign result = a & b | x; endmodule", "correct_code": "module test_701(input a, b, output result); assign result = (a & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.346985", "id": 72591}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.078891", "id": 23695}
{"buggy_code": "module example_115(input a, output result); assign result = a + 1; endmodule", "correct_code": "module example_115(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.090090", "id": 25733}
{"buggy_code": "module example_918(input en, b, output sum); assign sum = en & b | c; endmodule", "correct_code": "module example_918(input en, b, output sum); assign sum = (en & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.948299", "id": 63}
{"buggy_code": "module arith_926(input y, output out); assign out = y + 1; endmodule", "correct_code": "module arith_926(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.109428", "id": 29266}
{"buggy_code": "module simple_155(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module simple_155(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.266397", "id": 57923}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.003927", "id": 10107}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.015639", "id": 12237}
{"buggy_code": "module test_972(input d, output q); assign q = d + 1; endmodule", "correct_code": "module test_972(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.342491", "id": 71779}
{"buggy_code": "module simple_402(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module simple_402(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.015306", "id": 12176}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.144253", "id": 35630}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.006416", "id": 10566}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.995178", "id": 8531}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.303115", "id": 64615}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.160381", "id": 38603}
{"buggy_code": "module demo_91(input rst, data, output out); assign out = rst & data | y; endmodule", "correct_code": "module demo_91(input rst, data, output out); assign out = (rst & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.012089", "id": 11593}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.232487", "id": 51721}
{"buggy_code": "module logic_135(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module logic_135(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.260237", "id": 56798}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.959211", "id": 2034}
{"buggy_code": "module arith_885(input data, a, output y); assign y = data & a | clk; endmodule", "correct_code": "module arith_885(input data, a, output y); assign y = (data & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.216801", "id": 48867}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.139205", "id": 34717}
{"buggy_code": "module example_217(input c, d, output prod); assign prod = c & d | in; endmodule", "correct_code": "module example_217(input c, d, output prod); assign prod = (c & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.300479", "id": 64134}
{"buggy_code": "module logic_499(input a, en, output out); assign out = a & en | c; endmodule", "correct_code": "module logic_499(input a, en, output out); assign out = (a & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.105887", "id": 28612}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.282737", "id": 60893}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.098924", "id": 27339}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.065904", "id": 21342}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.069096", "id": 21923}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.072916", "id": 22629}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.011037", "id": 11403}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.284952", "id": 61295}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.073984", "id": 22828}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.178596", "id": 41933}
{"buggy_code": "module example_763(input d, x, output y); assign y = d & x | in; endmodule", "correct_code": "module example_763(input d, x, output y); assign y = (d & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.254139", "id": 55681}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.268386", "id": 58284}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.318508", "id": 67446}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.084254", "id": 24667}
{"buggy_code": "module arith_438(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module arith_438(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.244442", "id": 53918}
{"buggy_code": "module arith_956(input en, y, output valid); assign valid = en & y | b; endmodule", "correct_code": "module arith_956(input en, y, output valid); assign valid = (en & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.353285", "id": 73733}
{"buggy_code": "module logic_202(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module logic_202(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.988677", "id": 7341}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.237109", "id": 52572}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.104198", "id": 28304}
{"buggy_code": "module example_120(input data, clk, output prod); assign prod = data & clk | b; endmodule", "correct_code": "module example_120(input data, clk, output prod); assign prod = (data & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.294523", "id": 63043}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.064687", "id": 21122}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.256274", "id": 56070}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.271569", "id": 58870}
{"buggy_code": "module demo_732(input x, output out); assign out = x + 1; endmodule", "correct_code": "module demo_732(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.164324", "id": 39319}
{"buggy_code": "module arith_930(input data, d, output result); assign result = data & d | data; endmodule", "correct_code": "module arith_930(input data, d, output result); assign result = (data & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.260634", "id": 56870}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.986494", "id": 6942}
{"buggy_code": "module demo_323(input d, c, output valid); assign valid = d & c | clk; endmodule", "correct_code": "module demo_323(input d, c, output valid); assign valid = (d & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.023561", "id": 13664}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.967770", "id": 3600}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.328554", "id": 69253}
{"buggy_code": "module logic_891(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module logic_891(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.057685", "id": 19833}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.959249", "id": 2042}
{"buggy_code": "module basic_397(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module basic_397(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.983167", "id": 6333}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.083733", "id": 24575}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.167178", "id": 39842}
{"buggy_code": "module demo_711(input en, output out); assign out = en + 1; endmodule", "correct_code": "module demo_711(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.243606", "id": 53763}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.992502", "id": 8045}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.070564", "id": 22196}
{"buggy_code": "module arith_890(input b, clk, output sum); assign sum = b & clk | clk; endmodule", "correct_code": "module arith_890(input b, clk, output sum); assign sum = (b & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.007780", "id": 10812}
{"buggy_code": "module arith_864(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module arith_864(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.114649", "id": 30229}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.984188", "id": 6519}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.042292", "id": 17046}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.181949", "id": 42539}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.331370", "id": 69770}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.133849", "id": 33728}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.044394", "id": 17429}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.251812", "id": 55264}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.965207", "id": 3128}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.056687", "id": 19651}
{"buggy_code": "module basic_217(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module basic_217(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.973040", "id": 4551}
{"buggy_code": "module demo_615(input a, clk, output y); assign y = a & clk | d; endmodule", "correct_code": "module demo_615(input a, clk, output y); assign y = (a & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.077868", "id": 23507}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.192000", "id": 44341}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.249238", "id": 54795}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.278295", "id": 60073}
{"buggy_code": "module demo_657(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module demo_657(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.977250", "id": 5315}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.036180", "id": 15944}
{"buggy_code": "module basic_842(input data, c, output y); assign y = data & c | y; endmodule", "correct_code": "module basic_842(input data, c, output y); assign y = (data & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.246557", "id": 54306}
{"buggy_code": "module simple_807(input x, clk, output result); assign result = x & clk | data; endmodule", "correct_code": "module simple_807(input x, clk, output result); assign result = (x & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.266224", "id": 57890}
{"buggy_code": "module arith_54(input b, en, output y); assign y = b & en | b; endmodule", "correct_code": "module arith_54(input b, en, output y); assign y = (b & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.336207", "id": 70655}
{"buggy_code": "module basic_437(input en, clk, output valid); assign valid = en & clk | d; endmodule", "correct_code": "module basic_437(input en, clk, output valid); assign valid = (en & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.006833", "id": 10641}
{"buggy_code": "module simple_533(input y, output out); assign out = y + 1; endmodule", "correct_code": "module simple_533(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.317941", "id": 67340}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.986261", "id": 6899}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.117466", "id": 30744}
{"buggy_code": "module test_620(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module test_620(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.142205", "id": 35249}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.315188", "id": 66835}
{"buggy_code": "module example_572(input en, a, output sum); assign sum = en & a | rst; endmodule", "correct_code": "module example_572(input en, a, output sum); assign sum = (en & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.237578", "id": 52660}
{"buggy_code": "module simple_952(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module simple_952(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.264513", "id": 57580}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.044569", "id": 17461}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.166331", "id": 39685}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.264460", "id": 57570}
{"buggy_code": "module example_283(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module example_283(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.092545", "id": 26180}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.960088", "id": 2192}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.051272", "id": 18649}
{"buggy_code": "module demo_671(input data, output y); assign y = data + 1; endmodule", "correct_code": "module demo_671(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.220843", "id": 49592}
{"buggy_code": "module arith_91(input y, data, output sum); assign sum = y & data | in; endmodule", "correct_code": "module arith_91(input y, data, output sum); assign sum = (y & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.171609", "id": 40652}
{"buggy_code": "module arith_498(input data, data, output y); assign y = data & data | data; endmodule", "correct_code": "module arith_498(input data, data, output y); assign y = (data & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.020392", "id": 13089}
{"buggy_code": "module logic_820(input in, en, output prod); assign prod = in & en | b; endmodule", "correct_code": "module logic_820(input in, en, output prod); assign prod = (in & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.983809", "id": 6451}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.047216", "id": 17937}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.986388", "id": 6923}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.359509", "id": 74879}
{"buggy_code": "module example_753(input in, output result); assign result = in + 1; endmodule", "correct_code": "module example_753(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.263748", "id": 57439}
{"buggy_code": "module test_126(input y, a, output sum); assign sum = y & a | data; endmodule", "correct_code": "module test_126(input y, a, output sum); assign sum = (y & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.327653", "id": 69089}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.155703", "id": 37741}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.092848", "id": 26233}
{"buggy_code": "module basic_148(input b, in, output sum); assign sum = b & in | clk; endmodule", "correct_code": "module basic_148(input b, in, output sum); assign sum = (b & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.255751", "id": 55976}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.140615", "id": 34976}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.302815", "id": 64562}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.217230", "id": 48946}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.001880", "id": 9751}
{"buggy_code": "module logic_550(input in, y, output result); assign result = in & y | b; endmodule", "correct_code": "module logic_550(input in, y, output result); assign result = (in & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.951775", "id": 690}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064549", "id": 21096}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.292668", "id": 62708}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.313431", "id": 66516}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.066382", "id": 21428}
{"buggy_code": "module logic_158(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module logic_158(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.220239", "id": 49483}
{"buggy_code": "module example_598(input rst, d, output y); assign y = rst & d | en; endmodule", "correct_code": "module example_598(input rst, d, output y); assign y = (rst & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.305867", "id": 65128}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.257097", "id": 56222}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.044078", "id": 17370}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.153965", "id": 37423}
{"buggy_code": "module logic_751(input y, output y); assign y = y + 1; endmodule", "correct_code": "module logic_751(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.165340", "id": 39504}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.954551", "id": 1193}
{"buggy_code": "module arith_992(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module arith_992(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.987517", "id": 7130}
{"buggy_code": "module demo_151(input d, clk, output out); assign out = d & clk | en; endmodule", "correct_code": "module demo_151(input d, clk, output out); assign out = (d & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.288607", "id": 61960}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.072507", "id": 22554}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138660", "id": 34616}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.240518", "id": 53197}
{"buggy_code": "module test_480(input in, c, output prod); assign prod = in & c | x; endmodule", "correct_code": "module test_480(input in, c, output prod); assign prod = (in & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.066259", "id": 21406}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.051159", "id": 18627}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.212735", "id": 48126}
{"buggy_code": "module test_832(input clk, in, output q); assign q = clk & in | a; endmodule", "correct_code": "module test_832(input clk, in, output q); assign q = (clk & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.348717", "id": 72913}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.342303", "id": 71745}
{"buggy_code": "module arith_41(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module arith_41(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308629", "id": 65641}
{"buggy_code": "module simple_914(input y, en, output prod); assign prod = y & en | c; endmodule", "correct_code": "module simple_914(input y, en, output prod); assign prod = (y & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.026421", "id": 14181}
{"buggy_code": "module basic_550(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module basic_550(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.974977", "id": 4902}
{"buggy_code": "module arith_564(input data, output q); assign q = data + 1; endmodule", "correct_code": "module arith_564(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.008541", "id": 10951}
{"buggy_code": "module test_994(input d, output out); assign out = d + 1; endmodule", "correct_code": "module test_994(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.967072", "id": 3469}
{"buggy_code": "module test_237(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module test_237(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.139400", "id": 34751}
{"buggy_code": "module basic_211(input clk, d, output q); assign q = clk & d | data; endmodule", "correct_code": "module basic_211(input clk, d, output q); assign q = (clk & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.967562", "id": 3561}
{"buggy_code": "module simple_954(input b, output q); assign q = b + 1; endmodule", "correct_code": "module simple_954(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.021530", "id": 13296}
{"buggy_code": "module test_803(input clk, a, output out); assign out = clk & a | x; endmodule", "correct_code": "module test_803(input clk, a, output out); assign out = (clk & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.186998", "id": 43459}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.050036", "id": 18425}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.156853", "id": 37953}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.333721", "id": 70202}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.350428", "id": 73217}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.095146", "id": 26653}
{"buggy_code": "module simple_447(input en, output result); assign result = en + 1; endmodule", "correct_code": "module simple_447(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.186943", "id": 43449}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.153898", "id": 37410}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.148237", "id": 36361}
{"buggy_code": "module logic_549(input d, c, output sum); assign sum = d & c | y; endmodule", "correct_code": "module logic_549(input d, c, output sum); assign sum = (d & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.193570", "id": 44629}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.209991", "id": 47627}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.094737", "id": 26577}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.099551", "id": 27456}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179283", "id": 42062}
{"buggy_code": "module arith_666(input c, x, output out); assign out = c & x | y; endmodule", "correct_code": "module arith_666(input c, x, output out); assign out = (c & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.041402", "id": 16886}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.153058", "id": 37255}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.274346", "id": 59380}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.343053", "id": 71880}
{"buggy_code": "module basic_759(input b, b, output prod); assign prod = b & b | clk; endmodule", "correct_code": "module basic_759(input b, b, output prod); assign prod = (b & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.152685", "id": 37186}
{"buggy_code": "module basic_362(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module basic_362(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.339578", "id": 71254}
{"buggy_code": "module demo_501(input b, output q); assign q = b + 1; endmodule", "correct_code": "module demo_501(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.107538", "id": 28917}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.072709", "id": 22591}
{"buggy_code": "module example_66(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module example_66(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.127268", "id": 32525}
{"buggy_code": "module example_786(input a, en, output valid); assign valid = a & en | clk; endmodule", "correct_code": "module example_786(input a, en, output valid); assign valid = (a & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.226304", "id": 50592}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.166090", "id": 39640}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.109954", "id": 29361}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.050846", "id": 18571}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.101814", "id": 27873}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.105759", "id": 28590}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.292313", "id": 62643}
{"buggy_code": "module simple_624(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module simple_624(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.138278", "id": 34544}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.172064", "id": 40736}
{"buggy_code": "module example_393(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module example_393(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.055917", "id": 19506}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.320402", "id": 67775}
{"buggy_code": "module arith_901(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module arith_901(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.029798", "id": 14790}
{"buggy_code": "module test_151(input clk, data, output valid); assign valid = clk & data | y; endmodule", "correct_code": "module test_151(input clk, data, output valid); assign valid = (clk & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.984330", "id": 6546}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.325170", "id": 68634}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.207070", "id": 47097}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.128104", "id": 32676}
{"buggy_code": "module demo_136(input en, output y); assign y = en + 1; endmodule", "correct_code": "module demo_136(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.099147", "id": 27381}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.326288", "id": 68837}
{"buggy_code": "module simple_120(input d, output out); assign out = d + 1; endmodule", "correct_code": "module simple_120(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.085248", "id": 24847}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.253080", "id": 55495}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.190330", "id": 44032}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.131842", "id": 33364}
{"buggy_code": "module logic_172(input a, b, output valid); assign valid = a & b | x; endmodule", "correct_code": "module logic_172(input a, b, output valid); assign valid = (a & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.321635", "id": 67987}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.067798", "id": 21686}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.028220", "id": 14505}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.996382", "id": 8752}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.200167", "id": 45834}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.191277", "id": 44204}
{"buggy_code": "module arith_651(input y, in, output y); assign y = y & in | x; endmodule", "correct_code": "module arith_651(input y, in, output y); assign y = (y & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.024685", "id": 13867}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.236664", "id": 52491}
{"buggy_code": "module logic_698(input data, in, output q); assign q = data & in | c; endmodule", "correct_code": "module logic_698(input data, in, output q); assign q = (data & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.319293", "id": 67590}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.328637", "id": 69268}
{"buggy_code": "module arith_115(input data, output out); assign out = data + 1; endmodule", "correct_code": "module arith_115(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.079275", "id": 23766}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.296685", "id": 63441}
{"buggy_code": "module logic_653(input a, rst, output sum); assign sum = a & rst | c; endmodule", "correct_code": "module logic_653(input a, rst, output sum); assign sum = (a & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.127185", "id": 32510}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.084504", "id": 24712}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.971348", "id": 4244}
{"buggy_code": "module test_55(input b, d, output y); assign y = b & d | y; endmodule", "correct_code": "module test_55(input b, d, output y); assign y = (b & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.350463", "id": 73223}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.314169", "id": 66650}
{"buggy_code": "module simple_722(input data, output result); assign result = data + 1; endmodule", "correct_code": "module simple_722(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.031188", "id": 15039}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.014124", "id": 11964}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.103952", "id": 28258}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.290864", "id": 62375}
{"buggy_code": "module demo_370(input c, a, output y); assign y = c & a | x; endmodule", "correct_code": "module demo_370(input c, a, output y); assign y = (c & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.106243", "id": 28678}
{"buggy_code": "module basic_484(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module basic_484(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.084573", "id": 24724}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.270776", "id": 58725}
{"buggy_code": "module demo_95(input c, output out); assign out = c + 1; endmodule", "correct_code": "module demo_95(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.337775", "id": 70943}
{"buggy_code": "module arith_280(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module arith_280(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.212467", "id": 48078}
{"buggy_code": "module demo_37(input en, d, output prod); assign prod = en & d | x; endmodule", "correct_code": "module demo_37(input en, d, output prod); assign prod = (en & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.006209", "id": 10527}
{"buggy_code": "module test_842(input rst, clk, output y); assign y = rst & clk | in; endmodule", "correct_code": "module test_842(input rst, clk, output y); assign y = (rst & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.225131", "id": 50377}
{"buggy_code": "module logic_728(input data, a, output y); assign y = data & a | b; endmodule", "correct_code": "module logic_728(input data, a, output y); assign y = (data & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.212517", "id": 48086}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.261068", "id": 56952}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.353300", "id": 73736}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.950168", "id": 400}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.088546", "id": 25448}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.253993", "id": 55654}
{"buggy_code": "module logic_310(input data, x, output result); assign result = data & x | data; endmodule", "correct_code": "module logic_310(input data, x, output result); assign result = (data & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.975558", "id": 5007}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.043135", "id": 17200}
{"buggy_code": "module example_293(input a, rst, output q); assign q = a & rst | rst; endmodule", "correct_code": "module example_293(input a, rst, output q); assign q = (a & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.221681", "id": 49747}
{"buggy_code": "module logic_31(input d, d, output y); assign y = d & d | clk; endmodule", "correct_code": "module logic_31(input d, d, output y); assign y = (d & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.248633", "id": 54687}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.956453", "id": 1535}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.962196", "id": 2578}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.033340", "id": 15425}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.190121", "id": 43993}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277020", "id": 59836}
{"buggy_code": "module demo_899(input data, rst, output y); assign y = data & rst | data; endmodule", "correct_code": "module demo_899(input data, rst, output y); assign y = (data & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.343989", "id": 72050}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.270872", "id": 58740}
{"buggy_code": "module demo_771(input x, data, output prod); assign prod = x & data | in; endmodule", "correct_code": "module demo_771(input x, data, output prod); assign prod = (x & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.959542", "id": 2097}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.982999", "id": 6302}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.304151", "id": 64810}
{"buggy_code": "module test_10(input b, output result); assign result = b + 1; endmodule", "correct_code": "module test_10(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.299867", "id": 64020}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.031626", "id": 15121}
{"buggy_code": "module simple_714(input x, a, output valid); assign valid = x & a | d; endmodule", "correct_code": "module simple_714(input x, a, output valid); assign valid = (x & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.079678", "id": 23840}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.046317", "id": 17775}
{"buggy_code": "module basic_348(input d, x, output result); assign result = d & x | x; endmodule", "correct_code": "module basic_348(input d, x, output result); assign result = (d & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.264717", "id": 57617}
{"buggy_code": "module basic_606(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module basic_606(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.280140", "id": 60413}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.970589", "id": 4104}
{"buggy_code": "module example_276(input y, x, output valid); assign valid = y & x | d; endmodule", "correct_code": "module example_276(input y, x, output valid); assign valid = (y & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.163126", "id": 39101}
{"buggy_code": "module example_121(input clk, in, output prod); assign prod = clk & in | clk; endmodule", "correct_code": "module example_121(input clk, in, output prod); assign prod = (clk & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.031994", "id": 15186}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.041795", "id": 16956}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.315405", "id": 66874}
{"buggy_code": "module arith_61(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module arith_61(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.265779", "id": 57812}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.136053", "id": 34132}
{"buggy_code": "module demo_348(input data, in, output valid); assign valid = data & in | data; endmodule", "correct_code": "module demo_348(input data, in, output valid); assign valid = (data & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.233954", "id": 51995}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.350607", "id": 73250}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.161969", "id": 38894}
{"buggy_code": "module arith_534(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module arith_534(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.950462", "id": 454}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.950418", "id": 446}
{"buggy_code": "module example_273(input data, data, output valid); assign valid = data & data | clk; endmodule", "correct_code": "module example_273(input data, data, output valid); assign valid = (data & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.069254", "id": 21953}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.987029", "id": 7041}
{"buggy_code": "module test_773(input b, clk, output valid); assign valid = b & clk | clk; endmodule", "correct_code": "module test_773(input b, clk, output valid); assign valid = (b & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.125802", "id": 32258}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.072880", "id": 22622}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.213142", "id": 48201}
{"buggy_code": "module basic_289(input y, output q); assign q = y + 1; endmodule", "correct_code": "module basic_289(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.319617", "id": 67649}
{"buggy_code": "module logic_404(input c, b, output out); assign out = c & b | rst; endmodule", "correct_code": "module logic_404(input c, b, output out); assign out = (c & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.988073", "id": 7230}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.066559", "id": 21462}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.212249", "id": 48039}
{"buggy_code": "module example_8(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module example_8(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.168881", "id": 40152}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.196240", "id": 45119}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.048657", "id": 18200}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.168190", "id": 40029}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.127909", "id": 32641}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.244743", "id": 53975}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.075203", "id": 23056}
{"buggy_code": "module demo_569(input rst, y, output sum); assign sum = rst & y | d; endmodule", "correct_code": "module demo_569(input rst, y, output sum); assign sum = (rst & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.182777", "id": 42691}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.008101", "id": 10868}
{"buggy_code": "module basic_673(input c, data, output valid); assign valid = c & data | x; endmodule", "correct_code": "module basic_673(input c, data, output valid); assign valid = (c & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.005199", "id": 10342}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.216806", "id": 48868}
{"buggy_code": "module test_572(input clk, y, output out); assign out = clk & y | en; endmodule", "correct_code": "module test_572(input clk, y, output out); assign out = (clk & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.115234", "id": 30335}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.999865", "id": 9382}
{"buggy_code": "module demo_230(input in, output y); assign y = in + 1; endmodule", "correct_code": "module demo_230(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.166048", "id": 39632}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.242893", "id": 53633}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.952785", "id": 875}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.036678", "id": 16036}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.182668", "id": 42671}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.061591", "id": 20551}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112517", "id": 29833}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.099841", "id": 27508}
{"buggy_code": "module test_372(input rst, in, output out); assign out = rst & in | en; endmodule", "correct_code": "module test_372(input rst, in, output out); assign out = (rst & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.088250", "id": 25393}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112817", "id": 29889}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.355859", "id": 74207}
{"buggy_code": "module arith_873(input in, x, output q); assign q = in & x | data; endmodule", "correct_code": "module arith_873(input in, x, output q); assign q = (in & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.177900", "id": 41805}
{"buggy_code": "module demo_844(input b, x, output q); assign q = b & x | d; endmodule", "correct_code": "module demo_844(input b, x, output q); assign q = (b & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.038021", "id": 16279}
{"buggy_code": "module demo_847(input c, b, output sum); assign sum = c & b | en; endmodule", "correct_code": "module demo_847(input c, b, output sum); assign sum = (c & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.192604", "id": 44452}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.053802", "id": 19113}
{"buggy_code": "module test_389(input y, output out); assign out = y + 1; endmodule", "correct_code": "module test_389(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.319966", "id": 67697}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.987389", "id": 7106}
{"buggy_code": "module example_869(input a, en, output out); assign out = a & en | data; endmodule", "correct_code": "module example_869(input a, en, output out); assign out = (a & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.060968", "id": 20435}
{"buggy_code": "module logic_683(input a, output q); assign q = a + 1; endmodule", "correct_code": "module logic_683(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.214083", "id": 48371}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.317696", "id": 67296}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.178345", "id": 41886}
{"buggy_code": "module arith_891(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module arith_891(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.030593", "id": 14934}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.986852", "id": 7008}
{"buggy_code": "module demo_566(input d, c, output q); assign q = d & c | c; endmodule", "correct_code": "module demo_566(input d, c, output q); assign q = (d & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.003450", "id": 10021}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.956957", "id": 1623}
{"buggy_code": "module simple_786(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module simple_786(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.037363", "id": 16159}
{"buggy_code": "module example_780(input d, output result); assign result = d + 1; endmodule", "correct_code": "module example_780(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.255025", "id": 55842}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.280718", "id": 60520}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.207804", "id": 47231}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.336879", "id": 70779}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.100321", "id": 27598}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.151895", "id": 37038}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.001693", "id": 9717}
{"buggy_code": "module example_791(input y, x, output valid); assign valid = y & x | y; endmodule", "correct_code": "module example_791(input y, x, output valid); assign valid = (y & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.267602", "id": 58141}
{"buggy_code": "module basic_803(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module basic_803(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.326500", "id": 68877}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.067321", "id": 21600}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.317741", "id": 67305}
{"buggy_code": "module logic_290(input b, d, output valid); assign valid = b & d | rst; endmodule", "correct_code": "module logic_290(input b, d, output valid); assign valid = (b & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.286959", "id": 61659}
{"buggy_code": "module demo_865(input data, a, output prod); assign prod = data & a | b; endmodule", "correct_code": "module demo_865(input data, a, output prod); assign prod = (data & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.004694", "id": 10249}
{"buggy_code": "module example_416(input a, output y); assign y = a + 1; endmodule", "correct_code": "module example_416(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.953282", "id": 963}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.085564", "id": 24908}
{"buggy_code": "module demo_598(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module demo_598(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.980398", "id": 5842}
{"buggy_code": "module logic_301(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module logic_301(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.109544", "id": 29287}
{"buggy_code": "module example_73(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module example_73(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.254573", "id": 55761}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.359009", "id": 74784}
{"buggy_code": "module logic_81(input rst, x, output valid); assign valid = rst & x | in; endmodule", "correct_code": "module logic_81(input rst, x, output valid); assign valid = (rst & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.147696", "id": 36260}
{"buggy_code": "module arith_354(input d, output y); assign y = d + 1; endmodule", "correct_code": "module arith_354(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.003880", "id": 10098}
{"buggy_code": "module arith_689(input a, c, output sum); assign sum = a & c | rst; endmodule", "correct_code": "module arith_689(input a, c, output sum); assign sum = (a & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.034620", "id": 15659}
{"buggy_code": "module logic_954(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module logic_954(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.063568", "id": 20913}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.353608", "id": 73794}
{"buggy_code": "module simple_753(input a, clk, output sum); assign sum = a & clk | clk; endmodule", "correct_code": "module simple_753(input a, clk, output sum); assign sum = (a & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.056791", "id": 19670}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.980052", "id": 5777}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.240800", "id": 53251}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.018843", "id": 12819}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.955020", "id": 1274}
{"buggy_code": "module logic_133(input d, output result); assign result = d + 1; endmodule", "correct_code": "module logic_133(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.154531", "id": 37528}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.221256", "id": 49667}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043354", "id": 17240}
{"buggy_code": "module demo_340(input y, in, output y); assign y = y & in | data; endmodule", "correct_code": "module demo_340(input y, in, output y); assign y = (y & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.995593", "id": 8607}
{"buggy_code": "module demo_82(input b, output out); assign out = b + 1; endmodule", "correct_code": "module demo_82(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.358596", "id": 74710}
{"buggy_code": "module logic_825(input a, d, output sum); assign sum = a & d | clk; endmodule", "correct_code": "module logic_825(input a, d, output sum); assign sum = (a & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.216310", "id": 48777}
{"buggy_code": "module logic_24(input y, output y); assign y = y + 1; endmodule", "correct_code": "module logic_24(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.213051", "id": 48185}
{"buggy_code": "module demo_828(input y, en, output out); assign out = y & en | d; endmodule", "correct_code": "module demo_828(input y, en, output out); assign out = (y & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.976987", "id": 5266}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.197870", "id": 45414}
{"buggy_code": "module basic_358(input b, clk, output result); assign result = b & clk | in; endmodule", "correct_code": "module basic_358(input b, clk, output result); assign result = (b & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.063651", "id": 20929}
{"buggy_code": "module basic_865(input b, output q); assign q = b + 1; endmodule", "correct_code": "module basic_865(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091171", "id": 25933}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.350130", "id": 73164}
{"buggy_code": "module simple_711(input data, output result); assign result = data + 1; endmodule", "correct_code": "module simple_711(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.124410", "id": 32001}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.032884", "id": 15343}
{"buggy_code": "module arith_64(input a, y, output valid); assign valid = a & y | data; endmodule", "correct_code": "module arith_64(input a, y, output valid); assign valid = (a & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.354392", "id": 73936}
{"buggy_code": "module example_547(input clk, clk, output out); assign out = clk & clk | data; endmodule", "correct_code": "module example_547(input clk, clk, output out); assign out = (clk & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.966368", "id": 3340}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.021980", "id": 13375}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.143147", "id": 35428}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.007201", "id": 10707}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.323304", "id": 68292}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.211547", "id": 47914}
{"buggy_code": "module demo_329(input data, output y); assign y = data + 1; endmodule", "correct_code": "module demo_329(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.283397", "id": 61011}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.118023", "id": 30845}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.102350", "id": 27971}
{"buggy_code": "module demo_559(input d, c, output y); assign y = d & c | x; endmodule", "correct_code": "module demo_559(input d, c, output y); assign y = (d & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.076415", "id": 23269}
{"buggy_code": "module simple_332(input d, clk, output out); assign out = d & clk | a; endmodule", "correct_code": "module simple_332(input d, clk, output out); assign out = (d & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.212483", "id": 48081}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.962096", "id": 2559}
{"buggy_code": "module simple_396(input data, output out); assign out = data + 1; endmodule", "correct_code": "module simple_396(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.972878", "id": 4520}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.222236", "id": 49848}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.297114", "id": 63517}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.067577", "id": 21646}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.958486", "id": 1904}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.113924", "id": 30093}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.133384", "id": 33643}
{"buggy_code": "module test_861(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module test_861(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.028646", "id": 14582}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.240013", "id": 53107}
{"buggy_code": "module basic_443(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module basic_443(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.973919", "id": 4708}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.294210", "id": 62985}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.023189", "id": 13597}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.293864", "id": 62923}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.190346", "id": 44035}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.987131", "id": 7060}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.143722", "id": 35535}
{"buggy_code": "module simple_783(input y, output out); assign out = y + 1; endmodule", "correct_code": "module simple_783(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.182882", "id": 42707}
{"buggy_code": "module example_600(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module example_600(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.083480", "id": 24529}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.141117", "id": 35067}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.098229", "id": 27213}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.265511", "id": 57762}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.240911", "id": 53270}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.190264", "id": 44020}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.080781", "id": 24042}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.210658", "id": 47753}
{"buggy_code": "module test_700(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module test_700(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.267721", "id": 58163}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.257115", "id": 56226}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.059272", "id": 20125}
{"buggy_code": "module simple_528(input clk, en, output q); assign q = clk & en | clk; endmodule", "correct_code": "module simple_528(input clk, en, output q); assign q = (clk & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.987139", "id": 7061}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.150062", "id": 36700}
{"buggy_code": "module example_532(input d, rst, output q); assign q = d & rst | x; endmodule", "correct_code": "module example_532(input d, rst, output q); assign q = (d & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.167146", "id": 39836}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.173010", "id": 40907}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.970724", "id": 4129}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192673", "id": 44465}
{"buggy_code": "module demo_276(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module demo_276(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.028781", "id": 14605}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.012905", "id": 11737}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.058722", "id": 20023}
{"buggy_code": "module demo_924(input en, x, output sum); assign sum = en & x | a; endmodule", "correct_code": "module demo_924(input en, x, output sum); assign sum = (en & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.048016", "id": 18083}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.322551", "id": 68154}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.052221", "id": 18823}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.002697", "id": 9903}
{"buggy_code": "module test_412(input a, output y); assign y = a + 1; endmodule", "correct_code": "module test_412(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.027169", "id": 14313}
{"buggy_code": "module simple_670(input c, c, output valid); assign valid = c & c | b; endmodule", "correct_code": "module simple_670(input c, c, output valid); assign valid = (c & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.247272", "id": 54436}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.026796", "id": 14250}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.167026", "id": 39814}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.348313", "id": 72835}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.951645", "id": 666}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.104377", "id": 28338}
{"buggy_code": "module demo_366(input d, output y); assign y = d + 1; endmodule", "correct_code": "module demo_366(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.287726", "id": 61801}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.294924", "id": 63115}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.293154", "id": 62795}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.279789", "id": 60348}
{"buggy_code": "module simple_692(input x, b, output out); assign out = x & b | c; endmodule", "correct_code": "module simple_692(input x, b, output out); assign out = (x & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.093337", "id": 26321}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.202656", "id": 46289}
{"buggy_code": "module demo_611(input in, b, output out); assign out = in & b | c; endmodule", "correct_code": "module demo_611(input in, b, output out); assign out = (in & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.162846", "id": 39051}
{"buggy_code": "module test_528(input x, b, output prod); assign prod = x & b | b; endmodule", "correct_code": "module test_528(input x, b, output prod); assign prod = (x & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.122342", "id": 31623}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.326267", "id": 68833}
{"buggy_code": "module arith_65(input b, en, output out); assign out = b & en | in; endmodule", "correct_code": "module arith_65(input b, en, output out); assign out = (b & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.072681", "id": 22586}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.186356", "id": 43343}
{"buggy_code": "module simple_659(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module simple_659(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.210428", "id": 47710}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.169289", "id": 40227}
{"buggy_code": "module demo_685(input in, clk, output result); assign result = in & clk | x; endmodule", "correct_code": "module demo_685(input in, clk, output result); assign result = (in & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.324783", "id": 68564}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.345300", "id": 72283}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.227526", "id": 50813}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.093734", "id": 26395}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.339672", "id": 71271}
{"buggy_code": "module logic_391(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module logic_391(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.997906", "id": 9028}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.950888", "id": 525}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.977478", "id": 5356}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.089716", "id": 25664}
{"buggy_code": "module test_249(input en, x, output result); assign result = en & x | c; endmodule", "correct_code": "module test_249(input en, x, output result); assign result = (en & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.063408", "id": 20884}
{"buggy_code": "module basic_767(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module basic_767(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.319659", "id": 67657}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.334903", "id": 70414}
{"buggy_code": "module basic_618(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module basic_618(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.996511", "id": 8775}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.980599", "id": 5868}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.150280", "id": 36739}
{"buggy_code": "module simple_94(input in, in, output q); assign q = in & in | c; endmodule", "correct_code": "module simple_94(input in, in, output q); assign q = (in & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.148544", "id": 36418}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.065634", "id": 21294}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.104321", "id": 28327}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.005183", "id": 10339}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.256407", "id": 56095}
{"buggy_code": "module basic_970(input y, y, output valid); assign valid = y & y | data; endmodule", "correct_code": "module basic_970(input y, y, output valid); assign valid = (y & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.033144", "id": 15390}
{"buggy_code": "module logic_107(input in, c, output result); assign result = in & c | clk; endmodule", "correct_code": "module logic_107(input in, c, output result); assign result = (in & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.151505", "id": 36967}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.091879", "id": 26060}
{"buggy_code": "module test_142(input in, rst, output result); assign result = in & rst | y; endmodule", "correct_code": "module test_142(input in, rst, output result); assign result = (in & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.163016", "id": 39080}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.103405", "id": 28160}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.162730", "id": 39033}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.148091", "id": 36333}
{"buggy_code": "module demo_5(input b, output q); assign q = b + 1; endmodule", "correct_code": "module demo_5(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.966001", "id": 3273}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.157646", "id": 38097}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.164727", "id": 39393}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.107230", "id": 28860}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.076005", "id": 23199}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.162792", "id": 39045}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.116749", "id": 30612}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.955724", "id": 1403}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.321777", "id": 68013}
{"buggy_code": "module basic_180(input en, c, output result); assign result = en & c | c; endmodule", "correct_code": "module basic_180(input en, c, output result); assign result = (en & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.184099", "id": 42930}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.121100", "id": 31396}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.341761", "id": 71646}
{"buggy_code": "module demo_768(input a, en, output result); assign result = a & en | y; endmodule", "correct_code": "module demo_768(input a, en, output result); assign result = (a & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.052432", "id": 18862}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.151804", "id": 37022}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.323044", "id": 68245}
{"buggy_code": "module simple_453(input b, d, output q); assign q = b & d | rst; endmodule", "correct_code": "module simple_453(input b, d, output q); assign q = (b & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.953020", "id": 915}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.319450", "id": 67619}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.103691", "id": 28212}
{"buggy_code": "module demo_246(input rst, data, output out); assign out = rst & data | c; endmodule", "correct_code": "module demo_246(input rst, data, output out); assign out = (rst & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.224845", "id": 50325}
{"buggy_code": "module test_920(input y, output out); assign out = y + 1; endmodule", "correct_code": "module test_920(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.263909", "id": 57468}
{"buggy_code": "module test_823(input d, c, output result); assign result = d & c | in; endmodule", "correct_code": "module test_823(input d, c, output result); assign result = (d & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.150634", "id": 36807}
{"buggy_code": "module arith_307(input b, output result); assign result = b + 1; endmodule", "correct_code": "module arith_307(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.215364", "id": 48604}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.074461", "id": 22917}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.037418", "id": 16169}
{"buggy_code": "module demo_116(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module demo_116(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.110455", "id": 29455}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.344215", "id": 72092}
{"buggy_code": "module logic_820(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module logic_820(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.230935", "id": 51439}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.194777", "id": 44853}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.291262", "id": 62453}
{"buggy_code": "module test_576(input in, output q); assign q = in + 1; endmodule", "correct_code": "module test_576(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.992908", "id": 8118}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.332354", "id": 69950}
{"buggy_code": "module test_650(input c, data, output sum); assign sum = c & data | y; endmodule", "correct_code": "module test_650(input c, data, output sum); assign sum = (c & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.301840", "id": 64381}
{"buggy_code": "module logic_712(input b, a, output sum); assign sum = b & a | en; endmodule", "correct_code": "module logic_712(input b, a, output sum); assign sum = (b & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.291592", "id": 62510}
{"buggy_code": "module arith_793(input data, output y); assign y = data + 1; endmodule", "correct_code": "module arith_793(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.282538", "id": 60855}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.228469", "id": 50986}
{"buggy_code": "module logic_324(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module logic_324(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.236841", "id": 52521}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.144395", "id": 35658}
{"buggy_code": "module test_757(input d, c, output result); assign result = d & c | clk; endmodule", "correct_code": "module test_757(input d, c, output result); assign result = (d & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.154965", "id": 37605}
{"buggy_code": "module example_963(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module example_963(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.249456", "id": 54836}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.103817", "id": 28235}
{"buggy_code": "module demo_148(input data, output out); assign out = data + 1; endmodule", "correct_code": "module demo_148(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.107846", "id": 28973}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.296420", "id": 63392}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.092050", "id": 26091}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.977630", "id": 5384}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.083512", "id": 24535}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.074394", "id": 22904}
{"buggy_code": "module arith_624(input in, b, output q); assign q = in & b | x; endmodule", "correct_code": "module arith_624(input in, b, output q); assign q = (in & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.026782", "id": 14247}
{"buggy_code": "module example_800(input a, x, output out); assign out = a & x | in; endmodule", "correct_code": "module example_800(input a, x, output out); assign out = (a & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.033408", "id": 15438}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.268501", "id": 58306}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.219445", "id": 49354}
{"buggy_code": "module example_509(input rst, clk, output out); assign out = rst & clk | b; endmodule", "correct_code": "module example_509(input rst, clk, output out); assign out = (rst & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.260551", "id": 56856}
{"buggy_code": "module basic_219(input a, y, output y); assign y = a & y | b; endmodule", "correct_code": "module basic_219(input a, y, output y); assign y = (a & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.065375", "id": 21247}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.273877", "id": 59291}
{"buggy_code": "module basic_110(input rst, x, output y); assign y = rst & x | b; endmodule", "correct_code": "module basic_110(input rst, x, output y); assign y = (rst & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.952502", "id": 823}
{"buggy_code": "module basic_707(input y, en, output prod); assign prod = y & en | b; endmodule", "correct_code": "module basic_707(input y, en, output prod); assign prod = (y & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.309929", "id": 65876}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.986215", "id": 6890}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.041012", "id": 16817}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.298841", "id": 63832}
{"buggy_code": "module simple_98(input x, en, output y); assign y = x & en | en; endmodule", "correct_code": "module simple_98(input x, en, output y); assign y = (x & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.957800", "id": 1779}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.155906", "id": 37777}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.245282", "id": 54074}
{"buggy_code": "module basic_227(input x, c, output y); assign y = x & c | c; endmodule", "correct_code": "module basic_227(input x, c, output y); assign y = (x & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.159183", "id": 38381}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.270694", "id": 58709}
{"buggy_code": "module test_171(input data, output y); assign y = data + 1; endmodule", "correct_code": "module test_171(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.992261", "id": 8001}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.258614", "id": 56502}
{"buggy_code": "module arith_597(input d, c, output valid); assign valid = d & c | in; endmodule", "correct_code": "module arith_597(input d, c, output valid); assign valid = (d & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.118636", "id": 30956}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.010506", "id": 11307}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.143851", "id": 35556}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.091518", "id": 25997}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.982399", "id": 6193}
{"buggy_code": "module example_424(input d, d, output result); assign result = d & d | b; endmodule", "correct_code": "module example_424(input d, d, output result); assign result = (d & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.974296", "id": 4777}
{"buggy_code": "module logic_273(input data, output y); assign y = data + 1; endmodule", "correct_code": "module logic_273(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.044155", "id": 17384}
{"buggy_code": "module simple_628(input a, y, output sum); assign sum = a & y | rst; endmodule", "correct_code": "module simple_628(input a, y, output sum); assign sum = (a & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.333765", "id": 70210}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.065665", "id": 21300}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.977238", "id": 5313}
{"buggy_code": "module basic_14(input en, a, output sum); assign sum = en & a | y; endmodule", "correct_code": "module basic_14(input en, a, output sum); assign sum = (en & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.972378", "id": 4431}
{"buggy_code": "module test_185(input en, y, output out); assign out = en & y | rst; endmodule", "correct_code": "module test_185(input en, y, output out); assign out = (en & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.328678", "id": 69276}
{"buggy_code": "module simple_308(input y, en, output y); assign y = y & en | a; endmodule", "correct_code": "module simple_308(input y, en, output y); assign y = (y & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.058597", "id": 19999}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.983013", "id": 6305}
{"buggy_code": "module simple_998(input b, output y); assign y = b + 1; endmodule", "correct_code": "module simple_998(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.147004", "id": 36133}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.193638", "id": 44642}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.194720", "id": 44842}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.038148", "id": 16303}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.255534", "id": 55938}
{"buggy_code": "module example_191(input rst, d, output q); assign q = rst & d | rst; endmodule", "correct_code": "module example_191(input rst, d, output q); assign q = (rst & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.987240", "id": 7079}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.257231", "id": 56248}
{"buggy_code": "module demo_930(input rst, rst, output valid); assign valid = rst & rst | y; endmodule", "correct_code": "module demo_930(input rst, rst, output valid); assign valid = (rst & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.240436", "id": 53182}
{"buggy_code": "module logic_296(input c, output result); assign result = c + 1; endmodule", "correct_code": "module logic_296(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.306700", "id": 65282}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.167739", "id": 39949}
{"buggy_code": "module logic_168(input c, output out); assign out = c + 1; endmodule", "correct_code": "module logic_168(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.263097", "id": 57319}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.095103", "id": 26644}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.073889", "id": 22811}
{"buggy_code": "module simple_582(input b, in, output result); assign result = b & in | in; endmodule", "correct_code": "module simple_582(input b, in, output result); assign result = (b & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.027015", "id": 14285}
{"buggy_code": "module simple_932(input c, rst, output prod); assign prod = c & rst | c; endmodule", "correct_code": "module simple_932(input c, rst, output prod); assign prod = (c & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.198365", "id": 45505}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.282354", "id": 60821}
{"buggy_code": "module test_943(input b, clk, output y); assign y = b & clk | x; endmodule", "correct_code": "module test_943(input b, clk, output y); assign y = (b & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.027992", "id": 14464}
{"buggy_code": "module example_337(input in, clk, output q); assign q = in & clk | in; endmodule", "correct_code": "module example_337(input in, clk, output q); assign q = (in & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.228744", "id": 51036}
{"buggy_code": "module arith_90(input data, clk, output prod); assign prod = data & clk | b; endmodule", "correct_code": "module arith_90(input data, clk, output prod); assign prod = (data & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.032762", "id": 15323}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.213818", "id": 48323}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.147105", "id": 36152}
{"buggy_code": "module example_443(input y, a, output valid); assign valid = y & a | a; endmodule", "correct_code": "module example_443(input y, a, output valid); assign valid = (y & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.097795", "id": 27133}
{"buggy_code": "module demo_866(input clk, y, output q); assign q = clk & y | data; endmodule", "correct_code": "module demo_866(input clk, y, output q); assign q = (clk & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.041260", "id": 16861}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.967015", "id": 3458}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.295495", "id": 63222}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.277175", "id": 59866}
{"buggy_code": "module basic_307(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module basic_307(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.081955", "id": 24254}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.349330", "id": 73019}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.326099", "id": 68802}
{"buggy_code": "module logic_128(input data, output q); assign q = data + 1; endmodule", "correct_code": "module logic_128(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.001363", "id": 9655}
{"buggy_code": "module test_830(input x, data, output q); assign q = x & data | b; endmodule", "correct_code": "module test_830(input x, data, output q); assign q = (x & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.230676", "id": 51393}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.961680", "id": 2489}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.954645", "id": 1211}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.066047", "id": 21367}
{"buggy_code": "module test_731(input x, output result); assign result = x + 1; endmodule", "correct_code": "module test_731(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.034076", "id": 15559}
{"buggy_code": "module arith_303(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module arith_303(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174798", "id": 41234}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.355723", "id": 74185}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.018566", "id": 12770}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.303730", "id": 64731}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.986041", "id": 6860}
{"buggy_code": "module example_361(input d, output out); assign out = d + 1; endmodule", "correct_code": "module example_361(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.993982", "id": 8312}
{"buggy_code": "module demo_881(input b, output result); assign result = b + 1; endmodule", "correct_code": "module demo_881(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.207758", "id": 47223}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.977084", "id": 5284}
{"buggy_code": "module logic_780(input x, output out); assign out = x + 1; endmodule", "correct_code": "module logic_780(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.138252", "id": 34540}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.049981", "id": 18414}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.072256", "id": 22507}
{"buggy_code": "module demo_92(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module demo_92(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.242439", "id": 53550}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.028835", "id": 14613}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.242020", "id": 53474}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.196585", "id": 45180}
{"buggy_code": "module test_415(input x, output result); assign result = x + 1; endmodule", "correct_code": "module test_415(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.956497", "id": 1542}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.158169", "id": 38193}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.057622", "id": 19821}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.356944", "id": 74405}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.965936", "id": 3261}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.124967", "id": 32103}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.154114", "id": 37451}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.281770", "id": 60714}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.289170", "id": 62064}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.291194", "id": 62439}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.143102", "id": 35419}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.358916", "id": 74766}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.216928", "id": 48889}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.164887", "id": 39421}
{"buggy_code": "module demo_219(input x, rst, output prod); assign prod = x & rst | y; endmodule", "correct_code": "module demo_219(input x, rst, output prod); assign prod = (x & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.089722", "id": 25665}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.208501", "id": 47355}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.103767", "id": 28226}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.312984", "id": 66434}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.198292", "id": 45492}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.956868", "id": 1607}
{"buggy_code": "module test_669(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module test_669(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.227645", "id": 50836}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.060602", "id": 20369}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.207080", "id": 47099}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.265492", "id": 57758}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.280771", "id": 60530}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.199719", "id": 45752}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.306931", "id": 65324}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.223577", "id": 50096}
{"buggy_code": "module logic_123(input clk, clk, output q); assign q = clk & clk | d; endmodule", "correct_code": "module logic_123(input clk, clk, output q); assign q = (clk & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.166909", "id": 39792}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.027348", "id": 14345}
{"buggy_code": "module demo_931(input in, in, output result); assign result = in & in | en; endmodule", "correct_code": "module demo_931(input in, in, output result); assign result = (in & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.140505", "id": 34955}
{"buggy_code": "module test_274(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module test_274(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.194735", "id": 44845}
{"buggy_code": "module logic_677(input clk, in, output valid); assign valid = clk & in | b; endmodule", "correct_code": "module logic_677(input clk, in, output valid); assign valid = (clk & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.973604", "id": 4652}
{"buggy_code": "module logic_868(input x, in, output valid); assign valid = x & in | rst; endmodule", "correct_code": "module logic_868(input x, in, output valid); assign valid = (x & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.236901", "id": 52532}
{"buggy_code": "module simple_781(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module simple_781(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.018289", "id": 12720}
{"buggy_code": "module test_277(input b, output out); assign out = b + 1; endmodule", "correct_code": "module test_277(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.153854", "id": 37402}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.995081", "id": 8514}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.043631", "id": 17288}
{"buggy_code": "module logic_511(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module logic_511(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.263629", "id": 57417}
{"buggy_code": "module example_501(input x, in, output result); assign result = x & in | b; endmodule", "correct_code": "module example_501(input x, in, output result); assign result = (x & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.246459", "id": 54289}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.960411", "id": 2253}
{"buggy_code": "module example_10(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module example_10(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.949660", "id": 308}
{"buggy_code": "module basic_877(input y, output result); assign result = y + 1; endmodule", "correct_code": "module basic_877(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.132208", "id": 33428}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.307472", "id": 65427}
{"buggy_code": "module example_913(input in, en, output prod); assign prod = in & en | y; endmodule", "correct_code": "module example_913(input in, en, output prod); assign prod = (in & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.318897", "id": 67517}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.072247", "id": 22505}
{"buggy_code": "module arith_128(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module arith_128(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.073001", "id": 22645}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.143311", "id": 35458}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.357778", "id": 74561}
{"buggy_code": "module simple_422(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module simple_422(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.100286", "id": 27591}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.343671", "id": 71993}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.204193", "id": 46571}
{"buggy_code": "module test_966(input rst, b, output valid); assign valid = rst & b | b; endmodule", "correct_code": "module test_966(input rst, b, output valid); assign valid = (rst & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.059806", "id": 20222}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.307363", "id": 65406}
{"buggy_code": "module example_975(input y, clk, output q); assign q = y & clk | rst; endmodule", "correct_code": "module example_975(input y, clk, output q); assign q = (y & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.339494", "id": 71239}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.260098", "id": 56773}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.198042", "id": 45444}
{"buggy_code": "module example_431(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module example_431(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.981556", "id": 6041}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.174640", "id": 41204}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.320704", "id": 67817}
{"buggy_code": "module basic_839(input c, output q); assign q = c + 1; endmodule", "correct_code": "module basic_839(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.096688", "id": 26932}
{"buggy_code": "module example_38(input en, en, output valid); assign valid = en & en | rst; endmodule", "correct_code": "module example_38(input en, en, output valid); assign valid = (en & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.093961", "id": 26434}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.954752", "id": 1231}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.044233", "id": 17398}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.347070", "id": 72607}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.197631", "id": 45373}
{"buggy_code": "module arith_166(input b, c, output sum); assign sum = b & c | d; endmodule", "correct_code": "module arith_166(input b, c, output sum); assign sum = (b & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.170917", "id": 40524}
{"buggy_code": "module demo_634(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module demo_634(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174851", "id": 41242}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.228304", "id": 50955}
{"buggy_code": "module basic_763(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module basic_763(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.300417", "id": 64123}
{"buggy_code": "module example_131(input in, x, output valid); assign valid = in & x | d; endmodule", "correct_code": "module example_131(input in, x, output valid); assign valid = (in & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.069010", "id": 21907}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.955424", "id": 1349}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.354354", "id": 73929}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.239554", "id": 53025}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.189786", "id": 43932}
{"buggy_code": "module simple_552(input x, in, output out); assign out = x & in | a; endmodule", "correct_code": "module simple_552(input x, in, output out); assign out = (x & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.355947", "id": 74223}
{"buggy_code": "module basic_27(input d, rst, output prod); assign prod = d & rst | d; endmodule", "correct_code": "module basic_27(input d, rst, output prod); assign prod = (d & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.326918", "id": 68953}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.227056", "id": 50728}
{"buggy_code": "module test_99(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module test_99(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.959056", "id": 2007}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.007760", "id": 10808}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.199174", "id": 45651}
{"buggy_code": "module basic_803(input c, output y); assign y = c + 1; endmodule", "correct_code": "module basic_803(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.961221", "id": 2402}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.189278", "id": 43876}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.077855", "id": 23505}
{"buggy_code": "module logic_167(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module logic_167(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.983872", "id": 6461}
{"buggy_code": "module logic_861(input x, output q); assign q = x + 1; endmodule", "correct_code": "module logic_861(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.254839", "id": 55807}
{"buggy_code": "module example_740(input in, in, output y); assign y = in & in | c; endmodule", "correct_code": "module example_740(input in, in, output y); assign y = (in & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.322516", "id": 68148}
{"buggy_code": "module basic_119(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module basic_119(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.089520", "id": 25627}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.118540", "id": 30940}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.950566", "id": 473}
{"buggy_code": "module logic_543(input y, output result); assign result = y + 1; endmodule", "correct_code": "module logic_543(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.350186", "id": 73174}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.329899", "id": 69501}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064503", "id": 21087}
{"buggy_code": "module simple_108(input d, b, output sum); assign sum = d & b | data; endmodule", "correct_code": "module simple_108(input d, b, output sum); assign sum = (d & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.084634", "id": 24734}
{"buggy_code": "module demo_404(input d, y, output valid); assign valid = d & y | data; endmodule", "correct_code": "module demo_404(input d, y, output valid); assign valid = (d & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.276428", "id": 59733}
{"buggy_code": "module example_824(input clk, x, output out); assign out = clk & x | c; endmodule", "correct_code": "module example_824(input clk, x, output out); assign out = (clk & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116856", "id": 30629}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.318608", "id": 67466}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.985457", "id": 6751}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.343101", "id": 71889}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.289335", "id": 62095}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.042471", "id": 17079}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.975301", "id": 4960}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.035987", "id": 15909}
{"buggy_code": "module simple_29(input b, clk, output y); assign y = b & clk | d; endmodule", "correct_code": "module simple_29(input b, clk, output y); assign y = (b & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.084870", "id": 24778}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.352687", "id": 73630}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.163780", "id": 39223}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.013196", "id": 11792}
{"buggy_code": "module example_127(input a, c, output q); assign q = a & c | c; endmodule", "correct_code": "module example_127(input a, c, output q); assign q = (a & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.989724", "id": 7535}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.218477", "id": 49175}
{"buggy_code": "module basic_162(input c, b, output out); assign out = c & b | c; endmodule", "correct_code": "module basic_162(input c, b, output out); assign out = (c & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.204403", "id": 46609}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.001812", "id": 9739}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.200935", "id": 45975}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.235896", "id": 52350}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.261868", "id": 57097}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.161220", "id": 38756}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.089552", "id": 25633}
{"buggy_code": "module demo_942(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module demo_942(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.959341", "id": 2060}
{"buggy_code": "module basic_19(input clk, y, output out); assign out = clk & y | clk; endmodule", "correct_code": "module basic_19(input clk, y, output out); assign out = (clk & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.348466", "id": 72865}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.204206", "id": 46574}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.266186", "id": 57883}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008426", "id": 10929}
{"buggy_code": "module logic_93(input a, c, output result); assign result = a & c | rst; endmodule", "correct_code": "module logic_93(input a, c, output result); assign result = (a & c) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.168522", "id": 40090}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.064616", "id": 21109}
{"buggy_code": "module basic_164(input rst, c, output out); assign out = rst & c | b; endmodule", "correct_code": "module basic_164(input rst, c, output out); assign out = (rst & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.091496", "id": 25993}
{"buggy_code": "module example_15(input en, d, output result); assign result = en & d | x; endmodule", "correct_code": "module example_15(input en, d, output result); assign result = (en & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.108133", "id": 29027}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.219117", "id": 49294}
{"buggy_code": "module logic_493(input data, x, output valid); assign valid = data & x | a; endmodule", "correct_code": "module logic_493(input data, x, output valid); assign valid = (data & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.271968", "id": 58942}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.079464", "id": 23801}
{"buggy_code": "module test_144(input en, rst, output sum); assign sum = en & rst | c; endmodule", "correct_code": "module test_144(input en, rst, output sum); assign sum = (en & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.070837", "id": 22247}
{"buggy_code": "module basic_115(input clk, y, output sum); assign sum = clk & y | rst; endmodule", "correct_code": "module basic_115(input clk, y, output sum); assign sum = (clk & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.169839", "id": 40327}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.231114", "id": 51474}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.269213", "id": 58437}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.016676", "id": 12426}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.964623", "id": 3022}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182705", "id": 42678}
{"buggy_code": "module simple_280(input data, b, output prod); assign prod = data & b | c; endmodule", "correct_code": "module simple_280(input data, b, output prod); assign prod = (data & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.190856", "id": 44125}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.094348", "id": 26506}
{"buggy_code": "module basic_802(input data, output q); assign q = data + 1; endmodule", "correct_code": "module basic_802(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.237859", "id": 52710}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.212040", "id": 48001}
{"buggy_code": "module basic_531(input x, d, output sum); assign sum = x & d | d; endmodule", "correct_code": "module basic_531(input x, d, output sum); assign sum = (x & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.245572", "id": 54129}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.140669", "id": 34986}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.066716", "id": 21490}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.274710", "id": 59437}
{"buggy_code": "module demo_978(input y, output y); assign y = y + 1; endmodule", "correct_code": "module demo_978(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.104071", "id": 28281}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.144004", "id": 35584}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.358724", "id": 74734}
{"buggy_code": "module logic_709(input in, data, output q); assign q = in & data | data; endmodule", "correct_code": "module logic_709(input in, data, output q); assign q = (in & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.332407", "id": 69959}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.035180", "id": 15763}
{"buggy_code": "module example_483(input in, c, output y); assign y = in & c | a; endmodule", "correct_code": "module example_483(input in, c, output y); assign y = (in & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.236003", "id": 52369}
{"buggy_code": "module test_787(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module test_787(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.156009", "id": 37796}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.070021", "id": 22095}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.996368", "id": 8749}
{"buggy_code": "module logic_175(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module logic_175(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.070598", "id": 22203}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.314098", "id": 66636}
{"buggy_code": "module example_313(input c, output q); assign q = c + 1; endmodule", "correct_code": "module example_313(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.229662", "id": 51202}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.318680", "id": 67479}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.096848", "id": 26960}
{"buggy_code": "module arith_500(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module arith_500(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.342000", "id": 71689}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.163728", "id": 39213}
{"buggy_code": "module basic_688(input data, data, output valid); assign valid = data & data | data; endmodule", "correct_code": "module basic_688(input data, data, output valid); assign valid = (data & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.356885", "id": 74394}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.005461", "id": 10391}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.144913", "id": 35754}
{"buggy_code": "module demo_821(input b, output y); assign y = b + 1; endmodule", "correct_code": "module demo_821(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.291746", "id": 62538}
{"buggy_code": "module logic_109(input c, x, output result); assign result = c & x | x; endmodule", "correct_code": "module logic_109(input c, x, output result); assign result = (c & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.342134", "id": 71714}
{"buggy_code": "module simple_730(input b, clk, output y); assign y = b & clk | in; endmodule", "correct_code": "module simple_730(input b, clk, output y); assign y = (b & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.976957", "id": 5261}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.314024", "id": 66621}
{"buggy_code": "module basic_112(input a, in, output prod); assign prod = a & in | b; endmodule", "correct_code": "module basic_112(input a, in, output prod); assign prod = (a & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.217874", "id": 49066}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.967044", "id": 3464}
{"buggy_code": "module basic_779(input clk, c, output prod); assign prod = clk & c | en; endmodule", "correct_code": "module basic_779(input clk, c, output prod); assign prod = (clk & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.178410", "id": 41898}
{"buggy_code": "module demo_422(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module demo_422(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.989889", "id": 7564}
{"buggy_code": "module simple_98(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module simple_98(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.173525", "id": 41003}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.298075", "id": 63692}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.156791", "id": 37943}
{"buggy_code": "module logic_787(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module logic_787(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.176152", "id": 41482}
{"buggy_code": "module arith_52(input in, a, output out); assign out = in & a | a; endmodule", "correct_code": "module arith_52(input in, a, output out); assign out = (in & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.359869", "id": 74946}
{"buggy_code": "module logic_811(input y, data, output out); assign out = y & data | a; endmodule", "correct_code": "module logic_811(input y, data, output out); assign out = (y & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.984134", "id": 6510}
{"buggy_code": "module test_359(input clk, x, output out); assign out = clk & x | b; endmodule", "correct_code": "module test_359(input clk, x, output out); assign out = (clk & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.011570", "id": 11502}
{"buggy_code": "module demo_124(input c, data, output y); assign y = c & data | d; endmodule", "correct_code": "module demo_124(input c, data, output y); assign y = (c & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.285564", "id": 61405}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.216660", "id": 48842}
{"buggy_code": "module basic_594(input en, output result); assign result = en + 1; endmodule", "correct_code": "module basic_594(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.223759", "id": 50130}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.237917", "id": 52722}
{"buggy_code": "module basic_886(input a, output q); assign q = a + 1; endmodule", "correct_code": "module basic_886(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.350652", "id": 73258}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.985035", "id": 6673}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.247335", "id": 54448}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.070579", "id": 22199}
{"buggy_code": "module logic_741(input clk, clk, output valid); assign valid = clk & clk | in; endmodule", "correct_code": "module logic_741(input clk, clk, output valid); assign valid = (clk & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.016133", "id": 12326}
{"buggy_code": "module arith_908(input c, en, output valid); assign valid = c & en | rst; endmodule", "correct_code": "module arith_908(input c, en, output valid); assign valid = (c & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.954320", "id": 1150}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.057264", "id": 19757}
{"buggy_code": "module logic_339(input x, data, output result); assign result = x & data | en; endmodule", "correct_code": "module logic_339(input x, data, output result); assign result = (x & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.222187", "id": 49839}
{"buggy_code": "module test_692(input y, a, output q); assign q = y & a | a; endmodule", "correct_code": "module test_692(input y, a, output q); assign q = (y & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.214241", "id": 48401}
{"buggy_code": "module demo_987(input rst, clk, output out); assign out = rst & clk | x; endmodule", "correct_code": "module demo_987(input rst, clk, output out); assign out = (rst & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.198428", "id": 45517}
{"buggy_code": "module arith_288(input c, b, output q); assign q = c & b | d; endmodule", "correct_code": "module arith_288(input c, b, output q); assign q = (c & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.332585", "id": 69991}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179160", "id": 42038}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.233923", "id": 51989}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.258580", "id": 56496}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.272555", "id": 59051}
{"buggy_code": "module simple_619(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module simple_619(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.323830", "id": 68388}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.312467", "id": 66341}
{"buggy_code": "module demo_350(input y, c, output q); assign q = y & c | in; endmodule", "correct_code": "module demo_350(input y, c, output q); assign q = (y & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.057471", "id": 19794}
{"buggy_code": "module demo_703(input a, en, output prod); assign prod = a & en | y; endmodule", "correct_code": "module demo_703(input a, en, output prod); assign prod = (a & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.964186", "id": 2940}
{"buggy_code": "module arith_180(input en, output out); assign out = en + 1; endmodule", "correct_code": "module arith_180(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.248071", "id": 54581}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.969390", "id": 3888}
{"buggy_code": "module example_357(input c, clk, output out); assign out = c & clk | clk; endmodule", "correct_code": "module example_357(input c, clk, output out); assign out = (c & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.330679", "id": 69646}
{"buggy_code": "module logic_336(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module logic_336(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.106922", "id": 28803}
{"buggy_code": "module example_442(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module example_442(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.213058", "id": 48186}
{"buggy_code": "module logic_327(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module logic_327(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.141928", "id": 35197}
{"buggy_code": "module test_39(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module test_39(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.080418", "id": 23976}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.310653", "id": 66010}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043498", "id": 17265}
{"buggy_code": "module test_27(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module test_27(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.196231", "id": 45117}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.073664", "id": 22770}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.198563", "id": 45543}
{"buggy_code": "module logic_195(input en, d, output q); assign q = en & d | d; endmodule", "correct_code": "module logic_195(input en, d, output q); assign q = (en & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.056081", "id": 19535}
{"buggy_code": "module test_915(input y, in, output q); assign q = y & in | y; endmodule", "correct_code": "module test_915(input y, in, output q); assign q = (y & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.258283", "id": 56442}
{"buggy_code": "module logic_73(input data, output result); assign result = data + 1; endmodule", "correct_code": "module logic_73(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.080724", "id": 24032}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.191676", "id": 44281}
{"buggy_code": "module demo_184(input x, a, output sum); assign sum = x & a | y; endmodule", "correct_code": "module demo_184(input x, a, output sum); assign sum = (x & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.334647", "id": 70368}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.107835", "id": 28971}
{"buggy_code": "module example_41(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module example_41(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.030311", "id": 14883}
{"buggy_code": "module logic_469(input d, en, output prod); assign prod = d & en | c; endmodule", "correct_code": "module logic_469(input d, en, output prod); assign prod = (d & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.357113", "id": 74437}
{"buggy_code": "module demo_351(input c, a, output valid); assign valid = c & a | d; endmodule", "correct_code": "module demo_351(input c, a, output valid); assign valid = (c & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.310296", "id": 65944}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.275734", "id": 59615}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.144069", "id": 35595}
{"buggy_code": "module example_780(input a, output y); assign y = a + 1; endmodule", "correct_code": "module example_780(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.034442", "id": 15627}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.275261", "id": 59525}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.081668", "id": 24204}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286294", "id": 61541}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.998683", "id": 9170}
{"buggy_code": "module test_321(input data, output result); assign result = data + 1; endmodule", "correct_code": "module test_321(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.303376", "id": 64663}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.111507", "id": 29649}
{"buggy_code": "module demo_968(input a, d, output valid); assign valid = a & d | a; endmodule", "correct_code": "module demo_968(input a, d, output valid); assign valid = (a & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.260253", "id": 56801}
{"buggy_code": "module arith_677(input rst, en, output sum); assign sum = rst & en | data; endmodule", "correct_code": "module arith_677(input rst, en, output sum); assign sum = (rst & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.117819", "id": 30808}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.285157", "id": 61331}
{"buggy_code": "module logic_642(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module logic_642(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.258321", "id": 56449}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.263323", "id": 57361}
{"buggy_code": "module example_747(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module example_747(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.126890", "id": 32457}
{"buggy_code": "module basic_43(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module basic_43(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.282556", "id": 60858}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.256412", "id": 56096}
{"buggy_code": "module demo_639(input d, output y); assign y = d + 1; endmodule", "correct_code": "module demo_639(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.160514", "id": 38628}
{"buggy_code": "module example_691(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module example_691(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.293805", "id": 62913}
{"buggy_code": "module test_245(input in, a, output valid); assign valid = in & a | en; endmodule", "correct_code": "module test_245(input in, a, output valid); assign valid = (in & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.229859", "id": 51238}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.193648", "id": 44644}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.266263", "id": 57898}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.125514", "id": 32205}
{"buggy_code": "module simple_948(input d, output out); assign out = d + 1; endmodule", "correct_code": "module simple_948(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.299803", "id": 64010}
{"buggy_code": "module arith_289(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module arith_289(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.339160", "id": 71177}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.065841", "id": 21331}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.104119", "id": 28291}
{"buggy_code": "module logic_559(input in, output y); assign y = in + 1; endmodule", "correct_code": "module logic_559(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.177614", "id": 41753}
{"buggy_code": "module test_867(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module test_867(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.358329", "id": 74663}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.303412", "id": 64670}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.349345", "id": 73022}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.319516", "id": 67631}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.029814", "id": 14793}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.355694", "id": 74179}
{"buggy_code": "module test_4(input y, c, output out); assign out = y & c | x; endmodule", "correct_code": "module test_4(input y, c, output out); assign out = (y & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.018776", "id": 12808}
{"buggy_code": "module example_364(input data, b, output valid); assign valid = data & b | en; endmodule", "correct_code": "module example_364(input data, b, output valid); assign valid = (data & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.026051", "id": 14117}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.068600", "id": 21831}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.098219", "id": 27211}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.129034", "id": 32844}
{"buggy_code": "module basic_848(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module basic_848(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.309456", "id": 65791}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.088596", "id": 25458}
{"buggy_code": "module basic_308(input d, output out); assign out = d + 1; endmodule", "correct_code": "module basic_308(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.214247", "id": 48402}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.222517", "id": 49898}
{"buggy_code": "module logic_396(input a, y, output out); assign out = a & y | b; endmodule", "correct_code": "module logic_396(input a, y, output out); assign out = (a & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.103155", "id": 28114}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.137176", "id": 34339}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.223228", "id": 50029}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.057084", "id": 19723}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.092738", "id": 26214}
{"buggy_code": "module test_562(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module test_562(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.282962", "id": 60931}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.177508", "id": 41734}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.292292", "id": 62639}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.024617", "id": 13855}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.338201", "id": 71021}
{"buggy_code": "module logic_894(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module logic_894(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.333204", "id": 70108}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.079046", "id": 23722}
{"buggy_code": "module simple_527(input en, output q); assign q = en + 1; endmodule", "correct_code": "module simple_527(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.282159", "id": 60785}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.063970", "id": 20987}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.253596", "id": 55585}
{"buggy_code": "module simple_625(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module simple_625(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.017237", "id": 12527}
{"buggy_code": "module logic_148(input en, output q); assign q = en + 1; endmodule", "correct_code": "module logic_148(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.992531", "id": 8051}
{"buggy_code": "module arith_51(input data, y, output prod); assign prod = data & y | rst; endmodule", "correct_code": "module arith_51(input data, y, output prod); assign prod = (data & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.015539", "id": 12219}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.153599", "id": 37356}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.216230", "id": 48763}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.168638", "id": 40111}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.163581", "id": 39186}
{"buggy_code": "module simple_128(input en, output out); assign out = en + 1; endmodule", "correct_code": "module simple_128(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.293343", "id": 62829}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.250237", "id": 54978}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.075310", "id": 23074}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.271642", "id": 58884}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.271928", "id": 58935}
{"buggy_code": "module test_947(input a, output out); assign out = a + 1; endmodule", "correct_code": "module test_947(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.108240", "id": 29047}
{"buggy_code": "module simple_618(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module simple_618(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.047690", "id": 18025}
{"buggy_code": "module logic_146(input d, output q); assign q = d + 1; endmodule", "correct_code": "module logic_146(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.355084", "id": 74064}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.027317", "id": 14339}
{"buggy_code": "module simple_170(input d, d, output out); assign out = d & d | clk; endmodule", "correct_code": "module simple_170(input d, d, output out); assign out = (d & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.025627", "id": 14040}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.124136", "id": 31953}
{"buggy_code": "module basic_666(input rst, data, output y); assign y = rst & data | x; endmodule", "correct_code": "module basic_666(input rst, data, output y); assign y = (rst & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.268060", "id": 58224}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.152690", "id": 37187}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.194758", "id": 44849}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.136447", "id": 34205}
{"buggy_code": "module logic_345(input y, output y); assign y = y + 1; endmodule", "correct_code": "module logic_345(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.351858", "id": 73476}
{"buggy_code": "module example_153(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module example_153(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.171799", "id": 40688}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.230265", "id": 51314}
{"buggy_code": "module demo_436(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module demo_436(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.043002", "id": 17177}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.319071", "id": 67550}
{"buggy_code": "module example_85(input y, d, output q); assign q = y & d | d; endmodule", "correct_code": "module example_85(input y, d, output q); assign q = (y & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.045576", "id": 17640}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.310731", "id": 66025}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.276379", "id": 59725}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.343290", "id": 71922}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.314428", "id": 66697}
{"buggy_code": "module basic_570(input en, x, output q); assign q = en & x | c; endmodule", "correct_code": "module basic_570(input en, x, output q); assign q = (en & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.149766", "id": 36647}
{"buggy_code": "module demo_481(input b, output out); assign out = b + 1; endmodule", "correct_code": "module demo_481(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.956032", "id": 1458}
{"buggy_code": "module demo_476(input en, d, output q); assign q = en & d | in; endmodule", "correct_code": "module demo_476(input en, d, output q); assign q = (en & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.226081", "id": 50551}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.141080", "id": 35060}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.276458", "id": 59739}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138679", "id": 34620}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.227798", "id": 50864}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.269490", "id": 58489}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.271680", "id": 58890}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.139045", "id": 34686}
{"buggy_code": "module example_816(input y, d, output result); assign result = y & d | in; endmodule", "correct_code": "module example_816(input y, d, output result); assign result = (y & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.093227", "id": 26301}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.349340", "id": 73021}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.312786", "id": 66399}
{"buggy_code": "module simple_7(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module simple_7(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.015565", "id": 12224}
{"buggy_code": "module test_154(input d, in, output q); assign q = d & in | c; endmodule", "correct_code": "module test_154(input d, in, output q); assign q = (d & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.235997", "id": 52368}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.179350", "id": 42074}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.355331", "id": 74111}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.988236", "id": 7259}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.142663", "id": 35336}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.154492", "id": 37521}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.288683", "id": 61975}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138362", "id": 34560}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.329034", "id": 69342}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.353751", "id": 73821}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.001864", "id": 9748}
{"buggy_code": "module simple_24(input x, en, output valid); assign valid = x & en | y; endmodule", "correct_code": "module simple_24(input x, en, output valid); assign valid = (x & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.990316", "id": 7643}
{"buggy_code": "module test_254(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module test_254(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.265856", "id": 57825}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.060910", "id": 20424}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.197291", "id": 45309}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.298361", "id": 63746}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.172960", "id": 40897}
{"buggy_code": "module basic_22(input x, output out); assign out = x + 1; endmodule", "correct_code": "module basic_22(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.968919", "id": 3804}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.196165", "id": 45104}
{"buggy_code": "module example_684(input en, rst, output sum); assign sum = en & rst | a; endmodule", "correct_code": "module example_684(input en, rst, output sum); assign sum = (en & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.241771", "id": 53431}
{"buggy_code": "module arith_358(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module arith_358(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.360017", "id": 74973}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.987512", "id": 7129}
{"buggy_code": "module simple_123(input b, output q); assign q = b + 1; endmodule", "correct_code": "module simple_123(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.045620", "id": 17647}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.154407", "id": 37505}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182405", "id": 42623}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.142796", "id": 35362}
{"buggy_code": "module demo_610(input data, en, output q); assign q = data & en | a; endmodule", "correct_code": "module demo_610(input data, en, output q); assign q = (data & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.190398", "id": 44044}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.215966", "id": 48716}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.949458", "id": 270}
{"buggy_code": "module demo_921(input data, output q); assign q = data + 1; endmodule", "correct_code": "module demo_921(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000578", "id": 9513}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.350587", "id": 73246}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.285924", "id": 61472}
{"buggy_code": "module demo_801(input en, d, output valid); assign valid = en & d | a; endmodule", "correct_code": "module demo_801(input en, d, output valid); assign valid = (en & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.310042", "id": 65897}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.984082", "id": 6501}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.229482", "id": 51169}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.321289", "id": 67922}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.281632", "id": 60688}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.264048", "id": 57493}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.995654", "id": 8618}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.004680", "id": 10247}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.220853", "id": 49594}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.352708", "id": 73634}
{"buggy_code": "module simple_499(input in, d, output prod); assign prod = in & d | rst; endmodule", "correct_code": "module simple_499(input in, d, output prod); assign prod = (in & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.132623", "id": 33503}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.104032", "id": 28274}
{"buggy_code": "module example_224(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module example_224(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.111392", "id": 29627}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.169694", "id": 40302}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.198888", "id": 45600}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.144725", "id": 35721}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.347586", "id": 72701}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.228299", "id": 50954}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.262211", "id": 57159}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.027951", "id": 14456}
{"buggy_code": "module arith_509(input b, x, output prod); assign prod = b & x | a; endmodule", "correct_code": "module arith_509(input b, x, output prod); assign prod = (b & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.278584", "id": 60127}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.026450", "id": 14187}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.235949", "id": 52359}
{"buggy_code": "module example_842(input a, output out); assign out = a + 1; endmodule", "correct_code": "module example_842(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.028845", "id": 14615}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.247937", "id": 54557}
{"buggy_code": "module simple_730(input y, x, output out); assign out = y & x | d; endmodule", "correct_code": "module simple_730(input y, x, output out); assign out = (y & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.954908", "id": 1254}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.277025", "id": 59837}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.167556", "id": 39913}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.158782", "id": 38308}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.282617", "id": 60870}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.260301", "id": 56810}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.134773", "id": 33901}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.218106", "id": 49109}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.355458", "id": 74135}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.155690", "id": 37738}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.020545", "id": 13117}
{"buggy_code": "module example_836(input c, c, output y); assign y = c & c | in; endmodule", "correct_code": "module example_836(input c, c, output y); assign y = (c & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.215450", "id": 48620}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.068616", "id": 21834}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.080635", "id": 24017}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.971353", "id": 4245}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.215578", "id": 48645}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.318579", "id": 67460}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.026304", "id": 14160}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.142312", "id": 35271}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.101392", "id": 27794}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.277522", "id": 59929}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.267757", "id": 58169}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.089797", "id": 25679}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.296227", "id": 63356}
{"buggy_code": "module demo_651(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module demo_651(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.143230", "id": 35442}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.323462", "id": 68321}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.995035", "id": 8506}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.061295", "id": 20497}
{"buggy_code": "module arith_670(input a, rst, output prod); assign prod = a & rst | data; endmodule", "correct_code": "module arith_670(input a, rst, output prod); assign prod = (a & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.302651", "id": 64531}
{"buggy_code": "module simple_779(input data, output y); assign y = data + 1; endmodule", "correct_code": "module simple_779(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.243310", "id": 53710}
{"buggy_code": "module demo_40(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module demo_40(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.340018", "id": 71332}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.004064", "id": 10134}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.114511", "id": 30203}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.217535", "id": 49005}
{"buggy_code": "module demo_785(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module demo_785(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.331098", "id": 69722}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.061505", "id": 20536}
{"buggy_code": "module basic_803(input c, output out); assign out = c + 1; endmodule", "correct_code": "module basic_803(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.060974", "id": 20436}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.981189", "id": 5974}
{"buggy_code": "module logic_151(input in, output out); assign out = in + 1; endmodule", "correct_code": "module logic_151(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174698", "id": 41215}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.981155", "id": 5967}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.309031", "id": 65713}
{"buggy_code": "module test_157(input a, output y); assign y = a + 1; endmodule", "correct_code": "module test_157(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.300634", "id": 64162}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.041314", "id": 16871}
{"buggy_code": "module basic_934(input c, y, output y); assign y = c & y | d; endmodule", "correct_code": "module basic_934(input c, y, output y); assign y = (c & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.063800", "id": 20958}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.953727", "id": 1044}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.289432", "id": 62113}
{"buggy_code": "module logic_918(input data, y, output sum); assign sum = data & y | data; endmodule", "correct_code": "module logic_918(input data, y, output sum); assign sum = (data & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.157817", "id": 38129}
{"buggy_code": "module test_423(input c, output q); assign q = c + 1; endmodule", "correct_code": "module test_423(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.956508", "id": 1544}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.054153", "id": 19178}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.013609", "id": 11868}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.219220", "id": 49313}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.278027", "id": 60022}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.952458", "id": 816}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.105083", "id": 28463}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.074722", "id": 22967}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.056075", "id": 19534}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.300259", "id": 64094}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.167410", "id": 39886}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.266280", "id": 57901}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.229852", "id": 51237}
{"buggy_code": "module basic_754(input rst, a, output sum); assign sum = rst & a | rst; endmodule", "correct_code": "module basic_754(input rst, a, output sum); assign sum = (rst & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.998269", "id": 9095}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.335376", "id": 70502}
{"buggy_code": "module arith_68(input b, a, output out); assign out = b & a | in; endmodule", "correct_code": "module arith_68(input b, a, output out); assign out = (b & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.128040", "id": 32664}
{"buggy_code": "module arith_411(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module arith_411(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.143638", "id": 35519}
{"buggy_code": "module test_144(input a, c, output valid); assign valid = a & c | b; endmodule", "correct_code": "module test_144(input a, c, output valid); assign valid = (a & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.116927", "id": 30641}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.178800", "id": 41972}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.966900", "id": 3436}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.078469", "id": 23618}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.175016", "id": 41274}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.342836", "id": 71840}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.079019", "id": 23717}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.016631", "id": 12418}
{"buggy_code": "module example_833(input c, b, output prod); assign prod = c & b | b; endmodule", "correct_code": "module example_833(input c, b, output prod); assign prod = (c & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.290659", "id": 62337}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.954095", "id": 1108}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.143402", "id": 35475}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.188998", "id": 43824}
{"buggy_code": "module demo_514(input x, in, output prod); assign prod = x & in | b; endmodule", "correct_code": "module demo_514(input x, in, output prod); assign prod = (x & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.046252", "id": 17763}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.979397", "id": 5657}
{"buggy_code": "module simple_111(input d, output y); assign y = d + 1; endmodule", "correct_code": "module simple_111(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.035895", "id": 15892}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.971445", "id": 4262}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.958480", "id": 1903}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.156605", "id": 37908}
{"buggy_code": "module test_382(input a, a, output q); assign q = a & a | en; endmodule", "correct_code": "module test_382(input a, a, output q); assign q = (a & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.003982", "id": 10118}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.333797", "id": 70216}
{"buggy_code": "module arith_419(input in, a, output out); assign out = in & a | clk; endmodule", "correct_code": "module arith_419(input in, a, output out); assign out = (in & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.258113", "id": 56410}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.030183", "id": 14859}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.334773", "id": 70392}
{"buggy_code": "module test_913(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module test_913(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.189906", "id": 43953}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.230599", "id": 51379}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138895", "id": 34659}
{"buggy_code": "module demo_882(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module demo_882(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.126961", "id": 32470}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.223898", "id": 50152}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.144812", "id": 35737}
{"buggy_code": "module basic_171(input b, in, output valid); assign valid = b & in | rst; endmodule", "correct_code": "module basic_171(input b, in, output valid); assign valid = (b & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.128398", "id": 32730}
{"buggy_code": "module logic_388(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module logic_388(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.099758", "id": 27493}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.343762", "id": 72010}
{"buggy_code": "module test_25(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module test_25(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.949802", "id": 335}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.215691", "id": 48667}
{"buggy_code": "module arith_93(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module arith_93(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.295152", "id": 63157}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.332113", "id": 69905}
{"buggy_code": "module basic_92(input data, output y); assign y = data + 1; endmodule", "correct_code": "module basic_92(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.341757", "id": 71645}
{"buggy_code": "module basic_397(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module basic_397(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.214284", "id": 48409}
{"buggy_code": "module demo_572(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module demo_572(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.044062", "id": 17367}
{"buggy_code": "module arith_656(input b, output y); assign y = b + 1; endmodule", "correct_code": "module arith_656(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.999588", "id": 9335}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.305598", "id": 65078}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.201036", "id": 45993}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.338670", "id": 71108}
{"buggy_code": "module simple_635(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module simple_635(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.321725", "id": 68004}
{"buggy_code": "module simple_70(input x, d, output y); assign y = x & d | rst; endmodule", "correct_code": "module simple_70(input x, d, output y); assign y = (x & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.024607", "id": 13853}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.345626", "id": 72342}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.007681", "id": 10793}
{"buggy_code": "module demo_726(input a, output q); assign q = a + 1; endmodule", "correct_code": "module demo_726(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.275793", "id": 59626}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.358425", "id": 74681}
{"buggy_code": "module basic_521(input b, rst, output valid); assign valid = b & rst | en; endmodule", "correct_code": "module basic_521(input b, rst, output valid); assign valid = (b & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.978889", "id": 5563}
{"buggy_code": "module demo_57(input en, y, output q); assign q = en & y | d; endmodule", "correct_code": "module demo_57(input en, y, output q); assign q = (en & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.156920", "id": 37965}
{"buggy_code": "module test_452(input a, rst, output result); assign result = a & rst | y; endmodule", "correct_code": "module test_452(input a, rst, output result); assign result = (a & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.213078", "id": 48189}
{"buggy_code": "module logic_77(input in, output q); assign q = in + 1; endmodule", "correct_code": "module logic_77(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.185626", "id": 43211}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.023783", "id": 13706}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.038233", "id": 16318}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.202515", "id": 46263}
{"buggy_code": "module logic_508(input x, output y); assign y = x + 1; endmodule", "correct_code": "module logic_508(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.990586", "id": 7695}
{"buggy_code": "module simple_50(input x, rst, output sum); assign sum = x & rst | in; endmodule", "correct_code": "module simple_50(input x, rst, output sum); assign sum = (x & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.952305", "id": 786}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.989799", "id": 7549}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.101199", "id": 27758}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.351667", "id": 73442}
{"buggy_code": "module arith_795(input b, data, output q); assign q = b & data | data; endmodule", "correct_code": "module arith_795(input b, data, output q); assign q = (b & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.196316", "id": 45132}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.072210", "id": 22498}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.253539", "id": 55575}
{"buggy_code": "module simple_775(input data, data, output valid); assign valid = data & data | x; endmodule", "correct_code": "module simple_775(input data, data, output valid); assign valid = (data & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.127306", "id": 32532}
{"buggy_code": "module test_463(input data, d, output y); assign y = data & d | in; endmodule", "correct_code": "module test_463(input data, d, output y); assign y = (data & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.194961", "id": 44885}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.284887", "id": 61283}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.347623", "id": 72707}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.220730", "id": 49574}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.312144", "id": 66283}
{"buggy_code": "module demo_464(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module demo_464(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.309087", "id": 65723}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.344231", "id": 72095}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.346711", "id": 72542}
{"buggy_code": "module test_979(input in, output q); assign q = in + 1; endmodule", "correct_code": "module test_979(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.121450", "id": 31461}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.238873", "id": 52899}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.970648", "id": 4115}
{"buggy_code": "module basic_931(input a, en, output out); assign out = a & en | rst; endmodule", "correct_code": "module basic_931(input a, en, output out); assign out = (a & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.139212", "id": 34718}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.064787", "id": 21141}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.151840", "id": 37027}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.095026", "id": 26631}
{"buggy_code": "module arith_689(input y, clk, output q); assign q = y & clk | a; endmodule", "correct_code": "module arith_689(input y, clk, output q); assign q = (y & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.265725", "id": 57802}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.958156", "id": 1842}
{"buggy_code": "module demo_528(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module demo_528(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.954281", "id": 1143}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.233533", "id": 51916}
{"buggy_code": "module demo_55(input d, in, output y); assign y = d & in | c; endmodule", "correct_code": "module demo_55(input d, in, output y); assign y = (d & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.067381", "id": 21611}
{"buggy_code": "module arith_92(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module arith_92(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.200419", "id": 45881}
{"buggy_code": "module basic_139(input in, en, output result); assign result = in & en | y; endmodule", "correct_code": "module basic_139(input in, en, output result); assign result = (in & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.230504", "id": 51360}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.034198", "id": 15582}
{"buggy_code": "module basic_151(input rst, y, output valid); assign valid = rst & y | b; endmodule", "correct_code": "module basic_151(input rst, y, output valid); assign valid = (rst & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.005653", "id": 10427}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.122325", "id": 31620}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.331678", "id": 69826}
{"buggy_code": "module demo_102(input d, y, output prod); assign prod = d & y | c; endmodule", "correct_code": "module demo_102(input d, y, output prod); assign prod = (d & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.333840", "id": 70221}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.969293", "id": 3872}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.072457", "id": 22545}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.207997", "id": 47265}
{"buggy_code": "module example_774(input en, d, output result); assign result = en & d | rst; endmodule", "correct_code": "module example_774(input en, d, output result); assign result = (en & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.056874", "id": 19683}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.000783", "id": 9551}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.183575", "id": 42837}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.967377", "id": 3526}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.063837", "id": 20962}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.997398", "id": 8936}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.277518", "id": 59928}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.310960", "id": 66066}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.017837", "id": 12636}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.339566", "id": 71252}
{"buggy_code": "module logic_352(input a, en, output result); assign result = a & en | c; endmodule", "correct_code": "module logic_352(input a, en, output result); assign result = (a & en) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.252718", "id": 55429}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.016293", "id": 12355}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.094475", "id": 26530}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.236181", "id": 52400}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.294452", "id": 63031}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.206610", "id": 47013}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.252916", "id": 55464}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.226607", "id": 50646}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.294812", "id": 63096}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.090321", "id": 25775}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.167956", "id": 39986}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.112228", "id": 29780}
{"buggy_code": "module test_758(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module test_758(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.265995", "id": 57851}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.191294", "id": 44207}
{"buggy_code": "module test_220(input data, in, output out); assign out = data & in | a; endmodule", "correct_code": "module test_220(input data, in, output out); assign out = (data & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.156755", "id": 37936}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.344363", "id": 72119}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.096318", "id": 26867}
{"buggy_code": "module test_670(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module test_670(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.007977", "id": 10846}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.974585", "id": 4832}
{"buggy_code": "module test_698(input in, output y); assign y = in + 1; endmodule", "correct_code": "module test_698(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.357509", "id": 74511}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.149347", "id": 36568}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.109453", "id": 29270}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.969249", "id": 3864}
{"buggy_code": "module example_467(input a, data, output valid); assign valid = a & data | en; endmodule", "correct_code": "module example_467(input a, data, output valid); assign valid = (a & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.070493", "id": 22182}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.195513", "id": 44986}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.296218", "id": 63354}
{"buggy_code": "module basic_796(input en, data, output prod); assign prod = en & data | en; endmodule", "correct_code": "module basic_796(input en, data, output prod); assign prod = (en & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.290643", "id": 62334}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.178631", "id": 41940}
{"buggy_code": "module demo_654(input d, x, output valid); assign valid = d & x | x; endmodule", "correct_code": "module demo_654(input d, x, output valid); assign valid = (d & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.075789", "id": 23162}
{"buggy_code": "module logic_763(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module logic_763(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.971027", "id": 4185}
{"buggy_code": "module logic_1(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module logic_1(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.135527", "id": 34037}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.181232", "id": 42416}
{"buggy_code": "module logic_825(input in, output y); assign y = in + 1; endmodule", "correct_code": "module logic_825(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.331258", "id": 69750}
{"buggy_code": "module test_171(input in, output y); assign y = in + 1; endmodule", "correct_code": "module test_171(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.238987", "id": 52919}
{"buggy_code": "module example_345(input b, en, output prod); assign prod = b & en | clk; endmodule", "correct_code": "module example_345(input b, en, output prod); assign prod = (b & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.036282", "id": 15962}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.255139", "id": 55864}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.163917", "id": 39247}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.234620", "id": 52116}
{"buggy_code": "module example_880(input clk, y, output q); assign q = clk & y | c; endmodule", "correct_code": "module example_880(input clk, y, output q); assign q = (clk & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.101211", "id": 27760}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.333855", "id": 70224}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.021235", "id": 13240}
{"buggy_code": "module simple_549(input a, output q); assign q = a + 1; endmodule", "correct_code": "module simple_549(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.285379", "id": 61371}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.289532", "id": 62132}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.131348", "id": 33272}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.301001", "id": 64229}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.288180", "id": 61882}
{"buggy_code": "module example_403(input data, y, output prod); assign prod = data & y | data; endmodule", "correct_code": "module example_403(input data, y, output prod); assign prod = (data & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.036294", "id": 15964}
{"buggy_code": "module test_53(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module test_53(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.008106", "id": 10869}
{"buggy_code": "module arith_578(input y, output q); assign q = y + 1; endmodule", "correct_code": "module arith_578(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.246319", "id": 54264}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.159317", "id": 38406}
{"buggy_code": "module arith_831(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module arith_831(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.078386", "id": 23603}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.135481", "id": 34029}
{"buggy_code": "module example_961(input d, output q); assign q = d + 1; endmodule", "correct_code": "module example_961(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.976078", "id": 5100}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.191267", "id": 44202}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.337181", "id": 70834}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.979070", "id": 5598}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.233551", "id": 51920}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.034422", "id": 15623}
{"buggy_code": "module demo_899(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module demo_899(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.227707", "id": 50848}
{"buggy_code": "module basic_880(input b, clk, output q); assign q = b & clk | clk; endmodule", "correct_code": "module basic_880(input b, clk, output q); assign q = (b & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.131464", "id": 33295}
{"buggy_code": "module simple_521(input clk, b, output result); assign result = clk & b | rst; endmodule", "correct_code": "module simple_521(input clk, b, output result); assign result = (clk & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.146629", "id": 36069}
{"buggy_code": "module simple_560(input c, output y); assign y = c + 1; endmodule", "correct_code": "module simple_560(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.029378", "id": 14712}
{"buggy_code": "module basic_951(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module basic_951(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.263593", "id": 57410}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.228846", "id": 51052}
{"buggy_code": "module logic_271(input en, output y); assign y = en + 1; endmodule", "correct_code": "module logic_271(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.092473", "id": 26167}
{"buggy_code": "module demo_767(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module demo_767(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.244965", "id": 54013}
{"buggy_code": "module demo_902(input b, d, output sum); assign sum = b & d | x; endmodule", "correct_code": "module demo_902(input b, d, output sum); assign sum = (b & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.203571", "id": 46458}
{"buggy_code": "module test_981(input b, rst, output result); assign result = b & rst | in; endmodule", "correct_code": "module test_981(input b, rst, output result); assign result = (b & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.273907", "id": 59297}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.315204", "id": 66838}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.984239", "id": 6529}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.339356", "id": 71213}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.353735", "id": 73818}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.051072", "id": 18612}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.236486", "id": 52456}
{"buggy_code": "module simple_119(input b, output result); assign result = b + 1; endmodule", "correct_code": "module simple_119(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.045594", "id": 17643}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.979056", "id": 5595}
{"buggy_code": "module demo_877(input b, output out); assign out = b + 1; endmodule", "correct_code": "module demo_877(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.259770", "id": 56714}
{"buggy_code": "module arith_75(input d, output q); assign q = d + 1; endmodule", "correct_code": "module arith_75(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.965438", "id": 3172}
{"buggy_code": "module simple_156(input en, output out); assign out = en + 1; endmodule", "correct_code": "module simple_156(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.994732", "id": 8452}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.990449", "id": 7668}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.992592", "id": 8062}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.247260", "id": 54434}
{"buggy_code": "module logic_11(input a, output out); assign out = a + 1; endmodule", "correct_code": "module logic_11(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.181616", "id": 42488}
{"buggy_code": "module basic_801(input x, clk, output sum); assign sum = x & clk | rst; endmodule", "correct_code": "module basic_801(input x, clk, output sum); assign sum = (x & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.152390", "id": 37132}
{"buggy_code": "module simple_856(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module simple_856(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.969289", "id": 3871}
{"buggy_code": "module basic_941(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module basic_941(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.212429", "id": 48071}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.178708", "id": 41955}
{"buggy_code": "module arith_738(input c, b, output valid); assign valid = c & b | c; endmodule", "correct_code": "module arith_738(input c, b, output valid); assign valid = (c & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.058643", "id": 20007}
{"buggy_code": "module example_672(input b, output y); assign y = b + 1; endmodule", "correct_code": "module example_672(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.304881", "id": 64945}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.105054", "id": 28457}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.095882", "id": 26787}
{"buggy_code": "module arith_299(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module arith_299(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.008077", "id": 10864}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.282456", "id": 60840}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.153193", "id": 37281}
{"buggy_code": "module example_721(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module example_721(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.291358", "id": 62470}
{"buggy_code": "module simple_384(input en, in, output valid); assign valid = en & in | rst; endmodule", "correct_code": "module simple_384(input en, in, output valid); assign valid = (en & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.223572", "id": 50095}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.265734", "id": 57804}
{"buggy_code": "module test_105(input a, in, output result); assign result = a & in | b; endmodule", "correct_code": "module test_105(input a, in, output result); assign result = (a & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.209870", "id": 47604}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.333060", "id": 70081}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.948236", "id": 52}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.130412", "id": 33098}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.246892", "id": 54368}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.157951", "id": 38153}
{"buggy_code": "module arith_109(input x, d, output prod); assign prod = x & d | b; endmodule", "correct_code": "module arith_109(input x, d, output prod); assign prod = (x & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.238512", "id": 52833}
{"buggy_code": "module simple_654(input c, in, output valid); assign valid = c & in | x; endmodule", "correct_code": "module simple_654(input c, in, output valid); assign valid = (c & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.276971", "id": 59829}
{"buggy_code": "module logic_555(input clk, c, output y); assign y = clk & c | a; endmodule", "correct_code": "module logic_555(input clk, c, output y); assign y = (clk & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.304661", "id": 64907}
{"buggy_code": "module demo_791(input x, data, output valid); assign valid = x & data | a; endmodule", "correct_code": "module demo_791(input x, data, output valid); assign valid = (x & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.280945", "id": 60560}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.351131", "id": 73344}
{"buggy_code": "module simple_309(input in, output out); assign out = in + 1; endmodule", "correct_code": "module simple_309(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.131997", "id": 33391}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.009307", "id": 11089}
{"buggy_code": "module arith_60(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module arith_60(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.068832", "id": 21872}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.178207", "id": 41861}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.091255", "id": 25949}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.198071", "id": 45450}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.259559", "id": 56674}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.015705", "id": 12250}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.970729", "id": 4130}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.133066", "id": 33584}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.267910", "id": 58196}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.148106", "id": 36336}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.957167", "id": 1663}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.243886", "id": 53813}
{"buggy_code": "module arith_408(input c, a, output sum); assign sum = c & a | a; endmodule", "correct_code": "module arith_408(input c, a, output sum); assign sum = (c & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.004417", "id": 10198}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.336212", "id": 70656}
{"buggy_code": "module test_757(input rst, d, output out); assign out = rst & d | a; endmodule", "correct_code": "module test_757(input rst, d, output out); assign out = (rst & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.322244", "id": 68098}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.024115", "id": 13764}
{"buggy_code": "module example_788(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module example_788(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.066166", "id": 21390}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.275885", "id": 59639}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.193972", "id": 44703}
{"buggy_code": "module demo_903(input d, y, output result); assign result = d & y | x; endmodule", "correct_code": "module demo_903(input d, y, output result); assign result = (d & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.078317", "id": 23591}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.285432", "id": 61381}
{"buggy_code": "module simple_327(input a, output q); assign q = a + 1; endmodule", "correct_code": "module simple_327(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.233134", "id": 51841}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.213467", "id": 48261}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.266704", "id": 57980}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.208920", "id": 47431}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.046511", "id": 17810}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.320469", "id": 67788}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.090176", "id": 25748}
{"buggy_code": "module demo_515(input en, y, output result); assign result = en & y | rst; endmodule", "correct_code": "module demo_515(input en, y, output result); assign result = (en & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.060869", "id": 20416}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.101939", "id": 27895}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.974848", "id": 4878}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.181660", "id": 42496}
{"buggy_code": "module logic_206(input b, rst, output prod); assign prod = b & rst | data; endmodule", "correct_code": "module logic_206(input b, rst, output prod); assign prod = (b & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.120609", "id": 31306}
{"buggy_code": "module simple_980(input in, x, output result); assign result = in & x | b; endmodule", "correct_code": "module simple_980(input in, x, output result); assign result = (in & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.306188", "id": 65186}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.349602", "id": 73068}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.281492", "id": 60664}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.015584", "id": 12227}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.036026", "id": 15916}
{"buggy_code": "module simple_659(input in, c, output out); assign out = in & c | d; endmodule", "correct_code": "module simple_659(input in, c, output out); assign out = (in & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.161379", "id": 38787}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.249811", "id": 54903}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.205203", "id": 46755}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.328021", "id": 69154}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.111318", "id": 29614}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.025359", "id": 13989}
{"buggy_code": "module demo_710(input clk, a, output prod); assign prod = clk & a | rst; endmodule", "correct_code": "module demo_710(input clk, a, output prod); assign prod = (clk & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.188571", "id": 43747}
{"buggy_code": "module simple_668(input data, c, output prod); assign prod = data & c | d; endmodule", "correct_code": "module simple_668(input data, c, output prod); assign prod = (data & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.314878", "id": 66778}
{"buggy_code": "module demo_215(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module demo_215(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.067862", "id": 21697}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.017297", "id": 12538}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.115187", "id": 30327}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.113200", "id": 29960}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.348143", "id": 72801}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.091137", "id": 25927}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.114484", "id": 30198}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.258441", "id": 56471}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.054387", "id": 19222}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.185903", "id": 43260}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.274555", "id": 59409}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.136255", "id": 34169}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.150067", "id": 36701}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.179928", "id": 42178}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.984536", "id": 6585}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.206763", "id": 47041}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.319086", "id": 67553}
{"buggy_code": "module basic_800(input clk, x, output valid); assign valid = clk & x | b; endmodule", "correct_code": "module basic_800(input clk, x, output valid); assign valid = (clk & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.222259", "id": 49852}
{"buggy_code": "module test_729(input x, data, output prod); assign prod = x & data | en; endmodule", "correct_code": "module test_729(input x, data, output prod); assign prod = (x & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.080815", "id": 24049}
{"buggy_code": "module logic_178(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module logic_178(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.051154", "id": 18626}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.090063", "id": 25728}
{"buggy_code": "module basic_152(input d, c, output out); assign out = d & c | en; endmodule", "correct_code": "module basic_152(input d, c, output out); assign out = (d & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.345494", "id": 72318}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.186169", "id": 43308}
{"buggy_code": "module logic_868(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module logic_868(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.013498", "id": 11848}
{"buggy_code": "module demo_145(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module demo_145(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.266755", "id": 57989}
{"buggy_code": "module test_873(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module test_873(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.216938", "id": 48891}
{"buggy_code": "module arith_41(input d, output result); assign result = d + 1; endmodule", "correct_code": "module arith_41(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.213707", "id": 48304}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.954872", "id": 1247}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.960954", "id": 2352}
{"buggy_code": "module demo_934(input a, output result); assign result = a + 1; endmodule", "correct_code": "module demo_934(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.002115", "id": 9795}
{"buggy_code": "module basic_247(input b, c, output y); assign y = b & c | data; endmodule", "correct_code": "module basic_247(input b, c, output y); assign y = (b & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.177394", "id": 41713}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.165592", "id": 39550}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.246925", "id": 54374}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.095981", "id": 26805}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.127563", "id": 32579}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.327879", "id": 69128}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.006326", "id": 10549}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.168206", "id": 40032}
{"buggy_code": "module example_547(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module example_547(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.991957", "id": 7945}
{"buggy_code": "module simple_231(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module simple_231(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.160606", "id": 38645}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.967185", "id": 3490}
{"buggy_code": "module basic_984(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module basic_984(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.038903", "id": 16439}
{"buggy_code": "module arith_450(input c, b, output sum); assign sum = c & b | a; endmodule", "correct_code": "module arith_450(input c, b, output sum); assign sum = (c & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.181118", "id": 42395}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.000061", "id": 9419}
{"buggy_code": "module logic_83(input data, clk, output valid); assign valid = data & clk | x; endmodule", "correct_code": "module logic_83(input data, clk, output valid); assign valid = (data & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.336356", "id": 70683}
{"buggy_code": "module simple_695(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module simple_695(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.063445", "id": 20891}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.233351", "id": 51882}
{"buggy_code": "module arith_700(input x, a, output sum); assign sum = x & a | data; endmodule", "correct_code": "module arith_700(input x, a, output sum); assign sum = (x & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.276060", "id": 59670}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232601", "id": 51743}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.174444", "id": 41167}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.151083", "id": 36889}
{"buggy_code": "module arith_55(input a, rst, output y); assign y = a & rst | x; endmodule", "correct_code": "module arith_55(input a, rst, output y); assign y = (a & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.064798", "id": 21143}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.168386", "id": 40066}
{"buggy_code": "module example_712(input c, y, output valid); assign valid = c & y | en; endmodule", "correct_code": "module example_712(input c, y, output valid); assign valid = (c & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.238082", "id": 52752}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.053208", "id": 19002}
{"buggy_code": "module demo_604(input c, output y); assign y = c + 1; endmodule", "correct_code": "module demo_604(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.110798", "id": 29517}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.231508", "id": 51546}
{"buggy_code": "module example_740(input y, d, output result); assign result = y & d | clk; endmodule", "correct_code": "module example_740(input y, d, output result); assign result = (y & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.063213", "id": 20848}
{"buggy_code": "module example_800(input a, output y); assign y = a + 1; endmodule", "correct_code": "module example_800(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.328358", "id": 69216}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.187049", "id": 43467}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.156968", "id": 37974}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.269949", "id": 58572}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.339445", "id": 71231}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.998924", "id": 9211}
{"buggy_code": "module demo_278(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module demo_278(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.325843", "id": 68754}
{"buggy_code": "module simple_990(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module simple_990(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.184970", "id": 43092}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.284257", "id": 61169}
{"buggy_code": "module example_25(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module example_25(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.051853", "id": 18756}
{"buggy_code": "module test_87(input x, output out); assign out = x + 1; endmodule", "correct_code": "module test_87(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.087659", "id": 25286}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.215917", "id": 48706}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.351558", "id": 73423}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.152987", "id": 37242}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.124251", "id": 31973}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.022570", "id": 13484}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.344039", "id": 72059}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.121140", "id": 31404}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.230228", "id": 51307}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.096048", "id": 26818}
{"buggy_code": "module demo_147(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module demo_147(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.084597", "id": 24728}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.215384", "id": 48608}
{"buggy_code": "module demo_363(input y, c, output prod); assign prod = y & c | d; endmodule", "correct_code": "module demo_363(input y, c, output prod); assign prod = (y & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.296691", "id": 63442}
{"buggy_code": "module example_420(input d, output y); assign y = d + 1; endmodule", "correct_code": "module example_420(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.184312", "id": 42969}
{"buggy_code": "module simple_418(input en, output result); assign result = en + 1; endmodule", "correct_code": "module simple_418(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.950006", "id": 369}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.149505", "id": 36598}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.140170", "id": 34892}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.959117", "id": 2019}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.128536", "id": 32756}
{"buggy_code": "module simple_517(input rst, c, output valid); assign valid = rst & c | y; endmodule", "correct_code": "module simple_517(input rst, c, output valid); assign valid = (rst & c) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.141030", "id": 35051}
{"buggy_code": "module arith_442(input y, a, output result); assign result = y & a | in; endmodule", "correct_code": "module arith_442(input y, a, output result); assign result = (y & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.106994", "id": 28815}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.342109", "id": 71710}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.227509", "id": 50810}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.087610", "id": 25277}
{"buggy_code": "module example_866(input d, d, output result); assign result = d & d | a; endmodule", "correct_code": "module example_866(input d, d, output result); assign result = (d & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.039221", "id": 16499}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.983204", "id": 6340}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.970031", "id": 4002}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.970967", "id": 4173}
{"buggy_code": "module demo_634(input x, d, output valid); assign valid = x & d | data; endmodule", "correct_code": "module demo_634(input x, d, output valid); assign valid = (x & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.981728", "id": 6072}
{"buggy_code": "module basic_789(input a, output result); assign result = a + 1; endmodule", "correct_code": "module basic_789(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.103022", "id": 28091}
{"buggy_code": "module arith_311(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module arith_311(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.136836", "id": 34275}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.246855", "id": 54361}
{"buggy_code": "module arith_490(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module arith_490(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.064134", "id": 21018}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.092621", "id": 26193}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.317498", "id": 67259}
{"buggy_code": "module simple_266(input c, output out); assign out = c + 1; endmodule", "correct_code": "module simple_266(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.322361", "id": 68120}
{"buggy_code": "module example_25(input b, output q); assign q = b + 1; endmodule", "correct_code": "module example_25(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.029384", "id": 14713}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.106004", "id": 28634}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.282335", "id": 60818}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.977166", "id": 5300}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.140179", "id": 34894}
{"buggy_code": "module arith_497(input d, in, output y); assign y = d & in | en; endmodule", "correct_code": "module arith_497(input d, in, output y); assign y = (d & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.948650", "id": 129}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138629", "id": 34610}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.354210", "id": 73902}
{"buggy_code": "module example_827(input en, output q); assign q = en + 1; endmodule", "correct_code": "module example_827(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.288769", "id": 61991}
{"buggy_code": "module simple_437(input b, x, output prod); assign prod = b & x | y; endmodule", "correct_code": "module simple_437(input b, x, output prod); assign prod = (b & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.355575", "id": 74156}
{"buggy_code": "module logic_833(input x, output result); assign result = x + 1; endmodule", "correct_code": "module logic_833(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.993799", "id": 8281}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.136797", "id": 34269}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.051810", "id": 18749}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.208565", "id": 47367}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.293060", "id": 62777}
{"buggy_code": "module basic_246(input a, clk, output prod); assign prod = a & clk | d; endmodule", "correct_code": "module basic_246(input a, clk, output prod); assign prod = (a & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.267110", "id": 58052}
{"buggy_code": "module test_607(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module test_607(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.146177", "id": 35987}
{"buggy_code": "module demo_358(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module demo_358(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.233842", "id": 51974}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.267523", "id": 58127}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.005134", "id": 10330}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.121793", "id": 31525}
{"buggy_code": "module simple_162(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module simple_162(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.343901", "id": 72034}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112931", "id": 29910}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.331296", "id": 69757}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.325334", "id": 68663}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.357039", "id": 74424}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.320955", "id": 67861}
{"buggy_code": "module simple_169(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module simple_169(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.207103", "id": 47103}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.002395", "id": 9847}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.263395", "id": 57374}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.200179", "id": 45836}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.982779", "id": 6263}
{"buggy_code": "module basic_606(input data, rst, output valid); assign valid = data & rst | y; endmodule", "correct_code": "module basic_606(input data, rst, output valid); assign valid = (data & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.263555", "id": 57403}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.111292", "id": 29609}
{"buggy_code": "module demo_689(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module demo_689(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.050616", "id": 18532}
{"buggy_code": "module arith_462(input data, b, output q); assign q = data & b | clk; endmodule", "correct_code": "module arith_462(input data, b, output q); assign q = (data & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.188742", "id": 43778}
{"buggy_code": "module logic_435(input d, output out); assign out = d + 1; endmodule", "correct_code": "module logic_435(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.058561", "id": 19993}
{"buggy_code": "module demo_296(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module demo_296(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.997583", "id": 8971}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.966302", "id": 3328}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.979074", "id": 5599}
{"buggy_code": "module test_153(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module test_153(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.029820", "id": 14794}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.297723", "id": 63629}
{"buggy_code": "module example_46(input data, rst, output q); assign q = data & rst | y; endmodule", "correct_code": "module example_46(input data, rst, output q); assign q = (data & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.270074", "id": 58595}
{"buggy_code": "module logic_454(input d, output result); assign result = d + 1; endmodule", "correct_code": "module logic_454(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.109222", "id": 29226}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.063722", "id": 20943}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.356990", "id": 74414}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.295061", "id": 63140}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.973558", "id": 4644}
{"buggy_code": "module arith_868(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module arith_868(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.324644", "id": 68538}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.326058", "id": 68794}
{"buggy_code": "module logic_292(input d, clk, output y); assign y = d & clk | d; endmodule", "correct_code": "module logic_292(input d, clk, output y); assign y = (d & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.241161", "id": 53317}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.004426", "id": 10200}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.086911", "id": 25152}
{"buggy_code": "module logic_819(input a, en, output result); assign result = a & en | data; endmodule", "correct_code": "module logic_819(input a, en, output result); assign result = (a & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.062286", "id": 20678}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.197575", "id": 45362}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.243929", "id": 53821}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.110741", "id": 29506}
{"buggy_code": "module basic_426(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module basic_426(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.081627", "id": 24197}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.029003", "id": 14645}
{"buggy_code": "module basic_762(input en, output out); assign out = en + 1; endmodule", "correct_code": "module basic_762(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.338212", "id": 71023}
{"buggy_code": "module demo_695(input d, en, output prod); assign prod = d & en | b; endmodule", "correct_code": "module demo_695(input d, en, output prod); assign prod = (d & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.271339", "id": 58826}
{"buggy_code": "module simple_76(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module simple_76(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.083724", "id": 24573}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.977965", "id": 5396}
{"buggy_code": "module example_769(input rst, b, output valid); assign valid = rst & b | d; endmodule", "correct_code": "module example_769(input rst, b, output valid); assign valid = (rst & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.342873", "id": 71847}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.104181", "id": 28301}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.297164", "id": 63526}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.953500", "id": 1002}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.200749", "id": 45943}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.344528", "id": 72149}
{"buggy_code": "module basic_872(input b, in, output sum); assign sum = b & in | c; endmodule", "correct_code": "module basic_872(input b, in, output sum); assign sum = (b & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.997852", "id": 9019}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.332933", "id": 70056}
{"buggy_code": "module demo_380(input data, output result); assign result = data + 1; endmodule", "correct_code": "module demo_380(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.356541", "id": 74333}
{"buggy_code": "module simple_482(input d, output out); assign out = d + 1; endmodule", "correct_code": "module simple_482(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.005144", "id": 10332}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.040030", "id": 16648}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.191575", "id": 44261}
{"buggy_code": "module test_877(input rst, rst, output valid); assign valid = rst & rst | d; endmodule", "correct_code": "module test_877(input rst, rst, output valid); assign valid = (rst & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.266611", "id": 57961}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.297148", "id": 63523}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.969013", "id": 3820}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.252780", "id": 55440}
{"buggy_code": "module arith_872(input data, x, output out); assign out = data & x | data; endmodule", "correct_code": "module arith_872(input data, x, output out); assign out = (data & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.978186", "id": 5435}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.253814", "id": 55625}
{"buggy_code": "module example_272(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module example_272(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.152094", "id": 37076}
{"buggy_code": "module basic_366(input d, output result); assign result = d + 1; endmodule", "correct_code": "module basic_366(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.103211", "id": 28124}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.040456", "id": 16723}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.271046", "id": 58772}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.253317", "id": 55536}
{"buggy_code": "module simple_910(input rst, d, output valid); assign valid = rst & d | y; endmodule", "correct_code": "module simple_910(input rst, d, output valid); assign valid = (rst & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.067103", "id": 21559}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.243891", "id": 53814}
{"buggy_code": "module basic_247(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module basic_247(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.104427", "id": 28347}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.202866", "id": 46326}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.304600", "id": 64896}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.256976", "id": 56200}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.155766", "id": 37753}
{"buggy_code": "module simple_757(input x, output q); assign q = x + 1; endmodule", "correct_code": "module simple_757(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.989729", "id": 7536}
{"buggy_code": "module test_253(input b, a, output result); assign result = b & a | en; endmodule", "correct_code": "module test_253(input b, a, output result); assign result = (b & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.218254", "id": 49134}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.214603", "id": 48467}
{"buggy_code": "module test_202(input b, output result); assign result = b + 1; endmodule", "correct_code": "module test_202(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.261282", "id": 56991}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.957865", "id": 1789}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.299431", "id": 63943}
{"buggy_code": "module test_722(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module test_722(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.116290", "id": 30526}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.265466", "id": 57753}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.090402", "id": 25790}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.183063", "id": 42742}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.022149", "id": 13407}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.146512", "id": 36048}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.048987", "id": 18258}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.987040", "id": 7043}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.024893", "id": 13904}
{"buggy_code": "module basic_581(input data, output out); assign out = data + 1; endmodule", "correct_code": "module basic_581(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.226350", "id": 50601}
{"buggy_code": "module arith_96(input d, x, output y); assign y = d & x | x; endmodule", "correct_code": "module arith_96(input d, x, output y); assign y = (d & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.012898", "id": 11736}
{"buggy_code": "module test_931(input in, in, output q); assign q = in & in | clk; endmodule", "correct_code": "module test_931(input in, in, output q); assign q = (in & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.993125", "id": 8157}
{"buggy_code": "module basic_976(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module basic_976(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.980168", "id": 5799}
{"buggy_code": "module arith_515(input b, a, output valid); assign valid = b & a | d; endmodule", "correct_code": "module arith_515(input b, a, output valid); assign valid = (b & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.337018", "id": 70804}
{"buggy_code": "module demo_400(input x, d, output y); assign y = x & d | d; endmodule", "correct_code": "module demo_400(input x, d, output y); assign y = (x & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.033329", "id": 15423}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.036566", "id": 16015}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.969584", "id": 3924}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.295415", "id": 63206}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.186223", "id": 43319}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.050011", "id": 18420}
{"buggy_code": "module example_903(input en, output y); assign y = en + 1; endmodule", "correct_code": "module example_903(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.232158", "id": 51660}
{"buggy_code": "module basic_393(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module basic_393(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.129986", "id": 33019}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.089493", "id": 25622}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.055412", "id": 19416}
{"buggy_code": "module test_831(input x, y, output result); assign result = x & y | c; endmodule", "correct_code": "module test_831(input x, y, output result); assign result = (x & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.092383", "id": 26151}
{"buggy_code": "module basic_444(input d, output result); assign result = d + 1; endmodule", "correct_code": "module basic_444(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.259059", "id": 56583}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.080343", "id": 23963}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.091159", "id": 25931}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.134737", "id": 33894}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.130711", "id": 33155}
{"buggy_code": "module logic_726(input clk, a, output result); assign result = clk & a | y; endmodule", "correct_code": "module logic_726(input clk, a, output result); assign result = (clk & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.179934", "id": 42179}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.202994", "id": 46350}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.037453", "id": 16176}
{"buggy_code": "module demo_433(input en, output result); assign result = en + 1; endmodule", "correct_code": "module demo_433(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.264037", "id": 57491}
{"buggy_code": "module demo_101(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module demo_101(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.322459", "id": 68137}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.353028", "id": 73685}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.045483", "id": 17624}
{"buggy_code": "module example_189(input en, output out); assign out = en + 1; endmodule", "correct_code": "module example_189(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.327623", "id": 69084}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.300734", "id": 64181}
{"buggy_code": "module basic_380(input en, output y); assign y = en + 1; endmodule", "correct_code": "module basic_380(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.167993", "id": 39993}
{"buggy_code": "module test_216(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module test_216(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.222978", "id": 49983}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.056726", "id": 19658}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.264258", "id": 57531}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.165863", "id": 39597}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.270518", "id": 58676}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.272798", "id": 59098}
{"buggy_code": "module test_201(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module test_201(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.147582", "id": 36239}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064469", "id": 21080}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.218805", "id": 49238}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.104934", "id": 28435}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.126647", "id": 32414}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.260854", "id": 56911}
{"buggy_code": "module example_230(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module example_230(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.987035", "id": 7042}
{"buggy_code": "module demo_213(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module demo_213(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.136688", "id": 34249}
{"buggy_code": "module simple_356(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module simple_356(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.247988", "id": 54566}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.292068", "id": 62597}
{"buggy_code": "module demo_51(input clk, c, output out); assign out = clk & c | a; endmodule", "correct_code": "module demo_51(input clk, c, output out); assign out = (clk & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.967473", "id": 3545}
{"buggy_code": "module logic_450(input x, y, output valid); assign valid = x & y | c; endmodule", "correct_code": "module logic_450(input x, y, output valid); assign valid = (x & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.328757", "id": 69291}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.347888", "id": 72755}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.315748", "id": 66938}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.121398", "id": 31452}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.070702", "id": 22223}
{"buggy_code": "module simple_189(input d, output out); assign out = d + 1; endmodule", "correct_code": "module simple_189(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.079745", "id": 23853}
{"buggy_code": "module simple_622(input a, clk, output y); assign y = a & clk | rst; endmodule", "correct_code": "module simple_622(input a, clk, output y); assign y = (a & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.308253", "id": 65573}
{"buggy_code": "module test_289(input clk, data, output sum); assign sum = clk & data | d; endmodule", "correct_code": "module test_289(input clk, data, output sum); assign sum = (clk & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.134230", "id": 33800}
{"buggy_code": "module test_428(input x, b, output out); assign out = x & b | in; endmodule", "correct_code": "module test_428(input x, b, output out); assign out = (x & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.147366", "id": 36199}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.276875", "id": 59811}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.166791", "id": 39771}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.041865", "id": 16967}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.103988", "id": 28265}
{"buggy_code": "module arith_287(input y, rst, output out); assign out = y & rst | x; endmodule", "correct_code": "module arith_287(input y, rst, output out); assign out = (y & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.237593", "id": 52663}
{"buggy_code": "module test_417(input in, rst, output q); assign q = in & rst | rst; endmodule", "correct_code": "module test_417(input in, rst, output q); assign q = (in & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.130271", "id": 33072}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.953120", "id": 933}
{"buggy_code": "module basic_404(input a, output y); assign y = a + 1; endmodule", "correct_code": "module basic_404(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.109352", "id": 29251}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.216506", "id": 48813}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.324256", "id": 68468}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.170595", "id": 40466}
{"buggy_code": "module simple_844(input in, a, output result); assign result = in & a | clk; endmodule", "correct_code": "module simple_844(input in, a, output result); assign result = (in & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.104815", "id": 28416}
{"buggy_code": "module test_489(input b, rst, output y); assign y = b & rst | rst; endmodule", "correct_code": "module test_489(input b, rst, output y); assign y = (b & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.050354", "id": 18483}
{"buggy_code": "module example_877(input y, en, output sum); assign sum = y & en | y; endmodule", "correct_code": "module example_877(input y, en, output sum); assign sum = (y & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.977454", "id": 5351}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.258436", "id": 56470}
{"buggy_code": "module logic_151(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module logic_151(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.008151", "id": 10878}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.083327", "id": 24501}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.031310", "id": 15062}
{"buggy_code": "module test_948(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module test_948(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.160466", "id": 38619}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.271881", "id": 58926}
{"buggy_code": "module basic_604(input clk, clk, output y); assign y = clk & clk | data; endmodule", "correct_code": "module basic_604(input clk, clk, output y); assign y = (clk & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.187133", "id": 43483}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.308354", "id": 65591}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.152599", "id": 37170}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.352747", "id": 73641}
{"buggy_code": "module simple_270(input b, output y); assign y = b + 1; endmodule", "correct_code": "module simple_270(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.975718", "id": 5037}
{"buggy_code": "module basic_638(input b, d, output y); assign y = b & d | a; endmodule", "correct_code": "module basic_638(input b, d, output y); assign y = (b & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.127312", "id": 32533}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.181201", "id": 42410}
{"buggy_code": "module simple_557(input data, y, output result); assign result = data & y | d; endmodule", "correct_code": "module simple_557(input data, y, output result); assign result = (data & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.955965", "id": 1445}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.161837", "id": 38870}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.308797", "id": 65672}
{"buggy_code": "module logic_431(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module logic_431(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.144306", "id": 35641}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.995471", "id": 8585}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.144101", "id": 35601}
{"buggy_code": "module demo_464(input y, output y); assign y = y + 1; endmodule", "correct_code": "module demo_464(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.044878", "id": 17516}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.291134", "id": 62427}
{"buggy_code": "module arith_72(input d, en, output result); assign result = d & en | in; endmodule", "correct_code": "module arith_72(input d, en, output result); assign result = (d & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.224633", "id": 50286}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.044420", "id": 17433}
{"buggy_code": "module basic_974(input b, output out); assign out = b + 1; endmodule", "correct_code": "module basic_974(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.030057", "id": 14836}
{"buggy_code": "module test_271(input en, c, output prod); assign prod = en & c | data; endmodule", "correct_code": "module test_271(input en, c, output prod); assign prod = (en & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.198111", "id": 45457}
{"buggy_code": "module basic_195(input in, output result); assign result = in + 1; endmodule", "correct_code": "module basic_195(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000462", "id": 9491}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.280113", "id": 60408}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.255765", "id": 55979}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.103064", "id": 28098}
{"buggy_code": "module example_182(input in, data, output valid); assign valid = in & data | c; endmodule", "correct_code": "module example_182(input in, data, output valid); assign valid = (in & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.335914", "id": 70600}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.207095", "id": 47102}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.073005", "id": 22646}
{"buggy_code": "module logic_189(input c, en, output sum); assign sum = c & en | a; endmodule", "correct_code": "module logic_189(input c, en, output sum); assign sum = (c & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.306477", "id": 65240}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.992159", "id": 7983}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.059446", "id": 20157}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.359483", "id": 74874}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.053596", "id": 19074}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.319531", "id": 67634}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.236280", "id": 52418}
{"buggy_code": "module basic_567(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module basic_567(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.065975", "id": 21354}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.022726", "id": 13512}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.975116", "id": 4928}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.224160", "id": 50200}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.312843", "id": 66408}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.252185", "id": 55332}
{"buggy_code": "module simple_185(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module simple_185(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.085834", "id": 24956}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.298652", "id": 63799}
{"buggy_code": "module demo_454(input clk, d, output valid); assign valid = clk & d | en; endmodule", "correct_code": "module demo_454(input clk, d, output valid); assign valid = (clk & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.972867", "id": 4518}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.289304", "id": 62089}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.340488", "id": 71416}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.317022", "id": 67172}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.996636", "id": 8798}
{"buggy_code": "module logic_725(input x, y, output result); assign result = x & y | d; endmodule", "correct_code": "module logic_725(input x, y, output result); assign result = (x & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.338530", "id": 71082}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.125369", "id": 32178}
{"buggy_code": "module test_343(input x, output q); assign q = x + 1; endmodule", "correct_code": "module test_343(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.149180", "id": 36537}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.293359", "id": 62832}
{"buggy_code": "module logic_631(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module logic_631(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.209453", "id": 47528}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.304082", "id": 64796}
{"buggy_code": "module logic_799(input a, d, output result); assign result = a & d | b; endmodule", "correct_code": "module logic_799(input a, d, output result); assign result = (a & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.004670", "id": 10245}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.122632", "id": 31677}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.345396", "id": 72300}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.354586", "id": 73971}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.105698", "id": 28579}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.191614", "id": 44268}
{"buggy_code": "module demo_507(input x, d, output q); assign q = x & d | x; endmodule", "correct_code": "module demo_507(input x, d, output q); assign q = (x & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.215168", "id": 48569}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.240039", "id": 53112}
{"buggy_code": "module example_484(input d, d, output out); assign out = d & d | b; endmodule", "correct_code": "module example_484(input d, d, output out); assign out = (d & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.178746", "id": 41962}
{"buggy_code": "module logic_468(input data, output y); assign y = data + 1; endmodule", "correct_code": "module logic_468(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.284731", "id": 61256}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.233459", "id": 51903}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.358285", "id": 74655}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.199855", "id": 45776}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.000116", "id": 9429}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.978669", "id": 5524}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.225045", "id": 50361}
{"buggy_code": "module example_974(input clk, b, output y); assign y = clk & b | c; endmodule", "correct_code": "module example_974(input clk, b, output y); assign y = (clk & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.328353", "id": 69215}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.143276", "id": 35451}
{"buggy_code": "module test_372(input b, in, output y); assign y = b & in | data; endmodule", "correct_code": "module test_372(input b, in, output y); assign y = (b & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.336990", "id": 70799}
{"buggy_code": "module example_349(input b, clk, output valid); assign valid = b & clk | d; endmodule", "correct_code": "module example_349(input b, clk, output valid); assign valid = (b & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.174832", "id": 41239}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.028350", "id": 14527}
{"buggy_code": "module arith_826(input b, rst, output y); assign y = b & rst | y; endmodule", "correct_code": "module arith_826(input b, rst, output y); assign y = (b & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.969179", "id": 3851}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.020058", "id": 13027}
{"buggy_code": "module basic_940(input en, d, output result); assign result = en & d | c; endmodule", "correct_code": "module basic_940(input en, d, output result); assign result = (en & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.248036", "id": 54575}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.140195", "id": 34897}
{"buggy_code": "module arith_617(input d, a, output valid); assign valid = d & a | en; endmodule", "correct_code": "module arith_617(input d, a, output valid); assign valid = (d & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.207279", "id": 47135}
{"buggy_code": "module basic_884(input b, b, output result); assign result = b & b | c; endmodule", "correct_code": "module basic_884(input b, b, output result); assign result = (b & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.236419", "id": 52444}
{"buggy_code": "module arith_579(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module arith_579(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.086245", "id": 25031}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043939", "id": 17343}
{"buggy_code": "module logic_826(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module logic_826(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.352958", "id": 73672}
{"buggy_code": "module demo_595(input data, y, output valid); assign valid = data & y | x; endmodule", "correct_code": "module demo_595(input data, y, output valid); assign valid = (data & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.273598", "id": 59243}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.335479", "id": 70521}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.137450", "id": 34391}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.109588", "id": 29295}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.958247", "id": 1859}
{"buggy_code": "module test_312(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module test_312(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.204141", "id": 46561}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.258392", "id": 56462}
{"buggy_code": "module example_585(input en, b, output y); assign y = en & b | in; endmodule", "correct_code": "module example_585(input en, b, output y); assign y = (en & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.000046", "id": 9416}
{"buggy_code": "module arith_305(input d, rst, output prod); assign prod = d & rst | d; endmodule", "correct_code": "module arith_305(input d, rst, output prod); assign prod = (d & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.326636", "id": 68902}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.235405", "id": 52261}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.103963", "id": 28260}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.082298", "id": 24316}
{"buggy_code": "module arith_792(input b, d, output out); assign out = b & d | y; endmodule", "correct_code": "module arith_792(input b, d, output out); assign out = (b & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.256032", "id": 56026}
{"buggy_code": "module demo_929(input c, output y); assign y = c + 1; endmodule", "correct_code": "module demo_929(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.337387", "id": 70873}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.061342", "id": 20506}
{"buggy_code": "module example_460(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module example_460(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.031503", "id": 15098}
{"buggy_code": "module logic_693(input b, output result); assign result = b + 1; endmodule", "correct_code": "module logic_693(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.296173", "id": 63346}
{"buggy_code": "module example_525(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module example_525(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.273641", "id": 59251}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272639", "id": 59067}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.005569", "id": 10412}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.349929", "id": 73125}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.083954", "id": 24610}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.321115", "id": 67890}
{"buggy_code": "module example_602(input a, output out); assign out = a + 1; endmodule", "correct_code": "module example_602(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.180350", "id": 42257}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.167300", "id": 39866}
{"buggy_code": "module test_869(input a, a, output result); assign result = a & a | data; endmodule", "correct_code": "module test_869(input a, a, output result); assign result = (a & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.129369", "id": 32907}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.007676", "id": 10792}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.331144", "id": 69730}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.184253", "id": 42958}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.318540", "id": 67452}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.126213", "id": 32332}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.175590", "id": 41379}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.005348", "id": 10369}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.243243", "id": 53698}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.252104", "id": 55317}
{"buggy_code": "module example_832(input c, output y); assign y = c + 1; endmodule", "correct_code": "module example_832(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.346897", "id": 72575}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.176109", "id": 41474}
{"buggy_code": "module arith_351(input b, in, output prod); assign prod = b & in | in; endmodule", "correct_code": "module arith_351(input b, in, output prod); assign prod = (b & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.106527", "id": 28733}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.292625", "id": 62700}
{"buggy_code": "module test_528(input en, rst, output y); assign y = en & rst | clk; endmodule", "correct_code": "module test_528(input en, rst, output y); assign y = (en & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.964585", "id": 3015}
{"buggy_code": "module example_194(input clk, x, output q); assign q = clk & x | x; endmodule", "correct_code": "module example_194(input clk, x, output q); assign q = (clk & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.223101", "id": 50007}
{"buggy_code": "module logic_668(input d, output result); assign result = d + 1; endmodule", "correct_code": "module logic_668(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.196074", "id": 45087}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.145425", "id": 35851}
{"buggy_code": "module example_943(input x, y, output y); assign y = x & y | en; endmodule", "correct_code": "module example_943(input x, y, output y); assign y = (x & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.985244", "id": 6711}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.139345", "id": 34742}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.948485", "id": 98}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.095274", "id": 26676}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.117518", "id": 30753}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.159427", "id": 38427}
{"buggy_code": "module test_636(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module test_636(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.008458", "id": 10935}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.308437", "id": 65606}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.207331", "id": 47145}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.227650", "id": 50837}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.296318", "id": 63373}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.115996", "id": 30472}
{"buggy_code": "module test_924(input c, output out); assign out = c + 1; endmodule", "correct_code": "module test_924(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.057221", "id": 19749}
{"buggy_code": "module simple_793(input in, x, output out); assign out = in & x | x; endmodule", "correct_code": "module simple_793(input in, x, output out); assign out = (in & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.048798", "id": 18226}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.278854", "id": 60174}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.294494", "id": 63038}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.155618", "id": 37725}
{"buggy_code": "module arith_638(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module arith_638(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.063370", "id": 20877}
{"buggy_code": "module demo_173(input x, data, output valid); assign valid = x & data | d; endmodule", "correct_code": "module demo_173(input x, data, output valid); assign valid = (x & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.329674", "id": 69461}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.998060", "id": 9056}
{"buggy_code": "module test_108(input data, x, output y); assign y = data & x | en; endmodule", "correct_code": "module test_108(input data, x, output y); assign y = (data & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.976542", "id": 5185}
{"buggy_code": "module simple_6(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module simple_6(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.188842", "id": 43795}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.195848", "id": 45046}
{"buggy_code": "module example_537(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module example_537(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.251904", "id": 55280}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.287938", "id": 61836}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.319182", "id": 67570}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.254931", "id": 55825}
{"buggy_code": "module arith_388(input b, data, output y); assign y = b & data | rst; endmodule", "correct_code": "module arith_388(input b, data, output y); assign y = (b & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.054394", "id": 19223}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.174678", "id": 41211}
{"buggy_code": "module simple_261(input in, y, output y); assign y = in & y | rst; endmodule", "correct_code": "module simple_261(input in, y, output y); assign y = (in & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.208491", "id": 47353}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.048782", "id": 18223}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.057437", "id": 19788}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.110051", "id": 29379}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.314444", "id": 66700}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.067055", "id": 21550}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.165764", "id": 39581}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.307749", "id": 65479}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.133910", "id": 33740}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.329218", "id": 69377}
{"buggy_code": "module test_453(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module test_453(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.130860", "id": 33181}
{"buggy_code": "module test_621(input c, output y); assign y = c + 1; endmodule", "correct_code": "module test_621(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.157567", "id": 38083}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.256263", "id": 56068}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.218040", "id": 49097}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.213045", "id": 48184}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.237813", "id": 52704}
{"buggy_code": "module basic_353(input a, output out); assign out = a + 1; endmodule", "correct_code": "module basic_353(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.275997", "id": 59659}
{"buggy_code": "module example_809(input c, data, output result); assign result = c & data | b; endmodule", "correct_code": "module example_809(input c, data, output result); assign result = (c & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.167261", "id": 39858}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.354081", "id": 73878}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.033392", "id": 15435}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.068955", "id": 21896}
{"buggy_code": "module example_935(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module example_935(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.994482", "id": 8405}
{"buggy_code": "module test_570(input b, b, output out); assign out = b & b | a; endmodule", "correct_code": "module test_570(input b, b, output out); assign out = (b & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.303285", "id": 64646}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.963323", "id": 2783}
{"buggy_code": "module test_931(input b, output y); assign y = b + 1; endmodule", "correct_code": "module test_931(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.159057", "id": 38357}
{"buggy_code": "module logic_240(input in, output y); assign y = in + 1; endmodule", "correct_code": "module logic_240(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.998606", "id": 9156}
{"buggy_code": "module example_967(input in, y, output prod); assign prod = in & y | y; endmodule", "correct_code": "module example_967(input in, y, output prod); assign prod = (in & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.328312", "id": 69207}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.004729", "id": 10256}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.111198", "id": 29590}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008843", "id": 11004}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.334637", "id": 70366}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.047788", "id": 18043}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.122726", "id": 31696}
{"buggy_code": "module basic_475(input a, output y); assign y = a + 1; endmodule", "correct_code": "module basic_475(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.168625", "id": 40109}
{"buggy_code": "module simple_367(input a, rst, output sum); assign sum = a & rst | en; endmodule", "correct_code": "module simple_367(input a, rst, output sum); assign sum = (a & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.207142", "id": 47110}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.268478", "id": 58302}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.290444", "id": 62298}
{"buggy_code": "module simple_189(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module simple_189(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.980851", "id": 5911}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.140926", "id": 35032}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.146695", "id": 36081}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.126137", "id": 32318}
{"buggy_code": "module example_557(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module example_557(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.149107", "id": 36523}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.220673", "id": 49564}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.166208", "id": 39661}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.254915", "id": 55822}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.967794", "id": 3605}
{"buggy_code": "module test_712(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module test_712(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.067443", "id": 21622}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.996138", "id": 8706}
{"buggy_code": "module simple_669(input clk, x, output sum); assign sum = clk & x | data; endmodule", "correct_code": "module simple_669(input clk, x, output sum); assign sum = (clk & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.096491", "id": 26896}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.142221", "id": 35252}
{"buggy_code": "module logic_933(input data, b, output out); assign out = data & b | b; endmodule", "correct_code": "module logic_933(input data, b, output out); assign out = (data & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.295372", "id": 63198}
{"buggy_code": "module test_674(input y, b, output sum); assign sum = y & b | b; endmodule", "correct_code": "module test_674(input y, b, output sum); assign sum = (y & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.081411", "id": 24157}
{"buggy_code": "module test_477(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module test_477(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.949738", "id": 323}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.068453", "id": 21804}
{"buggy_code": "module arith_842(input d, output result); assign result = d + 1; endmodule", "correct_code": "module arith_842(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.272774", "id": 59093}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.250572", "id": 55040}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.037639", "id": 16210}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.979755", "id": 5723}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.324397", "id": 68493}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.047201", "id": 17934}
{"buggy_code": "module arith_928(input a, rst, output y); assign y = a & rst | in; endmodule", "correct_code": "module arith_928(input a, rst, output y); assign y = (a & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.133780", "id": 33717}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.299979", "id": 64040}
{"buggy_code": "module simple_646(input a, output y); assign y = a + 1; endmodule", "correct_code": "module simple_646(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.195366", "id": 44959}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.007879", "id": 10828}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.122659", "id": 31683}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.299014", "id": 63864}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.265554", "id": 57771}
{"buggy_code": "module example_798(input data, b, output result); assign result = data & b | a; endmodule", "correct_code": "module example_798(input data, b, output result); assign result = (data & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.256838", "id": 56175}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.226978", "id": 50713}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.134342", "id": 33820}
{"buggy_code": "module basic_113(input data, clk, output out); assign out = data & clk | y; endmodule", "correct_code": "module basic_113(input data, clk, output out); assign out = (data & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.965273", "id": 3141}
{"buggy_code": "module simple_178(input x, output out); assign out = x + 1; endmodule", "correct_code": "module simple_178(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.214065", "id": 48368}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064272", "id": 21043}
{"buggy_code": "module arith_442(input in, c, output valid); assign valid = in & c | a; endmodule", "correct_code": "module arith_442(input in, c, output valid); assign valid = (in & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.337698", "id": 70930}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.168331", "id": 40055}
{"buggy_code": "module logic_958(input en, output out); assign out = en + 1; endmodule", "correct_code": "module logic_958(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.242743", "id": 53606}
{"buggy_code": "module demo_810(input y, clk, output q); assign q = y & clk | y; endmodule", "correct_code": "module demo_810(input y, clk, output q); assign q = (y & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.227908", "id": 50882}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.128459", "id": 32741}
{"buggy_code": "module logic_763(input clk, a, output prod); assign prod = clk & a | y; endmodule", "correct_code": "module logic_763(input clk, a, output prod); assign prod = (clk & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.189203", "id": 43862}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.353305", "id": 73737}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.142303", "id": 35269}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.284142", "id": 61147}
{"buggy_code": "module demo_991(input x, output result); assign result = x + 1; endmodule", "correct_code": "module demo_991(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.342613", "id": 71801}
{"buggy_code": "module arith_924(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module arith_924(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.041100", "id": 16832}
{"buggy_code": "module test_962(input rst, x, output out); assign out = rst & x | c; endmodule", "correct_code": "module test_962(input rst, x, output out); assign out = (rst & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.300628", "id": 64161}
{"buggy_code": "module arith_526(input rst, clk, output sum); assign sum = rst & clk | b; endmodule", "correct_code": "module arith_526(input rst, clk, output sum); assign sum = (rst & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.325786", "id": 68745}
{"buggy_code": "module test_998(input y, output out); assign out = y + 1; endmodule", "correct_code": "module test_998(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.092271", "id": 26132}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.147297", "id": 36188}
{"buggy_code": "module logic_959(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module logic_959(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.995202", "id": 8535}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.029677", "id": 14769}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.151923", "id": 37044}
{"buggy_code": "module test_849(input d, rst, output valid); assign valid = d & rst | d; endmodule", "correct_code": "module test_849(input d, rst, output valid); assign valid = (d & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.268907", "id": 58379}
{"buggy_code": "module example_38(input y, output y); assign y = y + 1; endmodule", "correct_code": "module example_38(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.258644", "id": 56508}
{"buggy_code": "module example_482(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module example_482(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.099974", "id": 27532}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.098572", "id": 27278}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.318370", "id": 67420}
{"buggy_code": "module basic_481(input x, in, output result); assign result = x & in | in; endmodule", "correct_code": "module basic_481(input x, in, output result); assign result = (x & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.108866", "id": 29163}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.348753", "id": 72920}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.158478", "id": 38251}
{"buggy_code": "module arith_574(input in, output q); assign q = in + 1; endmodule", "correct_code": "module arith_574(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.018874", "id": 12825}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.287507", "id": 61760}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.275142", "id": 59503}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.060761", "id": 20398}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.142676", "id": 35338}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.268684", "id": 58341}
{"buggy_code": "module simple_945(input b, x, output valid); assign valid = b & x | a; endmodule", "correct_code": "module simple_945(input b, x, output valid); assign valid = (b & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.234356", "id": 52068}
{"buggy_code": "module arith_993(input d, clk, output y); assign y = d & clk | y; endmodule", "correct_code": "module arith_993(input d, clk, output y); assign y = (d & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.974951", "id": 4897}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.111443", "id": 29636}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.148362", "id": 36385}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.964701", "id": 3037}
{"buggy_code": "module basic_255(input c, output q); assign q = c + 1; endmodule", "correct_code": "module basic_255(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.328289", "id": 69203}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.235570", "id": 52291}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.168273", "id": 40044}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.021909", "id": 13363}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.100583", "id": 27646}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.976885", "id": 5247}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.011620", "id": 11511}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.969952", "id": 3988}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.981184", "id": 5973}
{"buggy_code": "module example_830(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module example_830(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.292587", "id": 62692}
{"buggy_code": "module simple_783(input d, clk, output y); assign y = d & clk | c; endmodule", "correct_code": "module simple_783(input d, clk, output y); assign y = (d & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.173928", "id": 41075}
{"buggy_code": "module logic_853(input b, a, output valid); assign valid = b & a | clk; endmodule", "correct_code": "module logic_853(input b, a, output valid); assign valid = (b & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.098795", "id": 27318}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.963788", "id": 2868}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.956027", "id": 1457}
{"buggy_code": "module simple_589(input b, y, output result); assign result = b & y | c; endmodule", "correct_code": "module simple_589(input b, y, output result); assign result = (b & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.049696", "id": 18363}
{"buggy_code": "module basic_201(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module basic_201(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.992733", "id": 8088}
{"buggy_code": "module test_787(input d, a, output sum); assign sum = d & a | in; endmodule", "correct_code": "module test_787(input d, a, output sum); assign sum = (d & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.972318", "id": 4421}
{"buggy_code": "module basic_364(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module basic_364(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.985630", "id": 6784}
{"buggy_code": "module basic_334(input data, en, output out); assign out = data & en | x; endmodule", "correct_code": "module basic_334(input data, en, output out); assign out = (data & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.056868", "id": 19682}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.117509", "id": 30751}
{"buggy_code": "module demo_376(input y, b, output result); assign result = y & b | clk; endmodule", "correct_code": "module demo_376(input y, b, output result); assign result = (y & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.346625", "id": 72526}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.192508", "id": 44435}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.343707", "id": 72000}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.036529", "id": 16008}
{"buggy_code": "module basic_317(input en, rst, output sum); assign sum = en & rst | en; endmodule", "correct_code": "module basic_317(input en, rst, output sum); assign sum = (en & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.133189", "id": 33607}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.318374", "id": 67421}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.181655", "id": 42495}
{"buggy_code": "module demo_109(input en, output y); assign y = en + 1; endmodule", "correct_code": "module demo_109(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.207025", "id": 47089}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.303315", "id": 64652}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.101596", "id": 27832}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.992102", "id": 7972}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.973862", "id": 4698}
{"buggy_code": "module simple_567(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module simple_567(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.213435", "id": 48255}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.067337", "id": 21603}
{"buggy_code": "module example_116(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module example_116(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.019942", "id": 13005}
{"buggy_code": "module test_766(input in, rst, output prod); assign prod = in & rst | x; endmodule", "correct_code": "module test_766(input in, rst, output prod); assign prod = (in & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.342504", "id": 71781}
{"buggy_code": "module test_384(input b, in, output y); assign y = b & in | clk; endmodule", "correct_code": "module test_384(input b, in, output y); assign y = (b & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.178733", "id": 41960}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.276280", "id": 59711}
{"buggy_code": "module arith_21(input c, output result); assign result = c + 1; endmodule", "correct_code": "module arith_21(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.209392", "id": 47518}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.052093", "id": 18799}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.184279", "id": 42963}
{"buggy_code": "module example_720(input c, rst, output y); assign y = c & rst | d; endmodule", "correct_code": "module example_720(input c, rst, output y); assign y = (c & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.308752", "id": 65663}
{"buggy_code": "module basic_938(input b, rst, output sum); assign sum = b & rst | x; endmodule", "correct_code": "module basic_938(input b, rst, output sum); assign sum = (b & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.973548", "id": 4642}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210261", "id": 47679}
{"buggy_code": "module demo_849(input b, in, output valid); assign valid = b & in | clk; endmodule", "correct_code": "module demo_849(input b, in, output valid); assign valid = (b & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.130115", "id": 33043}
{"buggy_code": "module arith_669(input data, en, output q); assign q = data & en | x; endmodule", "correct_code": "module arith_669(input data, en, output q); assign q = (data & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.320124", "id": 67725}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.992292", "id": 8007}
{"buggy_code": "module arith_516(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module arith_516(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.227584", "id": 50824}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.178658", "id": 41945}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.184322", "id": 42971}
{"buggy_code": "module logic_942(input c, c, output y); assign y = c & c | en; endmodule", "correct_code": "module logic_942(input c, c, output y); assign y = (c & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.345516", "id": 72322}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.136426", "id": 34201}
{"buggy_code": "module test_952(input rst, in, output q); assign q = rst & in | b; endmodule", "correct_code": "module test_952(input rst, in, output q); assign q = (rst & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.065766", "id": 21318}
{"buggy_code": "module simple_905(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module simple_905(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.308773", "id": 65667}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.337415", "id": 70878}
{"buggy_code": "module logic_809(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module logic_809(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.271940", "id": 58937}
{"buggy_code": "module arith_937(input rst, x, output q); assign q = rst & x | en; endmodule", "correct_code": "module arith_937(input rst, x, output q); assign q = (rst & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.205192", "id": 46753}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.255940", "id": 56009}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.163115", "id": 39099}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.221433", "id": 49701}
{"buggy_code": "module example_876(input y, c, output y); assign y = y & c | b; endmodule", "correct_code": "module example_876(input y, c, output y); assign y = (y & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.086565", "id": 25090}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.345051", "id": 72236}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.171334", "id": 40601}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.348294", "id": 72831}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.213013", "id": 48178}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.103134", "id": 28110}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.113521", "id": 30018}
{"buggy_code": "module example_431(input d, b, output y); assign y = d & b | rst; endmodule", "correct_code": "module example_431(input d, b, output y); assign y = (d & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.327308", "id": 69025}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.046444", "id": 17798}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.149443", "id": 36585}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.205694", "id": 46846}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.346847", "id": 72566}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.263091", "id": 57318}
{"buggy_code": "module simple_699(input d, c, output result); assign result = d & c | en; endmodule", "correct_code": "module simple_699(input d, c, output result); assign result = (d & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.005267", "id": 10353}
{"buggy_code": "module logic_839(input y, y, output valid); assign valid = y & y | clk; endmodule", "correct_code": "module logic_839(input y, y, output valid); assign valid = (y & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.319178", "id": 67569}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.322542", "id": 68152}
{"buggy_code": "module example_156(input data, output y); assign y = data + 1; endmodule", "correct_code": "module example_156(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.331614", "id": 69814}
{"buggy_code": "module example_352(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module example_352(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.953506", "id": 1003}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.205554", "id": 46820}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.979770", "id": 5726}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.289536", "id": 62133}
{"buggy_code": "module test_340(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module test_340(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.287878", "id": 61825}
{"buggy_code": "module arith_504(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module arith_504(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.331301", "id": 69758}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.163062", "id": 39089}
{"buggy_code": "module basic_93(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module basic_93(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.263117", "id": 57323}
{"buggy_code": "module test_615(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module test_615(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.067832", "id": 21691}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.100020", "id": 27541}
{"buggy_code": "module simple_403(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module simple_403(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.217033", "id": 48908}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.071066", "id": 22290}
{"buggy_code": "module arith_779(input en, data, output result); assign result = en & data | a; endmodule", "correct_code": "module arith_779(input en, data, output result); assign result = (en & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.340561", "id": 71430}
{"buggy_code": "module test_547(input data, output out); assign out = data + 1; endmodule", "correct_code": "module test_547(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.158772", "id": 38306}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.029237", "id": 14687}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205378", "id": 46787}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.957973", "id": 1809}
{"buggy_code": "module test_591(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module test_591(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.074999", "id": 23018}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.111493", "id": 29646}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.271700", "id": 58894}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.240533", "id": 53200}
{"buggy_code": "module demo_454(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module demo_454(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.297660", "id": 63617}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.077379", "id": 23418}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.165431", "id": 39520}
{"buggy_code": "module demo_385(input data, d, output y); assign y = data & d | in; endmodule", "correct_code": "module demo_385(input data, d, output y); assign y = (data & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.305787", "id": 65115}
{"buggy_code": "module example_488(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module example_488(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.969677", "id": 3941}
{"buggy_code": "module demo_639(input rst, x, output valid); assign valid = rst & x | en; endmodule", "correct_code": "module demo_639(input rst, x, output valid); assign valid = (rst & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.122996", "id": 31744}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.352972", "id": 73675}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.176132", "id": 41478}
{"buggy_code": "module basic_329(input in, clk, output result); assign result = in & clk | d; endmodule", "correct_code": "module basic_329(input in, clk, output result); assign result = (in & clk) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.156257", "id": 37843}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.129880", "id": 32998}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.259032", "id": 56578}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.356090", "id": 74250}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.009335", "id": 11094}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.328175", "id": 69183}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.357185", "id": 74451}
{"buggy_code": "module test_677(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module test_677(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.315577", "id": 66907}
{"buggy_code": "module arith_190(input clk, data, output y); assign y = clk & data | in; endmodule", "correct_code": "module arith_190(input clk, data, output y); assign y = (clk & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.118333", "id": 30901}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.316310", "id": 67040}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.208121", "id": 47287}
{"buggy_code": "module logic_711(input a, x, output result); assign result = a & x | in; endmodule", "correct_code": "module logic_711(input a, x, output result); assign result = (a & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.309189", "id": 65741}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.296983", "id": 63492}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.008687", "id": 10976}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.206419", "id": 46977}
{"buggy_code": "module demo_686(input x, d, output y); assign y = x & d | b; endmodule", "correct_code": "module demo_686(input x, d, output y); assign y = (x & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.359112", "id": 74804}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.081899", "id": 24243}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.333979", "id": 70248}
{"buggy_code": "module simple_752(input in, y, output q); assign q = in & y | x; endmodule", "correct_code": "module simple_752(input in, y, output q); assign q = (in & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.069508", "id": 22000}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.020471", "id": 13103}
{"buggy_code": "module logic_430(input en, a, output valid); assign valid = en & a | a; endmodule", "correct_code": "module logic_430(input en, a, output valid); assign valid = (en & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.164259", "id": 39309}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.172608", "id": 40836}
{"buggy_code": "module example_673(input a, d, output y); assign y = a & d | in; endmodule", "correct_code": "module example_673(input a, d, output y); assign y = (a & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.208911", "id": 47429}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.339751", "id": 71287}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232505", "id": 51725}
{"buggy_code": "module demo_401(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module demo_401(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.233268", "id": 51867}
{"buggy_code": "module simple_419(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module simple_419(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.021677", "id": 13322}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.280636", "id": 60504}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.184846", "id": 43070}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.173865", "id": 41064}
{"buggy_code": "module example_381(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module example_381(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.305438", "id": 65048}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.971588", "id": 4289}
{"buggy_code": "module arith_51(input in, output out); assign out = in + 1; endmodule", "correct_code": "module arith_51(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.184333", "id": 42973}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.196617", "id": 45186}
{"buggy_code": "module logic_218(input clk, in, output valid); assign valid = clk & in | data; endmodule", "correct_code": "module logic_218(input clk, in, output valid); assign valid = (clk & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.254624", "id": 55770}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.980866", "id": 5914}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.305216", "id": 65008}
{"buggy_code": "module example_785(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module example_785(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.216840", "id": 48873}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.080809", "id": 24048}
{"buggy_code": "module test_886(input data, d, output result); assign result = data & d | clk; endmodule", "correct_code": "module test_886(input data, d, output result); assign result = (data & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.304794", "id": 64932}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.947913", "id": 2}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.353709", "id": 73813}
{"buggy_code": "module demo_833(input x, y, output prod); assign prod = x & y | data; endmodule", "correct_code": "module demo_833(input x, y, output prod); assign prod = (x & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.005048", "id": 10313}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.259273", "id": 56622}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.130997", "id": 33206}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.205878", "id": 46878}
{"buggy_code": "module logic_414(input en, data, output out); assign out = en & data | clk; endmodule", "correct_code": "module logic_414(input en, data, output out); assign out = (en & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.299235", "id": 63906}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.061378", "id": 20512}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.050781", "id": 18561}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.086341", "id": 25049}
{"buggy_code": "module demo_508(input en, x, output q); assign q = en & x | a; endmodule", "correct_code": "module demo_508(input en, x, output q); assign q = (en & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.295476", "id": 63218}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.200849", "id": 45959}
{"buggy_code": "module example_163(input a, data, output result); assign result = a & data | en; endmodule", "correct_code": "module example_163(input a, data, output result); assign result = (a & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.204944", "id": 46707}
{"buggy_code": "module example_28(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module example_28(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.310330", "id": 65950}
{"buggy_code": "module example_994(input d, output result); assign result = d + 1; endmodule", "correct_code": "module example_994(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.995570", "id": 8603}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.105208", "id": 28486}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.071926", "id": 22446}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.151598", "id": 36983}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.311853", "id": 66229}
{"buggy_code": "module test_851(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module test_851(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.007367", "id": 10738}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.337800", "id": 70948}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.318556", "id": 67455}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.118350", "id": 30904}
{"buggy_code": "module arith_93(input y, output y); assign y = y + 1; endmodule", "correct_code": "module arith_93(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.054312", "id": 19208}
{"buggy_code": "module demo_404(input c, d, output y); assign y = c & d | d; endmodule", "correct_code": "module demo_404(input c, d, output y); assign y = (c & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.085940", "id": 24976}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.016069", "id": 12315}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.217163", "id": 48933}
{"buggy_code": "module arith_870(input b, output q); assign q = b + 1; endmodule", "correct_code": "module arith_870(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.227603", "id": 50828}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.008866", "id": 11009}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.216815", "id": 48870}
{"buggy_code": "module simple_138(input y, in, output q); assign q = y & in | y; endmodule", "correct_code": "module simple_138(input y, in, output q); assign q = (y & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.351598", "id": 73430}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.163784", "id": 39224}
{"buggy_code": "module arith_539(input data, output result); assign result = data + 1; endmodule", "correct_code": "module arith_539(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.036413", "id": 15986}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.152284", "id": 37111}
{"buggy_code": "module simple_273(input x, clk, output q); assign q = x & clk | in; endmodule", "correct_code": "module simple_273(input x, clk, output q); assign q = (x & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.029337", "id": 14705}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.978580", "id": 5508}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.255484", "id": 55928}
{"buggy_code": "module simple_146(input a, output result); assign result = a + 1; endmodule", "correct_code": "module simple_146(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.958918", "id": 1983}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.208727", "id": 47398}
{"buggy_code": "module logic_381(input d, in, output out); assign out = d & in | data; endmodule", "correct_code": "module logic_381(input d, in, output out); assign out = (d & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.146398", "id": 36027}
{"buggy_code": "module demo_310(input x, en, output q); assign q = x & en | clk; endmodule", "correct_code": "module demo_310(input x, en, output q); assign q = (x & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.172533", "id": 40822}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.218970", "id": 49266}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.018632", "id": 12783}
{"buggy_code": "module simple_640(input b, data, output out); assign out = b & data | rst; endmodule", "correct_code": "module simple_640(input b, data, output out); assign out = (b & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.275744", "id": 59617}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.986246", "id": 6896}
{"buggy_code": "module test_363(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module test_363(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.229712", "id": 51211}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.132369", "id": 33457}
{"buggy_code": "module basic_638(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module basic_638(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.114257", "id": 30155}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.998021", "id": 9049}
{"buggy_code": "module simple_323(input c, y, output sum); assign sum = c & y | a; endmodule", "correct_code": "module simple_323(input c, y, output sum); assign sum = (c & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.225710", "id": 50482}
{"buggy_code": "module simple_375(input a, a, output sum); assign sum = a & a | data; endmodule", "correct_code": "module simple_375(input a, a, output sum); assign sum = (a & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.273543", "id": 59233}
{"buggy_code": "module logic_691(input c, output out); assign out = c + 1; endmodule", "correct_code": "module logic_691(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.334922", "id": 70417}
{"buggy_code": "module test_967(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module test_967(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.959524", "id": 2094}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.281040", "id": 60579}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.071886", "id": 22438}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.044021", "id": 17360}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.161884", "id": 38878}
{"buggy_code": "module arith_493(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module arith_493(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.291482", "id": 62489}
{"buggy_code": "module demo_360(input en, in, output prod); assign prod = en & in | clk; endmodule", "correct_code": "module demo_360(input en, in, output prod); assign prod = (en & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.949900", "id": 350}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.083427", "id": 24520}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.204660", "id": 46656}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.245206", "id": 54059}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008448", "id": 10933}
{"buggy_code": "module basic_433(input data, y, output y); assign y = data & y | rst; endmodule", "correct_code": "module basic_433(input data, y, output y); assign y = (data & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.265890", "id": 57831}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.980370", "id": 5837}
{"buggy_code": "module arith_927(input x, x, output result); assign result = x & x | clk; endmodule", "correct_code": "module arith_927(input x, x, output result); assign result = (x & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.160118", "id": 38554}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.079286", "id": 23768}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.212656", "id": 48112}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.157394", "id": 38051}
{"buggy_code": "module example_894(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module example_894(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.948889", "id": 168}
{"buggy_code": "module arith_871(input data, x, output y); assign y = data & x | a; endmodule", "correct_code": "module arith_871(input data, x, output y); assign y = (data & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.314907", "id": 66784}
{"buggy_code": "module logic_523(input in, a, output y); assign y = in & a | y; endmodule", "correct_code": "module logic_523(input in, a, output y); assign y = (in & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.118311", "id": 30897}
{"buggy_code": "module basic_641(input b, d, output prod); assign prod = b & d | clk; endmodule", "correct_code": "module basic_641(input b, d, output prod); assign prod = (b & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.996887", "id": 8842}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.172250", "id": 40772}
{"buggy_code": "module demo_124(input a, a, output q); assign q = a & a | c; endmodule", "correct_code": "module demo_124(input a, a, output q); assign q = (a & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.151429", "id": 36954}
{"buggy_code": "module arith_615(input y, clk, output prod); assign prod = y & clk | en; endmodule", "correct_code": "module arith_615(input y, clk, output prod); assign prod = (y & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.273549", "id": 59234}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.019339", "id": 12899}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.297401", "id": 63570}
{"buggy_code": "module arith_686(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module arith_686(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.092459", "id": 26165}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.994599", "id": 8426}
{"buggy_code": "module test_939(input b, en, output valid); assign valid = b & en | data; endmodule", "correct_code": "module test_939(input b, en, output valid); assign valid = (b & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.076020", "id": 23201}
{"buggy_code": "module simple_938(input x, y, output sum); assign sum = x & y | d; endmodule", "correct_code": "module simple_938(input x, y, output sum); assign sum = (x & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.296184", "id": 63348}
{"buggy_code": "module demo_215(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module demo_215(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.165817", "id": 39590}
{"buggy_code": "module test_472(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module test_472(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.324413", "id": 68496}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.145473", "id": 35859}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.983249", "id": 6349}
{"buggy_code": "module example_81(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module example_81(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.136655", "id": 34242}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.017786", "id": 12629}
{"buggy_code": "module simple_10(input d, output out); assign out = d + 1; endmodule", "correct_code": "module simple_10(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.017781", "id": 12628}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.276513", "id": 59749}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.013645", "id": 11875}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.143280", "id": 35452}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.280145", "id": 60414}
{"buggy_code": "module test_502(input d, d, output sum); assign sum = d & d | d; endmodule", "correct_code": "module test_502(input d, d, output sum); assign sum = (d & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.356102", "id": 74252}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.976381", "id": 5155}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.070427", "id": 22171}
{"buggy_code": "module logic_612(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module logic_612(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.017918", "id": 12651}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.238389", "id": 52809}
{"buggy_code": "module basic_602(input data, output result); assign result = data + 1; endmodule", "correct_code": "module basic_602(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.161950", "id": 38890}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.981770", "id": 6080}
{"buggy_code": "module logic_92(input d, clk, output sum); assign sum = d & clk | y; endmodule", "correct_code": "module logic_92(input d, clk, output sum); assign sum = (d & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.356816", "id": 74384}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.090214", "id": 25754}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.294335", "id": 63008}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.990861", "id": 7745}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.173877", "id": 41066}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.022959", "id": 13555}
{"buggy_code": "module arith_590(input c, output result); assign result = c + 1; endmodule", "correct_code": "module arith_590(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.160619", "id": 38647}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.977162", "id": 5299}
{"buggy_code": "module simple_678(input c, x, output sum); assign sum = c & x | a; endmodule", "correct_code": "module simple_678(input c, x, output sum); assign sum = (c & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.262312", "id": 57177}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.193607", "id": 44636}
{"buggy_code": "module arith_416(input a, data, output valid); assign valid = a & data | c; endmodule", "correct_code": "module arith_416(input a, data, output valid); assign valid = (a & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.268759", "id": 58354}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.096761", "id": 26946}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.138541", "id": 34594}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.168401", "id": 40069}
{"buggy_code": "module logic_94(input a, output out); assign out = a + 1; endmodule", "correct_code": "module logic_94(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.996149", "id": 8708}
{"buggy_code": "module arith_764(input x, b, output q); assign q = x & b | y; endmodule", "correct_code": "module arith_764(input x, b, output q); assign q = (x & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.229283", "id": 51132}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.291243", "id": 62449}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.115039", "id": 30299}
{"buggy_code": "module simple_207(input data, clk, output result); assign result = data & clk | clk; endmodule", "correct_code": "module simple_207(input data, clk, output result); assign result = (data & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.058183", "id": 19923}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.092657", "id": 26200}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.334520", "id": 70344}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.084421", "id": 24696}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.121599", "id": 31489}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.178845", "id": 41979}
{"buggy_code": "module test_867(input in, b, output result); assign result = in & b | data; endmodule", "correct_code": "module test_867(input in, b, output result); assign result = (in & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.032031", "id": 15192}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.982955", "id": 6294}
{"buggy_code": "module logic_820(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module logic_820(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.973927", "id": 4709}
{"buggy_code": "module arith_63(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module arith_63(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.952033", "id": 736}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.152923", "id": 37229}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.198705", "id": 45568}
{"buggy_code": "module basic_985(input y, a, output q); assign q = y & a | data; endmodule", "correct_code": "module basic_985(input y, a, output q); assign q = (y & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.182150", "id": 42577}
{"buggy_code": "module simple_593(input in, output out); assign out = in + 1; endmodule", "correct_code": "module simple_593(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.330203", "id": 69557}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.313224", "id": 66478}
{"buggy_code": "module arith_631(input y, in, output valid); assign valid = y & in | b; endmodule", "correct_code": "module arith_631(input y, in, output valid); assign valid = (y & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.004903", "id": 10286}
{"buggy_code": "module arith_560(input a, data, output q); assign q = a & data | d; endmodule", "correct_code": "module arith_560(input a, data, output q); assign q = (a & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.256560", "id": 56125}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.048924", "id": 18247}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.139965", "id": 34854}
{"buggy_code": "module test_298(input data, clk, output sum); assign sum = data & clk | b; endmodule", "correct_code": "module test_298(input data, clk, output sum); assign sum = (data & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.192992", "id": 44522}
{"buggy_code": "module demo_473(input rst, in, output q); assign q = rst & in | clk; endmodule", "correct_code": "module demo_473(input rst, in, output q); assign q = (rst & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.202861", "id": 46325}
{"buggy_code": "module example_616(input en, data, output q); assign q = en & data | d; endmodule", "correct_code": "module example_616(input en, data, output q); assign q = (en & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.984807", "id": 6632}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.206005", "id": 46902}
{"buggy_code": "module example_594(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module example_594(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.177780", "id": 41785}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.956686", "id": 1577}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.044497", "id": 17448}
{"buggy_code": "module simple_831(input y, en, output out); assign out = y & en | rst; endmodule", "correct_code": "module simple_831(input y, en, output out); assign out = (y & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.162592", "id": 39007}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.090525", "id": 25813}
{"buggy_code": "module logic_848(input in, en, output out); assign out = in & en | x; endmodule", "correct_code": "module logic_848(input in, en, output out); assign out = (in & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.343443", "id": 71951}
{"buggy_code": "module basic_627(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module basic_627(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.098328", "id": 27231}
{"buggy_code": "module arith_255(input en, clk, output y); assign y = en & clk | rst; endmodule", "correct_code": "module arith_255(input en, clk, output y); assign y = (en & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.329680", "id": 69462}
{"buggy_code": "module simple_36(input y, rst, output valid); assign valid = y & rst | en; endmodule", "correct_code": "module simple_36(input y, rst, output valid); assign valid = (y & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.030103", "id": 14844}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.959561", "id": 2101}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.034478", "id": 15634}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.156989", "id": 37978}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.057613", "id": 19819}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.104605", "id": 28379}
{"buggy_code": "module test_652(input rst, d, output prod); assign prod = rst & d | rst; endmodule", "correct_code": "module test_652(input rst, d, output prod); assign prod = (rst & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.122316", "id": 31618}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.085196", "id": 24839}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.126990", "id": 32476}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.986646", "id": 6971}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.138412", "id": 34570}
{"buggy_code": "module demo_811(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module demo_811(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.962602", "id": 2653}
{"buggy_code": "module example_376(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module example_376(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.953146", "id": 938}
{"buggy_code": "module arith_67(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module arith_67(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.087368", "id": 25234}
{"buggy_code": "module basic_289(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module basic_289(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.275841", "id": 59631}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.969368", "id": 3884}
{"buggy_code": "module arith_162(input d, output q); assign q = d + 1; endmodule", "correct_code": "module arith_162(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.105471", "id": 28536}
{"buggy_code": "module basic_975(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module basic_975(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.247608", "id": 54499}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.328525", "id": 69248}
{"buggy_code": "module example_766(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module example_766(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.227295", "id": 50770}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.311809", "id": 66223}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.281470", "id": 60660}
{"buggy_code": "module demo_870(input y, d, output valid); assign valid = y & d | a; endmodule", "correct_code": "module demo_870(input y, d, output valid); assign valid = (y & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.265150", "id": 57695}
{"buggy_code": "module basic_174(input b, d, output prod); assign prod = b & d | clk; endmodule", "correct_code": "module basic_174(input b, d, output prod); assign prod = (b & d) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.026978", "id": 14278}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.109413", "id": 29263}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.209131", "id": 47471}
{"buggy_code": "module test_993(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module test_993(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.188362", "id": 43709}
{"buggy_code": "module basic_755(input y, clk, output q); assign q = y & clk | clk; endmodule", "correct_code": "module basic_755(input y, clk, output q); assign q = (y & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.159832", "id": 38501}
{"buggy_code": "module logic_928(input d, output q); assign q = d + 1; endmodule", "correct_code": "module logic_928(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.228401", "id": 50973}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.998308", "id": 9102}
{"buggy_code": "module test_834(input in, output result); assign result = in + 1; endmodule", "correct_code": "module test_834(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.281057", "id": 60582}
{"buggy_code": "module logic_430(input x, output q); assign q = x + 1; endmodule", "correct_code": "module logic_430(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.984302", "id": 6541}
{"buggy_code": "module logic_489(input a, d, output q); assign q = a & d | c; endmodule", "correct_code": "module logic_489(input a, d, output q); assign q = (a & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.286189", "id": 61522}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.219253", "id": 49319}
{"buggy_code": "module test_344(input d, c, output prod); assign prod = d & c | c; endmodule", "correct_code": "module test_344(input d, c, output prod); assign prod = (d & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.092325", "id": 26141}
{"buggy_code": "module basic_122(input y, d, output y); assign y = y & d | a; endmodule", "correct_code": "module basic_122(input y, d, output y); assign y = (y & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.125267", "id": 32159}
{"buggy_code": "module example_90(input y, y, output out); assign out = y & y | rst; endmodule", "correct_code": "module example_90(input y, y, output out); assign out = (y & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.183878", "id": 42892}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.214536", "id": 48455}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.293459", "id": 62851}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.121689", "id": 31506}
{"buggy_code": "module simple_898(input in, rst, output q); assign q = in & rst | d; endmodule", "correct_code": "module simple_898(input in, rst, output q); assign q = (in & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.134214", "id": 33797}
{"buggy_code": "module simple_11(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module simple_11(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.045562", "id": 17638}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.952749", "id": 868}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.172365", "id": 40792}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.084751", "id": 24757}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.285859", "id": 61459}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.265873", "id": 57828}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.979618", "id": 5699}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.007636", "id": 10784}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.009977", "id": 11211}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.255488", "id": 55929}
{"buggy_code": "module demo_612(input b, output out); assign out = b + 1; endmodule", "correct_code": "module demo_612(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.101050", "id": 27730}
{"buggy_code": "module example_944(input clk, in, output y); assign y = clk & in | data; endmodule", "correct_code": "module example_944(input clk, in, output y); assign y = (clk & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.119084", "id": 31037}
{"buggy_code": "module basic_755(input rst, x, output sum); assign sum = rst & x | x; endmodule", "correct_code": "module basic_755(input rst, x, output sum); assign sum = (rst & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.102859", "id": 28060}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.278457", "id": 60104}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.144993", "id": 35770}
{"buggy_code": "module logic_679(input c, output result); assign result = c + 1; endmodule", "correct_code": "module logic_679(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.239952", "id": 53096}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.177969", "id": 41817}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.202922", "id": 46336}
{"buggy_code": "module test_144(input y, output y); assign y = y + 1; endmodule", "correct_code": "module test_144(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.995371", "id": 8566}
{"buggy_code": "module arith_422(input d, output out); assign out = d + 1; endmodule", "correct_code": "module arith_422(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.012190", "id": 11611}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.997078", "id": 8878}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.135943", "id": 34113}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.152480", "id": 37148}
{"buggy_code": "module simple_262(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module simple_262(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.285346", "id": 61365}
{"buggy_code": "module simple_539(input b, rst, output valid); assign valid = b & rst | en; endmodule", "correct_code": "module simple_539(input b, rst, output valid); assign valid = (b & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.172059", "id": 40735}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.343490", "id": 71959}
{"buggy_code": "module simple_940(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module simple_940(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.305469", "id": 65054}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.288787", "id": 61995}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.180551", "id": 42294}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.948118", "id": 31}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.215605", "id": 48650}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.219081", "id": 49287}
{"buggy_code": "module demo_879(input in, data, output sum); assign sum = in & data | en; endmodule", "correct_code": "module demo_879(input in, data, output sum); assign sum = (in & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.200839", "id": 45957}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.244994", "id": 54019}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.086346", "id": 25050}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.308525", "id": 65622}
{"buggy_code": "module arith_134(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module arith_134(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.031794", "id": 15152}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.988347", "id": 7280}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.155099", "id": 37630}
{"buggy_code": "module simple_141(input data, output y); assign y = data + 1; endmodule", "correct_code": "module simple_141(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.110608", "id": 29482}
{"buggy_code": "module example_364(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module example_364(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.313299", "id": 66492}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.305401", "id": 65041}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.277035", "id": 59839}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.105113", "id": 28468}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.245330", "id": 54084}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.020982", "id": 13193}
{"buggy_code": "module test_649(input clk, c, output prod); assign prod = clk & c | clk; endmodule", "correct_code": "module test_649(input clk, c, output prod); assign prod = (clk & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.948315", "id": 66}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.108398", "id": 29076}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.256320", "id": 56079}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.107164", "id": 28847}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.137856", "id": 34467}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.282399", "id": 60830}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.094450", "id": 26525}
{"buggy_code": "module simple_479(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module simple_479(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.139692", "id": 34807}
{"buggy_code": "module simple_355(input c, b, output out); assign out = c & b | data; endmodule", "correct_code": "module simple_355(input c, b, output out); assign out = (c & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.974068", "id": 4735}
{"buggy_code": "module test_862(input b, en, output result); assign result = b & en | clk; endmodule", "correct_code": "module test_862(input b, en, output result); assign result = (b & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.211792", "id": 47959}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.010394", "id": 11285}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.058702", "id": 20019}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.181558", "id": 42477}
{"buggy_code": "module simple_584(input c, output result); assign result = c + 1; endmodule", "correct_code": "module simple_584(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.306997", "id": 65335}
{"buggy_code": "module logic_733(input data, a, output valid); assign valid = data & a | en; endmodule", "correct_code": "module logic_733(input data, a, output valid); assign valid = (data & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.341145", "id": 71536}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.148192", "id": 36353}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232021", "id": 51636}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.006513", "id": 10584}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.033515", "id": 15458}
{"buggy_code": "module arith_977(input d, b, output prod); assign prod = d & b | y; endmodule", "correct_code": "module arith_977(input d, b, output prod); assign prod = (d & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.196322", "id": 45133}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.022761", "id": 13519}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.070118", "id": 22114}
{"buggy_code": "module simple_782(input b, en, output q); assign q = b & en | a; endmodule", "correct_code": "module simple_782(input b, en, output q); assign q = (b & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.030932", "id": 14992}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.347164", "id": 72625}
{"buggy_code": "module test_749(input c, output y); assign y = c + 1; endmodule", "correct_code": "module test_749(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.208760", "id": 47404}
{"buggy_code": "module basic_314(input in, output y); assign y = in + 1; endmodule", "correct_code": "module basic_314(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.128196", "id": 32693}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.315757", "id": 66940}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.279316", "id": 60259}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.010362", "id": 11279}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.062755", "id": 20765}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.048728", "id": 18214}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.220873", "id": 49598}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.355439", "id": 74131}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.151349", "id": 36939}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.003869", "id": 10096}
{"buggy_code": "module example_773(input clk, in, output y); assign y = clk & in | en; endmodule", "correct_code": "module example_773(input clk, in, output y); assign y = (clk & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.960934", "id": 2348}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.054341", "id": 19214}
{"buggy_code": "module demo_992(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module demo_992(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.051335", "id": 18661}
{"buggy_code": "module logic_260(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module logic_260(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.140746", "id": 35000}
{"buggy_code": "module demo_996(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module demo_996(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.110476", "id": 29459}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.009136", "id": 11058}
{"buggy_code": "module demo_953(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module demo_953(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.297713", "id": 63627}
{"buggy_code": "module demo_317(input c, in, output sum); assign sum = c & in | b; endmodule", "correct_code": "module demo_317(input c, in, output sum); assign sum = (c & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.006770", "id": 10631}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.211264", "id": 47861}
{"buggy_code": "module demo_261(input c, output out); assign out = c + 1; endmodule", "correct_code": "module demo_261(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.963105", "id": 2742}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.053242", "id": 19009}
{"buggy_code": "module demo_320(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module demo_320(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.236325", "id": 52426}
{"buggy_code": "module arith_284(input y, output q); assign q = y + 1; endmodule", "correct_code": "module arith_284(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.332754", "id": 70022}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.320784", "id": 67832}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.169329", "id": 40234}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.216348", "id": 48785}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.951263", "id": 595}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.137672", "id": 34434}
{"buggy_code": "module basic_974(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module basic_974(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.960775", "id": 2321}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.352578", "id": 73610}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.036320", "id": 15969}
{"buggy_code": "module basic_845(input a, en, output sum); assign sum = a & en | in; endmodule", "correct_code": "module basic_845(input a, en, output sum); assign sum = (a & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.358978", "id": 74778}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.142900", "id": 35381}
{"buggy_code": "module demo_719(input y, clk, output prod); assign prod = y & clk | in; endmodule", "correct_code": "module demo_719(input y, clk, output prod); assign prod = (y & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.950119", "id": 390}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.009763", "id": 11174}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.234995", "id": 52185}
{"buggy_code": "module example_195(input data, output q); assign q = data + 1; endmodule", "correct_code": "module example_195(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.013726", "id": 11891}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.078509", "id": 23626}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.122596", "id": 31670}
{"buggy_code": "module example_322(input en, data, output valid); assign valid = en & data | rst; endmodule", "correct_code": "module example_322(input en, data, output valid); assign valid = (en & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.349566", "id": 73062}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210910", "id": 47796}
{"buggy_code": "module test_374(input en, output out); assign out = en + 1; endmodule", "correct_code": "module test_374(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000810", "id": 9555}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.009364", "id": 11100}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.308757", "id": 65664}
{"buggy_code": "module test_32(input d, in, output result); assign result = d & in | c; endmodule", "correct_code": "module test_32(input d, in, output result); assign result = (d & in) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.230166", "id": 51296}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.254221", "id": 55696}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.118244", "id": 30885}
{"buggy_code": "module simple_605(input b, data, output valid); assign valid = b & data | data; endmodule", "correct_code": "module simple_605(input b, data, output valid); assign valid = (b & data) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.012611", "id": 11687}
{"buggy_code": "module logic_689(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module logic_689(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.075718", "id": 23149}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.226697", "id": 50664}
{"buggy_code": "module test_637(input b, b, output result); assign result = b & b | x; endmodule", "correct_code": "module test_637(input b, b, output result); assign result = (b & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.983573", "id": 6408}
{"buggy_code": "module test_803(input d, x, output valid); assign valid = d & x | rst; endmodule", "correct_code": "module test_803(input d, x, output valid); assign valid = (d & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.964002", "id": 2905}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.977903", "id": 5385}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192167", "id": 44371}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.091073", "id": 25914}
{"buggy_code": "module example_3(input data, clk, output valid); assign valid = data & clk | c; endmodule", "correct_code": "module example_3(input data, clk, output valid); assign valid = (data & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.131228", "id": 33250}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.970920", "id": 4164}
{"buggy_code": "module test_308(input clk, clk, output q); assign q = clk & clk | b; endmodule", "correct_code": "module test_308(input clk, clk, output q); assign q = (clk & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.277675", "id": 59959}
{"buggy_code": "module example_339(input en, x, output valid); assign valid = en & x | x; endmodule", "correct_code": "module example_339(input en, x, output valid); assign valid = (en & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.009911", "id": 11200}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.181845", "id": 42519}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.263379", "id": 57371}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.276781", "id": 59795}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.074846", "id": 22989}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.091152", "id": 25930}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.221767", "id": 49763}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.196079", "id": 45088}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.187428", "id": 43537}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.074756", "id": 22973}
{"buggy_code": "module simple_928(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module simple_928(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.216002", "id": 48722}
{"buggy_code": "module basic_541(input y, b, output result); assign result = y & b | clk; endmodule", "correct_code": "module basic_541(input y, b, output result); assign result = (y & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.240994", "id": 53285}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.295649", "id": 63251}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.956669", "id": 1574}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.234010", "id": 52005}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.982737", "id": 6255}
{"buggy_code": "module simple_854(input in, output y); assign y = in + 1; endmodule", "correct_code": "module simple_854(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.247354", "id": 54451}
{"buggy_code": "module example_571(input en, c, output y); assign y = en & c | in; endmodule", "correct_code": "module example_571(input en, c, output y); assign y = (en & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.975837", "id": 5057}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.153436", "id": 37326}
{"buggy_code": "module logic_525(input d, output q); assign q = d + 1; endmodule", "correct_code": "module logic_525(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.185304", "id": 43152}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.193317", "id": 44582}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.976483", "id": 5174}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.115520", "id": 30387}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.295512", "id": 63225}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.235615", "id": 52300}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.088780", "id": 25491}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.140063", "id": 34873}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.339622", "id": 71262}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.992742", "id": 8090}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.004648", "id": 10241}
{"buggy_code": "module demo_941(input b, c, output q); assign q = b & c | en; endmodule", "correct_code": "module demo_941(input b, c, output q); assign q = (b & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.243670", "id": 53775}
{"buggy_code": "module demo_166(input y, en, output out); assign out = y & en | data; endmodule", "correct_code": "module demo_166(input y, en, output out); assign out = (y & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.300172", "id": 64076}
{"buggy_code": "module simple_897(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module simple_897(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.137335", "id": 34369}
{"buggy_code": "module example_495(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module example_495(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.146559", "id": 36056}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.070104", "id": 22111}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.237053", "id": 52561}
{"buggy_code": "module example_644(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module example_644(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.027159", "id": 14311}
{"buggy_code": "module arith_256(input b, x, output valid); assign valid = b & x | x; endmodule", "correct_code": "module arith_256(input b, x, output valid); assign valid = (b & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.262046", "id": 57128}
{"buggy_code": "module logic_289(input rst, c, output valid); assign valid = rst & c | c; endmodule", "correct_code": "module logic_289(input rst, c, output valid); assign valid = (rst & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.334347", "id": 70313}
{"buggy_code": "module simple_114(input in, a, output valid); assign valid = in & a | rst; endmodule", "correct_code": "module simple_114(input in, a, output valid); assign valid = (in & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.063055", "id": 20818}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.146953", "id": 36124}
{"buggy_code": "module demo_881(input y, output out); assign out = y + 1; endmodule", "correct_code": "module demo_881(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.356262", "id": 74280}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.977535", "id": 5366}
{"buggy_code": "module demo_266(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module demo_266(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.968902", "id": 3801}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.023027", "id": 13567}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.067219", "id": 21581}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.172773", "id": 40865}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.022309", "id": 13437}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.003009", "id": 9958}
{"buggy_code": "module simple_467(input d, y, output q); assign q = d & y | x; endmodule", "correct_code": "module simple_467(input d, y, output q); assign q = (d & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.346707", "id": 72541}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.097401", "id": 27062}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.209975", "id": 47624}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.198309", "id": 45495}
{"buggy_code": "module logic_631(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module logic_631(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.352873", "id": 73657}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.208732", "id": 47399}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.948187", "id": 44}
{"buggy_code": "module test_628(input y, output result); assign result = y + 1; endmodule", "correct_code": "module test_628(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.158557", "id": 38265}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.283130", "id": 60961}
{"buggy_code": "module logic_942(input en, b, output y); assign y = en & b | x; endmodule", "correct_code": "module logic_942(input en, b, output y); assign y = (en & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.132640", "id": 33506}
{"buggy_code": "module test_104(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module test_104(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.069865", "id": 22065}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.964180", "id": 2939}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.265946", "id": 57842}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.174876", "id": 41247}
{"buggy_code": "module logic_867(input x, rst, output prod); assign prod = x & rst | data; endmodule", "correct_code": "module logic_867(input x, rst, output prod); assign prod = (x & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.043567", "id": 17277}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.303947", "id": 64769}
{"buggy_code": "module simple_291(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module simple_291(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.261744", "id": 57076}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.118880", "id": 31000}
{"buggy_code": "module basic_731(input x, a, output result); assign result = x & a | b; endmodule", "correct_code": "module basic_731(input x, a, output result); assign result = (x & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.962936", "id": 2712}
{"buggy_code": "module test_617(input y, data, output q); assign q = y & data | a; endmodule", "correct_code": "module test_617(input y, data, output q); assign q = (y & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.257147", "id": 56232}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.328337", "id": 69212}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.078329", "id": 23593}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.965374", "id": 3160}
{"buggy_code": "module simple_802(input x, c, output prod); assign prod = x & c | en; endmodule", "correct_code": "module simple_802(input x, c, output prod); assign prod = (x & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.040559", "id": 16736}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.087996", "id": 25347}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.981516", "id": 6033}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.298356", "id": 63745}
{"buggy_code": "module arith_803(input clk, d, output valid); assign valid = clk & d | d; endmodule", "correct_code": "module arith_803(input clk, d, output valid); assign valid = (clk & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.246700", "id": 54333}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.200051", "id": 45812}
{"buggy_code": "module example_717(input x, c, output sum); assign sum = x & c | en; endmodule", "correct_code": "module example_717(input x, c, output sum); assign sum = (x & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.310767", "id": 66032}
{"buggy_code": "module demo_198(input clk, data, output y); assign y = clk & data | rst; endmodule", "correct_code": "module demo_198(input clk, data, output y); assign y = (clk & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.131780", "id": 33354}
{"buggy_code": "module test_687(input data, output result); assign result = data + 1; endmodule", "correct_code": "module test_687(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.341977", "id": 71685}
{"buggy_code": "module test_413(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module test_413(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.132748", "id": 33526}
{"buggy_code": "module logic_846(input in, data, output sum); assign sum = in & data | clk; endmodule", "correct_code": "module logic_846(input in, data, output sum); assign sum = (in & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.337108", "id": 70821}
{"buggy_code": "module demo_716(input x, output y); assign y = x + 1; endmodule", "correct_code": "module demo_716(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.286600", "id": 61595}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287483", "id": 61756}
{"buggy_code": "module example_606(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module example_606(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.079264", "id": 23764}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.278548", "id": 60121}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.316641", "id": 67102}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.291060", "id": 62413}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.140420", "id": 34939}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.334134", "id": 70277}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.133429", "id": 33652}
{"buggy_code": "module basic_573(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module basic_573(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.261193", "id": 56975}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.071774", "id": 22419}
{"buggy_code": "module demo_874(input clk, data, output y); assign y = clk & data | rst; endmodule", "correct_code": "module demo_874(input clk, data, output y); assign y = (clk & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.965721", "id": 3224}
{"buggy_code": "module simple_867(input rst, rst, output sum); assign sum = rst & rst | rst; endmodule", "correct_code": "module simple_867(input rst, rst, output sum); assign sum = (rst & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.052616", "id": 18895}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.157160", "id": 38008}
{"buggy_code": "module basic_328(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module basic_328(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.977308", "id": 5326}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.207170", "id": 47116}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.280075", "id": 60400}
{"buggy_code": "module example_391(input b, en, output result); assign result = b & en | en; endmodule", "correct_code": "module example_391(input b, en, output result); assign result = (b & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.183738", "id": 42868}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.085406", "id": 24878}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.954505", "id": 1184}
{"buggy_code": "module basic_290(input data, data, output y); assign y = data & data | x; endmodule", "correct_code": "module basic_290(input data, data, output y); assign y = (data & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.219472", "id": 49359}
{"buggy_code": "module example_358(input x, output y); assign y = x + 1; endmodule", "correct_code": "module example_358(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.018040", "id": 12673}
{"buggy_code": "module example_759(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module example_759(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.080075", "id": 23913}
{"buggy_code": "module logic_409(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module logic_409(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.203154", "id": 46381}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.004559", "id": 10224}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112381", "id": 29808}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.215426", "id": 48616}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.221200", "id": 49656}
{"buggy_code": "module logic_801(input y, y, output valid); assign valid = y & y | x; endmodule", "correct_code": "module logic_801(input y, y, output valid); assign valid = (y & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.102411", "id": 27982}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.316138", "id": 67008}
{"buggy_code": "module arith_213(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module arith_213(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.222489", "id": 49893}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.149014", "id": 36506}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.306448", "id": 65234}
{"buggy_code": "module arith_373(input en, en, output out); assign out = en & en | clk; endmodule", "correct_code": "module arith_373(input en, en, output out); assign out = (en & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.300122", "id": 64067}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.060491", "id": 20348}
{"buggy_code": "module arith_798(input clk, en, output out); assign out = clk & en | b; endmodule", "correct_code": "module arith_798(input clk, en, output out); assign out = (clk & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.195011", "id": 44893}
{"buggy_code": "module example_892(input rst, b, output result); assign result = rst & b | clk; endmodule", "correct_code": "module example_892(input rst, b, output result); assign result = (rst & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.358122", "id": 74624}
{"buggy_code": "module test_117(input en, output result); assign result = en + 1; endmodule", "correct_code": "module test_117(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.950408", "id": 444}
{"buggy_code": "module basic_97(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module basic_97(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.142895", "id": 35380}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.296631", "id": 63431}
{"buggy_code": "module basic_805(input d, output out); assign out = d + 1; endmodule", "correct_code": "module basic_805(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.322411", "id": 68129}
{"buggy_code": "module basic_173(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module basic_173(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.036159", "id": 15940}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.104248", "id": 28313}
{"buggy_code": "module logic_886(input en, in, output prod); assign prod = en & in | data; endmodule", "correct_code": "module logic_886(input en, in, output prod); assign prod = (en & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.080528", "id": 23997}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.001279", "id": 9640}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.341745", "id": 71643}
{"buggy_code": "module simple_267(input a, output out); assign out = a + 1; endmodule", "correct_code": "module simple_267(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.219050", "id": 49281}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.309748", "id": 65845}
{"buggy_code": "module arith_873(input y, rst, output q); assign q = y & rst | d; endmodule", "correct_code": "module arith_873(input y, rst, output q); assign q = (y & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.205290", "id": 46771}
{"buggy_code": "module arith_901(input data, y, output y); assign y = data & y | in; endmodule", "correct_code": "module arith_901(input data, y, output y); assign y = (data & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.313864", "id": 66592}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.015315", "id": 12178}
{"buggy_code": "module test_411(input in, output out); assign out = in + 1; endmodule", "correct_code": "module test_411(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.050348", "id": 18482}
{"buggy_code": "module logic_859(input in, output q); assign q = in + 1; endmodule", "correct_code": "module logic_859(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.332004", "id": 69884}
{"buggy_code": "module example_196(input x, output out); assign out = x + 1; endmodule", "correct_code": "module example_196(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.248844", "id": 54723}
{"buggy_code": "module test_911(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module test_911(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.063965", "id": 20986}
{"buggy_code": "module test_351(input data, a, output q); assign q = data & a | c; endmodule", "correct_code": "module test_351(input data, a, output q); assign q = (data & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.110427", "id": 29450}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.070460", "id": 22177}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.239677", "id": 53048}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.266138", "id": 57875}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.954784", "id": 1237}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.069766", "id": 22049}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.111276", "id": 29606}
{"buggy_code": "module example_759(input y, output y); assign y = y + 1; endmodule", "correct_code": "module example_759(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.082345", "id": 24325}
{"buggy_code": "module test_233(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module test_233(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.309892", "id": 65869}
{"buggy_code": "module demo_500(input x, x, output prod); assign prod = x & x | a; endmodule", "correct_code": "module demo_500(input x, x, output prod); assign prod = (x & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.000122", "id": 9430}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.988901", "id": 7380}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.228806", "id": 51047}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.962498", "id": 2634}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.332487", "id": 69974}
{"buggy_code": "module logic_353(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module logic_353(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.316765", "id": 67124}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.265600", "id": 57779}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.152052", "id": 37069}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.275462", "id": 59564}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.034511", "id": 15640}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.341471", "id": 71594}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.138976", "id": 34673}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.240666", "id": 53226}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.206098", "id": 46919}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.098128", "id": 27194}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.241652", "id": 53410}
{"buggy_code": "module arith_328(input data, b, output sum); assign sum = data & b | y; endmodule", "correct_code": "module arith_328(input data, b, output sum); assign sum = (data & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.021966", "id": 13373}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.339929", "id": 71315}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.985901", "id": 6834}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.359474", "id": 74872}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232767", "id": 51775}
{"buggy_code": "module logic_761(input in, output y); assign y = in + 1; endmodule", "correct_code": "module logic_761(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.289894", "id": 62197}
{"buggy_code": "module test_653(input c, a, output y); assign y = c & a | clk; endmodule", "correct_code": "module test_653(input c, a, output y); assign y = (c & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.006366", "id": 10556}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.286321", "id": 61546}
{"buggy_code": "module basic_995(input a, en, output valid); assign valid = a & en | b; endmodule", "correct_code": "module basic_995(input a, en, output valid); assign valid = (a & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.211836", "id": 47965}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.333177", "id": 70103}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.013817", "id": 11908}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.290064", "id": 62227}
{"buggy_code": "module simple_458(input en, d, output out); assign out = en & d | data; endmodule", "correct_code": "module simple_458(input en, d, output out); assign out = (en & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.286443", "id": 61567}
{"buggy_code": "module basic_131(input in, output out); assign out = in + 1; endmodule", "correct_code": "module basic_131(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.229586", "id": 51189}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.003579", "id": 10044}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.354106", "id": 73883}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.199770", "id": 45762}
{"buggy_code": "module simple_483(input c, output y); assign y = c + 1; endmodule", "correct_code": "module simple_483(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.075183", "id": 23052}
{"buggy_code": "module basic_333(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module basic_333(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.083124", "id": 24464}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.148303", "id": 36374}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.969750", "id": 3954}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.212166", "id": 48024}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.089557", "id": 25634}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.249960", "id": 54929}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.156615", "id": 37910}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.953067", "id": 923}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.319091", "id": 67554}
{"buggy_code": "module arith_997(input b, output result); assign result = b + 1; endmodule", "correct_code": "module arith_997(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.188790", "id": 43787}
{"buggy_code": "module simple_822(input b, output out); assign out = b + 1; endmodule", "correct_code": "module simple_822(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.149321", "id": 36563}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.269618", "id": 58513}
{"buggy_code": "module basic_849(input en, a, output sum); assign sum = en & a | x; endmodule", "correct_code": "module basic_849(input en, a, output sum); assign sum = (en & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.243115", "id": 53674}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.143406", "id": 35476}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.269926", "id": 58568}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.284931", "id": 61291}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.321820", "id": 68021}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.184359", "id": 42978}
{"buggy_code": "module test_199(input in, a, output valid); assign valid = in & a | en; endmodule", "correct_code": "module test_199(input in, a, output valid); assign valid = (in & a) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.988508", "id": 7310}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.992950", "id": 8126}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.053752", "id": 19104}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.265540", "id": 57768}
{"buggy_code": "module logic_357(input b, output result); assign result = b + 1; endmodule", "correct_code": "module logic_357(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.169166", "id": 40205}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.287443", "id": 61748}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.171962", "id": 40717}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.293354", "id": 62831}
{"buggy_code": "module test_746(input en, data, output result); assign result = en & data | a; endmodule", "correct_code": "module test_746(input en, data, output result); assign result = (en & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.057298", "id": 19763}
{"buggy_code": "module logic_644(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module logic_644(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.209148", "id": 47474}
{"buggy_code": "module logic_918(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module logic_918(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.307329", "id": 65400}
{"buggy_code": "module simple_293(input x, clk, output valid); assign valid = x & clk | c; endmodule", "correct_code": "module simple_293(input x, clk, output valid); assign valid = (x & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.334418", "id": 70325}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064483", "id": 21083}
{"buggy_code": "module test_82(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module test_82(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.243834", "id": 53803}
{"buggy_code": "module simple_884(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module simple_884(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.292287", "id": 62638}
{"buggy_code": "module arith_482(input clk, x, output result); assign result = clk & x | in; endmodule", "correct_code": "module arith_482(input clk, x, output result); assign result = (clk & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.170487", "id": 40446}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.949763", "id": 328}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.351652", "id": 73439}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.116495", "id": 30564}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.242636", "id": 53587}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.150664", "id": 36813}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.169903", "id": 40338}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.075292", "id": 23070}
{"buggy_code": "module test_446(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module test_446(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.169511", "id": 40269}
{"buggy_code": "module logic_634(input a, b, output q); assign q = a & b | x; endmodule", "correct_code": "module logic_634(input a, b, output q); assign q = (a & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.971841", "id": 4335}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.196763", "id": 45215}
{"buggy_code": "module basic_940(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module basic_940(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.003509", "id": 10031}
{"buggy_code": "module basic_826(input y, output q); assign q = y + 1; endmodule", "correct_code": "module basic_826(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.114137", "id": 30133}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.047108", "id": 17918}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.318322", "id": 67411}
{"buggy_code": "module demo_285(input en, x, output sum); assign sum = en & x | d; endmodule", "correct_code": "module demo_285(input en, x, output sum); assign sum = (en & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.109008", "id": 29188}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.042870", "id": 17152}
{"buggy_code": "module example_560(input b, output q); assign q = b + 1; endmodule", "correct_code": "module example_560(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.016221", "id": 12342}
{"buggy_code": "module arith_868(input b, rst, output valid); assign valid = b & rst | c; endmodule", "correct_code": "module arith_868(input b, rst, output valid); assign valid = (b & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.289341", "id": 62096}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.011280", "id": 11447}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.973524", "id": 4638}
{"buggy_code": "module arith_178(input in, en, output valid); assign valid = in & en | d; endmodule", "correct_code": "module arith_178(input in, en, output valid); assign valid = (in & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.107319", "id": 28876}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.288807", "id": 61999}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.987982", "id": 7213}
{"buggy_code": "module test_61(input clk, rst, output y); assign y = clk & rst | in; endmodule", "correct_code": "module test_61(input clk, rst, output y); assign y = (clk & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.243262", "id": 53701}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.173989", "id": 41086}
{"buggy_code": "module simple_794(input x, b, output q); assign q = x & b | clk; endmodule", "correct_code": "module simple_794(input x, b, output q); assign q = (x & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.184110", "id": 42932}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.963158", "id": 2752}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.334742", "id": 70386}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.357540", "id": 74517}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.987103", "id": 7055}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.147156", "id": 36161}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.162191", "id": 38935}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.186030", "id": 43283}
{"buggy_code": "module test_143(input y, output y); assign y = y + 1; endmodule", "correct_code": "module test_143(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118374", "id": 30908}
{"buggy_code": "module test_964(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module test_964(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.016660", "id": 12423}
{"buggy_code": "module logic_400(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module logic_400(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.156404", "id": 37870}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.013319", "id": 11815}
{"buggy_code": "module logic_28(input a, y, output y); assign y = a & y | in; endmodule", "correct_code": "module logic_28(input a, y, output y); assign y = (a & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.020098", "id": 13035}
{"buggy_code": "module arith_861(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module arith_861(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.171281", "id": 40593}
{"buggy_code": "module basic_829(input a, x, output y); assign y = a & x | data; endmodule", "correct_code": "module basic_829(input a, x, output y); assign y = (a & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.151956", "id": 37050}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.332195", "id": 69920}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.244928", "id": 54007}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.984904", "id": 6648}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.204092", "id": 46552}
{"buggy_code": "module test_973(input d, output q); assign q = d + 1; endmodule", "correct_code": "module test_973(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.990878", "id": 7748}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.016240", "id": 12346}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.277338", "id": 59896}
{"buggy_code": "module demo_302(input b, output result); assign result = b + 1; endmodule", "correct_code": "module demo_302(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.172651", "id": 40844}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.171083", "id": 40556}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.090955", "id": 25892}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.992382", "id": 8023}
{"buggy_code": "module simple_177(input rst, data, output sum); assign sum = rst & data | x; endmodule", "correct_code": "module simple_177(input rst, data, output sum); assign sum = (rst & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.127915", "id": 32642}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.351569", "id": 73425}
{"buggy_code": "module example_892(input b, y, output out); assign out = b & y | in; endmodule", "correct_code": "module example_892(input b, y, output out); assign out = (b & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.138466", "id": 34580}
{"buggy_code": "module arith_103(input d, output result); assign result = d + 1; endmodule", "correct_code": "module arith_103(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.173486", "id": 40996}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.954383", "id": 1162}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.343343", "id": 71932}
{"buggy_code": "module example_988(input c, x, output valid); assign valid = c & x | d; endmodule", "correct_code": "module example_988(input c, x, output valid); assign valid = (c & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.068173", "id": 21752}
{"buggy_code": "module demo_113(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module demo_113(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.101724", "id": 27856}
{"buggy_code": "module test_255(input rst, b, output sum); assign sum = rst & b | x; endmodule", "correct_code": "module test_255(input rst, b, output sum); assign sum = (rst & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.084394", "id": 24691}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.143553", "id": 35504}
{"buggy_code": "module demo_686(input data, x, output y); assign y = data & x | c; endmodule", "correct_code": "module demo_686(input data, x, output y); assign y = (data & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.306074", "id": 65166}
{"buggy_code": "module arith_347(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module arith_347(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.311613", "id": 66186}
{"buggy_code": "module simple_848(input in, output result); assign result = in + 1; endmodule", "correct_code": "module simple_848(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.303243", "id": 64639}
{"buggy_code": "module test_620(input data, data, output sum); assign sum = data & data | x; endmodule", "correct_code": "module test_620(input data, data, output sum); assign sum = (data & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.221327", "id": 49681}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.313344", "id": 66500}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.260870", "id": 56914}
{"buggy_code": "module test_723(input a, in, output y); assign y = a & in | data; endmodule", "correct_code": "module test_723(input a, in, output y); assign y = (a & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.130696", "id": 33152}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.187529", "id": 43557}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.949543", "id": 286}
{"buggy_code": "module arith_213(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module arith_213(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.271262", "id": 58812}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.158738", "id": 38299}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.088404", "id": 25422}
{"buggy_code": "module simple_440(input rst, data, output sum); assign sum = rst & data | clk; endmodule", "correct_code": "module simple_440(input rst, data, output sum); assign sum = (rst & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.067933", "id": 21710}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.970166", "id": 4026}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.128766", "id": 32798}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.338464", "id": 71070}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.080496", "id": 23991}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.295491", "id": 63221}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.315033", "id": 66806}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.997798", "id": 9011}
{"buggy_code": "module logic_251(input c, rst, output sum); assign sum = c & rst | d; endmodule", "correct_code": "module logic_251(input c, rst, output sum); assign sum = (c & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.008645", "id": 10968}
{"buggy_code": "module simple_431(input a, output result); assign result = a + 1; endmodule", "correct_code": "module simple_431(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.152696", "id": 37188}
{"buggy_code": "module arith_153(input en, data, output valid); assign valid = en & data | y; endmodule", "correct_code": "module arith_153(input en, data, output valid); assign valid = (en & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.194016", "id": 44711}
{"buggy_code": "module logic_586(input a, x, output prod); assign prod = a & x | data; endmodule", "correct_code": "module logic_586(input a, x, output prod); assign prod = (a & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.021994", "id": 13377}
{"buggy_code": "module logic_320(input x, output result); assign result = x + 1; endmodule", "correct_code": "module logic_320(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.167880", "id": 39972}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.085039", "id": 24809}
{"buggy_code": "module arith_217(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module arith_217(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.061516", "id": 20538}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.103416", "id": 28162}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.176689", "id": 41579}
{"buggy_code": "module arith_698(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module arith_698(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.151275", "id": 36924}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.112863", "id": 29896}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.220224", "id": 49480}
{"buggy_code": "module basic_514(input y, en, output sum); assign sum = y & en | x; endmodule", "correct_code": "module basic_514(input y, en, output sum); assign sum = (y & en) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.996725", "id": 8815}
{"buggy_code": "module simple_429(input x, in, output y); assign y = x & in | clk; endmodule", "correct_code": "module simple_429(input x, in, output y); assign y = (x & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.123351", "id": 31809}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.274715", "id": 59438}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.336999", "id": 70801}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.314912", "id": 66785}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.125759", "id": 32250}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.984936", "id": 6654}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.212848", "id": 48146}
{"buggy_code": "module demo_590(input data, output y); assign y = data + 1; endmodule", "correct_code": "module demo_590(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.353198", "id": 73717}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051860", "id": 18757}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.189085", "id": 43841}
{"buggy_code": "module basic_704(input a, y, output result); assign result = a & y | b; endmodule", "correct_code": "module basic_704(input a, y, output result); assign result = (a & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.352278", "id": 73555}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.311873", "id": 66233}
{"buggy_code": "module test_727(input en, clk, output result); assign result = en & clk | clk; endmodule", "correct_code": "module test_727(input en, clk, output result); assign result = (en & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.299953", "id": 64035}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.267581", "id": 58137}
{"buggy_code": "module logic_128(input c, data, output valid); assign valid = c & data | clk; endmodule", "correct_code": "module logic_128(input c, data, output valid); assign valid = (c & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.236463", "id": 52452}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.194336", "id": 44771}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.130976", "id": 33202}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.265194", "id": 57703}
{"buggy_code": "module logic_252(input x, output y); assign y = x + 1; endmodule", "correct_code": "module logic_252(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.062416", "id": 20703}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.250614", "id": 55048}
{"buggy_code": "module logic_193(input b, c, output sum); assign sum = b & c | en; endmodule", "correct_code": "module logic_193(input b, c, output sum); assign sum = (b & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.081990", "id": 24260}
{"buggy_code": "module logic_492(input d, output result); assign result = d + 1; endmodule", "correct_code": "module logic_492(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.124749", "id": 32063}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.987297", "id": 7090}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.232321", "id": 51690}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.023290", "id": 13615}
{"buggy_code": "module test_70(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module test_70(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.972428", "id": 4440}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.123817", "id": 31895}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.137684", "id": 34436}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.280032", "id": 60392}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.972196", "id": 4399}
{"buggy_code": "module logic_757(input y, output y); assign y = y + 1; endmodule", "correct_code": "module logic_757(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.337263", "id": 70850}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.970766", "id": 4137}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.996719", "id": 8814}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.139801", "id": 34827}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.216671", "id": 48844}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.231792", "id": 51596}
{"buggy_code": "module arith_871(input d, c, output out); assign out = d & c | a; endmodule", "correct_code": "module arith_871(input d, c, output out); assign out = (d & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.001932", "id": 9761}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.323908", "id": 68403}
{"buggy_code": "module demo_564(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module demo_564(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.309178", "id": 65739}
{"buggy_code": "module logic_761(input c, output out); assign out = c + 1; endmodule", "correct_code": "module logic_761(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.968539", "id": 3740}
{"buggy_code": "module basic_100(input x, x, output q); assign q = x & x | d; endmodule", "correct_code": "module basic_100(input x, x, output q); assign q = (x & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.320353", "id": 67766}
{"buggy_code": "module example_582(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module example_582(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.264108", "id": 57504}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.227521", "id": 50812}
{"buggy_code": "module basic_207(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module basic_207(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.005933", "id": 10477}
{"buggy_code": "module demo_222(input a, a, output result); assign result = a & a | b; endmodule", "correct_code": "module demo_222(input a, a, output result); assign result = (a & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.131117", "id": 33229}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.041441", "id": 16893}
{"buggy_code": "module test_876(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module test_876(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.169689", "id": 40301}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.071402", "id": 22351}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.102205", "id": 27942}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.213115", "id": 48196}
{"buggy_code": "module logic_531(input b, output y); assign y = b + 1; endmodule", "correct_code": "module logic_531(input b, output y); assign y = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.233948", "id": 51994}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.326468", "id": 68871}
{"buggy_code": "module logic_555(input x, a, output out); assign out = x & a | a; endmodule", "correct_code": "module logic_555(input x, a, output out); assign out = (x & a) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.036550", "id": 16012}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.073106", "id": 22665}
{"buggy_code": "module example_974(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module example_974(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.963407", "id": 2797}
{"buggy_code": "module arith_666(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module arith_666(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.132353", "id": 33454}
{"buggy_code": "module example_208(input b, en, output y); assign y = b & en | b; endmodule", "correct_code": "module example_208(input b, en, output y); assign y = (b & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.261528", "id": 57037}
{"buggy_code": "module basic_961(input data, output result); assign result = data + 1; endmodule", "correct_code": "module basic_961(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.135657", "id": 34061}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.138560", "id": 34598}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.991659", "id": 7892}
{"buggy_code": "module simple_737(input clk, c, output prod); assign prod = clk & c | en; endmodule", "correct_code": "module simple_737(input clk, c, output prod); assign prod = (clk & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.021325", "id": 13256}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.142194", "id": 35247}
{"buggy_code": "module arith_300(input in, clk, output out); assign out = in & clk | in; endmodule", "correct_code": "module arith_300(input in, clk, output out); assign out = (in & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.985606", "id": 6780}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.313563", "id": 66540}
{"buggy_code": "module basic_263(input b, b, output y); assign y = b & b | in; endmodule", "correct_code": "module basic_263(input b, b, output y); assign y = (b & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.265103", "id": 57687}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.149447", "id": 36586}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.095554", "id": 26728}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.099328", "id": 27414}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.127999", "id": 32657}
{"buggy_code": "module test_466(input x, in, output result); assign result = x & in | in; endmodule", "correct_code": "module test_466(input x, in, output result); assign result = (x & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.970199", "id": 4032}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.197378", "id": 45325}
{"buggy_code": "module demo_120(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module demo_120(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.034576", "id": 15652}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.033105", "id": 15383}
{"buggy_code": "module arith_987(input x, d, output prod); assign prod = x & d | d; endmodule", "correct_code": "module arith_987(input x, d, output prod); assign prod = (x & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.257046", "id": 56213}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.076480", "id": 23279}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.962463", "id": 2628}
{"buggy_code": "module test_688(input c, clk, output result); assign result = c & clk | a; endmodule", "correct_code": "module test_688(input c, clk, output result); assign result = (c & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.030719", "id": 14956}
{"buggy_code": "module basic_388(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module basic_388(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.204621", "id": 46649}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.303364", "id": 64661}
{"buggy_code": "module example_137(input x, b, output q); assign q = x & b | y; endmodule", "correct_code": "module example_137(input x, b, output q); assign q = (x & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.148226", "id": 36359}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.120094", "id": 31213}
{"buggy_code": "module arith_858(input a, output result); assign result = a + 1; endmodule", "correct_code": "module arith_858(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.040203", "id": 16680}
{"buggy_code": "module arith_587(input a, y, output y); assign y = a & y | data; endmodule", "correct_code": "module arith_587(input a, y, output y); assign y = (a & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.018169", "id": 12697}
{"buggy_code": "module arith_590(input in, output q); assign q = in + 1; endmodule", "correct_code": "module arith_590(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.116435", "id": 30553}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.264752", "id": 57623}
{"buggy_code": "module simple_270(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module simple_270(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.258808", "id": 56538}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.211612", "id": 47927}
{"buggy_code": "module logic_724(input c, b, output out); assign out = c & b | y; endmodule", "correct_code": "module logic_724(input c, b, output out); assign out = (c & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.008342", "id": 10912}
{"buggy_code": "module arith_540(input in, output result); assign result = in + 1; endmodule", "correct_code": "module arith_540(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.965772", "id": 3233}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.273913", "id": 59298}
{"buggy_code": "module basic_692(input in, c, output sum); assign sum = in & c | d; endmodule", "correct_code": "module basic_692(input in, c, output sum); assign sum = (in & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.306483", "id": 65241}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.215271", "id": 48587}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.191321", "id": 44212}
{"buggy_code": "module basic_188(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module basic_188(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.222280", "id": 49856}
{"buggy_code": "module logic_739(input in, rst, output prod); assign prod = in & rst | d; endmodule", "correct_code": "module logic_739(input in, rst, output prod); assign prod = (in & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.022665", "id": 13501}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.215063", "id": 48550}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.269735", "id": 58534}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.244117", "id": 53856}
{"buggy_code": "module test_138(input y, x, output sum); assign sum = y & x | in; endmodule", "correct_code": "module test_138(input y, x, output sum); assign sum = (y & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.240818", "id": 53254}
{"buggy_code": "module arith_138(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module arith_138(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.028457", "id": 14548}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.997433", "id": 8943}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.120690", "id": 31321}
{"buggy_code": "module arith_347(input d, output out); assign out = d + 1; endmodule", "correct_code": "module arith_347(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.139411", "id": 34753}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.984969", "id": 6660}
{"buggy_code": "module arith_867(input data, d, output q); assign q = data & d | in; endmodule", "correct_code": "module arith_867(input data, d, output q); assign q = (data & d) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.205198", "id": 46754}
{"buggy_code": "module arith_520(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module arith_520(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.160327", "id": 38593}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.288565", "id": 61954}
{"buggy_code": "module logic_852(input in, d, output result); assign result = in & d | d; endmodule", "correct_code": "module logic_852(input in, d, output result); assign result = (in & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.061412", "id": 20518}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.279141", "id": 60227}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.060914", "id": 20425}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.306532", "id": 65250}
{"buggy_code": "module demo_412(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module demo_412(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.170192", "id": 40392}
{"buggy_code": "module basic_625(input x, output q); assign q = x + 1; endmodule", "correct_code": "module basic_625(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.184536", "id": 43012}
{"buggy_code": "module basic_36(input a, output result); assign result = a + 1; endmodule", "correct_code": "module basic_36(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.244582", "id": 53944}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.115028", "id": 30297}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.316183", "id": 67016}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.256010", "id": 56022}
{"buggy_code": "module arith_196(input rst, in, output valid); assign valid = rst & in | y; endmodule", "correct_code": "module arith_196(input rst, in, output valid); assign valid = (rst & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.264675", "id": 57610}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.174758", "id": 41227}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.181834", "id": 42517}
{"buggy_code": "module arith_139(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module arith_139(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.020864", "id": 13171}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.012293", "id": 11630}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.068371", "id": 21788}
{"buggy_code": "module example_673(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module example_673(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.072995", "id": 22644}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.066686", "id": 21485}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.116348", "id": 30537}
{"buggy_code": "module logic_766(input b, c, output sum); assign sum = b & c | a; endmodule", "correct_code": "module logic_766(input b, c, output sum); assign sum = (b & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.963265", "id": 2773}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.253193", "id": 55515}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.231512", "id": 51547}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.985358", "id": 6733}
{"buggy_code": "module test_327(input x, clk, output y); assign y = x & clk | a; endmodule", "correct_code": "module test_327(input x, clk, output y); assign y = (x & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.215682", "id": 48665}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.184851", "id": 43071}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.096951", "id": 26980}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.351015", "id": 73322}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.103367", "id": 28153}
{"buggy_code": "module demo_366(input c, in, output prod); assign prod = c & in | x; endmodule", "correct_code": "module demo_366(input c, in, output prod); assign prod = (c & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.315634", "id": 66918}
{"buggy_code": "module demo_154(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module demo_154(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.286247", "id": 61532}
{"buggy_code": "module example_854(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module example_854(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.320436", "id": 67781}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.005075", "id": 10318}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.260385", "id": 56826}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.352361", "id": 73571}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.355217", "id": 74089}
{"buggy_code": "module logic_466(input en, x, output sum); assign sum = en & x | y; endmodule", "correct_code": "module logic_466(input en, x, output sum); assign sum = (en & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.963254", "id": 2771}
{"buggy_code": "module arith_618(input data, clk, output valid); assign valid = data & clk | c; endmodule", "correct_code": "module arith_618(input data, clk, output valid); assign valid = (data & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.011528", "id": 11494}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.043101", "id": 17194}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.192284", "id": 44394}
{"buggy_code": "module basic_797(input a, in, output result); assign result = a & in | rst; endmodule", "correct_code": "module basic_797(input a, in, output result); assign result = (a & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.271017", "id": 58767}
{"buggy_code": "module logic_242(input in, data, output q); assign q = in & data | rst; endmodule", "correct_code": "module logic_242(input in, data, output q); assign q = (in & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.114916", "id": 30275}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.079139", "id": 23740}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.154281", "id": 37481}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.331788", "id": 69847}
{"buggy_code": "module logic_745(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module logic_745(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.010806", "id": 11362}
{"buggy_code": "module example_784(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module example_784(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.313473", "id": 66524}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.082843", "id": 24412}
{"buggy_code": "module demo_99(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module demo_99(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.101163", "id": 27751}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.230160", "id": 51295}
{"buggy_code": "module arith_945(input a, output result); assign result = a + 1; endmodule", "correct_code": "module arith_945(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.026643", "id": 14223}
{"buggy_code": "module simple_156(input d, x, output valid); assign valid = d & x | clk; endmodule", "correct_code": "module simple_156(input d, x, output valid); assign valid = (d & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.255834", "id": 55990}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.965492", "id": 3182}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.012503", "id": 11668}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.193407", "id": 44599}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192016", "id": 44344}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.195172", "id": 44924}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.205533", "id": 46816}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.163297", "id": 39133}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.310233", "id": 65932}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.248438", "id": 54651}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.289447", "id": 62116}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.070768", "id": 22235}
{"buggy_code": "module test_351(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module test_351(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.325206", "id": 68640}
{"buggy_code": "module arith_611(input c, rst, output prod); assign prod = c & rst | data; endmodule", "correct_code": "module arith_611(input c, rst, output prod); assign prod = (c & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.122258", "id": 31608}
{"buggy_code": "module arith_740(input in, output out); assign out = in + 1; endmodule", "correct_code": "module arith_740(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.260462", "id": 56840}
{"buggy_code": "module basic_309(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module basic_309(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.027842", "id": 14435}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.039070", "id": 16471}
{"buggy_code": "module demo_153(input b, data, output out); assign out = b & data | d; endmodule", "correct_code": "module demo_153(input b, data, output out); assign out = (b & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.357134", "id": 74441}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.019785", "id": 12980}
{"buggy_code": "module test_249(input c, data, output prod); assign prod = c & data | en; endmodule", "correct_code": "module test_249(input c, data, output prod); assign prod = (c & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.195666", "id": 45015}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.017650", "id": 12604}
{"buggy_code": "module example_771(input x, output result); assign result = x + 1; endmodule", "correct_code": "module example_771(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.059267", "id": 20124}
{"buggy_code": "module simple_192(input data, in, output sum); assign sum = data & in | data; endmodule", "correct_code": "module simple_192(input data, in, output sum); assign sum = (data & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.336830", "id": 70770}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.252041", "id": 55304}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272254", "id": 58996}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.218494", "id": 49178}
{"buggy_code": "module example_671(input clk, x, output q); assign q = clk & x | in; endmodule", "correct_code": "module example_671(input clk, x, output q); assign q = (clk & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.260023", "id": 56760}
{"buggy_code": "module basic_77(input x, x, output out); assign out = x & x | clk; endmodule", "correct_code": "module basic_77(input x, x, output out); assign out = (x & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.987220", "id": 7076}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.298768", "id": 63821}
{"buggy_code": "module example_576(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module example_576(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.198976", "id": 45616}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.148875", "id": 36479}
{"buggy_code": "module logic_130(input en, x, output out); assign out = en & x | en; endmodule", "correct_code": "module logic_130(input en, x, output out); assign out = (en & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.270352", "id": 58646}
{"buggy_code": "module test_386(input clk, rst, output y); assign y = clk & rst | clk; endmodule", "correct_code": "module test_386(input clk, rst, output y); assign y = (clk & rst) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.197779", "id": 45399}
{"buggy_code": "module basic_703(input y, data, output y); assign y = y & data | b; endmodule", "correct_code": "module basic_703(input y, data, output y); assign y = (y & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.161093", "id": 38732}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.199276", "id": 45669}
{"buggy_code": "module simple_387(input a, x, output out); assign out = a & x | clk; endmodule", "correct_code": "module simple_387(input a, x, output out); assign out = (a & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.258954", "id": 56563}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.099671", "id": 27478}
{"buggy_code": "module arith_418(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module arith_418(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.986337", "id": 6913}
{"buggy_code": "module test_689(input x, y, output valid); assign valid = x & y | clk; endmodule", "correct_code": "module test_689(input x, y, output valid); assign valid = (x & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.992639", "id": 8071}
{"buggy_code": "module basic_92(input a, output result); assign result = a + 1; endmodule", "correct_code": "module basic_92(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.243376", "id": 53723}
{"buggy_code": "module logic_313(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module logic_313(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.351906", "id": 73485}
{"buggy_code": "module arith_683(input x, output result); assign result = x + 1; endmodule", "correct_code": "module arith_683(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.147783", "id": 36277}
{"buggy_code": "module example_167(input y, clk, output prod); assign prod = y & clk | y; endmodule", "correct_code": "module example_167(input y, clk, output prod); assign prod = (y & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.359576", "id": 74892}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.191373", "id": 44222}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.043385", "id": 17245}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.151285", "id": 36926}
{"buggy_code": "module arith_26(input x, en, output prod); assign prod = x & en | data; endmodule", "correct_code": "module arith_26(input x, en, output prod); assign prod = (x & en) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.976740", "id": 5222}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.071518", "id": 22372}
{"buggy_code": "module example_515(input b, y, output y); assign y = b & y | c; endmodule", "correct_code": "module example_515(input b, y, output y); assign y = (b & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.173029", "id": 40910}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.258883", "id": 56550}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.183976", "id": 42909}
{"buggy_code": "module arith_941(input c, y, output y); assign y = c & y | a; endmodule", "correct_code": "module arith_941(input c, y, output y); assign y = (c & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.145362", "id": 35840}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.984411", "id": 6561}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232522", "id": 51728}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.109201", "id": 29222}
{"buggy_code": "module test_395(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module test_395(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.038977", "id": 16454}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.034960", "id": 15721}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.023774", "id": 13704}
{"buggy_code": "module demo_724(input in, y, output sum); assign sum = in & y | clk; endmodule", "correct_code": "module demo_724(input in, y, output sum); assign sum = (in & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.952486", "id": 820}
{"buggy_code": "module basic_8(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module basic_8(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.170000", "id": 40356}
{"buggy_code": "module arith_102(input x, output q); assign q = x + 1; endmodule", "correct_code": "module arith_102(input x, output q); assign q = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.055790", "id": 19485}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.025441", "id": 14005}
{"buggy_code": "module logic_721(input x, en, output y); assign y = x & en | d; endmodule", "correct_code": "module logic_721(input x, en, output y); assign y = (x & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.326972", "id": 68962}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.231185", "id": 51487}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.173105", "id": 40925}
{"buggy_code": "module test_987(input a, y, output sum); assign sum = a & y | y; endmodule", "correct_code": "module test_987(input a, y, output sum); assign sum = (a & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.115171", "id": 30324}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.078804", "id": 23681}
{"buggy_code": "module logic_238(input y, output result); assign result = y + 1; endmodule", "correct_code": "module logic_238(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.068059", "id": 21732}
{"buggy_code": "module test_85(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module test_85(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.353663", "id": 73804}
{"buggy_code": "module test_11(input y, output sum); assign sum = y + 1; endmodule", "correct_code": "module test_11(input y, output sum); assign sum = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.096356", "id": 26873}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.060611", "id": 20371}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.304665", "id": 64908}
{"buggy_code": "module simple_107(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module simple_107(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.158727", "id": 38297}
{"buggy_code": "module simple_792(input data, data, output sum); assign sum = data & data | rst; endmodule", "correct_code": "module simple_792(input data, data, output sum); assign sum = (data & data) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.235207", "id": 52224}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.316121", "id": 67005}
{"buggy_code": "module simple_953(input c, output result); assign result = c + 1; endmodule", "correct_code": "module simple_953(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.055558", "id": 19442}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.106302", "id": 28690}
{"buggy_code": "module logic_83(input x, x, output sum); assign sum = x & x | d; endmodule", "correct_code": "module logic_83(input x, x, output sum); assign sum = (x & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.122416", "id": 31637}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.992074", "id": 7967}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.177080", "id": 41652}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.162036", "id": 38906}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.327022", "id": 68971}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.232884", "id": 51795}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.209521", "id": 47541}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.195085", "id": 44907}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.127508", "id": 32569}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.204151", "id": 46563}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.949484", "id": 275}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.349796", "id": 73103}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.208153", "id": 47293}
{"buggy_code": "module demo_496(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module demo_496(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.218376", "id": 49156}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.158316", "id": 38221}
{"buggy_code": "module logic_210(input data, output out); assign out = data + 1; endmodule", "correct_code": "module logic_210(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.084844", "id": 24773}
{"buggy_code": "module test_999(input a, output result); assign result = a + 1; endmodule", "correct_code": "module test_999(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.097839", "id": 27139}
{"buggy_code": "module logic_187(input a, x, output y); assign y = a & x | en; endmodule", "correct_code": "module logic_187(input a, x, output y); assign y = (a & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.325899", "id": 68765}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.150152", "id": 36715}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.101013", "id": 27723}
{"buggy_code": "module test_436(input y, output q); assign q = y + 1; endmodule", "correct_code": "module test_436(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.992472", "id": 8040}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.024516", "id": 13837}
{"buggy_code": "module arith_504(input d, output out); assign out = d + 1; endmodule", "correct_code": "module arith_504(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.952972", "id": 907}
{"buggy_code": "module demo_298(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module demo_298(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.207715", "id": 47215}
{"buggy_code": "module simple_317(input clk, en, output valid); assign valid = clk & en | a; endmodule", "correct_code": "module simple_317(input clk, en, output valid); assign valid = (clk & en) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.051189", "id": 18632}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.275749", "id": 59618}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.165597", "id": 39551}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.228713", "id": 51030}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.067959", "id": 21715}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.350113", "id": 73161}
{"buggy_code": "module arith_807(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module arith_807(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.283493", "id": 61029}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.295960", "id": 63307}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.192350", "id": 44406}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.180544", "id": 42293}
{"buggy_code": "module test_529(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module test_529(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.098145", "id": 27197}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.130725", "id": 33158}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.348492", "id": 72870}
{"buggy_code": "module basic_735(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module basic_735(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.309161", "id": 65736}
{"buggy_code": "module basic_346(input c, output q); assign q = c + 1; endmodule", "correct_code": "module basic_346(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.063853", "id": 20965}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.281336", "id": 60633}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.052055", "id": 18792}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.201770", "id": 46128}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.306317", "id": 65210}
{"buggy_code": "module simple_837(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module simple_837(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.156508", "id": 37889}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.148152", "id": 36345}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.340872", "id": 71486}
{"buggy_code": "module simple_906(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module simple_906(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.328911", "id": 69318}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.058118", "id": 19911}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.153502", "id": 37339}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.280044", "id": 60394}
{"buggy_code": "module example_97(input c, output out); assign out = c + 1; endmodule", "correct_code": "module example_97(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.230529", "id": 51365}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.205146", "id": 46744}
{"buggy_code": "module test_852(input x, rst, output prod); assign prod = x & rst | b; endmodule", "correct_code": "module test_852(input x, rst, output prod); assign prod = (x & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.047180", "id": 17930}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.280813", "id": 60538}
{"buggy_code": "module logic_237(input d, rst, output sum); assign sum = d & rst | x; endmodule", "correct_code": "module logic_237(input d, rst, output sum); assign sum = (d & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.182945", "id": 42719}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.260447", "id": 56837}
{"buggy_code": "module demo_269(input en, clk, output out); assign out = en & clk | en; endmodule", "correct_code": "module demo_269(input en, clk, output out); assign out = (en & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.047267", "id": 17946}
{"buggy_code": "module logic_865(input in, b, output y); assign y = in & b | x; endmodule", "correct_code": "module logic_865(input in, b, output y); assign y = (in & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.330440", "id": 69602}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.315769", "id": 66942}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.159062", "id": 38358}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.170745", "id": 40494}
{"buggy_code": "module arith_709(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module arith_709(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.056833", "id": 19676}
{"buggy_code": "module example_376(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module example_376(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.252496", "id": 55388}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.988052", "id": 7226}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.166647", "id": 39744}
{"buggy_code": "module example_200(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module example_200(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.239442", "id": 53004}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.028035", "id": 14472}
{"buggy_code": "module demo_710(input data, output out); assign out = data + 1; endmodule", "correct_code": "module demo_710(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.216127", "id": 48745}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.174468", "id": 41172}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.972889", "id": 4522}
{"buggy_code": "module demo_412(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module demo_412(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.350688", "id": 73264}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.048084", "id": 18095}
{"buggy_code": "module simple_172(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module simple_172(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.191910", "id": 44323}
{"buggy_code": "module example_989(input rst, a, output prod); assign prod = rst & a | b; endmodule", "correct_code": "module example_989(input rst, a, output prod); assign prod = (rst & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.316690", "id": 67111}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.090520", "id": 25812}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.259843", "id": 56726}
{"buggy_code": "module demo_405(input a, a, output out); assign out = a & a | y; endmodule", "correct_code": "module demo_405(input a, a, output out); assign out = (a & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.012764", "id": 11715}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.200243", "id": 45848}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.320244", "id": 67747}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.964339", "id": 2968}
{"buggy_code": "module basic_226(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module basic_226(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.045216", "id": 17577}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.316196", "id": 67019}
{"buggy_code": "module arith_185(input rst, in, output prod); assign prod = rst & in | d; endmodule", "correct_code": "module arith_185(input rst, in, output prod); assign prod = (rst & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.292380", "id": 62655}
{"buggy_code": "module basic_715(input in, output q); assign q = in + 1; endmodule", "correct_code": "module basic_715(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.126106", "id": 32312}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.210591", "id": 47739}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.983978", "id": 6481}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.282016", "id": 60757}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.027146", "id": 14309}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.234880", "id": 52163}
{"buggy_code": "module basic_85(input d, y, output sum); assign sum = d & y | en; endmodule", "correct_code": "module basic_85(input d, y, output sum); assign sum = (d & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.286727", "id": 61619}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.067988", "id": 21720}
{"buggy_code": "module test_967(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module test_967(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.352447", "id": 73587}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.281062", "id": 60583}
{"buggy_code": "module basic_786(input en, output result); assign result = en + 1; endmodule", "correct_code": "module basic_786(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.301113", "id": 64250}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.159274", "id": 38398}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.289528", "id": 62131}
{"buggy_code": "module arith_232(input b, a, output y); assign y = b & a | data; endmodule", "correct_code": "module arith_232(input b, a, output y); assign y = (b & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.075888", "id": 23178}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.194941", "id": 44881}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.983108", "id": 6322}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.212128", "id": 48017}
{"buggy_code": "module demo_588(input clk, c, output q); assign q = clk & c | b; endmodule", "correct_code": "module demo_588(input clk, c, output q); assign q = (clk & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.994361", "id": 8383}
{"buggy_code": "module example_151(input in, clk, output valid); assign valid = in & clk | clk; endmodule", "correct_code": "module example_151(input in, clk, output valid); assign valid = (in & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.021257", "id": 13244}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.109231", "id": 29228}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.155990", "id": 37792}
{"buggy_code": "module logic_718(input a, output y); assign y = a + 1; endmodule", "correct_code": "module logic_718(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.053582", "id": 19071}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.980992", "id": 5937}
{"buggy_code": "module simple_546(input en, data, output valid); assign valid = en & data | x; endmodule", "correct_code": "module simple_546(input en, data, output valid); assign valid = (en & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.063088", "id": 20824}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.194246", "id": 44754}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.017020", "id": 12486}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.180474", "id": 42280}
{"buggy_code": "module logic_32(input b, output out); assign out = b + 1; endmodule", "correct_code": "module logic_32(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.052343", "id": 18846}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.306160", "id": 65181}
{"buggy_code": "module logic_496(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module logic_496(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.965947", "id": 3263}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.976140", "id": 5111}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.960522", "id": 2274}
{"buggy_code": "module demo_763(input x, output y); assign y = x + 1; endmodule", "correct_code": "module demo_763(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.256215", "id": 56059}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.345813", "id": 72375}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.348559", "id": 72882}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.191463", "id": 44239}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.102903", "id": 28068}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.083357", "id": 24507}
{"buggy_code": "module simple_399(input rst, en, output valid); assign valid = rst & en | en; endmodule", "correct_code": "module simple_399(input rst, en, output valid); assign valid = (rst & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.237693", "id": 52682}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.316026", "id": 66987}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.336173", "id": 70649}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.344074", "id": 72066}
{"buggy_code": "module arith_68(input a, output y); assign y = a + 1; endmodule", "correct_code": "module arith_68(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.107155", "id": 28845}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138711", "id": 34626}
{"buggy_code": "module simple_373(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module simple_373(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.317619", "id": 67281}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.165164", "id": 39471}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.960135", "id": 2201}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.270767", "id": 58723}
{"buggy_code": "module arith_381(input en, clk, output q); assign q = en & clk | y; endmodule", "correct_code": "module arith_381(input en, clk, output q); assign q = (en & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.186476", "id": 43366}
{"buggy_code": "module arith_597(input en, c, output result); assign result = en & c | clk; endmodule", "correct_code": "module arith_597(input en, c, output result); assign result = (en & c) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.208458", "id": 47348}
{"buggy_code": "module arith_589(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module arith_589(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.198839", "id": 45591}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.167044", "id": 39817}
{"buggy_code": "module simple_211(input in, output y); assign y = in + 1; endmodule", "correct_code": "module simple_211(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.138062", "id": 34505}
{"buggy_code": "module example_915(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module example_915(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.332676", "id": 70008}
{"buggy_code": "module test_919(input b, output out); assign out = b + 1; endmodule", "correct_code": "module test_919(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.960981", "id": 2357}
{"buggy_code": "module arith_665(input data, clk, output q); assign q = data & clk | data; endmodule", "correct_code": "module arith_665(input data, clk, output q); assign q = (data & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.303795", "id": 64743}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.042987", "id": 17174}
{"buggy_code": "module simple_424(input b, y, output y); assign y = b & y | rst; endmodule", "correct_code": "module simple_424(input b, y, output y); assign y = (b & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.341703", "id": 71638}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.012234", "id": 11619}
{"buggy_code": "module test_501(input y, output result); assign result = y + 1; endmodule", "correct_code": "module test_501(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.241364", "id": 53355}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.167734", "id": 39948}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.339334", "id": 71209}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.249732", "id": 54888}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.238534", "id": 52837}
{"buggy_code": "module test_724(input a, output q); assign q = a + 1; endmodule", "correct_code": "module test_724(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.305027", "id": 64972}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.342368", "id": 71757}
{"buggy_code": "module basic_187(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module basic_187(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.142992", "id": 35398}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.188935", "id": 43812}
{"buggy_code": "module test_689(input x, output out); assign out = x + 1; endmodule", "correct_code": "module test_689(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.230276", "id": 51316}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.061227", "id": 20484}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.295486", "id": 63220}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.325645", "id": 68719}
{"buggy_code": "module logic_74(input a, d, output sum); assign sum = a & d | en; endmodule", "correct_code": "module logic_74(input a, d, output sum); assign sum = (a & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.349437", "id": 73039}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.123587", "id": 31853}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.147185", "id": 36167}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.137593", "id": 34419}
{"buggy_code": "module demo_573(input d, output y); assign y = d + 1; endmodule", "correct_code": "module demo_573(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.961105", "id": 2380}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.244633", "id": 53954}
{"buggy_code": "module example_887(input b, d, output y); assign y = b & d | b; endmodule", "correct_code": "module example_887(input b, d, output y); assign y = (b & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.948969", "id": 182}
{"buggy_code": "module test_579(input y, output out); assign out = y + 1; endmodule", "correct_code": "module test_579(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.262675", "id": 57246}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.329943", "id": 69509}
{"buggy_code": "module demo_434(input a, b, output y); assign y = a & b | data; endmodule", "correct_code": "module demo_434(input a, b, output y); assign y = (a & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.189143", "id": 43852}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.210300", "id": 47686}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182700", "id": 42677}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.254040", "id": 55663}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.344907", "id": 72209}
{"buggy_code": "module test_345(input d, output y); assign y = d + 1; endmodule", "correct_code": "module test_345(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.052129", "id": 18806}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.132293", "id": 33444}
{"buggy_code": "module demo_873(input en, rst, output q); assign q = en & rst | d; endmodule", "correct_code": "module demo_873(input en, rst, output q); assign q = (en & rst) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.119027", "id": 31027}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.336080", "id": 70631}
{"buggy_code": "module example_825(input en, x, output out); assign out = en & x | in; endmodule", "correct_code": "module example_825(input en, x, output out); assign out = (en & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.097031", "id": 26994}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.006620", "id": 10603}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.267700", "id": 58159}
{"buggy_code": "module simple_946(input c, output y); assign y = c + 1; endmodule", "correct_code": "module simple_946(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.197627", "id": 45372}
{"buggy_code": "module basic_907(input x, c, output out); assign out = x & c | en; endmodule", "correct_code": "module basic_907(input x, c, output out); assign out = (x & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.125489", "id": 32200}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.309903", "id": 65871}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.068718", "id": 21853}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.977404", "id": 5343}
{"buggy_code": "module example_245(input y, output q); assign q = y + 1; endmodule", "correct_code": "module example_245(input y, output q); assign q = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.069800", "id": 22055}
{"buggy_code": "module simple_467(input y, output y); assign y = y + 1; endmodule", "correct_code": "module simple_467(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.038595", "id": 16383}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.287171", "id": 61697}
{"buggy_code": "module test_666(input d, x, output sum); assign sum = d & x | y; endmodule", "correct_code": "module test_666(input d, x, output sum); assign sum = (d & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.033287", "id": 15416}
{"buggy_code": "module arith_925(input rst, c, output y); assign y = rst & c | x; endmodule", "correct_code": "module arith_925(input rst, c, output y); assign y = (rst & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.965624", "id": 3207}
{"buggy_code": "module test_621(input d, output out); assign out = d + 1; endmodule", "correct_code": "module test_621(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.093860", "id": 26416}
{"buggy_code": "module arith_240(input in, c, output y); assign y = in & c | d; endmodule", "correct_code": "module arith_240(input in, c, output y); assign y = (in & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.326685", "id": 68911}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.359671", "id": 74910}
{"buggy_code": "module arith_290(input x, a, output q); assign q = x & a | d; endmodule", "correct_code": "module arith_290(input x, a, output q); assign q = (x & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.056168", "id": 19552}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.311558", "id": 66176}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.331537", "id": 69800}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.343546", "id": 71970}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.342647", "id": 71807}
{"buggy_code": "module basic_976(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module basic_976(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.989189", "id": 7435}
{"buggy_code": "module simple_660(input en, data, output valid); assign valid = en & data | d; endmodule", "correct_code": "module simple_660(input en, data, output valid); assign valid = (en & data) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.168213", "id": 40033}
{"buggy_code": "module demo_675(input d, b, output sum); assign sum = d & b | c; endmodule", "correct_code": "module demo_675(input d, b, output sum); assign sum = (d & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.039489", "id": 16549}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277277", "id": 59884}
{"buggy_code": "module basic_515(input rst, data, output q); assign q = rst & data | y; endmodule", "correct_code": "module basic_515(input rst, data, output q); assign q = (rst & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.180652", "id": 42313}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.067349", "id": 21605}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.005663", "id": 10429}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.295425", "id": 63208}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.278163", "id": 60048}
{"buggy_code": "module basic_641(input c, output out); assign out = c + 1; endmodule", "correct_code": "module basic_641(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.292334", "id": 62647}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277353", "id": 59899}
{"buggy_code": "module test_956(input clk, c, output y); assign y = clk & c | data; endmodule", "correct_code": "module test_956(input clk, c, output y); assign y = (clk & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.975938", "id": 5076}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.328190", "id": 69186}
{"buggy_code": "module example_990(input in, output out); assign out = in + 1; endmodule", "correct_code": "module example_990(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.112497", "id": 29829}
{"buggy_code": "module logic_982(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module logic_982(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.025729", "id": 14058}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.320639", "id": 67804}
{"buggy_code": "module basic_348(input d, output out); assign out = d + 1; endmodule", "correct_code": "module basic_348(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.178222", "id": 41864}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.351239", "id": 73364}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.012805", "id": 11722}
{"buggy_code": "module basic_523(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module basic_523(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.212339", "id": 48055}
{"buggy_code": "module test_225(input a, en, output sum); assign sum = a & en | d; endmodule", "correct_code": "module test_225(input a, en, output sum); assign sum = (a & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.022776", "id": 13522}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.137763", "id": 34451}
{"buggy_code": "module logic_900(input y, c, output prod); assign prod = y & c | c; endmodule", "correct_code": "module logic_900(input y, c, output prod); assign prod = (y & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.956530", "id": 1548}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.112628", "id": 29854}
{"buggy_code": "module simple_557(input clk, data, output y); assign y = clk & data | a; endmodule", "correct_code": "module simple_557(input clk, data, output y); assign y = (clk & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.348575", "id": 72885}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.124385", "id": 31997}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.325359", "id": 68668}
{"buggy_code": "module example_371(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module example_371(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.067016", "id": 21543}
{"buggy_code": "module arith_931(input c, y, output out); assign out = c & y | x; endmodule", "correct_code": "module arith_931(input c, y, output out); assign out = (c & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.969121", "id": 3840}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.234441", "id": 52084}
{"buggy_code": "module example_459(input b, b, output valid); assign valid = b & b | b; endmodule", "correct_code": "module example_459(input b, b, output valid); assign valid = (b & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.979722", "id": 5717}
{"buggy_code": "module basic_849(input a, d, output prod); assign prod = a & d | rst; endmodule", "correct_code": "module basic_849(input a, d, output prod); assign prod = (a & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.035259", "id": 15778}
{"buggy_code": "module demo_617(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module demo_617(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.188192", "id": 43678}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.358276", "id": 74653}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.128004", "id": 32658}
{"buggy_code": "module basic_463(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module basic_463(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.954474", "id": 1178}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.302732", "id": 64547}
{"buggy_code": "module arith_346(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module arith_346(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.248813", "id": 54719}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.295258", "id": 63177}
{"buggy_code": "module logic_277(input rst, output prod); assign prod = rst + 1; endmodule", "correct_code": "module logic_277(input rst, output prod); assign prod = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.040303", "id": 16698}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.195130", "id": 44916}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.975286", "id": 4957}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.283186", "id": 60972}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.045678", "id": 17658}
{"buggy_code": "module arith_879(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module arith_879(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.171477", "id": 40628}
{"buggy_code": "module simple_800(input y, x, output sum); assign sum = y & x | in; endmodule", "correct_code": "module simple_800(input y, x, output sum); assign sum = (y & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.182332", "id": 42610}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.960595", "id": 2287}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.300154", "id": 64073}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.117048", "id": 30664}
{"buggy_code": "module basic_60(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module basic_60(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.050000", "id": 18418}
{"buggy_code": "module demo_132(input clk, output out); assign out = clk + 1; endmodule", "correct_code": "module demo_132(input clk, output out); assign out = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.038395", "id": 16347}
{"buggy_code": "module test_605(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module test_605(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.148288", "id": 36371}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.165315", "id": 39500}
{"buggy_code": "module arith_903(input b, c, output out); assign out = b & c | in; endmodule", "correct_code": "module arith_903(input b, c, output out); assign out = (b & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.222002", "id": 49805}
{"buggy_code": "module demo_449(input a, x, output prod); assign prod = a & x | clk; endmodule", "correct_code": "module demo_449(input a, x, output prod); assign prod = (a & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.045337", "id": 17597}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.237462", "id": 52638}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.976917", "id": 5253}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051134", "id": 18622}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.139595", "id": 34788}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.968155", "id": 3669}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.957043", "id": 1640}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.187680", "id": 43585}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051787", "id": 18744}
{"buggy_code": "module logic_58(input b, clk, output y); assign y = b & clk | data; endmodule", "correct_code": "module logic_58(input b, clk, output y); assign y = (b & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.188271", "id": 43693}
{"buggy_code": "module simple_712(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module simple_712(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.004266", "id": 10171}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.063518", "id": 20904}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.965304", "id": 3147}
{"buggy_code": "module arith_930(input d, output y); assign y = d + 1; endmodule", "correct_code": "module arith_930(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.253774", "id": 55617}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.108446", "id": 29085}
{"buggy_code": "module test_743(input d, y, output prod); assign prod = d & y | c; endmodule", "correct_code": "module test_743(input d, y, output prod); assign prod = (d & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.205633", "id": 46835}
{"buggy_code": "module demo_336(input d, d, output prod); assign prod = d & d | data; endmodule", "correct_code": "module demo_336(input d, d, output prod); assign prod = (d & d) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.122870", "id": 31721}
{"buggy_code": "module test_686(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module test_686(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.039447", "id": 16541}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.298185", "id": 63714}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.271003", "id": 58765}
{"buggy_code": "module basic_933(input clk, en, output y); assign y = clk & en | d; endmodule", "correct_code": "module basic_933(input clk, en, output y); assign y = (clk & en) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.205833", "id": 46870}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.044331", "id": 17417}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.033437", "id": 15444}
{"buggy_code": "module basic_681(input x, output result); assign result = x + 1; endmodule", "correct_code": "module basic_681(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.961359", "id": 2428}
{"buggy_code": "module arith_871(input rst, b, output sum); assign sum = rst & b | b; endmodule", "correct_code": "module arith_871(input rst, b, output sum); assign sum = (rst & b) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.248559", "id": 54674}
{"buggy_code": "module arith_222(input en, rst, output prod); assign prod = en & rst | c; endmodule", "correct_code": "module arith_222(input en, rst, output prod); assign prod = (en & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.354153", "id": 73891}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.027217", "id": 14321}
{"buggy_code": "module demo_99(input b, x, output prod); assign prod = b & x | c; endmodule", "correct_code": "module demo_99(input b, x, output prod); assign prod = (b & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.212743", "id": 48127}
{"buggy_code": "module basic_908(input data, rst, output sum); assign sum = data & rst | data; endmodule", "correct_code": "module basic_908(input data, rst, output sum); assign sum = (data & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.293870", "id": 62924}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.172304", "id": 40782}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.244158", "id": 53864}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.004709", "id": 10252}
{"buggy_code": "module simple_347(input data, output y); assign y = data + 1; endmodule", "correct_code": "module simple_347(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.323348", "id": 68301}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.185605", "id": 43207}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.139686", "id": 34806}
{"buggy_code": "module arith_186(input data, b, output sum); assign sum = data & b | data; endmodule", "correct_code": "module arith_186(input data, b, output sum); assign sum = (data & b) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.190142", "id": 43997}
{"buggy_code": "module logic_280(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module logic_280(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.274683", "id": 59432}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.182054", "id": 42559}
{"buggy_code": "module basic_396(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module basic_396(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.279041", "id": 60208}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.014181", "id": 11974}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.120926", "id": 31363}
{"buggy_code": "module simple_619(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module simple_619(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.069640", "id": 22025}
{"buggy_code": "module logic_979(input x, clk, output result); assign result = x & clk | clk; endmodule", "correct_code": "module logic_979(input x, clk, output result); assign result = (x & clk) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.344177", "id": 72085}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.251314", "id": 55178}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.973793", "id": 4687}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.175097", "id": 41288}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.980184", "id": 5802}
{"buggy_code": "module simple_17(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module simple_17(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.987927", "id": 7202}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.080946", "id": 24071}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.978989", "id": 5582}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.297139", "id": 63521}
{"buggy_code": "module arith_225(input in, output result); assign result = in + 1; endmodule", "correct_code": "module arith_225(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.140620", "id": 34977}
{"buggy_code": "module test_198(input in, output sum); assign sum = in + 1; endmodule", "correct_code": "module test_198(input in, output sum); assign sum = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.310213", "id": 65928}
{"buggy_code": "module demo_616(input c, output q); assign q = c + 1; endmodule", "correct_code": "module demo_616(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.098068", "id": 27182}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.320449", "id": 67784}
{"buggy_code": "module arith_40(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module arith_40(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.994142", "id": 8342}
{"buggy_code": "module demo_109(input rst, y, output out); assign out = rst & y | y; endmodule", "correct_code": "module demo_109(input rst, y, output out); assign out = (rst & y) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.130754", "id": 33163}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.284049", "id": 61130}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.256493", "id": 56112}
{"buggy_code": "module demo_820(input data, b, output prod); assign prod = data & b | en; endmodule", "correct_code": "module demo_820(input data, b, output prod); assign prod = (data & b) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.998314", "id": 9103}
{"buggy_code": "module basic_434(input b, rst, output prod); assign prod = b & rst | in; endmodule", "correct_code": "module basic_434(input b, rst, output prod); assign prod = (b & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.135262", "id": 33987}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.342090", "id": 71706}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.089187", "id": 25566}
{"buggy_code": "module basic_345(input in, c, output out); assign out = in & c | b; endmodule", "correct_code": "module basic_345(input in, c, output out); assign out = (in & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.087087", "id": 25183}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.970535", "id": 4093}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.357899", "id": 74582}
{"buggy_code": "module arith_46(input b, in, output out); assign out = b & in | rst; endmodule", "correct_code": "module arith_46(input b, in, output out); assign out = (b & in) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.975949", "id": 5078}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.178360", "id": 41889}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.263260", "id": 57349}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.135966", "id": 34117}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.052408", "id": 18858}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138916", "id": 34663}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.315070", "id": 66813}
{"buggy_code": "module test_108(input clk, clk, output result); assign result = clk & clk | x; endmodule", "correct_code": "module test_108(input clk, clk, output result); assign result = (clk & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.012168", "id": 11607}
{"buggy_code": "module simple_299(input d, c, output result); assign result = d & c | en; endmodule", "correct_code": "module simple_299(input d, c, output result); assign result = (d & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.239505", "id": 53016}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.285670", "id": 61426}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179085", "id": 42023}
{"buggy_code": "module arith_629(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module arith_629(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174538", "id": 41184}
{"buggy_code": "module demo_218(input x, clk, output y); assign y = x & clk | c; endmodule", "correct_code": "module demo_218(input x, clk, output y); assign y = (x & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.307522", "id": 65436}
{"buggy_code": "module demo_83(input y, output out); assign out = y + 1; endmodule", "correct_code": "module demo_83(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.051716", "id": 18731}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.201874", "id": 46145}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.234135", "id": 52027}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.973906", "id": 4706}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.147402", "id": 36205}
{"buggy_code": "module basic_365(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module basic_365(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.072927", "id": 22631}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.101313", "id": 27780}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.354317", "id": 73922}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.058648", "id": 20008}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008111", "id": 10870}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.281369", "id": 60640}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.076448", "id": 23274}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.108808", "id": 29153}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.991430", "id": 7849}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.198218", "id": 45478}
{"buggy_code": "module arith_542(input x, output y); assign y = x + 1; endmodule", "correct_code": "module arith_542(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.975223", "id": 4947}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.198965", "id": 45614}
{"buggy_code": "module test_450(input y, output out); assign out = y + 1; endmodule", "correct_code": "module test_450(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.268629", "id": 58330}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.102313", "id": 27964}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.336398", "id": 70690}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.304348", "id": 64848}
{"buggy_code": "module simple_925(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module simple_925(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.097140", "id": 27014}
{"buggy_code": "module test_162(input c, output y); assign y = c + 1; endmodule", "correct_code": "module test_162(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.084357", "id": 24684}
{"buggy_code": "module demo_932(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module demo_932(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.967050", "id": 3465}
{"buggy_code": "module simple_995(input y, clk, output sum); assign sum = y & clk | c; endmodule", "correct_code": "module simple_995(input y, clk, output sum); assign sum = (y & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.202855", "id": 46324}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.337083", "id": 70816}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.072693", "id": 22588}
{"buggy_code": "module demo_444(input data, clk, output sum); assign sum = data & clk | rst; endmodule", "correct_code": "module demo_444(input data, clk, output sum); assign sum = (data & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.301803", "id": 64376}
{"buggy_code": "module demo_431(input in, output result); assign result = in + 1; endmodule", "correct_code": "module demo_431(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.972370", "id": 4430}
{"buggy_code": "module test_564(input en, rst, output prod); assign prod = en & rst | y; endmodule", "correct_code": "module test_564(input en, rst, output prod); assign prod = (en & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.983677", "id": 6426}
{"buggy_code": "module basic_166(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module basic_166(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.228180", "id": 50932}
{"buggy_code": "module demo_861(input a, output y); assign y = a + 1; endmodule", "correct_code": "module demo_861(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.206451", "id": 46983}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.069879", "id": 22068}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.072756", "id": 22600}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.303789", "id": 64742}
{"buggy_code": "module simple_360(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module simple_360(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.317752", "id": 67307}
{"buggy_code": "module simple_589(input y, output out); assign out = y + 1; endmodule", "correct_code": "module simple_589(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.276184", "id": 59692}
{"buggy_code": "module demo_626(input in, output q); assign q = in + 1; endmodule", "correct_code": "module demo_626(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.227036", "id": 50724}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.128463", "id": 32742}
{"buggy_code": "module demo_460(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module demo_460(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.228912", "id": 51064}
{"buggy_code": "module demo_449(input d, output y); assign y = d + 1; endmodule", "correct_code": "module demo_449(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.007625", "id": 10782}
{"buggy_code": "module demo_697(input en, output q); assign q = en + 1; endmodule", "correct_code": "module demo_697(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.076475", "id": 23278}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.353503", "id": 73775}
{"buggy_code": "module demo_772(input en, x, output sum); assign sum = en & x | c; endmodule", "correct_code": "module demo_772(input en, x, output sum); assign sum = (en & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.094300", "id": 26497}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.152752", "id": 37199}
{"buggy_code": "module test_804(input data, clk, output y); assign y = data & clk | en; endmodule", "correct_code": "module test_804(input data, clk, output y); assign y = (data & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.225223", "id": 50392}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.251045", "id": 55127}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.038816", "id": 16425}
{"buggy_code": "module arith_312(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module arith_312(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.076664", "id": 23308}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.030164", "id": 14856}
{"buggy_code": "module basic_209(input en, data, output sum); assign sum = en & data | clk; endmodule", "correct_code": "module basic_209(input en, data, output sum); assign sum = (en & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.111073", "id": 29567}
{"buggy_code": "module demo_519(input b, a, output prod); assign prod = b & a | c; endmodule", "correct_code": "module demo_519(input b, a, output prod); assign prod = (b & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.196691", "id": 45201}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.091582", "id": 26009}
{"buggy_code": "module demo_88(input in, output out); assign out = in + 1; endmodule", "correct_code": "module demo_88(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.981833", "id": 6090}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.166773", "id": 39768}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.144609", "id": 35697}
{"buggy_code": "module simple_604(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module simple_604(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.066758", "id": 21498}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.316854", "id": 67140}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.121841", "id": 31532}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.065380", "id": 21248}
{"buggy_code": "module logic_322(input x, output sum); assign sum = x + 1; endmodule", "correct_code": "module logic_322(input x, output sum); assign sum = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.966079", "id": 3288}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.335229", "id": 70475}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.137281", "id": 34360}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.030097", "id": 14843}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.235807", "id": 52335}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.024807", "id": 13889}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.102229", "id": 27947}
{"buggy_code": "module logic_943(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module logic_943(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.205767", "id": 46860}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.189075", "id": 43839}
{"buggy_code": "module demo_488(input clk, b, output out); assign out = clk & b | in; endmodule", "correct_code": "module demo_488(input clk, b, output out); assign out = (clk & b) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.145463", "id": 35858}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.261222", "id": 56980}
{"buggy_code": "module test_81(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module test_81(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.051471", "id": 18686}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.297191", "id": 63531}
{"buggy_code": "module basic_312(input rst, rst, output q); assign q = rst & rst | y; endmodule", "correct_code": "module basic_312(input rst, rst, output q); assign q = (rst & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.017253", "id": 12530}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.171547", "id": 40641}
{"buggy_code": "module example_403(input y, a, output sum); assign sum = y & a | rst; endmodule", "correct_code": "module example_403(input y, a, output sum); assign sum = (y & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.298933", "id": 63849}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.087952", "id": 25340}
{"buggy_code": "module demo_792(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module demo_792(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.064237", "id": 21036}
{"buggy_code": "module demo_307(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module demo_307(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.095725", "id": 26760}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.311016", "id": 66077}
{"buggy_code": "module demo_343(input in, output result); assign result = in + 1; endmodule", "correct_code": "module demo_343(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.299808", "id": 64011}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.955501", "id": 1363}
{"buggy_code": "module demo_254(input b, output q); assign q = b + 1; endmodule", "correct_code": "module demo_254(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.131661", "id": 33332}
{"buggy_code": "module simple_20(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module simple_20(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.338067", "id": 70996}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.057905", "id": 19873}
{"buggy_code": "module basic_727(input b, rst, output y); assign y = b & rst | x; endmodule", "correct_code": "module basic_727(input b, rst, output y); assign y = (b & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.095165", "id": 26656}
{"buggy_code": "module simple_554(input en, en, output valid); assign valid = en & en | rst; endmodule", "correct_code": "module simple_554(input en, en, output valid); assign valid = (en & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.318488", "id": 67442}
{"buggy_code": "module demo_906(input data, c, output result); assign result = data & c | in; endmodule", "correct_code": "module demo_906(input data, c, output result); assign result = (data & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.985425", "id": 6745}
{"buggy_code": "module arith_500(input x, a, output valid); assign valid = x & a | c; endmodule", "correct_code": "module arith_500(input x, a, output valid); assign valid = (x & a) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.158978", "id": 38343}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.286039", "id": 61494}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.267100", "id": 58050}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.080689", "id": 24026}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.076583", "id": 23296}
{"buggy_code": "module example_380(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module example_380(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.259168", "id": 56603}
{"buggy_code": "module example_746(input a, in, output sum); assign sum = a & in | in; endmodule", "correct_code": "module example_746(input a, in, output sum); assign sum = (a & in) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.231844", "id": 51604}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.111662", "id": 29676}
{"buggy_code": "module example_72(input d, y, output out); assign out = d & y | a; endmodule", "correct_code": "module example_72(input d, y, output out); assign out = (d & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.109292", "id": 29240}
{"buggy_code": "module example_736(input a, rst, output q); assign q = a & rst | en; endmodule", "correct_code": "module example_736(input a, rst, output q); assign q = (a & rst) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.323724", "id": 68370}
{"buggy_code": "module logic_119(input rst, en, output y); assign y = rst & en | y; endmodule", "correct_code": "module logic_119(input rst, en, output y); assign y = (rst & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.138399", "id": 34567}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.012793", "id": 11720}
{"buggy_code": "module arith_826(input in, output result); assign result = in + 1; endmodule", "correct_code": "module arith_826(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.315763", "id": 66941}
{"buggy_code": "module logic_74(input d, x, output valid); assign valid = d & x | clk; endmodule", "correct_code": "module logic_74(input d, x, output valid); assign valid = (d & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.146160", "id": 35984}
{"buggy_code": "module logic_355(input in, y, output sum); assign sum = in & y | c; endmodule", "correct_code": "module logic_355(input in, y, output sum); assign sum = (in & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.260261", "id": 56802}
{"buggy_code": "module test_106(input clk, a, output sum); assign sum = clk & a | clk; endmodule", "correct_code": "module test_106(input clk, a, output sum); assign sum = (clk & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.342248", "id": 71736}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.258202", "id": 56427}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.010927", "id": 11382}
{"buggy_code": "module logic_856(input data, data, output y); assign y = data & data | in; endmodule", "correct_code": "module logic_856(input data, data, output y); assign y = (data & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.165321", "id": 39501}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.199590", "id": 45728}
{"buggy_code": "module test_92(input a, output result); assign result = a + 1; endmodule", "correct_code": "module test_92(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.013886", "id": 11919}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.007665", "id": 10790}
{"buggy_code": "module arith_449(input in, d, output q); assign q = in & d | en; endmodule", "correct_code": "module arith_449(input in, d, output q); assign q = (in & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.042811", "id": 17142}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.196596", "id": 45182}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.999675", "id": 9350}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.235783", "id": 52330}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.350944", "id": 73308}
{"buggy_code": "module arith_125(input a, output result); assign result = a + 1; endmodule", "correct_code": "module arith_125(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.951977", "id": 725}
{"buggy_code": "module logic_782(input rst, output valid); assign valid = rst + 1; endmodule", "correct_code": "module logic_782(input rst, output valid); assign valid = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.253466", "id": 55561}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.344183", "id": 72086}
{"buggy_code": "module arith_726(input y, y, output result); assign result = y & y | clk; endmodule", "correct_code": "module arith_726(input y, y, output result); assign result = (y & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.163089", "id": 39094}
{"buggy_code": "module basic_199(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module basic_199(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.152510", "id": 37153}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.095350", "id": 26690}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.040746", "id": 16770}
{"buggy_code": "module basic_787(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module basic_787(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.225143", "id": 50379}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.984641", "id": 6604}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.194275", "id": 44760}
{"buggy_code": "module demo_115(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module demo_115(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.982340", "id": 6181}
{"buggy_code": "module simple_404(input rst, a, output y); assign y = rst & a | in; endmodule", "correct_code": "module simple_404(input rst, a, output y); assign y = (rst & a) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.049007", "id": 18262}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.141560", "id": 35131}
{"buggy_code": "module arith_314(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module arith_314(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.270110", "id": 58602}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.003575", "id": 10043}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.135345", "id": 34003}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.071559", "id": 22380}
{"buggy_code": "module logic_939(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module logic_939(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.091026", "id": 25905}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113362", "id": 29989}
{"buggy_code": "module basic_891(input x, clk, output y); assign y = x & clk | en; endmodule", "correct_code": "module basic_891(input x, clk, output y); assign y = (x & clk) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.188723", "id": 43775}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.101886", "id": 27885}
{"buggy_code": "module demo_958(input clk, rst, output y); assign y = clk & rst | y; endmodule", "correct_code": "module demo_958(input clk, rst, output y); assign y = (clk & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.294477", "id": 63035}
{"buggy_code": "module demo_69(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module demo_69(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.164356", "id": 39325}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.048175", "id": 18112}
{"buggy_code": "module demo_865(input c, a, output y); assign y = c & a | clk; endmodule", "correct_code": "module demo_865(input c, a, output y); assign y = (c & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.203122", "id": 46375}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.164790", "id": 39405}
{"buggy_code": "module example_42(input d, output out); assign out = d + 1; endmodule", "correct_code": "module example_42(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.206505", "id": 46993}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.356486", "id": 74323}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.051842", "id": 18754}
{"buggy_code": "module example_565(input data, output result); assign result = data + 1; endmodule", "correct_code": "module example_565(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.120295", "id": 31249}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.274437", "id": 59397}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.031947", "id": 15178}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.331869", "id": 69860}
{"buggy_code": "module basic_439(input b, output out); assign out = b + 1; endmodule", "correct_code": "module basic_439(input b, output out); assign out = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.111929", "id": 29723}
{"buggy_code": "module test_644(input b, output q); assign q = b + 1; endmodule", "correct_code": "module test_644(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.205602", "id": 46829}
{"buggy_code": "module example_27(input c, clk, output y); assign y = c & clk | data; endmodule", "correct_code": "module example_27(input c, clk, output y); assign y = (c & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.097156", "id": 27016}
{"buggy_code": "module arith_117(input a, output out); assign out = a + 1; endmodule", "correct_code": "module arith_117(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.214032", "id": 48362}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.005000", "id": 10304}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.161117", "id": 38737}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.222023", "id": 49809}
{"buggy_code": "module example_525(input data, output out); assign out = data + 1; endmodule", "correct_code": "module example_525(input data, output out); assign out = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.280601", "id": 60497}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.239358", "id": 52988}
{"buggy_code": "module basic_535(input a, a, output prod); assign prod = a & a | x; endmodule", "correct_code": "module basic_535(input a, a, output prod); assign prod = (a & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.989128", "id": 7423}
{"buggy_code": "module demo_308(input a, in, output result); assign result = a & in | data; endmodule", "correct_code": "module demo_308(input a, in, output result); assign result = (a & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.340218", "id": 71370}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.201606", "id": 46098}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.295036", "id": 63136}
{"buggy_code": "module demo_117(input en, output result); assign result = en + 1; endmodule", "correct_code": "module demo_117(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.232800", "id": 51781}
{"buggy_code": "module basic_39(input d, output out); assign out = d + 1; endmodule", "correct_code": "module basic_39(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.216221", "id": 48761}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.102481", "id": 27994}
{"buggy_code": "module demo_278(input y, clk, output prod); assign prod = y & clk | c; endmodule", "correct_code": "module demo_278(input y, clk, output prod); assign prod = (y & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.236621", "id": 52482}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.072139", "id": 22485}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.131795", "id": 33357}
{"buggy_code": "module basic_709(input x, d, output y); assign y = x & d | x; endmodule", "correct_code": "module basic_709(input x, d, output y); assign y = (x & d) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.046158", "id": 17745}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.009982", "id": 11212}
{"buggy_code": "module basic_489(input b, output q); assign q = b + 1; endmodule", "correct_code": "module basic_489(input b, output q); assign q = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.278895", "id": 60182}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.246584", "id": 54311}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.053008", "id": 18965}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.142618", "id": 35327}
{"buggy_code": "module arith_894(input data, rst, output sum); assign sum = data & rst | data; endmodule", "correct_code": "module arith_894(input data, rst, output sum); assign sum = (data & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.953438", "id": 990}
{"buggy_code": "module simple_578(input y, output valid); assign valid = y + 1; endmodule", "correct_code": "module simple_578(input y, output valid); assign valid = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.350658", "id": 73259}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.185282", "id": 43149}
{"buggy_code": "module basic_254(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module basic_254(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.145732", "id": 35907}
{"buggy_code": "module test_881(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module test_881(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.318529", "id": 67450}
{"buggy_code": "module logic_40(input in, output result); assign result = in + 1; endmodule", "correct_code": "module logic_40(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.281092", "id": 60588}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.097058", "id": 26999}
{"buggy_code": "module example_648(input x, output result); assign result = x + 1; endmodule", "correct_code": "module example_648(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.287325", "id": 61725}
{"buggy_code": "module example_850(input en, b, output out); assign out = en & b | c; endmodule", "correct_code": "module example_850(input en, b, output out); assign out = (en & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.970909", "id": 4162}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.963470", "id": 2808}
{"buggy_code": "module logic_702(input in, x, output valid); assign valid = in & x | c; endmodule", "correct_code": "module logic_702(input in, x, output valid); assign valid = (in & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.246081", "id": 54222}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.326700", "id": 68914}
{"buggy_code": "module demo_671(input x, b, output prod); assign prod = x & b | d; endmodule", "correct_code": "module demo_671(input x, b, output prod); assign prod = (x & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.000789", "id": 9552}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.098289", "id": 27224}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.190294", "id": 44026}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.248469", "id": 54657}
{"buggy_code": "module logic_298(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module logic_298(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.209795", "id": 47592}
{"buggy_code": "module simple_244(input x, a, output valid); assign valid = x & a | data; endmodule", "correct_code": "module simple_244(input x, a, output valid); assign valid = (x & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.292563", "id": 62688}
{"buggy_code": "module test_385(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module test_385(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.065396", "id": 21251}
{"buggy_code": "module simple_479(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module simple_479(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.026143", "id": 14135}
{"buggy_code": "module logic_92(input y, data, output valid); assign valid = y & data | b; endmodule", "correct_code": "module logic_92(input y, data, output valid); assign valid = (y & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.075136", "id": 23044}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.303359", "id": 64660}
{"buggy_code": "module basic_765(input d, in, output result); assign result = d & in | y; endmodule", "correct_code": "module basic_765(input d, in, output result); assign result = (d & in) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.224067", "id": 50183}
{"buggy_code": "module arith_352(input en, en, output out); assign out = en & en | en; endmodule", "correct_code": "module arith_352(input en, en, output out); assign out = (en & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.977063", "id": 5280}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.229580", "id": 51188}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.109709", "id": 29317}
{"buggy_code": "module arith_29(input a, data, output result); assign result = a & data | en; endmodule", "correct_code": "module arith_29(input a, data, output result); assign result = (a & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.176862", "id": 41611}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.295790", "id": 63277}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.978311", "id": 5459}
{"buggy_code": "module arith_7(input a, output result); assign result = a + 1; endmodule", "correct_code": "module arith_7(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.982174", "id": 6151}
{"buggy_code": "module test_711(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module test_711(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.251912", "id": 55281}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.332502", "id": 69977}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.260403", "id": 56830}
{"buggy_code": "module arith_795(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module arith_795(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.272857", "id": 59107}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.952604", "id": 841}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.028966", "id": 14638}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.284157", "id": 61150}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.161599", "id": 38827}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.146463", "id": 36038}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.333114", "id": 70091}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.206305", "id": 46958}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.270982", "id": 58761}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.068439", "id": 21801}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.011882", "id": 11557}
{"buggy_code": "module demo_345(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module demo_345(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.321131", "id": 67893}
{"buggy_code": "module arith_559(input data, output y); assign y = data + 1; endmodule", "correct_code": "module arith_559(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.245000", "id": 54020}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.234910", "id": 52168}
{"buggy_code": "module example_326(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module example_326(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.231776", "id": 51594}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.314019", "id": 66620}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.098603", "id": 27283}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.972191", "id": 4398}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.044492", "id": 17447}
{"buggy_code": "module logic_18(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module logic_18(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.305067", "id": 64980}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.067107", "id": 21560}
{"buggy_code": "module basic_912(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module basic_912(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.038437", "id": 16355}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.327659", "id": 69090}
{"buggy_code": "module logic_530(input in, d, output out); assign out = in & d | y; endmodule", "correct_code": "module logic_530(input in, d, output out); assign out = (in & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.333865", "id": 70226}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.021288", "id": 13250}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.129142", "id": 32865}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.185456", "id": 43179}
{"buggy_code": "module basic_61(input b, c, output result); assign result = b & c | a; endmodule", "correct_code": "module basic_61(input b, c, output result); assign result = (b & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.331353", "id": 69767}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.096601", "id": 26916}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.979384", "id": 5655}
{"buggy_code": "module arith_580(input d, rst, output result); assign result = d & rst | in; endmodule", "correct_code": "module arith_580(input d, rst, output result); assign result = (d & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.146020", "id": 35958}
{"buggy_code": "module demo_457(input data, output prod); assign prod = data + 1; endmodule", "correct_code": "module demo_457(input data, output prod); assign prod = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.228239", "id": 50943}
{"buggy_code": "module example_99(input b, y, output valid); assign valid = b & y | x; endmodule", "correct_code": "module example_99(input b, y, output valid); assign valid = (b & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.326229", "id": 68826}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.048232", "id": 18122}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.130436", "id": 33103}
{"buggy_code": "module logic_367(input en, output y); assign y = en + 1; endmodule", "correct_code": "module logic_367(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.287330", "id": 61726}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.084977", "id": 24797}
{"buggy_code": "module simple_377(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module simple_377(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.141070", "id": 35058}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.205710", "id": 46849}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.054894", "id": 19317}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.221590", "id": 49730}
{"buggy_code": "module logic_181(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module logic_181(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.034844", "id": 15699}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.144455", "id": 35669}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.983017", "id": 6306}
{"buggy_code": "module test_282(input x, output result); assign result = x + 1; endmodule", "correct_code": "module test_282(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.321953", "id": 68044}
{"buggy_code": "module arith_440(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module arith_440(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.157089", "id": 37995}
{"buggy_code": "module arith_151(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module arith_151(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.055112", "id": 19361}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.062461", "id": 20710}
{"buggy_code": "module test_723(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module test_723(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.211931", "id": 47982}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.301659", "id": 64350}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.325006", "id": 68603}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.037518", "id": 16187}
{"buggy_code": "module basic_455(input clk, rst, output prod); assign prod = clk & rst | rst; endmodule", "correct_code": "module basic_455(input clk, rst, output prod); assign prod = (clk & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.331381", "id": 69772}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.152326", "id": 37120}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.084700", "id": 24747}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.115613", "id": 30403}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.286337", "id": 61549}
{"buggy_code": "module demo_290(input en, in, output y); assign y = en & in | data; endmodule", "correct_code": "module demo_290(input en, in, output y); assign y = (en & in) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.260896", "id": 56919}
{"buggy_code": "module example_932(input y, y, output sum); assign sum = y & y | data; endmodule", "correct_code": "module example_932(input y, y, output sum); assign sum = (y & y) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.351575", "id": 73426}
{"buggy_code": "module demo_432(input in, d, output valid); assign valid = in & d | a; endmodule", "correct_code": "module demo_432(input in, d, output valid); assign valid = (in & d) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.140007", "id": 34862}
{"buggy_code": "module example_753(input c, output result); assign result = c + 1; endmodule", "correct_code": "module example_753(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.305978", "id": 65148}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.080998", "id": 24081}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.206658", "id": 47022}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.963061", "id": 2733}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.105352", "id": 28513}
{"buggy_code": "module arith_123(input b, in, output q); assign q = b & in | a; endmodule", "correct_code": "module arith_123(input b, in, output q); assign q = (b & in) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.055272", "id": 19390}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.034447", "id": 15628}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.262157", "id": 57150}
{"buggy_code": "module simple_970(input en, output valid); assign valid = en + 1; endmodule", "correct_code": "module simple_970(input en, output valid); assign valid = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.159894", "id": 38512}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.025588", "id": 14033}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.093509", "id": 26353}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.196061", "id": 45085}
{"buggy_code": "module example_595(input en, x, output prod); assign prod = en & x | data; endmodule", "correct_code": "module example_595(input en, x, output prod); assign prod = (en & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.950837", "id": 516}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.267787", "id": 58175}
{"buggy_code": "module basic_114(input b, output valid); assign valid = b + 1; endmodule", "correct_code": "module basic_114(input b, output valid); assign valid = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.218397", "id": 49159}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.254701", "id": 55785}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.987962", "id": 7209}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.358363", "id": 74669}
{"buggy_code": "module simple_827(input y, output result); assign result = y + 1; endmodule", "correct_code": "module simple_827(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.356872", "id": 74392}
{"buggy_code": "module test_837(input c, data, output result); assign result = c & data | c; endmodule", "correct_code": "module test_837(input c, data, output result); assign result = (c & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.348108", "id": 72794}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.326946", "id": 68958}
{"buggy_code": "module example_580(input d, output result); assign result = d + 1; endmodule", "correct_code": "module example_580(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.214038", "id": 48363}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.234591", "id": 52112}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.348586", "id": 72887}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.070533", "id": 22190}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.202674", "id": 46292}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.312955", "id": 66428}
{"buggy_code": "module arith_213(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module arith_213(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.081864", "id": 24237}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.269873", "id": 58558}
{"buggy_code": "module test_108(input y, b, output result); assign result = y & b | a; endmodule", "correct_code": "module test_108(input y, b, output result); assign result = (y & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.259580", "id": 56678}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.320981", "id": 67866}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.065735", "id": 21313}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.094132", "id": 26465}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.059955", "id": 20249}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.177018", "id": 41639}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.323669", "id": 68360}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.276364", "id": 59722}
{"buggy_code": "module test_303(input rst, output out); assign out = rst + 1; endmodule", "correct_code": "module test_303(input rst, output out); assign out = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.225119", "id": 50375}
{"buggy_code": "module arith_874(input a, a, output out); assign out = a & a | y; endmodule", "correct_code": "module arith_874(input a, a, output out); assign out = (a & a) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.278067", "id": 60030}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.135254", "id": 33986}
{"buggy_code": "module test_952(input a, output prod); assign prod = a + 1; endmodule", "correct_code": "module test_952(input a, output prod); assign prod = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.206379", "id": 46970}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.144244", "id": 35628}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.068312", "id": 21778}
{"buggy_code": "module simple_359(input en, data, output prod); assign prod = en & data | a; endmodule", "correct_code": "module simple_359(input en, data, output prod); assign prod = (en & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.187408", "id": 43533}
{"buggy_code": "module basic_854(input en, data, output prod); assign prod = en & data | a; endmodule", "correct_code": "module basic_854(input en, data, output prod); assign prod = (en & data) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.228686", "id": 51025}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.046832", "id": 17869}
{"buggy_code": "module test_493(input d, output y); assign y = d + 1; endmodule", "correct_code": "module test_493(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.974364", "id": 4790}
{"buggy_code": "module example_940(input a, output q); assign q = a + 1; endmodule", "correct_code": "module example_940(input a, output q); assign q = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.047330", "id": 17958}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.098133", "id": 27195}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.356773", "id": 74377}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.164008", "id": 39263}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232492", "id": 51722}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.962940", "id": 2713}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.287527", "id": 61764}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.136733", "id": 34258}
{"buggy_code": "module test_527(input a, y, output sum); assign sum = a & y | en; endmodule", "correct_code": "module test_527(input a, y, output sum); assign sum = (a & y) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.966103", "id": 3292}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.096462", "id": 26892}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.169715", "id": 40306}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.145520", "id": 35868}
{"buggy_code": "module logic_668(input a, output out); assign out = a + 1; endmodule", "correct_code": "module logic_668(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.168835", "id": 40144}
{"buggy_code": "module demo_522(input data, output y); assign y = data + 1; endmodule", "correct_code": "module demo_522(input data, output y); assign y = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.016702", "id": 12431}
{"buggy_code": "module arith_442(input en, in, output valid); assign valid = en & in | clk; endmodule", "correct_code": "module arith_442(input en, in, output valid); assign valid = (en & in) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.964655", "id": 3028}
{"buggy_code": "module simple_986(input a, y, output out); assign out = a & y | in; endmodule", "correct_code": "module simple_986(input a, y, output out); assign out = (a & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.055896", "id": 19502}
{"buggy_code": "module logic_709(input data, data, output valid); assign valid = data & data | clk; endmodule", "correct_code": "module logic_709(input data, data, output valid); assign valid = (data & data) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.096280", "id": 26860}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.030640", "id": 14942}
{"buggy_code": "module arith_16(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module arith_16(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.987594", "id": 7143}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.348068", "id": 72787}
{"buggy_code": "module demo_934(input in, c, output valid); assign valid = in & c | en; endmodule", "correct_code": "module demo_934(input in, c, output valid); assign valid = (in & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.161791", "id": 38863}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.326753", "id": 68924}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.069634", "id": 22024}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.282642", "id": 60875}
{"buggy_code": "module simple_413(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module simple_413(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.218879", "id": 49250}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.245406", "id": 54098}
{"buggy_code": "module logic_327(input b, en, output q); assign q = b & en | clk; endmodule", "correct_code": "module logic_327(input b, en, output q); assign q = (b & en) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.188487", "id": 43732}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.260539", "id": 56854}
{"buggy_code": "module test_753(input a, d, output sum); assign sum = a & d | b; endmodule", "correct_code": "module test_753(input a, d, output sum); assign sum = (a & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.252330", "id": 55358}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.341875", "id": 71665}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.061673", "id": 20567}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.005482", "id": 10395}
{"buggy_code": "module test_182(input x, clk, output result); assign result = x & clk | x; endmodule", "correct_code": "module test_182(input x, clk, output result); assign result = (x & clk) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.060204", "id": 20296}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.175548", "id": 41371}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.107977", "id": 28997}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.232275", "id": 51682}
{"buggy_code": "module arith_843(input c, output y); assign y = c + 1; endmodule", "correct_code": "module arith_843(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.097562", "id": 27091}
{"buggy_code": "module test_603(input in, output y); assign y = in + 1; endmodule", "correct_code": "module test_603(input in, output y); assign y = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.258502", "id": 56482}
{"buggy_code": "module logic_429(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module logic_429(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.965942", "id": 3262}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.177853", "id": 41797}
{"buggy_code": "module demo_192(input x, rst, output sum); assign sum = x & rst | rst; endmodule", "correct_code": "module demo_192(input x, rst, output sum); assign sum = (x & rst) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.128751", "id": 32795}
{"buggy_code": "module test_20(input data, output q); assign q = data + 1; endmodule", "correct_code": "module test_20(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.062919", "id": 20793}
{"buggy_code": "module example_175(input c, c, output q); assign q = c & c | b; endmodule", "correct_code": "module example_175(input c, c, output q); assign q = (c & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.048876", "id": 18238}
{"buggy_code": "module demo_566(input d, clk, output valid); assign valid = d & clk | rst; endmodule", "correct_code": "module demo_566(input d, clk, output valid); assign valid = (d & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.992693", "id": 8081}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.009131", "id": 11057}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.044170", "id": 17387}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.214088", "id": 48372}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.059550", "id": 20176}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.222028", "id": 49810}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.991612", "id": 7883}
{"buggy_code": "module logic_923(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module logic_923(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.042258", "id": 17040}
{"buggy_code": "module simple_84(input b, d, output y); assign y = b & d | b; endmodule", "correct_code": "module simple_84(input b, d, output y); assign y = (b & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.985618", "id": 6782}
{"buggy_code": "module demo_908(input rst, a, output valid); assign valid = rst & a | x; endmodule", "correct_code": "module demo_908(input rst, a, output valid); assign valid = (rst & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.338043", "id": 70991}
{"buggy_code": "module simple_616(input in, output out); assign out = in + 1; endmodule", "correct_code": "module simple_616(input in, output out); assign out = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.968322", "id": 3700}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.316799", "id": 67131}
{"buggy_code": "module example_99(input data, en, output y); assign y = data & en | in; endmodule", "correct_code": "module example_99(input data, en, output y); assign y = (data & en) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.288222", "id": 61890}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.280760", "id": 60528}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.960184", "id": 2210}
{"buggy_code": "module arith_94(input b, c, output valid); assign valid = b & c | data; endmodule", "correct_code": "module arith_94(input b, c, output valid); assign valid = (b & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.967149", "id": 3483}
{"buggy_code": "module basic_231(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module basic_231(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.063676", "id": 20934}
{"buggy_code": "module basic_816(input rst, data, output valid); assign valid = rst & data | en; endmodule", "correct_code": "module basic_816(input rst, data, output valid); assign valid = (rst & data) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.285935", "id": 61474}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.030330", "id": 14886}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.210581", "id": 47737}
{"buggy_code": "module example_277(input b, output result); assign result = b + 1; endmodule", "correct_code": "module example_277(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.033773", "id": 15506}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.034813", "id": 15695}
{"buggy_code": "module test_85(input c, clk, output y); assign y = c & clk | b; endmodule", "correct_code": "module test_85(input c, clk, output y); assign y = (c & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.119233", "id": 31064}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.056616", "id": 19636}
{"buggy_code": "module test_424(input data, x, output valid); assign valid = data & x | data; endmodule", "correct_code": "module test_424(input data, x, output valid); assign valid = (data & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.194157", "id": 44737}
{"buggy_code": "module demo_454(input y, clk, output out); assign out = y & clk | in; endmodule", "correct_code": "module demo_454(input y, clk, output out); assign out = (y & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.300197", "id": 64081}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.174722", "id": 41220}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.123659", "id": 31866}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.346349", "id": 72474}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.180898", "id": 42355}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.156431", "id": 37875}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.262986", "id": 57299}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.150018", "id": 36692}
{"buggy_code": "module example_723(input c, y, output sum); assign sum = c & y | rst; endmodule", "correct_code": "module example_723(input c, y, output sum); assign sum = (c & y) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.126132", "id": 32317}
{"buggy_code": "module basic_264(input clk, data, output out); assign out = clk & data | in; endmodule", "correct_code": "module basic_264(input clk, data, output out); assign out = (clk & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.231626", "id": 51567}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.003709", "id": 10068}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.197215", "id": 45295}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.006179", "id": 10521}
{"buggy_code": "module basic_123(input d, output y); assign y = d + 1; endmodule", "correct_code": "module basic_123(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.262387", "id": 57191}
{"buggy_code": "module basic_484(input a, output out); assign out = a + 1; endmodule", "correct_code": "module basic_484(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.957599", "id": 1743}
{"buggy_code": "module example_858(input c, output result); assign result = c + 1; endmodule", "correct_code": "module example_858(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.948256", "id": 55}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.097543", "id": 27087}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.334448", "id": 70331}
{"buggy_code": "module test_667(input a, output result); assign result = a + 1; endmodule", "correct_code": "module test_667(input a, output result); assign result = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.968562", "id": 3744}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.111980", "id": 29733}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.040515", "id": 16731}
{"buggy_code": "module example_720(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module example_720(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.224662", "id": 50291}
{"buggy_code": "module demo_661(input en, output out); assign out = en + 1; endmodule", "correct_code": "module demo_661(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.176990", "id": 41634}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.067139", "id": 21566}
{"buggy_code": "module example_442(input en, output q); assign q = en + 1; endmodule", "correct_code": "module example_442(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.325982", "id": 68780}
{"buggy_code": "module basic_428(input en, output q); assign q = en + 1; endmodule", "correct_code": "module basic_428(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.164712", "id": 39390}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.979538", "id": 5684}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.323224", "id": 68277}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.176408", "id": 41529}
{"buggy_code": "module example_277(input y, c, output q); assign q = y & c | b; endmodule", "correct_code": "module example_277(input y, c, output q); assign q = (y & c) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.140517", "id": 34957}
{"buggy_code": "module basic_429(input clk, x, output q); assign q = clk & x | clk; endmodule", "correct_code": "module basic_429(input clk, x, output q); assign q = (clk & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.977244", "id": 5314}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.018471", "id": 12752}
{"buggy_code": "module logic_683(input clk, d, output y); assign y = clk & d | rst; endmodule", "correct_code": "module logic_683(input clk, d, output y); assign y = (clk & d) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.194462", "id": 44794}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.260747", "id": 56893}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.079447", "id": 23798}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.329443", "id": 69419}
{"buggy_code": "module basic_688(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module basic_688(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.030669", "id": 14948}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.302324", "id": 64472}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.227692", "id": 50845}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.267856", "id": 58186}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.150737", "id": 36827}
{"buggy_code": "module test_691(input en, output y); assign y = en + 1; endmodule", "correct_code": "module test_691(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.109637", "id": 29304}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.264957", "id": 57660}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.247447", "id": 54468}
{"buggy_code": "module simple_137(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module simple_137(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.209427", "id": 47524}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.244990", "id": 54018}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.966939", "id": 3443}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.166578", "id": 39731}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.097201", "id": 27024}
{"buggy_code": "module simple_142(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module simple_142(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.199625", "id": 45734}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.964922", "id": 3076}
{"buggy_code": "module basic_84(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module basic_84(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.072196", "id": 22495}
{"buggy_code": "module arith_234(input d, in, output valid); assign valid = d & in | b; endmodule", "correct_code": "module arith_234(input d, in, output valid); assign valid = (d & in) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.348798", "id": 72927}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.199670", "id": 45742}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.953116", "id": 932}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.341650", "id": 71627}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.038400", "id": 16348}
{"buggy_code": "module arith_605(input clk, in, output valid); assign valid = clk & in | x; endmodule", "correct_code": "module arith_605(input clk, in, output valid); assign valid = (clk & in) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.186531", "id": 43377}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.951631", "id": 663}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.273512", "id": 59227}
{"buggy_code": "module simple_448(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module simple_448(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.084982", "id": 24798}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.284793", "id": 61267}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.112135", "id": 29762}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.280128", "id": 60411}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.169015", "id": 40177}
{"buggy_code": "module simple_912(input data, data, output result); assign result = data & data | y; endmodule", "correct_code": "module simple_912(input data, data, output result); assign result = (data & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.273452", "id": 59216}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.230332", "id": 51327}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.326103", "id": 68803}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.092371", "id": 26149}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.021021", "id": 13200}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.088865", "id": 25504}
{"buggy_code": "module demo_141(input x, c, output q); assign q = x & c | c; endmodule", "correct_code": "module demo_141(input x, c, output q); assign q = (x & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.338727", "id": 71119}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.136780", "id": 34266}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.277160", "id": 59863}
{"buggy_code": "module simple_440(input clk, x, output valid); assign valid = clk & x | en; endmodule", "correct_code": "module simple_440(input clk, x, output valid); assign valid = (clk & x) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.264681", "id": 57611}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.029353", "id": 14708}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.224541", "id": 50270}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.272580", "id": 59056}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.307216", "id": 65378}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.135007", "id": 33942}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.149254", "id": 36551}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.052352", "id": 18848}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.215352", "id": 48602}
{"buggy_code": "module logic_257(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module logic_257(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.087362", "id": 25233}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.258546", "id": 56490}
{"buggy_code": "module logic_749(input x, a, output q); assign q = x & a | b; endmodule", "correct_code": "module logic_749(input x, a, output q); assign q = (x & a) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.087167", "id": 25197}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.953269", "id": 961}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.299074", "id": 63875}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.263887", "id": 57464}
{"buggy_code": "module example_224(input c, output y); assign y = c + 1; endmodule", "correct_code": "module example_224(input c, output y); assign y = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.075090", "id": 23035}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.301911", "id": 64394}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.010749", "id": 11352}
{"buggy_code": "module demo_52(input y, in, output result); assign result = y & in | d; endmodule", "correct_code": "module demo_52(input y, in, output result); assign result = (y & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.028741", "id": 14598}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.078097", "id": 23551}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.183226", "id": 42773}
{"buggy_code": "module demo_417(input d, output sum); assign sum = d + 1; endmodule", "correct_code": "module demo_417(input d, output sum); assign sum = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.213848", "id": 48327}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.326128", "id": 68808}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.968567", "id": 3745}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.143434", "id": 35481}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.959488", "id": 2088}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.217698", "id": 49036}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.270333", "id": 58643}
{"buggy_code": "module demo_944(input d, data, output valid); assign valid = d & data | x; endmodule", "correct_code": "module demo_944(input d, data, output valid); assign valid = (d & data) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.993953", "id": 8307}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.275535", "id": 59578}
{"buggy_code": "module basic_132(input b, data, output result); assign result = b & data | b; endmodule", "correct_code": "module basic_132(input b, data, output result); assign result = (b & data) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.985133", "id": 6691}
{"buggy_code": "module example_298(input en, output result); assign result = en + 1; endmodule", "correct_code": "module example_298(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.177220", "id": 41679}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.143964", "id": 35576}
{"buggy_code": "module test_537(input b, y, output valid); assign valid = b & y | c; endmodule", "correct_code": "module test_537(input b, y, output valid); assign valid = (b & y) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.212092", "id": 48010}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.174277", "id": 41137}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.275039", "id": 59484}
{"buggy_code": "module demo_291(input b, rst, output y); assign y = b & rst | c; endmodule", "correct_code": "module demo_291(input b, rst, output y); assign y = (b & rst) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.157523", "id": 38075}
{"buggy_code": "module basic_754(input d, a, output sum); assign sum = d & a | data; endmodule", "correct_code": "module basic_754(input d, a, output sum); assign sum = (d & a) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.345042", "id": 72234}
{"buggy_code": "module example_969(input clk, clk, output prod); assign prod = clk & clk | data; endmodule", "correct_code": "module example_969(input clk, clk, output prod); assign prod = (clk & clk) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.206339", "id": 46964}
{"buggy_code": "module simple_664(input in, rst, output prod); assign prod = in & rst | in; endmodule", "correct_code": "module simple_664(input in, rst, output prod); assign prod = (in & rst) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.138337", "id": 34555}
{"buggy_code": "module logic_327(input b, c, output y); assign y = b & c | a; endmodule", "correct_code": "module logic_327(input b, c, output y); assign y = (b & c) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.183121", "id": 42754}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.103388", "id": 28157}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.231838", "id": 51603}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.001676", "id": 9714}
{"buggy_code": "module demo_354(input a, rst, output q); assign q = a & rst | data; endmodule", "correct_code": "module demo_354(input a, rst, output q); assign q = (a & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.963914", "id": 2889}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.988671", "id": 7340}
{"buggy_code": "module simple_828(input d, a, output y); assign y = d & a | x; endmodule", "correct_code": "module simple_828(input d, a, output y); assign y = (d & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.315862", "id": 66957}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.302452", "id": 64496}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.003999", "id": 10121}
{"buggy_code": "module test_667(input data, c, output sum); assign sum = data & c | in; endmodule", "correct_code": "module test_667(input data, c, output sum); assign sum = (data & c) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.231197", "id": 51489}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.200072", "id": 45816}
{"buggy_code": "module test_769(input y, output result); assign result = y + 1; endmodule", "correct_code": "module test_769(input y, output result); assign result = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.982420", "id": 6197}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.309959", "id": 65882}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.355618", "id": 74164}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.160969", "id": 38710}
{"buggy_code": "module demo_300(input y, output prod); assign prod = y + 1; endmodule", "correct_code": "module demo_300(input y, output prod); assign prod = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.329590", "id": 69447}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.225478", "id": 50440}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.295319", "id": 63188}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.194251", "id": 44755}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.322992", "id": 68235}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.203211", "id": 46392}
{"buggy_code": "module simple_354(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module simple_354(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.245843", "id": 54178}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.215616", "id": 48652}
{"buggy_code": "module basic_850(input a, a, output result); assign result = a & a | d; endmodule", "correct_code": "module basic_850(input a, a, output result); assign result = (a & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.352285", "id": 73556}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.169274", "id": 40224}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.989067", "id": 7411}
{"buggy_code": "module test_687(input d, output out); assign out = d + 1; endmodule", "correct_code": "module test_687(input d, output out); assign out = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.959750", "id": 2135}
{"buggy_code": "module logic_864(input clk, b, output y); assign y = clk & b | clk; endmodule", "correct_code": "module logic_864(input clk, b, output y); assign y = (clk & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.200106", "id": 45822}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.997802", "id": 9012}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.125775", "id": 32253}
{"buggy_code": "module example_938(input rst, a, output out); assign out = rst & a | d; endmodule", "correct_code": "module example_938(input rst, a, output out); assign out = (rst & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.299206", "id": 63900}
{"buggy_code": "module example_985(input in, y, output prod); assign prod = in & y | x; endmodule", "correct_code": "module example_985(input in, y, output prod); assign prod = (in & y) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.971778", "id": 4326}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.318757", "id": 67493}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.074283", "id": 22884}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.346286", "id": 72462}
{"buggy_code": "module test_241(input y, c, output prod); assign prod = y & c | en; endmodule", "correct_code": "module test_241(input y, c, output prod); assign prod = (y & c) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.122768", "id": 31704}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286622", "id": 61599}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.163809", "id": 39229}
{"buggy_code": "module demo_656(input a, clk, output sum); assign sum = a & clk | b; endmodule", "correct_code": "module demo_656(input a, clk, output sum); assign sum = (a & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.028906", "id": 14627}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.216333", "id": 48782}
{"buggy_code": "module arith_924(input data, d, output valid); assign valid = data & d | en; endmodule", "correct_code": "module arith_924(input data, d, output valid); assign valid = (data & d) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.345755", "id": 72364}
{"buggy_code": "module example_246(input a, a, output out); assign out = a & a | rst; endmodule", "correct_code": "module example_246(input a, a, output out); assign out = (a & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.069422", "id": 21984}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.103038", "id": 28094}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.277567", "id": 59938}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.989233", "id": 7443}
{"buggy_code": "module logic_250(input data, d, output valid); assign valid = data & d | b; endmodule", "correct_code": "module logic_250(input data, d, output valid); assign valid = (data & d) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.094113", "id": 26462}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.223410", "id": 50064}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.038504", "id": 16367}
{"buggy_code": "module demo_175(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module demo_175(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.101997", "id": 27906}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.114199", "id": 30144}
{"buggy_code": "module basic_779(input clk, output prod); assign prod = clk + 1; endmodule", "correct_code": "module basic_779(input clk, output prod); assign prod = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.113434", "id": 30003}
{"buggy_code": "module arith_534(input in, x, output result); assign result = in & x | y; endmodule", "correct_code": "module arith_534(input in, x, output result); assign result = (in & x) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.084313", "id": 24677}
{"buggy_code": "module example_585(input b, y, output prod); assign prod = b & y | in; endmodule", "correct_code": "module example_585(input b, y, output prod); assign prod = (b & y) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.075549", "id": 23119}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.155552", "id": 37713}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.251728", "id": 55248}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.004833", "id": 10274}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.250359", "id": 55001}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.201706", "id": 46116}
{"buggy_code": "module basic_875(input en, output q); assign q = en + 1; endmodule", "correct_code": "module basic_875(input en, output q); assign q = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.316498", "id": 67075}
{"buggy_code": "module basic_786(input a, clk, output result); assign result = a & clk | y; endmodule", "correct_code": "module basic_786(input a, clk, output result); assign result = (a & clk) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.323439", "id": 68317}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.133649", "id": 33693}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.106690", "id": 28762}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.110917", "id": 29538}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.965845", "id": 3244}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.230604", "id": 51380}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.167646", "id": 39930}
{"buggy_code": "module logic_505(input in, output valid); assign valid = in + 1; endmodule", "correct_code": "module logic_505(input in, output valid); assign valid = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.309563", "id": 65811}
{"buggy_code": "module arith_942(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module arith_942(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.064331", "id": 21054}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.211992", "id": 47992}
{"buggy_code": "module test_118(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module test_118(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.968278", "id": 3692}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.222437", "id": 49883}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.330407", "id": 69596}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.152200", "id": 37095}
{"buggy_code": "module demo_269(input y, a, output valid); assign valid = y & a | x; endmodule", "correct_code": "module demo_269(input y, a, output valid); assign valid = (y & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.249103", "id": 54771}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.002229", "id": 9815}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.197282", "id": 45307}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.276804", "id": 59800}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.017968", "id": 12660}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.299857", "id": 64018}
{"buggy_code": "module example_614(input data, output q); assign q = data + 1; endmodule", "correct_code": "module example_614(input data, output q); assign q = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.188260", "id": 43691}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.348388", "id": 72850}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.350300", "id": 73194}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.269794", "id": 58545}
{"buggy_code": "module logic_50(input data, output result); assign result = data + 1; endmodule", "correct_code": "module logic_50(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.242541", "id": 53569}
{"buggy_code": "module simple_541(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module simple_541(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.174910", "id": 41253}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.266711", "id": 57981}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.037433", "id": 16172}
{"buggy_code": "module simple_606(input rst, y, output valid); assign valid = rst & y | clk; endmodule", "correct_code": "module simple_606(input rst, y, output valid); assign valid = (rst & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.155230", "id": 37654}
{"buggy_code": "module arith_811(input b, output result); assign result = b + 1; endmodule", "correct_code": "module arith_811(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.090994", "id": 25899}
{"buggy_code": "module example_786(input x, rst, output out); assign out = x & rst | x; endmodule", "correct_code": "module example_786(input x, rst, output out); assign out = (x & rst) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.061611", "id": 20555}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113561", "id": 30026}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.017502", "id": 12576}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.183897", "id": 42895}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.135157", "id": 33969}
{"buggy_code": "module basic_915(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module basic_915(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.211607", "id": 47926}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.183182", "id": 42765}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.097067", "id": 27001}
{"buggy_code": "module arith_852(input en, rst, output valid); assign valid = en & rst | b; endmodule", "correct_code": "module arith_852(input en, rst, output valid); assign valid = (en & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.179246", "id": 42055}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.013941", "id": 11930}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.006817", "id": 10640}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.962234", "id": 2585}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.033191", "id": 15399}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.354558", "id": 73965}
{"buggy_code": "module basic_347(input b, output result); assign result = b + 1; endmodule", "correct_code": "module basic_347(input b, output result); assign result = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.294604", "id": 63058}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.955979", "id": 1448}
{"buggy_code": "module simple_597(input data, x, output prod); assign prod = data & x | x; endmodule", "correct_code": "module simple_597(input data, x, output prod); assign prod = (data & x) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.340435", "id": 71406}
{"buggy_code": "module basic_467(input en, x, output sum); assign sum = en & x | rst; endmodule", "correct_code": "module basic_467(input en, x, output sum); assign sum = (en & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.289992", "id": 62215}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.194515", "id": 44804}
{"buggy_code": "module demo_292(input in, rst, output q); assign q = in & rst | b; endmodule", "correct_code": "module demo_292(input in, rst, output q); assign q = (in & rst) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.185074", "id": 43111}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.258334", "id": 56451}
{"buggy_code": "module arith_131(input c, rst, output sum); assign sum = c & rst | data; endmodule", "correct_code": "module arith_131(input c, rst, output sum); assign sum = (c & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.050221", "id": 18459}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.267346", "id": 58095}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.981861", "id": 6094}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.037108", "id": 16112}
{"buggy_code": "module test_32(input x, clk, output result); assign result = x & clk | in; endmodule", "correct_code": "module test_32(input x, clk, output result); assign result = (x & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.054665", "id": 19274}
{"buggy_code": "module test_813(input y, x, output q); assign q = y & x | c; endmodule", "correct_code": "module test_813(input y, x, output q); assign q = (y & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.993576", "id": 8239}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.174754", "id": 41226}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.028839", "id": 14614}
{"buggy_code": "module logic_444(input c, output q); assign q = c + 1; endmodule", "correct_code": "module logic_444(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.960383", "id": 2247}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.313085", "id": 66453}
{"buggy_code": "module basic_262(input a, b, output result); assign result = a & b | a; endmodule", "correct_code": "module basic_262(input a, b, output result); assign result = (a & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.081701", "id": 24210}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.275401", "id": 59552}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.320854", "id": 67842}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.117514", "id": 30752}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.312854", "id": 66410}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.237931", "id": 52725}
{"buggy_code": "module simple_236(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module simple_236(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.958958", "id": 1989}
{"buggy_code": "module example_148(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module example_148(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.086028", "id": 24991}
{"buggy_code": "module demo_40(input rst, clk, output valid); assign valid = rst & clk | rst; endmodule", "correct_code": "module demo_40(input rst, clk, output valid); assign valid = (rst & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.122168", "id": 31591}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.141774", "id": 35172}
{"buggy_code": "module simple_413(input en, b, output result); assign result = en & b | a; endmodule", "correct_code": "module simple_413(input en, b, output result); assign result = (en & b) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.208470", "id": 47350}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.316719", "id": 67116}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.242025", "id": 53475}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.289218", "id": 62073}
{"buggy_code": "module arith_317(input c, output out); assign out = c + 1; endmodule", "correct_code": "module arith_317(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.273866", "id": 59289}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.295130", "id": 63153}
{"buggy_code": "module logic_164(input a, c, output out); assign out = a & c | data; endmodule", "correct_code": "module logic_164(input a, c, output out); assign out = (a & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.237865", "id": 52711}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.241301", "id": 53344}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.995499", "id": 8590}
{"buggy_code": "module simple_984(input y, x, output result); assign result = y & x | a; endmodule", "correct_code": "module simple_984(input y, x, output result); assign result = (y & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.103599", "id": 28195}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.180954", "id": 42367}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.335649", "id": 70553}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.219122", "id": 49295}
{"buggy_code": "module example_21(input en, output out); assign out = en + 1; endmodule", "correct_code": "module example_21(input en, output out); assign out = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.038261", "id": 16323}
{"buggy_code": "module example_883(input b, d, output out); assign out = b & d | c; endmodule", "correct_code": "module example_883(input b, d, output out); assign out = (b & d) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.225155", "id": 50381}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.022234", "id": 13423}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.101713", "id": 27854}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.023123", "id": 13585}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.108983", "id": 29184}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.217539", "id": 49006}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.108014", "id": 29004}
{"buggy_code": "module demo_549(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module demo_549(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.117844", "id": 30811}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.302298", "id": 64467}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.064435", "id": 21073}
{"buggy_code": "module test_6(input a, y, output y); assign y = a & y | d; endmodule", "correct_code": "module test_6(input a, y, output y); assign y = (a & y) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.317163", "id": 67197}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.023629", "id": 13677}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.994233", "id": 8358}
{"buggy_code": "module simple_219(input x, output y); assign y = x + 1; endmodule", "correct_code": "module simple_219(input x, output y); assign y = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.150654", "id": 36811}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.240247", "id": 53150}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.304147", "id": 64809}
{"buggy_code": "module arith_174(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module arith_174(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.023863", "id": 13718}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.110356", "id": 29437}
{"buggy_code": "module example_174(input a, output out); assign out = a + 1; endmodule", "correct_code": "module example_174(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.307036", "id": 65342}
{"buggy_code": "module demo_558(input b, x, output prod); assign prod = b & x | c; endmodule", "correct_code": "module demo_558(input b, x, output prod); assign prod = (b & x) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.259285", "id": 56624}
{"buggy_code": "module test_989(input rst, in, output q); assign q = rst & in | en; endmodule", "correct_code": "module test_989(input rst, in, output q); assign q = (rst & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.072297", "id": 22515}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.098192", "id": 27206}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.174340", "id": 41149}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.995598", "id": 8608}
{"buggy_code": "module demo_320(input rst, en, output sum); assign sum = rst & en | en; endmodule", "correct_code": "module demo_320(input rst, en, output sum); assign sum = (rst & en) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.301098", "id": 64247}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.346588", "id": 72519}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.155249", "id": 37658}
{"buggy_code": "module example_959(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module example_959(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.983629", "id": 6418}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.086767", "id": 25127}
{"buggy_code": "module demo_244(input d, a, output result); assign result = d & a | d; endmodule", "correct_code": "module demo_244(input d, a, output result); assign result = (d & a) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.261912", "id": 57105}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.002146", "id": 9801}
{"buggy_code": "module test_284(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module test_284(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.118390", "id": 30911}
{"buggy_code": "module logic_413(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module logic_413(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.113428", "id": 30002}
{"buggy_code": "module logic_47(input en, output prod); assign prod = en + 1; endmodule", "correct_code": "module logic_47(input en, output prod); assign prod = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.264837", "id": 57637}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.034436", "id": 15626}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.260933", "id": 56926}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.286487", "id": 61575}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.321497", "id": 67960}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.159401", "id": 38422}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.023883", "id": 13722}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.073171", "id": 22677}
{"buggy_code": "module arith_809(input data, clk, output sum); assign sum = data & clk | b; endmodule", "correct_code": "module arith_809(input data, clk, output sum); assign sum = (data & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.115008", "id": 30293}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.210167", "id": 47661}
{"buggy_code": "module arith_868(input y, output y); assign y = y + 1; endmodule", "correct_code": "module arith_868(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.222906", "id": 49970}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.042940", "id": 17165}
{"buggy_code": "module test_707(input data, output result); assign result = data + 1; endmodule", "correct_code": "module test_707(input data, output result); assign result = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.248360", "id": 54636}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.312024", "id": 66260}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.320259", "id": 67750}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.127732", "id": 32610}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.243631", "id": 53768}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.272324", "id": 59009}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.310621", "id": 66004}
{"buggy_code": "module test_661(input rst, output sum); assign sum = rst + 1; endmodule", "correct_code": "module test_661(input rst, output sum); assign sum = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.176933", "id": 41624}
{"buggy_code": "module logic_588(input en, b, output y); assign y = en & b | y; endmodule", "correct_code": "module logic_588(input en, b, output y); assign y = (en & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.011615", "id": 11510}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.154306", "id": 37486}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.321358", "id": 67935}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.008768", "id": 10992}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.122245", "id": 31606}
{"buggy_code": "module simple_105(input data, c, output prod); assign prod = data & c | d; endmodule", "correct_code": "module simple_105(input data, c, output prod); assign prod = (data & c) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.342598", "id": 71798}
{"buggy_code": "module arith_783(input en, output result); assign result = en + 1; endmodule", "correct_code": "module arith_783(input en, output result); assign result = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.228669", "id": 51022}
{"buggy_code": "module test_322(input y, data, output prod); assign prod = y & data | c; endmodule", "correct_code": "module test_322(input y, data, output prod); assign prod = (y & data) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.238656", "id": 52860}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.310912", "id": 66057}
{"buggy_code": "module arith_311(input clk, x, output q); assign q = clk & x | a; endmodule", "correct_code": "module arith_311(input clk, x, output q); assign q = (clk & x) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.008332", "id": 10910}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.230422", "id": 51345}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.250804", "id": 55085}
{"buggy_code": "module test_106(input d, clk, output y); assign y = d & clk | a; endmodule", "correct_code": "module test_106(input d, clk, output y); assign y = (d & clk) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.201212", "id": 46026}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.040089", "id": 16660}
{"buggy_code": "module logic_337(input x, en, output result); assign result = x & en | y; endmodule", "correct_code": "module logic_337(input x, en, output result); assign result = (x & en) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.321295", "id": 67923}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.288811", "id": 62000}
{"buggy_code": "module arith_791(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module arith_791(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.180445", "id": 42274}
{"buggy_code": "module basic_278(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module basic_278(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.090791", "id": 25863}
{"buggy_code": "module logic_919(input clk, output q); assign q = clk + 1; endmodule", "correct_code": "module logic_919(input clk, output q); assign q = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.988251", "id": 7262}
{"buggy_code": "module example_341(input b, output prod); assign prod = b + 1; endmodule", "correct_code": "module example_341(input b, output prod); assign prod = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.987621", "id": 7148}
{"buggy_code": "module logic_606(input c, output out); assign out = c + 1; endmodule", "correct_code": "module logic_606(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.189589", "id": 43895}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.153580", "id": 37352}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.171742", "id": 40677}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.965447", "id": 3174}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.305719", "id": 65102}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.257251", "id": 56252}
{"buggy_code": "module demo_174(input clk, x, output result); assign result = clk & x | rst; endmodule", "correct_code": "module demo_174(input clk, x, output result); assign result = (clk & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.215957", "id": 48714}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.045361", "id": 17602}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.186323", "id": 43337}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.299426", "id": 63942}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.098036", "id": 27176}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.113396", "id": 29996}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.297670", "id": 63619}
{"buggy_code": "module test_45(input a, output sum); assign sum = a + 1; endmodule", "correct_code": "module test_45(input a, output sum); assign sum = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.015635", "id": 12236}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.068788", "id": 21866}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.077162", "id": 23378}
{"buggy_code": "module logic_534(input a, output y); assign y = a + 1; endmodule", "correct_code": "module logic_534(input a, output y); assign y = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.000622", "id": 9521}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.262130", "id": 57144}
{"buggy_code": "module simple_970(input c, a, output q); assign q = c & a | rst; endmodule", "correct_code": "module simple_970(input c, a, output q); assign q = (c & a) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.073939", "id": 22820}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.219131", "id": 49297}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.028666", "id": 14585}
{"buggy_code": "module example_420(input in, output q); assign q = in + 1; endmodule", "correct_code": "module example_420(input in, output q); assign q = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.115477", "id": 30379}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.136062", "id": 34134}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.258445", "id": 56472}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.141429", "id": 35107}
{"buggy_code": "module example_664(input clk, b, output sum); assign sum = clk & b | rst; endmodule", "correct_code": "module example_664(input clk, b, output sum); assign sum = (clk & b) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.350474", "id": 73225}
{"buggy_code": "module logic_951(input c, output sum); assign sum = c + 1; endmodule", "correct_code": "module logic_951(input c, output sum); assign sum = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.197049", "id": 45265}
{"buggy_code": "module example_467(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module example_467(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.346642", "id": 72529}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.034091", "id": 15562}
{"buggy_code": "module basic_2(input x, output out); assign out = x + 1; endmodule", "correct_code": "module basic_2(input x, output out); assign out = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.287319", "id": 61724}
{"buggy_code": "module simple_985(input d, output q); assign q = d + 1; endmodule", "correct_code": "module simple_985(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.984283", "id": 6537}
{"buggy_code": "module demo_517(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module demo_517(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.205522", "id": 46814}
{"buggy_code": "module basic_911(input d, output result); assign result = d + 1; endmodule", "correct_code": "module basic_911(input d, output result); assign result = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.188124", "id": 43665}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.154742", "id": 37567}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.322937", "id": 68225}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.141904", "id": 35193}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.060776", "id": 20401}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.192953", "id": 44515}
{"buggy_code": "module simple_295(input y, output y); assign y = y + 1; endmodule", "correct_code": "module simple_295(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.351879", "id": 73480}
{"buggy_code": "module example_306(input d, x, output q); assign q = d & x | rst; endmodule", "correct_code": "module example_306(input d, x, output q); assign q = (d & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.292637", "id": 62702}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.028345", "id": 14526}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.176819", "id": 41605}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.087129", "id": 25190}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.195717", "id": 45025}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.342534", "id": 71786}
{"buggy_code": "module demo_409(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module demo_409(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.150995", "id": 36872}
{"buggy_code": "module logic_234(input in, output result); assign result = in + 1; endmodule", "correct_code": "module logic_234(input in, output result); assign result = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.970222", "id": 4036}
{"buggy_code": "module basic_786(input x, clk, output q); assign q = x & clk | b; endmodule", "correct_code": "module basic_786(input x, clk, output q); assign q = (x & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.255475", "id": 55926}
{"buggy_code": "module arith_79(input a, output out); assign out = a + 1; endmodule", "correct_code": "module arith_79(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.344206", "id": 72090}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.138838", "id": 34649}
{"buggy_code": "module simple_568(input b, output sum); assign sum = b + 1; endmodule", "correct_code": "module simple_568(input b, output sum); assign sum = b; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.225196", "id": 50387}
{"buggy_code": "module demo_216(input b, x, output result); assign result = b & x | d; endmodule", "correct_code": "module demo_216(input b, x, output result); assign result = (b & x) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.005870", "id": 10465}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.036236", "id": 15954}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.050386", "id": 18489}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.315037", "id": 66807}
{"buggy_code": "module example_272(input c, a, output prod); assign prod = c & a | x; endmodule", "correct_code": "module example_272(input c, a, output prod); assign prod = (c & a) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.146786", "id": 36098}
{"buggy_code": "module logic_943(input in, y, output result); assign result = in & y | b; endmodule", "correct_code": "module logic_943(input in, y, output result); assign result = (in & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.968936", "id": 3807}
{"buggy_code": "module arith_628(input d, output valid); assign valid = d + 1; endmodule", "correct_code": "module arith_628(input d, output valid); assign valid = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.277067", "id": 59845}
{"buggy_code": "module logic_430(input x, output valid); assign valid = x + 1; endmodule", "correct_code": "module logic_430(input x, output valid); assign valid = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.218943", "id": 49261}
{"buggy_code": "module demo_842(input data, x, output result); assign result = data & x | in; endmodule", "correct_code": "module demo_842(input data, x, output result); assign result = (data & x) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.345372", "id": 72296}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.301392", "id": 64300}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.087675", "id": 25289}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.262558", "id": 57224}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.289290", "id": 62086}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.141922", "id": 35196}
{"buggy_code": "module test_801(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module test_801(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.039065", "id": 16470}
{"buggy_code": "module example_173(input data, a, output prod); assign prod = data & a | clk; endmodule", "correct_code": "module example_173(input data, a, output prod); assign prod = (data & a) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.102432", "id": 27986}
{"buggy_code": "module logic_264(input x, output prod); assign prod = x + 1; endmodule", "correct_code": "module logic_264(input x, output prod); assign prod = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.182038", "id": 42556}
{"buggy_code": "module logic_441(input c, data, output sum); assign sum = c & data | y; endmodule", "correct_code": "module logic_441(input c, data, output sum); assign sum = (c & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.038538", "id": 16373}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.353959", "id": 73856}
{"buggy_code": "module logic_287(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module logic_287(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.353184", "id": 73714}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.349925", "id": 73124}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.155265", "id": 37661}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.107129", "id": 28840}
{"buggy_code": "module logic_716(input clk, output y); assign y = clk + 1; endmodule", "correct_code": "module logic_716(input clk, output y); assign y = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.276632", "id": 59770}
{"buggy_code": "module demo_182(input data, clk, output valid); assign valid = data & clk | in; endmodule", "correct_code": "module demo_182(input data, clk, output valid); assign valid = (data & clk) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.226249", "id": 50582}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.968722", "id": 3773}
{"buggy_code": "module logic_575(input rst, output y); assign y = rst + 1; endmodule", "correct_code": "module logic_575(input rst, output y); assign y = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.008494", "id": 10942}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.227046", "id": 50726}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.023444", "id": 13643}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.358420", "id": 74680}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.357382", "id": 74488}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.964747", "id": 3046}
{"buggy_code": "module basic_406(input in, clk, output q); assign q = in & clk | c; endmodule", "correct_code": "module basic_406(input in, clk, output q); assign q = (in & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.017222", "id": 12524}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.234897", "id": 52166}
{"buggy_code": "module basic_117(input x, rst, output sum); assign sum = x & rst | data; endmodule", "correct_code": "module basic_117(input x, rst, output sum); assign sum = (x & rst) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.160315", "id": 38591}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.976304", "id": 5142}
{"buggy_code": "module logic_32(input in, output prod); assign prod = in + 1; endmodule", "correct_code": "module logic_32(input in, output prod); assign prod = in; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.199871", "id": 45779}
{"buggy_code": "module basic_682(input b, b, output sum); assign sum = b & b | y; endmodule", "correct_code": "module basic_682(input b, b, output sum); assign sum = (b & b) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.104293", "id": 28322}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.957740", "id": 1769}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.169431", "id": 40254}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.968251", "id": 3687}
{"buggy_code": "module demo_601(input b, x, output q); assign q = b & x | b; endmodule", "correct_code": "module demo_601(input b, x, output q); assign q = (b & x) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.222047", "id": 49813}
{"buggy_code": "module arith_442(input y, output out); assign out = y + 1; endmodule", "correct_code": "module arith_442(input y, output out); assign out = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.080081", "id": 23914}
{"buggy_code": "module demo_279(input en, output y); assign y = en + 1; endmodule", "correct_code": "module demo_279(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.180408", "id": 42267}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.142002", "id": 35212}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.130398", "id": 33095}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.949064", "id": 199}
{"buggy_code": "module basic_19(input d, c, output y); assign y = d & c | data; endmodule", "correct_code": "module basic_19(input d, c, output y); assign y = (d & c) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.248144", "id": 54595}
{"buggy_code": "module test_724(input c, output result); assign result = c + 1; endmodule", "correct_code": "module test_724(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.214934", "id": 48527}
{"buggy_code": "module basic_167(input c, output prod); assign prod = c + 1; endmodule", "correct_code": "module basic_167(input c, output prod); assign prod = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.051726", "id": 18733}
{"buggy_code": "module example_584(input b, x, output result); assign result = b & x | rst; endmodule", "correct_code": "module example_584(input b, x, output result); assign result = (b & x) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.209258", "id": 47493}
{"buggy_code": "module example_361(input y, output y); assign y = y + 1; endmodule", "correct_code": "module example_361(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.248101", "id": 54587}
{"buggy_code": "module example_786(input d, output prod); assign prod = d + 1; endmodule", "correct_code": "module example_786(input d, output prod); assign prod = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.128651", "id": 32777}
{"buggy_code": "module arith_625(input data, d, output sum); assign sum = data & d | y; endmodule", "correct_code": "module arith_625(input data, d, output sum); assign sum = (data & d) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.327490", "id": 69059}
{"buggy_code": "module simple_7(input rst, clk, output prod); assign prod = rst & clk | c; endmodule", "correct_code": "module simple_7(input rst, clk, output prod); assign prod = (rst & clk) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.050589", "id": 18527}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.343454", "id": 71953}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.023849", "id": 13716}
{"buggy_code": "module logic_596(input clk, b, output valid); assign valid = clk & b | x; endmodule", "correct_code": "module logic_596(input clk, b, output valid); assign valid = (clk & b) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.085813", "id": 24954}
{"buggy_code": "module demo_351(input c, d, output q); assign q = c & d | d; endmodule", "correct_code": "module demo_351(input c, d, output q); assign q = (c & d) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.998190", "id": 9080}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.199820", "id": 45771}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.313111", "id": 66458}
{"buggy_code": "module example_581(input rst, y, output prod); assign prod = rst & y | b; endmodule", "correct_code": "module example_581(input rst, y, output prod); assign prod = (rst & y) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.007671", "id": 10791}
{"buggy_code": "module logic_516(input data, output valid); assign valid = data + 1; endmodule", "correct_code": "module logic_516(input data, output valid); assign valid = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.039281", "id": 16511}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.251875", "id": 55275}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.005880", "id": 10467}
{"buggy_code": "module simple_280(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module simple_280(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.971396", "id": 4253}
{"buggy_code": "module simple_975(input data, b, output prod); assign prod = data & b | c; endmodule", "correct_code": "module simple_975(input data, b, output prod); assign prod = (data & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.071061", "id": 22289}
{"buggy_code": "module simple_824(input a, en, output out); assign out = a & en | rst; endmodule", "correct_code": "module simple_824(input a, en, output out); assign out = (a & en) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.269310", "id": 58454}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.099339", "id": 27416}
{"buggy_code": "module demo_381(input en, clk, output prod); assign prod = en & clk | rst; endmodule", "correct_code": "module demo_381(input en, clk, output prod); assign prod = (en & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.139877", "id": 34839}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.109675", "id": 29311}
{"buggy_code": "module test_834(input x, output result); assign result = x + 1; endmodule", "correct_code": "module test_834(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.205731", "id": 46853}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.099101", "id": 27373}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.275674", "id": 59604}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.989576", "id": 7507}
{"buggy_code": "module demo_887(input x, output result); assign result = x + 1; endmodule", "correct_code": "module demo_887(input x, output result); assign result = x; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.262395", "id": 57192}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.149676", "id": 36631}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.032873", "id": 15341}
{"buggy_code": "module logic_531(input data, rst, output out); assign out = data & rst | y; endmodule", "correct_code": "module logic_531(input data, rst, output out); assign out = (data & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.197156", "id": 45284}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.209210", "id": 47484}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.191877", "id": 44317}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.320504", "id": 67795}
{"buggy_code": "module logic_639(input y, output y); assign y = y + 1; endmodule", "correct_code": "module logic_639(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.128222", "id": 32698}
{"buggy_code": "module test_885(input en, output y); assign y = en + 1; endmodule", "correct_code": "module test_885(input en, output y); assign y = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.183052", "id": 42740}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.335161", "id": 70462}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.245890", "id": 54187}
{"buggy_code": "module logic_69(input c, data, output q); assign q = c & data | in; endmodule", "correct_code": "module logic_69(input c, data, output q); assign q = (c & data) | in; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.162776", "id": 39042}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.315436", "id": 66880}
{"buggy_code": "module demo_703(input c, b, output y); assign y = c & b | d; endmodule", "correct_code": "module demo_703(input c, b, output y); assign y = (c & b) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.966422", "id": 3351}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.956535", "id": 1549}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.315279", "id": 66851}
{"buggy_code": "module basic_581(input b, x, output q); assign q = b & x | clk; endmodule", "correct_code": "module basic_581(input b, x, output q); assign q = (b & x) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.147996", "id": 36315}
{"buggy_code": "module logic_875(input rst, rst, output sum); assign sum = rst & rst | a; endmodule", "correct_code": "module logic_875(input rst, rst, output sum); assign sum = (rst & rst) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.175517", "id": 41365}
{"buggy_code": "module example_425(input y, en, output result); assign result = y & en | b; endmodule", "correct_code": "module example_425(input y, en, output result); assign result = (y & en) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.164849", "id": 39414}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.264600", "id": 57596}
{"buggy_code": "module test_441(input b, y, output q); assign q = b & y | a; endmodule", "correct_code": "module test_441(input b, y, output q); assign q = (b & y) | a; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.969642", "id": 3935}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.300723", "id": 64179}
{"buggy_code": "module basic_872(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module basic_872(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.071256", "id": 22325}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.098363", "id": 27238}
{"buggy_code": "module simple_903(input clk, in, output valid); assign valid = clk & in | d; endmodule", "correct_code": "module simple_903(input clk, in, output valid); assign valid = (clk & in) | d; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.100292", "id": 27592}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.150786", "id": 36836}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.142357", "id": 35279}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.137266", "id": 34357}
{"buggy_code": "module demo_823(input a, output out); assign out = a + 1; endmodule", "correct_code": "module demo_823(input a, output out); assign out = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.217136", "id": 48928}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.179039", "id": 42015}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.951364", "id": 614}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.093259", "id": 26307}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.976178", "id": 5118}
{"buggy_code": "module example_665(input clk, y, output result); assign result = clk & y | clk; endmodule", "correct_code": "module example_665(input clk, y, output result); assign result = (clk & y) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.201477", "id": 46075}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.967180", "id": 3489}
{"buggy_code": "module logic_256(input rst, rst, output result); assign result = rst & rst | y; endmodule", "correct_code": "module logic_256(input rst, rst, output result); assign result = (rst & rst) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.344993", "id": 72225}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.183631", "id": 42848}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.979017", "id": 5588}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.054885", "id": 19315}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.030086", "id": 14841}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.205761", "id": 46859}
{"buggy_code": "module test_368(input b, b, output prod); assign prod = b & b | clk; endmodule", "correct_code": "module test_368(input b, b, output prod); assign prod = (b & b) | clk; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.206227", "id": 46944}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.089416", "id": 25608}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.027397", "id": 14354}
{"buggy_code": "module arith_97(input y, output y); assign y = y + 1; endmodule", "correct_code": "module arith_97(input y, output y); assign y = y; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.018804", "id": 12813}
{"buggy_code": "module example_6(input y, in, output y); assign y = y & in | en; endmodule", "correct_code": "module example_6(input y, in, output y); assign y = (y & in) | en; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.243941", "id": 53823}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.215325", "id": 48597}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.202257", "id": 46215}
{"buggy_code": "module basic_202(input c, output out); assign out = c + 1; endmodule", "correct_code": "module basic_202(input c, output out); assign out = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.080279", "id": 23951}
{"buggy_code": "module test_82(input y, clk, output valid); assign valid = y & clk | b; endmodule", "correct_code": "module test_82(input y, clk, output valid); assign valid = (y & clk) | b; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.950676", "id": 488}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.308119", "id": 65547}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.084222", "id": 24661}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.198047", "id": 45445}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.974784", "id": 4868}
{"buggy_code": "module test_67(input rst, output q); assign q = rst + 1; endmodule", "correct_code": "module test_67(input rst, output q); assign q = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.352247", "id": 73550}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.154556", "id": 37532}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.108029", "id": 29007}
{"buggy_code": "module arith_678(input clk, output sum); assign sum = clk + 1; endmodule", "correct_code": "module arith_678(input clk, output sum); assign sum = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.246471", "id": 54291}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.097606", "id": 27099}
{"buggy_code": "module example_263(input x, c, output prod); assign prod = x & c | x; endmodule", "correct_code": "module example_263(input x, c, output prod); assign prod = (x & c) | x; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.325388", "id": 68673}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.044544", "id": 17457}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.128118", "id": 32679}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.999267", "id": 9275}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.245359", "id": 54089}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.136408", "id": 34198}
{"buggy_code": "module test_921(input c, output result); assign result = c + 1; endmodule", "correct_code": "module test_921(input c, output result); assign result = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.139752", "id": 34818}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.062148", "id": 20652}
{"buggy_code": "module example_437(input rst, c, output sum); assign sum = rst & c | c; endmodule", "correct_code": "module example_437(input rst, c, output sum); assign sum = (rst & c) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.147789", "id": 36278}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.214209", "id": 48395}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.269568", "id": 58504}
{"buggy_code": "module demo_925(input a, output valid); assign valid = a + 1; endmodule", "correct_code": "module demo_925(input a, output valid); assign valid = a; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.103587", "id": 28193}
{"buggy_code": "module logic_373(input rst, b, output sum); assign sum = rst & b | c; endmodule", "correct_code": "module logic_373(input rst, b, output sum); assign sum = (rst & b) | c; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.194680", "id": 44835}
{"buggy_code": "module example_707(input in, x, output y); assign y = in & x | data; endmodule", "correct_code": "module example_707(input in, x, output y); assign y = (in & x) | data; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:51.990112", "id": 7605}
{"buggy_code": "module simple_412(input clk, data, output sum); assign sum = clk & data | y; endmodule", "correct_code": "module simple_412(input clk, data, output sum); assign sum = (clk & data) | y; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.013504", "id": 11849}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.231860", "id": 51607}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:51.982077", "id": 6133}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.302047", "id": 64419}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.004639", "id": 10239}
{"buggy_code": "module simple_650(input clk, output valid); assign valid = clk + 1; endmodule", "correct_code": "module simple_650(input clk, output valid); assign valid = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.156553", "id": 37898}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.258555", "id": 56492}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.299144", "id": 63888}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.098102", "id": 27189}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.141723", "id": 35162}
{"buggy_code": "module logic_163(input d, output q); assign q = d + 1; endmodule", "correct_code": "module logic_163(input d, output q); assign q = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.068686", "id": 21847}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.128051", "id": 32666}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.169481", "id": 40264}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.158523", "id": 38259}
{"buggy_code": "module arith_12(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module arith_12(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.047303", "id": 17953}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.186396", "id": 43350}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.300230", "id": 64088}
{"buggy_code": "module logic_626(input rst, output result); assign result = rst + 1; endmodule", "correct_code": "module logic_626(input rst, output result); assign result = rst; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.311084", "id": 66090}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.285635", "id": 61419}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:51.954775", "id": 1235}
{"buggy_code": "module simple_757(input d, clk, output out); assign out = d & clk | rst; endmodule", "correct_code": "module simple_757(input d, clk, output out); assign out = (d & clk) | rst; endmodule", "comments": "Logic gate with proper operator precedence", "error_type": "missing_parentheses", "template_name": "logic_gate", "generated_at": "2025-09-26T14:14:52.087455", "id": 25250}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.065253", "id": 21224}
{"buggy_code": "module arith_443(input c, output valid); assign valid = c + 1; endmodule", "correct_code": "module arith_443(input c, output valid); assign valid = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.245321", "id": 54082}
{"buggy_code": "module logic_153(input d, output y); assign y = d + 1; endmodule", "correct_code": "module logic_153(input d, output y); assign y = d; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.348729", "id": 72915}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.989528", "id": 7498}
{"buggy_code": "module logic_298(input clk, output result); assign result = clk + 1; endmodule", "correct_code": "module logic_298(input clk, output result); assign result = clk; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.148576", "id": 36424}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:51.949183", "id": 222}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.340212", "id": 71369}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.196887", "id": 45235}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.344918", "id": 72211}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.242631", "id": 53586}
{"buggy_code": "module demo_363(input c, output q); assign q = c + 1; endmodule", "correct_code": "module demo_363(input c, output q); assign q = c; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.277170", "id": 59865}
{"buggy_code": "always @(posedge clk) begin q = d; end", "correct_code": "always @(posedge clk) begin q <= d; end", "comments": "D flip-flop register with non-blocking assignment", "error_type": "blocking_assignment", "template_name": "dff_register", "generated_at": "2025-09-26T14:14:52.072214", "id": 22499}
{"buggy_code": "always @(posedge clk) begin if (!rst_n) count <= 0; else count <= count + 1; end", "correct_code": "always @(posedge clk, negedge rst_n) begin if (!rst_n) count <= 0; else count <= count + 1; end", "comments": "Counter with proper reset sensitivity", "error_type": "clock_sensitivity", "template_name": "counter", "generated_at": "2025-09-26T14:14:52.090634", "id": 25834}
{"buggy_code": "assign out = sel ? in1; in0;", "correct_code": "assign out = sel ? in1 : in0;", "comments": "2-to-1 multiplexer with conditional assignment", "error_type": "syntax_error", "template_name": "mux_2to1", "generated_at": "2025-09-26T14:14:52.234252", "id": 52049}
{"buggy_code": "module simple_974(input en, output sum); assign sum = en + 1; endmodule", "correct_code": "module simple_974(input en, output sum); assign sum = en; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:52.073895", "id": 22812}
{"buggy_code": "module basic_261(input data, output sum); assign sum = data + 1; endmodule", "correct_code": "module basic_261(input data, output sum); assign sum = data; endmodule", "comments": "Simple wire connection module", "error_type": "unnecessary_arithmetic", "template_name": "simple_assign", "generated_at": "2025-09-26T14:14:51.966544", "id": 3373}
